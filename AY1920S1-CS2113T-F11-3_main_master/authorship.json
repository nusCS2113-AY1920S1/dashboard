[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limryan"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limryan"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Launcher\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // https://mvnrepository.com/artifact/org.json/json"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027org.json\u0027, name: \u0027json\u0027, version: \u002720090211\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \u0027PASSED\u0027, \u0027FAILED\u0027, \u0027SKIPPED\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limryan"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limryan"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limryan"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limryan"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"1.1\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limryan": 7,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.client.Http;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.client.SimpleServer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.command.ExitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.email.EmailList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.email.EmailStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The main class of the program, which provides the entry point."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static TaskList taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static EmailList emailList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static UI ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private static Parser parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * The main function of the cli program, which is the entry point."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args the arguments from the console when running"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public static void main(String[] args) throws Parser.UserInputException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UI();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.setDebug(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        Http.startAuthProcess();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        run();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static TaskList getTaskList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static EmailList getEmailList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setEmailList(EmailList emailList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Duke.emailList \u003d emailList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static UI getUI() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return ui;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private static void run() throws Parser.UserInputException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList \u003d Storage.readTasks();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        emailList \u003d EmailStorage.readEmails();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        Command command \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!(command instanceof ExitCommand)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            command \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage.saveTasks(taskList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        EmailStorage.saveEmails(emailList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.showMessage(\"Bye. Hope to see you again!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * Main function of the GUI program."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        ui \u003d new UI();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        ui.setDebug(true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        taskList \u003d Storage.readTasks();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        emailList \u003d EmailStorage.readEmails();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        Http.startAuthProcess();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * Links up command output with GUI display."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * @param input user input"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * @return the response from the parsed and executed command"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limryan"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limryan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            Command command \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            return command.toString() + \"\\n\" + command.getResponseMsg();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limryan"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limryan"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 17,
      "JokerY": 12,
      "limryan": 6,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limryan"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limryan"
        },
        "content": "import seedu.duke.gui.Main;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limryan"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limryan"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limryan"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limryan"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limryan": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.command.DoAfterCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.command.FlipCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.command.InvalidCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.command.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.command.ReminderCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.command.SnoozeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.email.EmailList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.email.emailcommand.ListEmailCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.email.emailcommand.ShowEmailCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.email.emailcommand.FetchEmailCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerY"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * A class that contains helper functions used to process user inputs. It also contains UserInputException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * that is used across the project to handle the unexpected user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Two types of input, prefix will be displayed according to this in the userInput text field."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public enum InputType {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        TASK,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        EMAIL"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private static InputType inputType;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Constructor that initializes the input type to TASK."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        this.inputType \u003d InputType.TASK;    // default input type when initiating the program."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Get input prefix for userInput text field in GUI."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @return current prefix."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public static String getInputPrefix() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        String prefix \u003d \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        switch (inputType) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            prefix \u003d \"task \";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        case EMAIL:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            prefix \u003d \"email \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            prefix \u003d \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Set to the new input type when it is toggled by \"flip\" command."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * @param newInputType the input type that is going to be changed to"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public static void setInputType(InputType newInputType) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        inputType \u003d newInputType;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the user/file input as command. It returns a command that is not yet executed. It also needs to"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * get a UI from Duke to display the messages."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input the user/file input that is to be parsed to a command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the parse result, which is a command ready to be executed"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public static Command parseCommand(String input) throws UserInputException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UI ui \u003d Duke.getUI();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList taskList \u003d Duke.getTaskList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        EmailList emailList \u003d Duke.getEmailList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        if (inputType \u003d\u003d InputType.TASK) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            return parseTaskCommand(input, ui, taskList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        } else if (inputType \u003d\u003d InputType.EMAIL) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                return parseEmailCommand(emailList, input);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            } catch (UserInputException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                ui.showError(e.toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                return new InvalidCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            return new InvalidCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private static Command parseTaskCommand(String rawInput, UI ui, TaskList taskList) throws UserInputException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        if (rawInput.length() \u003c\u003d 5) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            return new InvalidCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            //return new HelpTaskCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        String input \u003d rawInput.substring(5).strip();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        if (input.equals(\"flip\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            return new FlipCommand(inputType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand(taskList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (input.startsWith(\"done \")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            return parseDoneCommand(input, ui);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        } else if (input.startsWith(\"delete \")) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            return parseDeleteCommand(input, ui, taskList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (input.startsWith(\"find \")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            return parseFindCommand(input, ui, taskList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (input.startsWith(\"reminder\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            return parseReminderCommand(input, ui, taskList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (input.startsWith(\"doafter\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            return parseDoAfterCommand(input, ui, taskList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (input.startsWith(\"snooze \")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            return parseSnoozeCommand(input, ui, taskList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return parseAddTaskCommand(taskList, input);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the specific part of a user/file input that is relevant to email. A successful parsing always"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * returns an email-relevant Command."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param emailList target email list from Duke."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @param rawInput  user/file input ready to be parsed."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return an email-relevant Command."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws UserInputException an exception when the parsing is failed, probably due to the wrong format of"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     *                            input"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public static Command parseEmailCommand(EmailList emailList, String rawInput) throws UserInputException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        if (rawInput.length() \u003c\u003d 6) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new Parser.UserInputException(\"☹ OOPS!!! Enter \\\u0027email -help\\\u0027 to get list of methods for \""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"email.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            // return new InvalidCommand();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            //return new HelpTaskCommand();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        String input \u003d rawInput.substring(6).strip();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        String emailCommand \u003d input.split(\" \")[0];"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (emailCommand) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        case \"flip\":"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            return new FlipCommand(inputType);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListEmailCommand(emailList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        case \"show\":"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            return parseShowEmailCommand(emailList, input);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        case \"fetch\":"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            return new FetchEmailCommand(emailList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            throw new Parser.UserInputException(\"☹ OOPS!!! Enter \\\u0027email help\\\u0027 to get list of methods for \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                    + \"email.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private static Command parseShowEmailCommand(EmailList emailList, String input) throws UserInputException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        if (input.length() \u003c\u003d 4) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            throw new UserInputException(\"Please enter index of email to be shown after \\\u0027email \""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                    + \"show\\\u0027\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            String parsedInput \u003d input.substring(4).strip();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            int index \u003d Integer.parseInt(parsedInput) - 1;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            return new ShowEmailCommand(emailList, index);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            throw new UserInputException(e.toString());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            throw new UserInputException(e.toString());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    private static Command parseSnoozeCommand(String input, UI ui, TaskList taskList) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        if (input.length() \u003c\u003d 7) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            ui.showError(\"Please enter index of task after \\\u0027snooze\\\u0027\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            return new InvalidCommand();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                int index \u003d parseIndex(input);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                return new SnoozeCommand(taskList, index);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                ui.showError(e.toString());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            } catch (UserInputException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                ui.showError(\"Please enter correct task index\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        return new InvalidCommand();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    private static Command parseDoAfterCommand(String input, UI ui, TaskList taskList) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        if (input.length() \u003c 8) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            ui.showError(\"Please enter index of task after \\\u0027doafter\\\u0027\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        } else if (input.length() \u003c 11) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            ui.showError(\"Please enter description for do-after task\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            String[] splitInput \u003d input.split(\" /\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                int itemNumber \u003d Integer.parseInt(splitInput[1].trim());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                return new DoAfterCommand(taskList, itemNumber, splitInput[2]);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                ui.showError(e.toString());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                return new InvalidCommand();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        return new InvalidCommand();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    private static Command parseReminderCommand(String input, UI ui, TaskList taskList) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        int dayLimit \u003d -1;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        if (input.length() \u003e 9 \u0026\u0026 input.charAt(8) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                dayLimit \u003d Integer.parseInt(input.substring(9));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                ui.showError(\"Reminder day limit in wrong format. Default is used.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        if (dayLimit \u003c 0) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            return new ReminderCommand(taskList);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            return new ReminderCommand(taskList, dayLimit);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    private static Command parseFindCommand(String input, UI ui, TaskList taskList) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        if (input.length() \u003c\u003d 5) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            ui.showError(\"Please enter keyword for searching after \\\u0027find\\\u0027\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "limryan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            String keyword \u003d input.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            return new FindCommand(taskList, keyword);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "limryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        return new InvalidCommand();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    private static Command parseDeleteCommand(String input, UI ui, TaskList taskList) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lee761"
        },
        "content": "        if (input.length() \u003c\u003d 7) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            ui.showError(\"Please enter index of task after \\\u0027delete\\\u0027\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lee761"
        },
        "content": "            return new InvalidCommand();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lee761"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lee761"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lee761"
        },
        "content": "                int index \u003d parseIndex(input);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                return new DeleteCommand(taskList, index);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lee761"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lee761"
        },
        "content": "                ui.showError(e.toString());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lee761"
        },
        "content": "            } catch (UserInputException e) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lee761"
        },
        "content": "                ui.showError(\"Please enter correct task index\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lee761"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lee761"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        return new InvalidCommand();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    private static Command parseDoneCommand(String input, UI ui) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        if (input.length() \u003c\u003d 5) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            ui.showError(\"Please enter index of task after \\\u0027done\\\u0027\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            return new InvalidCommand();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                int index \u003d parseIndex(input);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                return new DoneCommand(index);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                ui.showError(e.toString());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            } catch (UserInputException e) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                ui.showError(\"Please enter correct task index\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        return new InvalidCommand();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    private static int parseIndex(String input) throws NumberFormatException, UserInputException {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        String[] splited \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        if (splited.length \u003c 2) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            throw new UserInputException(\"Please enter task index\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        return Integer.parseInt(splited[1]) - 1;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the specific part of a user/file input that is relevant to a task. A successful parsing always"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * returns an AddCommand, as it is assumed that an input starting with a task name is an add command."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList target task list to which the new task is to be added to"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input    user/file input ready to be parsed"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return an AddCommand of the task parsed from the input"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws UserInputException an exception when the parsing is failed, probably due to the wrong format of"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     *                            input"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public static Command parseAddTaskCommand(TaskList taskList, String input) throws UserInputException {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        Task.TaskType taskType;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        String name;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        LocalDateTime time \u003d null;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        String doAfter \u003d null;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        if (input.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            taskType \u003d Task.TaskType.ToDo;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            if (input.length() \u003c\u003d 5) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new Parser.UserInputException(\"☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "            name \u003d input.substring(5);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            if (input.contains(\" /doafter \")) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "                name \u003d name.split(\" /doafter \", 2)[0];"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "                doAfter \u003d input.split(\" /doafter \", 2)[1];"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (input.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "            taskType \u003d Task.TaskType.Deadline;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "            if (input.length() \u003c\u003d 9) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new Parser.UserInputException(\"☹ OOPS!!! The description of a deadline cannot be \""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"empty.\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "            input \u003d input.substring(9);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!input.contains(\" /by \")) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new Parser.UserInputException(\"☹ OOPS!!! A deadline must have a time specified.\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "            name \u003d input.split(\" /by \", 2)[0];"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            String timeString \u003d input.split(\" /by \", 2)[1];"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "            if (input.contains(\" /doafter \")) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "                timeString \u003d timeString.split(\" /doafter \", 2)[0];"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "                doAfter \u003d input.split(\" /doafter \", 2)[1];"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            time \u003d Task.parseDate(timeString);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (input.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "            taskType \u003d Task.TaskType.Event;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            if (input.length() \u003c\u003d 6) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new Parser.UserInputException(\"☹ OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "            input \u003d input.substring(6);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!input.contains(\" /at \")) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new Parser.UserInputException(\"☹ OOPS!!! A event must have a time specified.\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "            name \u003d input.split(\" /at \", 2)[0];"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "            String timeString \u003d input.split(\" /at \", 2)[1];"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "            if (input.contains(\" /doafter \")) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "                timeString \u003d timeString.split(\" /doafter \", 2)[0];"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "                doAfter \u003d input.split(\" /doafter \", 2)[1];"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            time \u003d Task.parseDate(timeString);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new Parser.UserInputException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(taskList, taskType, name, time, doAfter);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "     * An type of exception dedicated to handling the unexpected user/file input. The message contains more"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "     * specific information."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class UserInputException extends Exception {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        private String msg;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "         * Instantiates the exception with a message, which is ready to be displayed by the UI."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "         * @param msg the message that is ready to be displayed by UI."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        public UserInputException(String msg) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "            this.msg \u003d msg;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "         * Converts the exception ot string by returning its message, so that it can be displayed by the UI."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "         * @return the message of the exception"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "            return msg;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 110,
      "JokerY": 97,
      "limryan": 3,
      "-": 156,
      "lee761": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.command.ReminderCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Interacts with the file storing the task information."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getSaveFileDir() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String dir \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String workingDir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (workingDir.endsWith(File.separator + \"text-ui-test\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            dir \u003d \"..\" + File.separator + \"data\" + File.separator + \"duke.txt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (workingDir.endsWith(File.separator + \"main\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            dir \u003d \".\" + File.separator + \"data\" + File.separator + \"duke.txt\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            dir \u003d \".\" + File.separator + \"duke.txt\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return dir;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function clears the content of the file and write all the information of the tasks in the task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * list to that file. This file follows similar structure as the user input and can be used to"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * re-construct the task list later."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList the list of task that is to be written to the file"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveTasks(TaskList taskList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FileOutputStream out;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            String dir \u003d getSaveFileDir();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            File file \u003d new File(dir);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            out \u003d new FileOutputStream(file, false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            String content \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Task task : taskList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                content +\u003d task.toFileString() + \"\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            out.write(content.getBytes());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            out.close();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            Duke.getUI().showError(\"Write to output file IO exception!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function reads the file that is previously saved to re-construct and return the task list from the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * file information. Note: if any error occurs during the reading or parsing of the file, an empty task"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * list will always be returned for the integrity of data."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return task list re-constructed from the save file"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static TaskList readTasks() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String dir \u003d getSaveFileDir();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        FileInputStream in;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        File file \u003d new File(dir);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            in \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            Scanner scanner \u003d new Scanner(in);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            ArrayList\u003cBoolean\u003e doneList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                String input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                if (input.length() \u003c\u003d 2) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new StorageException(\"Invalid Save File!\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                if (input.startsWith(\"1\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                    doneList.add(true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                } else if (input.startsWith(\"0\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                    doneList.add(false);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new StorageException(\"Invalid Save File!\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                input \u003d input.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                    Command adddCommand \u003d Parser.parseAddTaskCommand(taskList, input);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                    adddCommand.setSilent();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                    adddCommand.execute();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (Parser.UserInputException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new StorageException(\"Invalid Save File!\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                if (doneList.get(i)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskList.get(i).markDone();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            Duke.getUI().showMessage(\"Saved task file successfully loaded...\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            in.close();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            new ReminderCommand(taskList).execute();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return taskList; //it is acceptable if there is no save file"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            Duke.getUI().showError(\"Read save file IO exception\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (StorageException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            Duke.getUI().showError(e.toString());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Exception that belongs to the process of storing and reading of file."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class StorageException extends Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        private String msg;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * Instantiates storage exception with a message, which can be later displayed by the UI."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * @param msg the message of the exception that can be displayed by UI"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        public StorageException(String msg) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            this.msg \u003d msg;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * Converts the exception to string by returning its message."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * @return message of the exception."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return msg;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 1,
      "JokerY": 1,
      "-": 138
    }
  },
  {
    "path": "src/main/java/seedu/duke/client/Http.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.json.JSONArray;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.json.JSONException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.json.JSONObject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerY"
        },
        "content": "import seedu.duke.email.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerY"
        },
        "content": "import seedu.duke.email.EmailList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerY"
        },
        "content": "import seedu.duke.email.EmailParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerY"
        },
        "content": "import seedu.duke.email.EmailStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.DataOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Reader;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.ProtocolException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerY"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * A class containing helper functions related to Http request of calling Email API."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class Http {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String authCode \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String accessToken \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    private static String refreshToken \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String clientId \u003d \"feacc09e-5364-4386-92e5-78ee25d2188d\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String clientSecret \u003d \"8dhu0-v80Ic-ZrQpACgWLEPg:??1MGkc\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String redirect \u003d \"http://localhost:3000\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    private static String scope \u003d \"openid+Mail.Read+offline_access\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    public static void startAuthProcess() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        refreshToken \u003d EmailStorage.readRefreshToken();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        if (refreshToken \u003d\u003d \"\") {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            getAuth();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            refreshAccess();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the Authorization Code and then call the function to get the Access Token from Outlook."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param code teh new authentication code"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setAuthCode(String code) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        //Duke.getUI().showDebug(\"Auth Code Set: \" + code);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        authCode \u003d code;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        getAccess();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the Access Token and call the fetch email API."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param token the new access token"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void setAccessToken(String token) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        //Duke.getUI().showDebug(\"Access Token Set: \" + token);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        accessToken \u003d token;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        EmailStorage.syncWithServer();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    private static void setRefreshToken(String token) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        refreshToken \u003d token;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        EmailStorage.saveRefreshToken(token);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * Fetches email from Outlook serer."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * @param limit the limit of number of emails to be fetched"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * @return the list of emails fetched"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    public static EmailList fetchEmail(int limit) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        JSONObject apiParams \u003d new JSONObject();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            apiParams.put(\"select\", \"subject,from,body,receivedDateTime\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            apiParams.put(\"top\", Integer.toString(limit));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            apiParams.put(\"orderby\", \"receivedDateTime%20desc\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JSONException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            Duke.getUI().showError(\"Api parameter error...\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            EmailList emailList \u003d EmailParser.parseFetchResponse(callEmailApi(apiParams));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            for (Email email : emailList) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                Duke.getUI().showMessage(email.toCliString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            return emailList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        } catch (EmailParser.EmailParsingException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            Duke.getUI().showError(e.toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        return new EmailList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fetches a new Authorization Code from Outlook. It also calls to start the server to prepare receiving"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * the code from Outlook redirection."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    private static void getAuth() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleServer.startServer();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        openBrowser(\"https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id\u003d\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                + clientId + \"\u0026response_type\u003dcode\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                + \"\u0026redirect_uri\u003d\" + redirect + \"\u0026scope\u003d\" + scope);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fetches the Access Token from Outlook."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    //function adapted from https://stackoverflow"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    // .com/questions/40574892/how-to-send-post-request-with-x-www-form-urlencoded-body"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void getAccess() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            String requestUrl \u003d \"https://login.microsoftonline.com/common/oauth2/v2.0/token\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            HttpURLConnection conn \u003d setupAccessConnection(requestUrl);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            StringBuffer content \u003d getConnectionResponse(conn);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            JSONObject json \u003d new JSONObject(content.toString());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            setAccessToken(json.getString(\"access_token\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            setRefreshToken(json.getString(\"refresh_token\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            Duke.getUI().showError(\"Access Code url in wrong format...\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            Duke.getUI().showError(\"Access Code url failed to open...\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JSONException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            Duke.getUI().showError(\"Access code response in wrong format...\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    private static void refreshAccess() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            String requestUrl \u003d \"https://login.microsoftonline.com/common/oauth2/v2.0/token\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            HttpURLConnection conn \u003d setupRefreshConnection(requestUrl);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            StringBuffer content \u003d getConnectionResponse(conn);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            Duke.getUI().showDebug(content.toString());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            JSONObject json \u003d new JSONObject(content.toString());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            setAccessToken(json.getString(\"access_token\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            setRefreshToken(json.getString(\"refresh_token\"));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        } catch (MalformedURLException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            Duke.getUI().showError(\"Refresh Access Code url in wrong format...\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            Duke.getUI().showError(\"Refresh Access Code url failed to open...\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        } catch (JSONException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            Duke.getUI().showError(\"Refresh Access code response in wrong format...\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls the respective Email API based on the parameters given."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param params the parameters regarding the specification of this email api call in JSON form"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of email api call in string"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    //This function is adapted from code on https://www.baeldung.com/java-http-request"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String callEmailApi(JSONObject params) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        String url \u003d \"\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            url \u003d getApiUrl(params);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            //Duke.getUI().showDebug(url);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            HttpURLConnection conn \u003d setupEmailConnection(url);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            StringBuffer content \u003d getConnectionResponse(conn);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            return content.toString();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JSONException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            Duke.getUI().showError(\"Api params serializing error...\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            Duke.getUI().showError(\"Wrong URL format...\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ProtocolException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            Duke.getUI().showError(\"Protocol exception encountered...\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            Duke.getUI().showError(\"HTTP connection failed...\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    //convert the parameters for email api call in json to a url in string"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getApiUrl(JSONObject params) throws JSONException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        String url \u003d \"https://graph.microsoft.com/v1.0/me/mailfolders/inbox/messages?\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Iterator\u003cString\u003e keys \u003d params.keys();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        while (keys.hasNext()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            String key \u003d keys.next();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            url +\u003d \"$\" + key + \"\u003d\" + params.getString(key);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            if (keys.hasNext()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                url +\u003d \"\u0026\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        return url;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    private static HttpURLConnection setupEmailConnection(String link) throws IOException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        URL url;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        url \u003d new URL(link);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        HttpURLConnection conn \u003d (HttpURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        conn.setRequestMethod(\"GET\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        conn.setRequestProperty(\"Authorization\", \"Bearer \" + accessToken);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        conn.setRequestProperty(\"Accept\", \"application/json\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        conn.setConnectTimeout(5000);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        conn.setInstanceFollowRedirects(false);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        return conn;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    private static HttpURLConnection setupAccessConnection(String requestUrl) throws IOException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        String params \u003d \"client_id\u003d\" + clientId + \"\u0026client_secret\u003d\" + clientSecret + \"\u0026code\u003d\" + authCode"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"\u0026redirect_uri\u003d\" + redirect + \"\u0026grant_type\u003dauthorization_code\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        return setupPostRequestConnection(requestUrl, params);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    private static HttpURLConnection setupRefreshConnection(String requestUrl) throws IOException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        String params \u003d \"client_id\u003d\" + clientId + \"\u0026client_secret\u003d\" + clientSecret"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                + \"\u0026refresh_token\u003d\" + refreshToken + \"\u0026scope\u003d\" + scope + \"\u0026grant_type\u003drefresh_token\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        return setupPostRequestConnection(requestUrl, params);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    private static HttpURLConnection setupPostRequestConnection(String requestUrl, String params) throws IOException {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        byte[] postData \u003d params.getBytes(StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        int postDataLength \u003d postData.length;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        URL url \u003d new URL(requestUrl);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        HttpURLConnection conn \u003d (HttpURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        conn.setDoOutput(true);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        conn.setInstanceFollowRedirects(false);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        conn.setRequestMethod(\"POST\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        conn.setRequestProperty(\"charset\", \"utf-8\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        conn.setRequestProperty(\"Content-Length\", Integer.toString(postDataLength));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        conn.setUseCaches(false);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        DataOutputStream wr \u003d new DataOutputStream(conn.getOutputStream());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        wr.write(postData);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        return conn;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    private static StringBuffer getConnectionResponse(HttpURLConnection conn) throws IOException {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        int status \u003d conn.getResponseCode();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        Reader streamReader \u003d null;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        if (status \u003e 299) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            streamReader \u003d new InputStreamReader(conn.getErrorStream());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            streamReader \u003d new InputStreamReader(conn.getInputStream());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        BufferedReader in \u003d new BufferedReader(streamReader);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        String inputLine;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuffer content \u003d new StringBuffer();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        while ((inputLine \u003d in.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            content.append(inputLine);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        in.close();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        conn.disconnect();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the system browser for user authorization process."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param link a url to which the browser will be directed"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a flag whether the operation is successfully executed"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    //This function is adapted from https://stackoverflow"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    // .com/questions/10967451/open-a-link-in-browser-with-java-button"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean openBrowser(String link) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            URI url \u003d new URI(link);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            Desktop desktop \u003d Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            if (desktop !\u003d null \u0026\u0026 desktop.isSupported(Desktop.Action.BROWSE)) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "                    desktop.browse(url);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "                    Duke.getUI().showError(e.toString());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (URISyntaxException e) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            Duke.getUI().showError(\"Wrong URI format...\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JokerY": 81,
      "-": 205
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.task.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerY"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * AddCommand is a specific kind of command used to add task to the task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Task.TaskType taskType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    private LocalDateTime time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private String doAfter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Instantiation of add command with all the necessary variables. it needs to execute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList the task list where the task is added to."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskType the type of task that is to be added."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name     he name of the task, which is needed to instantiate the task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param time     the time of the task, which is needed to instantiate the task. ToDo tasks does not have"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *                 time attribute, so any Date can be passed in and will be ignored."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    public AddCommand(TaskList taskList, Task.TaskType taskType, String name, LocalDateTime time, String doAfter) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.doAfter \u003d doAfter;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the add command by instantiating the task first and then add the task to task list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * @return a flag whether the task is successfully added. Returns false if the taskType is not"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     *         recognised."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean execute() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        case ToDo:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            task \u003d new ToDo(name, doAfter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case Deadline:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            task \u003d new Deadline(name, time, doAfter);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case Event:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            task \u003d new Event(name, time, doAfter);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList clashTasks \u003d taskList.findClash(task);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String clashMsg \u003d \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clashTasks.size() \u003e 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            clashMsg \u003d \"\\n\\nWarning: New task added clashes with other task(s) in the list.\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            clashMsg +\u003d clashTasks.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!silent) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            String msg \u003d \"Got it. I\u0027ve added this task: \\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            msg +\u003d \"  \" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            msg +\u003d \"Now you have \" + taskList.size() + \" task(s) in the list. \";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            msg +\u003d clashMsg;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            responseMsg \u003d msg;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            Duke.getUI().showResponse(msg);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JokerY": 5,
      "ziyun99": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * This is an abstract command that all kinds of command inherit from. It has execute() function to be"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * overridden and can be set silent for UI output."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * A flag whether UI output is turned off. Default to be false, so UI output is default to be turned on."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean silent \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    protected String responseMsg \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command. This method is to be overridden to specific functionality by different types of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * command themselves."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a flag whether the command is successfully executed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract boolean execute();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function turns off the UI output of the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSilent() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.silent \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public String getResponseMsg() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return responseMsg;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * DeleteCommand that is used delete a task from the task list with its index."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Instantiation of delete command with all the necessary variables."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList the task list where the task is added to."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index    the index of task that is to be deleted"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(TaskList taskList, int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the delete command by calling the delete function of task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a flag whether deletion is done successfully. Returns false if the delete function of task list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     *         throws an exception."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean execute() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            String msg \u003d taskList.delete(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!silent) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                responseMsg \u003d msg;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                Duke.getUI().showResponse(msg);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Parser.UserInputException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!silent) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                Duke.getUI().showError(e.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JokerY": 1,
      "ziyun99": 1,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DoAfterCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Add a task which do after another task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoAfterCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int itemNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private String doAfterDescription;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Instantiation of do after command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList           list of tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param itemNumber         index of task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param doAfterDescription of task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public DoAfterCommand(TaskList taskList, int itemNumber, String doAfterDescription) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.itemNumber \u003d itemNumber;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.doAfterDescription \u003d doAfterDescription;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set do after task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.get(itemNumber - 1).setDoAfterDescription(doAfterDescription);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String msg \u003d \"Do after task \" + doAfterDescription + \" has been added to task \" + itemNumber;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        responseMsg \u003d msg;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Duke.getUI().showResponse(msg);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 1,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * DoneCommand is a specific kind of command used to mark a task as done."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Instantiation of done command with the index of the target task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param i the index of the target task to be marked as done"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public DoneCommand(int i) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d i;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the done command by calling the markDone function of the task list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a flag whether the task is successfully marked as done. Returns false if the markDone function"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     *         throws exception."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean execute() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            String msg \u003d Duke.getTaskList().markDone(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!silent) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                responseMsg \u003d msg;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                Duke.getUI().showResponse(msg);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Parser.UserInputException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!silent) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                Duke.getUI().showError(e.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JokerY": 1,
      "ziyun99": 1,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Exit Command is a special kind of command called when the user ends the interaction."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * Simply returns false when executed. s"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return always false."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        responseMsg \u003d \"Bye, hope to see you again.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * FindCommand is a specific kind of command used to find a task from task list with a keyword."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Instantiation of find command with all the necessary variables it needs to execute."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList the task list where the task is looked for"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyword  the keyword that the target task needs to match"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(TaskList taskList, String keyword) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the find command by calling the findKeyword function from the task list. Find result will be"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * shown by the UI."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true after the look after is completed. Note that no result found will be reflected in the UI"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     *         output instead of the returned value of this function."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean execute() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String msg \u003d this.taskList.findKeyword(keyword);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!silent) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            responseMsg \u003d msg;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            Duke.getUI().showResponse(msg);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JokerY": 1,
      "ziyun99": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/FlipCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "public class FlipCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private Parser.InputType inputType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public FlipCommand(Parser.InputType inputType) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        this.inputType \u003d inputType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public boolean execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        String msg \u003d \"Input type flipped to \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        if (inputType \u003d\u003d Parser.InputType.TASK) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            Parser.setInputType(Parser.InputType.EMAIL);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            msg +\u003d \"EMAIL.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            Parser.setInputType(Parser.InputType.TASK);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            msg +\u003d \"TASK.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        responseMsg \u003d msg;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        Duke.getUI().showResponse(msg);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/InvalidCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * InvalidCommand is a specific kind of command indicating the input is not recognised as any known command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class InvalidCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Simply returns false. The UI output is currently disabled."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean execute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        //if (!silent) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        //    Duke.getUI().showError(\"Invalid Command Received\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        responseMsg \u003d \"This is an invalid command. Enter \\\u0027help\\\u0027 for more information.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * ListCommand is a specific kind of command used to display all task in a task list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Instantiation of the list command with the target task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList the target task list to be displayed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListCommand(TaskList taskList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the list command by calling the UI to display the target task list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true after display is completed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!silent) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            String msg \u003d this.taskList.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            responseMsg \u003d msg;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            Duke.getUI().showResponse(msg);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 3,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ReminderCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class ReminderCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private int dayLimit \u003d 3; //default limit is 3 days"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Instantiation of the ReminderCommand which can be used to print all the tasks near."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList the TaskList where the near command is looked up"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dayLimit the maximum number of days from now for a task to be considered as near"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReminderCommand(TaskList taskList, int dayLimit) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dayLimit \u003d dayLimit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Instantiation of the ReminderCommand which can be used to print all the tasks near. This overload uses"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * the default dayLimit instead."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList the TaskList where the near command is looked up"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReminderCommand(TaskList taskList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Execute the ReminderCommand to print out all the near tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true as the command can always be correctly executed"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList nearTasks \u003d taskList.findNear(dayLimit);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String msg \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (nearTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            msg +\u003d \"There is no near event or deadline. \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            msg +\u003d \"There are near events or deadlines within \" + dayLimit + \" days: \\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            msg +\u003d nearTasks.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        responseMsg \u003d msg;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Duke.getUI().showResponse(msg);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 1,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/SnoozeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class SnoozeCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public SnoozeCommand(TaskList taskList, int index) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            String msg \u003d taskList.snoozed(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!silent) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                responseMsg \u003d msg;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                Duke.getUI().showResponse(msg);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Parser.UserInputException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!silent) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                Duke.getUI().showError(e.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ziyun99": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/duke/email/Email.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.email;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerY"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerY"
        },
        "content": "import java.math.BigInteger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerY"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerY"
        },
        "content": "import java.security.MessageDigest;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerY"
        },
        "content": "import java.security.NoSuchAlgorithmException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerY"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String filepath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    protected String subject;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    protected EmailParser.Sender from;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    protected LocalDateTime receivedDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    protected String body;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Boolean hasHtml;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    public Email(String subject) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filepath \u003d getEmailFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * Detailed constructor of Email class with more paramaters."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * @param subject subject of the email"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * @param from the sender of the email"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * @param receivedDateTime the date and time when the email is received"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * @param body the body of the email"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    public Email(String subject, EmailParser.Sender from, LocalDateTime receivedDateTime, String body) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        this.from \u003d from;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        this.receivedDateTime \u003d receivedDateTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        this.body \u003d body;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get title of this email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return title of this email."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    public String getSubject() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        return this.subject;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTag(String tag) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get the pathname for this email."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return pathname for this email."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmailFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        return getFolderDir() + File.separator + this.subject;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * Show this email on browser. To be replaced by JavaFx code for UI display."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if fails to load the filepath or open the browser."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showEmail() throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        File emailFile \u003d new File(this.filepath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Desktop.getDesktop().browse(emailFile.toURI());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get the pathname of the data/emails folder."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the pathname of the data/emails folder."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getFolderDir() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String dir;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String workingDir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (workingDir.endsWith(File.separator + \"text-ui-test\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            dir \u003d \"..\" + File.separator + \"data\" + File.separator + \"emails\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (workingDir.endsWith(File.separator + \"main\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            dir \u003d \"data\" + File.separator + \"emails\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            dir \u003d \"emails\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return dir;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * Outputs a string with all the information of this email to be stored in a file for future usage. The"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * subject of the email is hashed and combined with date time to produce the filename."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a string with all the information of this email."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        String fileString \u003d this.subject + \" | \";  // to add on info such as tags."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        return fileString;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    public String getFilename() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        String filename \u003d shaHash(this.subject) + \"-\" + this.getDateTimePlainString() + \".htm\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        return filename;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    private String getDateTimeString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        return EmailParser.formatEmailDateTime(receivedDateTime);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    private String getDateTimePlainString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        return EmailParser.formatEmailDateTimePlain(receivedDateTime);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * Helper function for the email to be printed in command line."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * @return a string capturing the email info"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    public String toCliString() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        String output \u003d this.subject + \"\\n\\t\" + \"From: \" + this.from.toString() + \"\\n\\t\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                + \"ReceivedDateTime: \" + getDateTimeString() + \"\\n\\t\" + \"Body: \" + body.substring(0, 30)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                + \"...\\n\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    public String getBody() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        return body;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    private String shaHash(String input) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            MessageDigest md \u003d MessageDigest.getInstance(\"SHA-256\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            // Change this to UTF-16 if needed"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            md.update(input.getBytes(StandardCharsets.UTF_8));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            byte[] digest \u003d md.digest();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            String hex \u003d String.format(\"%064x\", new BigInteger(1, digest));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            return hex;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        } catch (NoSuchAlgorithmException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            Duke.getUI().showError(\"Hashing email name error\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JokerY": 80,
      "ziyun99": 1,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/duke/email/EmailList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.email;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailList extends ArrayList\u003cEmail\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts the email list to a string of the pre-determined format that is ready to be displayed by the"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * UI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return list of emails in formatted String."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"There is nothing in your email list.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String listOfEmails \u003d \"This is your list of emails \" + \"(total of \" + this.size() + \"): \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Email email : this) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            listOfEmails +\u003d \"\\n\" + (++index) + \". \" + email.getSubject();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfEmails;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Show the email in browser."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the email to be shown in the email list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a string to inform the user that the particular email is being shown in browser."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Parser.UserInputException thrown when index parsing failed or out of range"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @throws IOException               if fails to load the filepath or open the browser."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String show(int index) throws Parser.UserInputException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d this.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new Parser.UserInputException(\"Invalid index\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d this.get(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        email.showEmail();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        String responseMsg \u003d \"Showing this email in browser: \" + email.getSubject();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return responseMsg;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JokerY": 2,
      "ziyun99": 1,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/duke/email/EmailParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerY"
        },
        "content": "package seedu.duke.email;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerY"
        },
        "content": "import org.json.JSONArray;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerY"
        },
        "content": "import org.json.JSONException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerY"
        },
        "content": "import org.json.JSONObject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerY"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerY"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerY"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerY"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerY"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerY"
        },
        "content": "public class EmailParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    protected static DateTimeFormatter format \u003d DateTimeFormatter"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            .ofPattern(\"uuuu-MM-dd\u0027T\u0027HH:mm:ss\u0027Z\u0027\", Locale.ENGLISH)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    //plain format is for filename without special characters"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    protected static DateTimeFormatter formatPlain \u003d DateTimeFormatter"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            .ofPattern(\"uuuu-MM-dd-HHmmss\", Locale.ENGLISH)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * Parses the response of email fetching from Outlook server."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * @param response response from Outlook server"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * @return a list of emails containing all the parsed email from the response"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * @throws EmailParsingException the exception of the failure of the response parsing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    public static EmailList parseFetchResponse(String response) throws EmailParsingException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        Duke.getUI().showDebug(response);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        EmailList emailList \u003d new EmailList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            JSONObject responseJson \u003d new JSONObject(response);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            JSONArray emailJsonArray \u003d responseJson.getJSONArray(\"value\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            for (int i \u003d 0; i \u003c emailJsonArray.length(); i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                JSONObject emailJson \u003d emailJsonArray.getJSONObject(i);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                String subject \u003d emailJson.getString(\"subject\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                Sender from \u003d new Sender(emailJson.getJSONObject(\"from\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                LocalDateTime dateTime \u003d parseEmailDateTime(emailJson.getString(\"receivedDateTime\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                String body \u003d emailJson.getString(\"body\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                emailList.add(new Email(subject, from, dateTime, body));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        } catch (JSONException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            throw new EmailParsingException(\"Email fetch response failed to parse\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        return emailList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * Parses the email date time string to a LocalDateTime."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * @param dateTimeString string of the date time"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * @return LocalDateTime object to be stored"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    public static LocalDateTime parseEmailDateTime(String dateTimeString) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        return LocalDateTime.parse(dateTimeString, format);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * Formats the email date time to a string."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * @param dateTime LocalDateTime object stored in the Email object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * @return String of the formatted date time."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    public static String formatEmailDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        return dateTime.format(format);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * Formats the email date time to a plain string without any special character for filename."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * @param dateTime LocalDateTiem object stored in the Email object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * @return String of plain formatted date time."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    public static String formatEmailDateTimePlain(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        return dateTime.format(formatPlain);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * Class of the email sender containing the name and address."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    public static class Sender {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        private String address;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JokerY"
        },
        "content": "         * Constructor of the sender class with the json object containing the information."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JokerY"
        },
        "content": "         *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JokerY"
        },
        "content": "         * @param senderInfo json object containing the information"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JokerY"
        },
        "content": "         * @throws JSONException exception of failure of parsing"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JokerY"
        },
        "content": "         */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        public Sender(JSONObject senderInfo) throws JSONException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            this.name \u003d senderInfo.getJSONObject(\"emailAddress\").getString(\"name\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            this.address \u003d senderInfo.getJSONObject(\"emailAddress\").getString(\"address\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            return name + \" \u003d\u003e \" + address;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * Exception dedicated for failed email parsing."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    public static class EmailParsingException extends Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        private String msg;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        public EmailParsingException(String msg) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            this.msg \u003d msg;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            return this.msg;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JokerY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JokerY": 118
    }
  },
  {
    "path": "src/main/java/seedu/duke/email/EmailStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.email;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerY"
        },
        "content": "import seedu.duke.client.Http;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Handles loading and saving of emails from local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get the pathname of the data/email.txt."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @return pathname of the email.txt file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getSaveEmailDir() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String dir \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String workingDir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (workingDir.endsWith(File.separator + \"text-ui-test\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            dir \u003d \"..\" + File.separator + \"data\" + File.separator + \"email.txt\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (workingDir.endsWith(File.separator + \"main\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            dir \u003d \".\" + File.separator + \"data\" + File.separator + \"email.txt\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            dir \u003d \".\" + File.separator + \"data\" + File.separator + \"email.txt\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return dir;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get the pathname of the data/emails/ folder, in which all the html files are saved."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @return pathname of the data/emails/ folder."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String getFolderDir() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String dir \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String workingDir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (workingDir.endsWith(File.separator + \"text-ui-test\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            dir \u003d \"..\" + File.separator + \"data\" + File.separator + \"emails\" + File.separator;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (workingDir.endsWith(File.separator + \"main\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            dir \u003d \".\" + File.separator + \"data\" + File.separator + \"emails\" + File.separator;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            dir \u003d \".\" + File.separator + \"data\" + File.separator + \"emails\" + File.separator;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return dir;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    private static String getUserInfoDir() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        String dir \u003d \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        String workingDir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        if (workingDir.endsWith(File.separator + \"text-ui-test\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            dir \u003d \"..\" + File.separator + \"data\" + File.separator + \"user.txt\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        } else if (workingDir.endsWith(File.separator + \"main\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            dir \u003d \".\" + File.separator + \"data\" + File.separator + \"user.txt\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            dir \u003d \".\" + File.separator + \"data\" + File.separator + \"user.txt\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return dir;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get the list of html filenames currently saved in the data/emails folder."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return an array list of strings of html filenames."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArrayList\u003cString\u003e getHtmlList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e listOfHtml \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        File emailFolder \u003d new File(getFolderDir());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        for (File fileEntry : emailFolder.listFiles()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileEntry.isFile()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                String emailFileName \u003d fileEntry.getName();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                listOfHtml.add(emailFileName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfHtml;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * To implement with code to fetch emails from online server to local storage. May need to sync the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * current email list with local storage after that by calling syncEmailListWithHtml()."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void syncWithServer() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        EmailList serverEmailList \u003d Http.fetchEmail(2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        for (Email serverEmail : serverEmailList) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            boolean exist \u003d false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            for (Email localEmail : Duke.getEmailList()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                if (localEmail.getSubject() \u003d\u003d serverEmail.getSubject()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                    exist \u003d true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            if (!exist) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                Duke.getEmailList().add(serverEmail);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        saveEmails(Duke.getEmailList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * To save the information for the emailList including subject and tags(not implemented yet) for each"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * email before exiting the app."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param emailList the emailList to be saved before exiting the app."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveEmails(EmailList emailList) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            prepareFolder();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            String folderDir \u003d getFolderDir();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            String indexDir \u003d getSaveEmailDir();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            File indexFile \u003d new File(indexDir);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            indexFile.createNewFile();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            FileOutputStream indexOut \u003d new FileOutputStream(indexFile, false);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            String content \u003d \"\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Email email : emailList) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                content +\u003d email.toFileString() + \"\\n\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            indexOut.write(content.getBytes());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            indexOut.close();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            for (Email email : emailList) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                if (email.getBody() !\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                    File emailSource \u003d new File(folderDir + email.getFilename());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                    emailSource.createNewFile();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                    FileOutputStream emailOut \u003d new FileOutputStream(emailSource, false);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                    emailOut.write(email.getBody().getBytes());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                    emailOut.close();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            Duke.getUI().showError(\"Write to output file IO exception!\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * To sync the emailList with email html files saved in local storage. To prevent mismatch between"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * emailList and existing emails in local storage. To be called for execution after fetching html files"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * from server, to keep emailList updated. Creates a new emailList, which only adds email object from the"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * input emailList that are present in the html lists, and html files that are not included in the input"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * emailList."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param emailList is the current emailList from Duke to be synced with the html files in local storage."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the synced emailList."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public static EmailList syncEmailListWithHtml(EmailList emailList) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e htmlList \u003d getHtmlList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        EmailList syncedEmailList \u003d new EmailList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        //This boolean array will auto-initialize to false since boolean\u0027s default value is false."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean[] inEmailList \u003d new boolean[htmlList.size()];"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Email email : emailList) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            String subject \u003d email.getSubject();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d 0; j \u003c htmlList.size(); j++) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                if (htmlList.get(j).equals(subject)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                    inEmailList[j] \u003d true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                    // Add the email to syncedEmailList if the email has html file in local storage."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                    // So email without its html file will not be added."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                    syncedEmailList.add(email);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int j \u003d 0; j \u003c htmlList.size(); j++) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!inEmailList[j]) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                String subject \u003d htmlList.get(j);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                // Add the email(previously not in emailList) to syncedEmailList."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                syncedEmailList.add(new Email(subject));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        emailList \u003d null; // it will be automatically deleted by the garbage collector."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        return syncedEmailList;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * Get emailList according to html files present in local storage. This method is not being used, but may"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * be useful someday so it is kept here."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return EmailList created by according to html files present in local storage."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public static EmailList readEmailFromHtml() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EmailList emailList \u003d new EmailList();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        File emailFolder \u003d new File(getFolderDir());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        for (File fileEntry : emailFolder.listFiles()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileEntry.isFile()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                String emailFileName \u003d fileEntry.getName();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                Email email \u003d new Email(emailFileName);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                emailList.add(email);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailList;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    private static void prepareFolder() throws IOException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        File emailFolder \u003d new File(getFolderDir());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        if (!emailFolder.exists()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            emailFolder.mkdir();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        File indexFile \u003d new File(getSaveEmailDir());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        indexFile.createNewFile();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get emailList according to previously saved information about emails from the data/email.txt at the"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * start of the app."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return EmailList created from data/email.txt."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public static EmailList readEmailFromFile() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        EmailList emailList \u003d new EmailList();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            prepareFolder();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            String dir \u003d getSaveEmailDir();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            FileInputStream in;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            File file \u003d new File(dir);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            in \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            Scanner scanner \u003d new Scanner(in);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                String input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                if (input.length() \u003c\u003d 2) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new Storage.StorageException(\"Invalid Save File!\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                String subject \u003d input.split(\"\\\\|\")[0].strip();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                Email email \u003d new Email(subject);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "                emailList.add(email);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            Duke.getUI().showMessage(\"Saved email file successfully loaded...\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            in.close();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            // It is acceptable if there is no save file."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            return emailList;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            Duke.getUI().showError(\"Read save file IO exception\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Storage.StorageException e) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            Duke.getUI().showError(e.toString());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            emailList \u003d new EmailList();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailList;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executed at the start of the app, first to retrieve previously saved information about emails from"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * data/email.txt, then sync the emailList with html files in present in data/emails."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return EmailList created from data/emails.txt and synced with data/emails."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    public static EmailList readEmails() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        EmailList emailList \u003d readEmailFromFile();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        EmailList syncedEmailList \u003d syncEmailListWithHtml(emailList);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        return syncedEmailList;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    public static void saveRefreshToken(String token) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            prepareFolder();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            File userInfoFile \u003d new File(getUserInfoDir());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            FileOutputStream out \u003d new FileOutputStream(userInfoFile, false);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            out.write(token.getBytes());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            out.close();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            Duke.getUI().showError(\"Save refresh token failed\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    public static String readRefreshToken() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        String token \u003d \"\";"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            prepareFolder();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            File userInfoFile \u003d new File(getUserInfoDir());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            userInfoFile.createNewFile();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            FileInputStream in \u003d new FileInputStream(userInfoFile);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            Scanner scanner \u003d new Scanner(in);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            while(scanner.hasNext()) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JokerY"
        },
        "content": "                token +\u003d scanner.next();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            Duke.getUI().showError(\"User info file not found\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            Duke.getUI().showError(\"Read user info file IO Exception\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        return token;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JokerY": 104,
      "ziyun99": 7,
      "-": 179
    }
  },
  {
    "path": "src/main/java/seedu/duke/email/emailcommand/FetchEmailCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.email.emailcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.email.EmailList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.email.EmailStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class FetchEmailCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmailList emailList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public FetchEmailCommand(EmailList emailList) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.emailList \u003d emailList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!silent) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                // To fetch email from server, and save them to local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                // EmailStorage.syncWithServer();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                // Sync the current emailList with the html files in local storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                EmailList syncedEmailList \u003d EmailStorage.syncEmailListWithHtml(emailList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                Duke.setEmailList(syncedEmailList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                responseMsg \u003d \"Fetching emails and syncing with local storage...\\n\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                responseMsg +\u003d Duke.getEmailList().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                Duke.getUI().showResponse(responseMsg);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                Duke.getUI().showError(e.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/duke/email/emailcommand/ListEmailCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.email.emailcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.email.EmailList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.email.EmailStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListEmailCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmailList emailList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListEmailCommand(EmailList emailList) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.emailList \u003d emailList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!silent) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                EmailList syncedEmailList \u003d EmailStorage.syncEmailListWithHtml(emailList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                Duke.setEmailList(syncedEmailList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                responseMsg \u003d \"Syncing email list with local storage...\\n\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                responseMsg +\u003d Duke.getEmailList().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                Duke.getUI().showResponse(responseMsg);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                Duke.getUI().showError(e.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 1,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/duke/email/emailcommand/ShowEmailCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.email.emailcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.email.EmailList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ShowEmailCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmailList emailList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ShowEmailCommand(EmailList emailList, int index) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.emailList \u003d emailList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            responseMsg \u003d emailList.show(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Duke.getUI().showResponse(responseMsg);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Parser.UserInputException | IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!silent) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                Duke.getUI().showError(e.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/gui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limryan"
        },
        "content": "package seedu.duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limryan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limryan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerY"
        },
        "content": " * An example of a custom control using FXML. This control represents a dialog box consisting of an ImageView"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerY"
        },
        "content": " * to represent the speaker\u0027s face and a label containing text from the speaker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limryan"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limryan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limryan"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limryan"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limryan"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limryan"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limryan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limryan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limryan"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limryan"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limryan"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limryan"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limryan"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limryan"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limryan"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limryan"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * Constructs a dialog box from the text and img given."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * @param text text to be displayed"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * @param img img to be displayed"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * @return dialogBox ready to be displayed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limryan"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limryan"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limryan"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limryan"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JokerY": 9,
      "limryan": 58
    }
  },
  {
    "path": "src/main/java/seedu/duke/gui/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limryan"
        },
        "content": "package seedu.duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limryan"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limryan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limryan"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limryan"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limryan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limryan"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limryan"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limryan"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limryan"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limryan"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limryan"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limryan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limryan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limryan": 29
    }
  },
  {
    "path": "src/main/java/seedu/duke/gui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limryan"
        },
        "content": "package seedu.duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import javafx.scene.control.TextFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limryan"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.email.EmailStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.util.function.UnaryOperator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limryan"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limryan"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limryan"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limryan"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limryan"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limryan"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private void getstring() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        userInput.setText(\"123\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * Constructs a text formatter."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * @return the format constructed"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public TextFormatter\u003cString\u003e getTextFormatter() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        String prefix \u003d Parser.getInputPrefix();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        UnaryOperator\u003cTextFormatter.Change\u003e filter \u003d c -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            if (c.getCaretPosition() \u003c prefix.length()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                return c;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        };"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        TextFormatter\u003cString\u003e textFormatter \u003d new TextFormatter\u003c\u003e(filter);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return textFormatter;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * them to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limryan"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limryan"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limryan"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limryan"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limryan"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limryan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        setInputPrefix();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        if(response.contains(\"Bye, hope to see you again.\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            Storage.saveTasks(duke.getTaskList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            EmailStorage.saveEmails(duke.getEmailList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * To begin the userInput textfield with a prefix either as \"task\" or \"email\". The prefix is"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * non-deletable, enter \"flip\" to toggle between them."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private void setInputPrefix() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        // To apply a noFilter to userInput to remove the effect of the previous filter so that clear()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        // can work properly."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        UnaryOperator\u003cTextFormatter.Change\u003e noFilter \u003d c -\u003e {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            return c;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        };"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        userInput.setTextFormatter(new TextFormatter\u003cString\u003e(noFilter));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limryan"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        String prefix \u003d Parser.getInputPrefix();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        userInput.setText(prefix);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        // To apply a filter to any changes in userInput text field so that the prefix is non-deletable text."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        UnaryOperator\u003cTextFormatter.Change\u003e filter \u003d c -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            if (c.getCaretPosition() \u003c prefix.length()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                return c;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        };"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        userInput.setTextFormatter(new TextFormatter\u003cString\u003e(filter));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        userInput.positionCaret(prefix.length());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 53,
      "JokerY": 13,
      "limryan": 51
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerY"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Deadline is a type of task with a date/time which is the deadline time."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    private LocalDateTime time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String doAfter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Instantiates the Deadline with the name and the time. Time must be in during the instantiation as it"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * cannot be changed later."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name name of the Deadline"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param time time of the Deadline"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    public Deadline(String name, LocalDateTime time) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskType \u003d TaskType.Deadline;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    public LocalDateTime getTime() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Instantiates the Deadline with the name and the time. Time must be in during the instantiation as it"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * cannot be changed later. This method accepts another task to be done after the first task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name    name of the Deadline"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param time    time of the Deadline"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param doAfter task to be done after main task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    public Deadline(String name, LocalDateTime time, String doAfter) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        setDoAfterDescription(doAfter);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskType \u003d TaskType.Deadline;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts the Deadline to a human readable string containing important information about the Deadline,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * including the type and time of this Deadline."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a human readable string containing the important information"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.doAfterDescription \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"[D]\" + this.getStatus() + \" (by: \" + formatDate() + \")\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"[D]\" + this.getStatus() + \" (by: \" + formatDate() + \")\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"\\n   After which: \" + doAfterDescription;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs a string with all the information of this Deadline to be stored in a file for future usage."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a string containing all information of this Deadline"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.doAfterDescription \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return (this.isDone ? \"1\" : \"0\") + \" deadline \" + this.name + \" /by \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                    + formatDate();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return (this.isDone ? \"1\" : \"0\") + \" deadline \" + this.name + \" /by \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                    + formatDate() + \" /doafter \" + doAfterDescription;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs a formatted string of the time of this Deadline. The format is the same as input format and is"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * shared by all tasks."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a formatted string of the time of this Deadline"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String formatDate() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return format.format(this.time);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calculates whether the time set for the deadline is near enough."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dayLimit maximum number of days from now for the deadline to be considered as near"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the flag whether the deadline is near enough"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isNear(int dayLimit) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.time.compareTo(now) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            if (now.compareTo(this.time.minusDays(dayLimit)) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void snooze() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        time \u003d time.plusDays(3);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Check if this task clashes with the new task being added."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task the new task being added into the list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if this task clashes with the new task being added, false if not."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isClash(Task task) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            if (task.taskType.equals(TaskType.Deadline)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                Deadline deadlineTask \u003d (Deadline) task;  // downcasting task to Deadline in order to use"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                // getTime()."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                if (this.time.compareTo(deadlineTask.getTime()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            if (task.taskType.equals(TaskType.Event)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                Event eventTask \u003d (Event) task;  // downcasting task to Event in order to use getTime()."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                if (this.time.compareTo(eventTask.getTime()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            Duke.getUI().showError(\"Error when finding clashes of tasks.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JokerY": 8,
      "-": 130
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerY"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Event class is a typ of task with a date/time when the event is going to happen."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    private LocalDateTime time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Instantiates the Event class with name and time. Time must be passed in during the instantiation as it"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * cannot be changed later."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name name of the Event"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param time time of the Event that is going to happen"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    public Event(String name, LocalDateTime time) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskType \u003d TaskType.Event;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    public LocalDateTime getTime() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Instantiates the Event class with name and time. Time must be passed in during the instantiation as it"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * cannot be changed later. Supports adding a task to be done after the first main task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name    name of the Event"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param time    time of the Event that is going to happen"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param doAfter task to be done after the main task"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    public Event(String name, LocalDateTime time, String doAfter) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        setDoAfterDescription(doAfter);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskType \u003d TaskType.Event;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts the Event to a human readable string containing important information about the Event,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * including the type and time of this Event."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a human readable string containing the important information"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.doAfterDescription \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"[E]\" + this.getStatus() + \" (by: \" + formatDate() + \")\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"[E]\" + this.getStatus() + \" (by: \" + formatDate() + \")\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"\\n   After which: \" + doAfterDescription;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs a string with all the information of this Event to be stored in a file for future usage."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a string containing all information of this Event"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.doAfterDescription \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return (this.isDone ? \"1\" : \"0\") + \" event \" + this.name + \" /at \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                    + formatDate();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return (this.isDone ? \"1\" : \"0\") + \" event \" + this.name + \" /at \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                    + formatDate() + \" /doafter \" + doAfterDescription;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs a formatted string of the time of this Event. The format is the same as input format and is"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * shared by all tasks."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a formatted string of the time of this Event"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String formatDate() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return format.format(this.time);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calculates whether the time set for the event is near enough."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dayLimit maximum number of days from now for the event to be considered as near"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the flag whether the event is near enough"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isNear(int dayLimit) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.time.compareTo(now) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            if (now.compareTo(this.time.minusDays(dayLimit)) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void snooze() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        time \u003d time.plusDays(3);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Check if this task clashes with the new task being added."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task the new task being added into the list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if this task clashes with the new task being added, false if not."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isClash(Task task) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            if (task.taskType.equals(TaskType.Deadline)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                Deadline deadlineTask \u003d (Deadline) task;  // downcasting task to Deadline in order to use"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                // getTime()."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                if (this.time.compareTo(deadlineTask.getTime()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            if (task.taskType.equals(TaskType.Event)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                Event eventTask \u003d (Event) task;  // downcasting task to Event in order to use getTime()."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                if (this.time.compareTo(eventTask.getTime()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            Duke.getUI().showError(\"Error when finding clashes of tasks.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JokerY": 8,
      "-": 131
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerY"
        },
        "content": "import seedu.duke.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerY"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerY"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerY"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerY"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerY"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Super class of all kinds of tasks, with the basic functionality that all tasks share."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * The name of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * The flag whether is task is already done. Can only be set from false to true."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * The type of the task, following the enumeration declared."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    protected TaskType taskType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String doAfterDescription;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * A date format that is shared by all tasks to parse and out the date involved in the task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    protected static DateTimeFormatter format \u003d DateTimeFormatter"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            .ofPattern(\"dd/MM/uuuu HHmm\", Locale.ENGLISH)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The enumeration of all task type."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public enum TaskType {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ToDo, Deadline, Event"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Instantiation of a task with the name and the default false value if isDone attribute."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name the name of the task"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String name) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.doAfterDescription \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Marks the isDone as true."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the status whether the task is done."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the isDone attribute"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean getDone() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * The function that returns a human readable string of the basic information of the task."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the human readable string of the basic information the task."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String getStatus() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"[✓] \" + this.name;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"[✗] \" + this.name;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskType getTaskType() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.taskType;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts the task to a human readable string. This will return the same string as the get status"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * function for a basic task, but is overridden by more advanced task class to add more information."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a human readable string that contains all important information of a task."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.getStatus();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The function returns a string that contains full information of the task which is used to be stored in"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * a file for future usage."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a string containing full information of the task."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The function is used to parse the input string to a Date that is used by the tasks with time involved."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The function can be called before the initialization of a Task so that the Data can be directly passed"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * to the constructor."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateString an input string to be parsed"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return parsed result from the input string"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     * @throws Parser.UserInputException an exception when the parsing is failed, most likely due to a wrong"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JokerY"
        },
        "content": "     *                                format"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JokerY"
        },
        "content": "    public static LocalDateTime parseDate(String dateString) throws Parser.UserInputException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            return LocalDateTime.parse(dateString, format);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JokerY"
        },
        "content": "            throw new Parser.UserInputException(\"Wrong Date Time format\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JokerY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * The function checks whether this task, when converted to string, contains the keyword specified."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyword search target string"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a flag whether the keyword is found in the task string"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean matchKeyword(String keyword) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.toString().contains(keyword);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default function determining whether the deadline or event is near enough. It will be overridden in"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * deadline or event, but not todo."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dayLimit the maximum number of days from now for a task to be considered as near"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return whether the task is near enough"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isNear(int dayLimit) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDoAfterDescription(String description) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        this.doAfterDescription \u003d description;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void snooze() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isClash(Task task) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JokerY": 18,
      "-": 144
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limryan"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limryan"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limryan"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limryan"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limryan"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limryan"
        },
        "content": "      \u003cInsets bottom\u003d\"30.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limryan"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "limryan": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"800.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"seedu.duke.gui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limryan"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                 prefWidth\u003d\"724.0\" AnchorPane.bottomAnchor\u003d\"1.0\" text\u003d\"task \"  /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limryan"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"724.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limryan"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"800.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limryan"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limryan"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"562.0\" prefWidth\u003d\"798.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limryan"
        },
        "content": "               \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limryan"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limryan"
        },
        "content": "               \u003c/opaqueInsets\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limryan"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limryan"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limryan"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 2,
      "limryan": 22
    }
  }
]
