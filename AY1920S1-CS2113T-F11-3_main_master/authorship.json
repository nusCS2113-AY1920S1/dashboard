[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "//    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.8.4\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limryan"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Launcher\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    // https://mvnrepository.com/artifact/org.json/json"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    compile group: \u0027org.json\u0027, name: \u0027json\u0027, version: \u002720090211\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        events \u0027PASSED\u0027, \u0027FAILED\u0027, \u0027SKIPPED\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "//javafx {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "//    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "//    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027, \u0027javafx.web\u0027 ]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "//}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    archiveBaseName \u003d \"email_manager\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lee761"
        },
        "content": "    archiveVersion \u003d \"1.3\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        xml.enabled \u003d true // coveralls plugin depends on xml format report"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    jacocoReportPath \u0027build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    dependsOn \u0027check\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 17,
      "limryan": 2,
      "JokerYan": 27,
      "-": 42,
      "lee761": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.network.Http;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.network.SimpleServer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.storage.ResourceHelper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.storage.StorageHelper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.common.logger.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The main class of the program, which provides the entry point."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static Duke duke;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Main.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private Duke() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        run();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lee761"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * Gets new instance."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lee761"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @return duke"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lee761"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static Duke getInstance() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (duke \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            duke \u003d new Duke();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return duke;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Exits the entire program."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Exiting Email Manager \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                + \"]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        logger.info(\"Stopping Server\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        SimpleServer.stopServer();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        logger.info(\"Saving Model\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Model.getInstance().saveModel();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        PauseTransition delay \u003d new PauseTransition(Duration.seconds(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        delay.setOnFinished(event -\u003e Platform.exit());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        delay.play();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Main function of the GUI program."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        logger.info(\"preparing data files\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        StorageHelper.constructDataDirectory();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        //ResourceHelper.prepareTestFile();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        ResourceHelper.applyTestData();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        logger.info(\"initializing UI\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        UI.getInstance().initUi();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        logger.info(\"initializing Model\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Model.getInstance().initModel();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        logger.info(\"Starting server to fetch emails\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Http.startAuthProcess();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 10,
      "JokerYan": 36,
      "-": 18,
      "lee761": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limryan"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limryan"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limryan"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limryan"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limryan"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limryan": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limryan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.common.logger.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limryan"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Main.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limryan"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limryan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            LogsCenter.init();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Email Manager \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                    + \"]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limryan"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limryan"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limryan"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            configureStage(stage, scene);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            configureUi(stage, fxmlLoader, scene);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limryan"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Duke.getInstance();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limryan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limryan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private void configureUi(Stage stage, FXMLLoader fxmlLoader, Scene scene) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        UI.getInstance().setMainWindow(fxmlLoader.getController());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        UI.getInstance().setKeyBinding(scene);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        UI.getInstance().setMainStage(stage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private void configureStage(Stage stage, Scene scene) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        stage.setTitle(\"Duke Email Manager\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        stage.getIcons().add(new Image(getClass().getResourceAsStream(\"/images/icon.png\")));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        stage.setMinWidth(450);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        stage.setMinHeight(300);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 9,
      "limryan": 24,
      "JokerYan": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.common.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * This is an abstract command that all kinds of command inherit from. It has execute() function to be"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * overridden and can be set silent for UI output."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * A flag whether UI output is turned off. Default to be false, so UI output is default to be turned on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean silent \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    protected String responseMsg \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    protected ArrayList\u003cOption\u003e optionList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command. This method is to be overridden to specific functionality by different types of"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * command themselves."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a flag whether the command is successfully executed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public abstract boolean execute(Model model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function turns off the UI output of the command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSilent() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.silent \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static class Option extends Pair\u003cString, String\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limryan"
        },
        "content": "         * Creates a new pair as option of the input."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         * @param key   The key for this pair"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         * @param value The value to use for this pair"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        public Option(String key, String value) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            super(key, value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 2,
      "limryan": 1,
      "JokerYan": 18,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/command/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.common.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " * Exit Command is a special kind of command called when the user ends the interaction."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Simply returns false when executed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return always false."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public boolean execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        responseMsg \u003d \"Bye, hope to see you again.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        UI.getInstance().showResponse(responseMsg);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        UI.getInstance().exit();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 1,
      "JokerYan": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/command/FlipCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.common.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.common.parser.CommandParseHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "public class FlipCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public boolean execute(Model model) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        responseMsg \u003d \"Input type flipped.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lee761"
        },
        "content": "        CommandParseHelper.flipInputType();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        UI.getInstance().showResponse(responseMsg);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 9,
      "JokerYan": 6,
      "lee761": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/command/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.common.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limryan"
        },
        "content": " * A command to display all help information."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private ArrayList\u003cCommandInfo\u003e commandInfoList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Initializes help command with pre-determined values."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        initCommandInfoList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Formulates a string containing all the command help message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return the long text of help message to be displayed to the user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String output \u003d \"Note: only A-Z a-z 0-9 \\\u0027_\\\u0027 and \\\u0027 \\\u0027 are allowed for user input!\" + System.lineSeparator();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        ArrayList\u003cString\u003e categories \u003d divideCategories();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String commandStrings \u003d formatCommandStrings(categories);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        output +\u003d commandStrings;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private String formatCommandStrings(ArrayList\u003cString\u003e categories) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String commandStrings \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (String category : categories) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            commandStrings +\u003d category + \" command: \" + System.lineSeparator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            for (CommandInfo commandInfo : commandInfoList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                if (commandInfo.getCategory() \u003d\u003d category) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    commandStrings +\u003d commandInfo.toString() + System.lineSeparator() + System.lineSeparator();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            commandStrings +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return commandStrings;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private ArrayList\u003cString\u003e divideCategories() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        ArrayList\u003cString\u003e categories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (CommandInfo commandInfo : commandInfoList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            boolean found \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            for (String category : categories) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                if (category.equals(commandInfo.getCategory())) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    found \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (!found) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                categories.add(commandInfo.getCategory());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return categories;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public boolean execute(Model model) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        responseMsg \u003d this.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        UI.getInstance().showTextPopup(responseMsg);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private void initCommandInfoList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        commandInfoList.add(new CommandInfo(\"Common\", \"help\", \"Help command to display all available \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + \"commands. \"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        commandInfoList.add(new CommandInfo(\"Common\", \"flip\", \"Change between task or email commands\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        commandInfoList.add(new CommandInfo(\"Common\", \"bye\", \"Safely exits the program\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lee761"
        },
        "content": "        commandInfoList.add(new CommandInfo(\"Common\", \"clear chat\", \"Clear dialogue box\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        commandInfoList.add(new CommandInfo(\"Task\", \"list\", \"List all tasks\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        commandInfoList.add(new CommandInfo(\"Task\", \"done \\\u0027index\\\u0027\", \"Mark a task at the given index as \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + \"done. \"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        commandInfoList.add(new CommandInfo(\"Task\", \"delete \\\u0027index\\\u0027\", \"Delete a task at the given index\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        commandInfoList.add(new CommandInfo(\"Task\", \"find \\\u0027keyword\\\u0027\", \"Find the tasks containing the \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + \"given keyword. \"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        commandInfoList.add(new CommandInfo(\"Task\", \"reminder [\\\u0027daylimit\\\u0027]\", \"Show the tasks that are \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + \"near, which is closer than the number of days (daylimit) given. If the daylimit is not \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + \"given, the default of 3 days will be used.\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        commandInfoList.add(new CommandInfo(\"Task\", \"doafter \\\u0027index\\\u0027\" + System.lineSeparator()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + \"\\t-msg \\\u0027message\\\u0027\\t\\t(Must) The event/time when the task is to be do after\", \"Mark a \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + \"task with the given index as to be done after the given description\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        commandInfoList.add(new CommandInfo(\"Task\", \"snooze \\\u0027index\\\u0027\" + System.lineSeparator()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lee761"
        },
        "content": "                + \"\\t-by \\\u0027duration\\\u0027\\t\\t(Optional) The duration to snooze the task by\", \"Snooze \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lee761"
        },
        "content": "                + \"the task at the given index according to the duration. If no duration is keyed, task \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lee761"
        },
        "content": "                + \"would be snoozed by 3 days\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        commandInfoList.add(new CommandInfo(\"Task\", \"set \\\u0027index\\\u0027\" + System.lineSeparator()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + \"\\t-priority \\\u0027priority\\\u0027\\t\\t(Must) The priority level of the task in string\", \"Set a \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + \"task to the given priority\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        commandInfoList.add(new CommandInfo(\"Task\", \"todo \\\u0027name\\\u0027\" + System.lineSeparator()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + \"\\t[-tag \\\u0027tag content\\\u0027]\\t\\t(Optional) Add a tag to the task created. Multiple tags can \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + \"be added to a single todo. \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + System.lineSeparator() + \"\\t[-doafter \\\u0027message\\\u0027]\\t\\t(Optional) Add the event/time after \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + \"which the task should be done\", \"Create a todo. \"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        commandInfoList.add(new CommandInfo(\"Task\", \"deadline \\\u0027name\\\u0027\" + System.lineSeparator()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + \"\\t-time \\\u0027dd/MM/uuuu HHmm\\\u0027\\t\\t (Must) The time of the deadline\" + System.lineSeparator()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + \"or\\t-time \\\u0027day HHmm\\\u0027\\t\\t (Optional) The time of the deadline\" + System.lineSeparator()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + \"\\t[-tag \\\u0027tag content\\\u0027]\\t\\t(Optional) Add a tag to the task created. Multiple tags \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lee761"
        },
        "content": "                + \"can be added to a single deadline. \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + System.lineSeparator() + \"\\t[-doafter \\\u0027message\\\u0027]\\t\\t(Optional) Add the event/time after \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + \"which the task should be done\", \"Create a deadline.\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        commandInfoList.add(new CommandInfo(\"Task\", \"event \\\u0027name\\\u0027\" + System.lineSeparator()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + \"\\t-time \\\u0027dd/MM/uuuu HHmm\\\u0027\\t\\t (Must) The time of the event\" + System.lineSeparator()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + \"or\\t-time \\\u0027day HHmm\\\u0027\\t\\t (Optional) The time of the event\" + System.lineSeparator()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + \"\\t[-tag \\\u0027tag content\\\u0027]\\t\\t(Optional) Add a tag to the task created. Multiple tags \""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lee761"
        },
        "content": "                + \"can be added to a single event. \""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + System.lineSeparator() + \"\\t[-doafter \\\u0027message\\\u0027]\\t\\t(Optional) Add the event/time after \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + \"which the task should be done\", \"Create a event.\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lee761"
        },
        "content": "        commandInfoList.add(new CommandInfo(\"Task\", \"clear\", \"Clear task list\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        commandInfoList.add(new CommandInfo(\"Email\", \"list\", \"List all the emails.\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        commandInfoList.add(new CommandInfo(\"Email\", \"show \\\u0027index\\\u0027\", \"Show a email content at the given \""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + \"index. \"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        commandInfoList.add(new CommandInfo(\"Email\", \"fetch\", \"Fetch emails from the Outlook server\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        commandInfoList.add(new CommandInfo(\"Email\", \"update \\\u0027index\\\u0027\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + \"\\t-tag \\\u0027tag name\\\u0027\\t\\t(Must) Name of the tag\", \"Tag an email with a tag name\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * A class of the syntax and relevant information of each command."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public class CommandInfo {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        private String category;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        private String format;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limryan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limryan"
        },
        "content": "         * Constructor instantiate all attributes of a command type."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limryan"
        },
        "content": "         * @param category    command category"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limryan"
        },
        "content": "         * @param format      format of a command"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limryan"
        },
        "content": "         * @param description description of the command"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limryan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        public CommandInfo(String category, String format, String description) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            this.category \u003d category;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            this.format \u003d format;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        public String getCategory() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return this.category;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        public String getFormat() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return this.format;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        public String getDescription() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return this.description;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limryan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limryan"
        },
        "content": "         * Converts all the information of the command into a string."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limryan"
        },
        "content": "         * @return String with information formatted"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limryan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            String output \u003d \"\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            output +\u003d \"\\t\u003d\u003d\u003e\" + description + System.lineSeparator();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            output +\u003d \"\\t\" + format;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limryan": 13,
      "JokerYan": 151,
      "lee761": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/command/InvalidCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.common.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " * InvalidCommand is a specific kind of command indicating the input is not recognised as any known command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class InvalidCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    String msg;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public InvalidCommand(String msg) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.msg \u003d msg;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limryan"
        },
        "content": "    public InvalidCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Simply returns false. The UI output is currently disabled."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public boolean execute(Model model) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        responseMsg \u003d \"This is an invalid command.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (msg !\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            responseMsg +\u003d System.lineSeparator() + System.lineSeparator() + msg;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        responseMsg +\u003d System.lineSeparator() + System.lineSeparator() + \"Enter \\\u0027help\\\u0027 for more \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + \"information.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        UI.getInstance().showResponse(responseMsg);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limryan": 2,
      "JokerYan": 33
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/command/LinkCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limryan"
        },
        "content": "package seedu.duke.common.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limryan"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limryan"
        },
        "content": "import seedu.duke.email.EmailList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limryan"
        },
        "content": "import seedu.duke.email.entity.Email;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limryan"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limryan"
        },
        "content": "import seedu.duke.task.entity.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limryan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limryan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limryan"
        },
        "content": "public class LinkCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private ArrayList\u003cInteger\u003e taskIndexList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private ArrayList\u003cInteger\u003e emailIndexList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Instantiates link command with all the necessary variables."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limryan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param taskIndexList  the index of tasks that is to be linked together."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param emailIndexList the index of emails that is to be linked."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limryan"
        },
        "content": "    public LinkCommand(ArrayList\u003cInteger\u003e taskIndexList, ArrayList\u003cInteger\u003e emailIndexList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limryan"
        },
        "content": "        this.taskIndexList \u003d taskIndexList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limryan"
        },
        "content": "        this.emailIndexList \u003d emailIndexList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Executes the link command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limryan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param model allows access the taskList and emailList"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @return      a flag whether linking is done successfully. Returns false otherwise."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limryan"
        },
        "content": "    public boolean execute(Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limryan"
        },
        "content": "        TaskList taskList \u003d model.getTaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limryan"
        },
        "content": "        EmailList emailList \u003d model.getEmailList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limryan"
        },
        "content": "        StringBuilder msg \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limryan"
        },
        "content": "        if (emailIndexList.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limryan"
        },
        "content": "            ArrayList\u003cString\u003e linkedEmails \u003d taskList.get(taskIndexList.get(0)).getLinkedEmails();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limryan"
        },
        "content": "            if (linkedEmails.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limryan"
        },
        "content": "                msg.append(\"No linked emails currently.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limryan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limryan"
        },
        "content": "                //TODO make function in EmailList to return Array List of email subjects (and maybe index)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limryan"
        },
        "content": "                //TODO create function to convert SHA to Subject"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limryan"
        },
        "content": "                msg.append(\"Here are your linked emails:\" + System.lineSeparator());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limryan"
        },
        "content": "                int i \u003d 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limryan"
        },
        "content": "                for (String filename : linkedEmails) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limryan"
        },
        "content": "                    String name \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limryan"
        },
        "content": "                    for (int j \u003d 0; j \u003c emailList.size(); j++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limryan"
        },
        "content": "                        if (filename.equals(emailList.get(j).getShaHash())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limryan"
        },
        "content": "                            name \u003d emailList.get(j).getSubject();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limryan"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limryan"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limryan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limryan"
        },
        "content": "                    msg.append(i + \". \" + name + System.lineSeparator());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limryan"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limryan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limryan"
        },
        "content": "            responseMsg \u003d msg.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limryan"
        },
        "content": "            UI.getInstance().showResponse(msg.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limryan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limryan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limryan"
        },
        "content": "            msg.append(\"Linked task \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limryan"
        },
        "content": "            for (int i \u003d 0; i \u003c taskIndexList.size(); i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limryan"
        },
        "content": "                Task task \u003d taskList.get(taskIndexList.get(i));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limryan"
        },
        "content": "                msg.append(task.getName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limryan"
        },
        "content": "                msg.append(\" with email(s):\" + System.lineSeparator());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limryan"
        },
        "content": "                for (int j \u003d 0; j \u003c emailIndexList.size(); j++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limryan"
        },
        "content": "                    Email email \u003d emailList.get(emailIndexList.get(j));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limryan"
        },
        "content": "                    msg.append(email.getSubject() + System.lineSeparator());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limryan"
        },
        "content": "                    if (task.getLinkedEmails().contains(email.getShaHash())) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limryan"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limryan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limryan"
        },
        "content": "                    task.addLinkedEmails(email.getShaHash());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limryan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limryan"
        },
        "content": "            if (!silent) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limryan"
        },
        "content": "                responseMsg \u003d msg.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limryan"
        },
        "content": "                UI.getInstance().showResponse(msg.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limryan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limryan": 86
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/logger/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "package seedu.duke.common.logger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.storage.StorageHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyun99"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyun99"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyun99"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyun99"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyun99"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyun99"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private static Level currentLogLevel \u003d Level.ALL;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private static String logFileName \u003d \".\\\\data\\\\logs\\\\emailManager.log\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public static void init() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        logFileName \u003d getLogFileName();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private static FileHandler createFileHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        FileHandler fileHandler \u003d null;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        if (logFileName \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            logFileName \u003d getLogFileName();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            fileHandler \u003d new FileHandler(logFileName);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Gets the filepath to save logs data."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private static String getLogFileName() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Path logPath \u003d StorageHelper.prepareLogFolderPath();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        File logDir \u003d new File(logPath.toString());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        if (!(logDir.exists())) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            logDir.mkdir();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        DateFormat dateFormat \u003d new SimpleDateFormat(\"yyyyMMdd_HHmm\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        String dateStr \u003d dateFormat.format(date);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        String fileName \u003d logPath + File.separator +  \"log\" + dateStr +  \".log\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return fileName;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 143,
      "JokerYan": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.common.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.EmailKeywordPairList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.parser.EmailContentParseHelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.EmailList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.storage.EmailStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.email.EmailTags;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.storage.TaskStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class Model {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private boolean isUpdateGui \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private EmailList emailList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private EmailKeywordPairList keywordPairList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private Model() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Returns the current instance of the model. If there are none, it instantiates a new model."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limryan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @return instance of model"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static Model getInstance() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (model \u003d\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            model \u003d new Model();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Initializes model structure."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void initModel() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        keywordPairList \u003d new EmailKeywordPairList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        emailList \u003d new EmailList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        keywordPairList \u003d EmailContentParseHelper.initKeywordList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        taskList \u003d TaskStorage.readTaskFromFile();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        emailList \u003d EmailStorage.readEmailFromFile(\"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        updateGuiTaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        updateGuiEmailList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public TaskList getTaskList() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void setTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        updateGuiTaskList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public EmailList getEmailList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return emailList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Set emailList of Model."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @param emailList emailList"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void setEmailList(EmailList emailList) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.emailList \u003d emailList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        updateGuiEmailList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        updateEmailTagList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public EmailKeywordPairList getKeywordPairList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return keywordPairList;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void setKeywordPairList(EmailKeywordPairList keywordPairList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.keywordPairList \u003d keywordPairList;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Update any changes in the task list to the display in ui."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void updateGuiTaskList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        if (isUpdateGui) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lee761"
        },
        "content": "            taskList.sortListByPriority();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().updateTaskList(taskList.getTaskGuiStringList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Updates the emailList in GUI with the latest emailList in sorted order."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void updateGuiEmailList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        if (isUpdateGui) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            emailList.sortByGivenOrder();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().updateEmailList(emailList.getEmailGuiStringList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public void updateEmailTagList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        EmailTags.updateEmailTagList(emailList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        //UI.getInstance().updateEmailList(emailList.getEmailTagList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Saves all the info in the model to the respective files before exit."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void saveModel() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        TaskStorage.saveTasks(model.getTaskList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        EmailStorage.saveEmails(model.getEmailList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Gets the length of the email list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return email list length"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public int getEmailListLength() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return emailList.size();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Gets the length of the task list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return task list length"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public int getTaskListLength() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public void setIsUpdateGui(boolean isUpdateGui) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        this.isUpdateGui \u003d isUpdateGui;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 22,
      "limryan": 5,
      "JokerYan": 106,
      "lee761": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/network/Http.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.common.network;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import org.json.JSONException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import org.json.JSONObject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.parser.EmailFormatParseHelper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.EmailList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.storage.EmailStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limryan"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limryan"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limryan"
        },
        "content": "import java.io.DataOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limryan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limryan"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limryan"
        },
        "content": "import java.io.Reader;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limryan"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limryan"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limryan"
        },
        "content": "import java.net.ProtocolException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limryan"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limryan"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limryan"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " * A class containing helper functions related to Http request of calling Email API."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class Http {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static String authCode \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static String accessToken \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static String refreshToken \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static String clientId \u003d \"feacc09e-5364-4386-92e5-78ee25d2188d\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static String clientSecret \u003d \"8dhu0-v80Ic-ZrQpACgWLEPg:??1MGkc\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static String redirect \u003d \"http://localhost:\" + SimpleServer.getPort();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static String scope \u003d \"openid+Mail.Read+offline_access\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Starts process to obtain authorisation token from user account."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static void startAuthProcess() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        refreshToken \u003d EmailStorage.readRefreshToken();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (\"\".equals(refreshToken)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            getAuth();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            refreshAccess();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Sets the Authorization Code and then call the function to get the Access Token from Outlook."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param code teh new authentication code"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static void setAuthCode(String code) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        //UI.getInstance().showDebug(\"Auth Code Set: \" + code);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        authCode \u003d code;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        getAccess();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Sets the Access Token and call the fetch email API."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param token the new access token"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static void setAccessToken(String token) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        //UI.getInstance().showDebug(\"Access Token Set: \" + token);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        accessToken \u003d token;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        //Solves the problem of HTTP not on the same thread as the FX"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Platform.runLater(new Runnable() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                EmailStorage.syncWithServer();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static void setRefreshToken(String token) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        refreshToken \u003d token;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        EmailStorage.saveRefreshToken(token);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Fetches email from Outlook serer."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param limit the limit of number of emails to be fetched. 0 means all emails are fetched."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return the list of emails fetched"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static EmailList fetchEmail(int limit) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        JSONObject apiParams \u003d prepareParams(limit);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        EmailList emailList \u003d callFetchEmailWithParams(apiParams);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return emailList;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static EmailList callFetchEmailWithParams(JSONObject apiParams) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            String httpResponse \u003d callEmailApi(apiParams);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            EmailList emailList \u003d EmailFormatParseHelper.parseFetchResponse(httpResponse);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return emailList;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (EmailFormatParseHelper.EmailParsingException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(e.toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return new EmailList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static JSONObject prepareParams(int limit) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        JSONObject apiParams \u003d new JSONObject();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            apiParams.put(\"select\", \"subject,from,body,receivedDateTime\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (limit \u003e 0) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                apiParams.put(\"top\", Integer.toString(limit));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            apiParams.put(\"orderby\", \"receivedDateTime%20desc\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (JSONException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"Api parameter error...\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return apiParams;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Fetches a new Authorization Code from Outlook. It also calls to start the server to prepare receiving"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * the code from Outlook redirection."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static void getAuth() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        SimpleServer.startServer();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        openBrowser(prepareAuthUrl());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static String prepareAuthUrl() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return \"https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id\u003d\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + clientId + \"\u0026response_type\u003dcode\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + \"\u0026redirect_uri\u003d\" + redirect + \"\u0026scope\u003d\" + scope;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Fetches the Access Token from Outlook."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author Navoneel Talukdar \u0026 Stunner"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    //function adapted from https://stackoverflow"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    // .com/questions/40574892/how-to-send-post-request-with-x-www-form-urlencoded-body"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static void getAccess() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            HttpURLConnection conn \u003d setupAccessConnection();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            String response \u003d getConnectionResponse(conn);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            setTokensFromResponse(response);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (MalformedURLException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"Access Code url in wrong format...\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"Access Code url failed to open...\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (JSONException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"Access code response in wrong format...\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static void setTokensFromResponse(String response) throws JSONException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        JSONObject json \u003d new JSONObject(response);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        setAccessToken(json.getString(\"access_token\"));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        setRefreshToken(json.getString(\"refresh_token\"));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static void refreshAccess() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            HttpURLConnection conn \u003d setupRefreshConnection();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            String response \u003d getConnectionResponse(conn);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showDebug(response);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            setTokensFromResponse(response);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (MalformedURLException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"Refresh Access Code url in wrong format...\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"Refresh Access Code url failed to open...\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (JSONException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"Refresh Access code response in wrong format...\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Calls the respective Email API based on the parameters given."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param params the parameters regarding the specification of this email api call in JSON form"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return the result of email api call in string"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author baeldung"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    //This function is adapted from code on https://www.baeldung.com/java-http-request"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static String callEmailApi(JSONObject params) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String url \u003d \"\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            url \u003d prepareApiUrl(params);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //UI.getInstance().showDebug(url);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            HttpURLConnection conn \u003d setupEmailConnection(url);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            String content \u003d getConnectionResponse(conn);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return content;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (JSONException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"Api params serializing error...\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (MalformedURLException e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"Wrong URL format...\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (ProtocolException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"Protocol exception encountered...\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"HTTP connection failed...\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    //convert the parameters for email api call in json to a url in string"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static String prepareApiUrl(JSONObject params) throws JSONException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String url \u003d \"https://graph.microsoft.com/v1.0/me/mailfolders/inbox/messages?\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Iterator\u003cString\u003e keys \u003d params.keys();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        while (keys.hasNext()) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            String key \u003d keys.next();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            url +\u003d \"$\" + key + \"\u003d\" + params.getString(key);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (keys.hasNext()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                url +\u003d \"\u0026\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return url;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static HttpURLConnection setupEmailConnection(String link) throws IOException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        URL url \u003d new URL(link);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        HttpURLConnection conn \u003d (HttpURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        configureEmailConnection(conn);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return conn;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static void configureEmailConnection(HttpURLConnection conn) throws ProtocolException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        conn.setRequestMethod(\"GET\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        conn.setRequestProperty(\"Authorization\", \"Bearer \" + accessToken);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        conn.setRequestProperty(\"Accept\", \"application/json\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        conn.setConnectTimeout(5000);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        conn.setInstanceFollowRedirects(false);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static HttpURLConnection setupAccessConnection() throws IOException {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String requestUrl \u003d \"https://login.microsoftonline.com/common/oauth2/v2.0/token\";"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String params \u003d \"client_id\u003d\" + clientId + \"\u0026client_secret\u003d\" + clientSecret + \"\u0026code\u003d\" + authCode"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + \"\u0026redirect_uri\u003d\" + redirect + \"\u0026grant_type\u003dauthorization_code\";"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return setupPostRequestConnection(requestUrl, params);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static HttpURLConnection setupRefreshConnection() throws IOException {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String requestUrl \u003d \"https://login.microsoftonline.com/common/oauth2/v2.0/token\";"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String params \u003d \"client_id\u003d\" + clientId + \"\u0026client_secret\u003d\" + clientSecret"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + \"\u0026refresh_token\u003d\" + refreshToken + \"\u0026scope\u003d\" + scope + \"\u0026grant_type\u003drefresh_token\";"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return setupPostRequestConnection(requestUrl, params);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static HttpURLConnection setupPostRequestConnection(String requestUrl, String params) throws IOException {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        URL url \u003d new URL(requestUrl);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        HttpURLConnection conn \u003d (HttpURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        configurePostRequestConnection(conn, params);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return conn;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static void configurePostRequestConnection(HttpURLConnection conn, String params) throws IOException {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        byte[] postData \u003d params.getBytes(StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        int postDataLength \u003d postData.length;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        conn.setConnectTimeout(5000);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        conn.setDoOutput(true);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        conn.setInstanceFollowRedirects(false);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        conn.setRequestMethod(\"POST\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        conn.setRequestProperty(\"charset\", \"utf-8\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        conn.setRequestProperty(\"Content-Length\", Integer.toString(postDataLength));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        conn.setUseCaches(false);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        DataOutputStream wr \u003d new DataOutputStream(conn.getOutputStream());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        wr.write(postData);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static String getConnectionResponse(HttpURLConnection conn) throws IOException {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        BufferedReader in \u003d prepareBufferedReader(conn);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        StringBuffer response \u003d readFromBuffer(in);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        conn.disconnect();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return response.toString();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static StringBuffer readFromBuffer(BufferedReader in) throws IOException {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        StringBuffer response \u003d new StringBuffer();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String inputLine;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        while ((inputLine \u003d in.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            response.append(inputLine);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        in.close();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static BufferedReader prepareBufferedReader(HttpURLConnection conn) throws IOException {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        int status \u003d conn.getResponseCode();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Reader streamReader;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (status \u003e 299) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            streamReader \u003d new InputStreamReader(conn.getErrorStream());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            streamReader \u003d new InputStreamReader(conn.getInputStream());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return new BufferedReader(streamReader);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Opens the system browser for user authorization process."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param link a url to which the browser will be directed"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return a flag whether the operation is successfully executed"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    //This function is adapted from https://stackoverflow"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    // .com/questions/10967451/open-a-link-in-browser-with-java-button"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static boolean openBrowser(String link) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            URI url \u003d new URI(link);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Desktop desktop \u003d Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (desktop !\u003d null \u0026\u0026 desktop.isSupported(Desktop.Action.BROWSE)) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    desktop.browse(url);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    UI.getInstance().showError(e.toString());"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (URISyntaxException e) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"Wrong URI format...\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limryan": 15,
      "JokerYan": 307,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/network/SimpleServer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.common.network;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import com.sun.net.httpserver.HttpExchange;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import com.sun.net.httpserver.HttpHandler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import com.sun.net.httpserver.HttpServer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.io.OutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.net.InetSocketAddress;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.concurrent.ExecutorService;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.concurrent.Executors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " * A simple local server designed to receive authorization code from Outlook through redirect."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author BalusC"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "//code adapted from https://stackoverflow.com/questions/3732109/simple-http-server-in-java-using-only-java-se-api"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class SimpleServer {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static final int PORT \u003d 53231;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static HttpServer server;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static ExecutorService httpThreadPool;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Starts the server on port defined."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static void startServer() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            server \u003d HttpServer.create(new InetSocketAddress(PORT), 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            server.createContext(\"/\", new MyHandler());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            httpThreadPool \u003d Executors.newFixedThreadPool(1);;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            server.setExecutor(httpThreadPool); // creates a default executor"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            server.start();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"Server setup failed...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static void parseAuthCode(String url) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        int index \u003d url.indexOf(\"code\u003d\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"Auth code parsing failed: \" + url);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        index +\u003d 5;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String code \u003d url.substring(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Http.setAuthCode(code);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Stops access to server."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static void stopServer() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (server !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            System.out.println(\"server stopping...\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            server.stop(1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            httpThreadPool.shutdown();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static int getPort() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return PORT;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Handler used to handle the response of the http request from Outlook."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static class MyHandler implements HttpHandler {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         * Handles the exchange/response of the http request from Outlook, which contains the authorization"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         * code. Stops the server once received the code."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         * @param exchange incoming exchange from the Outlook"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         * @throws IOException exception if the exchange fails to receive the information from request"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        public void handle(HttpExchange exchange) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            String response \u003d \"Authorization/Authentication Successful! Please return back to the Email \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    + \"Manager.\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            exchange.sendResponseHeaders(200, response.length());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            writeExchangeResponseBody(exchange, response);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            parseAuthCode(exchange.getRequestURI().getQuery());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            stopServer();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        private void writeExchangeResponseBody(HttpExchange exchange, String response) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            OutputStream os \u003d exchange.getResponseBody();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            os.write(response.getBytes());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            os.close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "limryan": 3,
      "JokerYan": 88,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/parser/CommandParseHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.common.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.command.Command.Option;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.command.InvalidCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.parser.EmailCommandParseHelper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.parser.TaskCommandParseHelper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " * A class that contains helper functions used to process user inputs. It also contains UserInputException"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " * that is used across the project to handle the unexpected user input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class CommandParseHelper {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static UI ui \u003d UI.getInstance();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private static InputType inputType \u003d InputType.EMAIL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Checks if input command is in the correct format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limryan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @param commandString input command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @return true if matches pattern, false otherwise."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static boolean isCommandFormat(String commandString) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return commandString.matches("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                \"(?:task|email\\\\s)(?:\\\\s*([\\\\w]+)[\\\\s|\\\\w]*)(?:\\\\s+\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                        + \"(-[\\\\w]+\\\\s+[\\\\w]+[\\\\s|\\\\w/]*))*\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Get input prefix for userInput text field in GUI."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @return current prefix."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public static String getInputPrefix() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        String prefix \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        switch (inputType) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            prefix \u003d \"task \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        case EMAIL:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            prefix \u003d \"email \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            prefix \u003d \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static InputType getInputType() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return inputType;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Sets to the new input type when it is toggled by \"flip\" command. Also updates the UI display of the"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * prefix."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @param newInputType the input type that is going to be changed to."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public static void setInputType(InputType newInputType) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        inputType \u003d newInputType;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Flip between Email and Task input type of the command parser."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lee761"
        },
        "content": "    public static void flipInputType() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (inputType \u003d\u003d InputType.TASK) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            inputType \u003d InputType.EMAIL;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            inputType \u003d InputType.TASK;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Parses input to retrieve options from command string."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limryan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @param input command string."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @return list of all options specified in the command."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static ArrayList\u003cOption\u003e parseOptions(String input) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limryan"
        },
        "content": "        String userInput \u003d input.strip();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        ArrayList\u003cOption\u003e optionList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Pattern optionPattern \u003d Pattern.compile(\".*(?\u003ckey\u003e-[\\\\w]+)\\\\s+(?\u003cvalue\u003e[\\\\w]+[\\\\s|\\\\w/]*)\\\\s*\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Matcher optionMatcher \u003d optionPattern.matcher(userInput);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        while (optionMatcher.matches()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            optionList.add(new Option(optionMatcher.group(\"key\").substring(1),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    optionMatcher.group(\"value\")));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            userInput \u003d userInput.replaceAll(\"\\\\s*(?\u003ckey\u003e-[\\\\w]+)\\\\s+(?\u003cvalue\u003e[\\\\w]+[\\\\s|\\\\w/]*)\\\\s*$\", \"\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            optionMatcher \u003d optionPattern.matcher(userInput);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return optionList;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static String stripOptions(String input) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return input.replaceAll(\"\\\\s*(?\u003ckey\u003e-[\\\\w]+)\\\\s+(?\u003cvalue\u003e[\\\\w]+[\\\\s|\\\\w/]*)\\\\s*\", \"\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Parses the user/file input as command. It returns a command that is not yet executed. It also needs to"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * get a UI from Duke to display the messages."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param commandString the user/file input that is to be parsed to a command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return the parse result, which is a command ready to be executed"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static Command parseCommand(String commandString) throws CommandParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return parseCommandOfType(commandString, inputType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static Command parseCommand(String commandString, InputType userInputType) throws CommandParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return parseCommandOfType(commandString, userInputType);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private static Command parseCommandOfType(String commandString, InputType userInputType)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limryan"
        },
        "content": "            throws CommandParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (!isCommandFormat(commandString)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(\"Command is in wrong format\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        ArrayList\u003cOption\u003e optionList \u003d parseOptions(commandString);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        String strippedOptionsCommandString \u003d stripOptions(commandString);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (userInputType \u003d\u003d InputType.TASK) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            return TaskCommandParseHelper.parseTaskCommand(strippedOptionsCommandString, optionList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } else if (userInputType \u003d\u003d InputType.EMAIL) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            return parseEmailCommand(strippedOptionsCommandString, optionList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(\"Unaccepted prefix. Prefix must be either task or email. \");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Parse email command and return command to be executed."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @param input user input that starts with \"email\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @param optionList option list of the command"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @return command to be executed or Invalid Command"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public static Command parseEmailCommand(String input, ArrayList\u003cOption\u003e optionList) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return EmailCommandParseHelper.parseEmailCommand(input, optionList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (CommandParseException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(e.getMessage());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lee761"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Extracts tags from the option list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param optionList the list of options where the tags are extracted"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return the ArrayList of strings"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static ArrayList\u003cString\u003e extractTags(ArrayList\u003cOption\u003e optionList) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        ArrayList\u003cString\u003e tagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (Option option : optionList) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (option.getKey().equals(\"tag\")) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                tagList.add(option.getValue().strip());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return tagList;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Extracts time string from the option list."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param optionList the list of options where the time string is extracted"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return the time string"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @throws CommandParseException if time option appears more than once"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static String extractTime(ArrayList\u003cOption\u003e optionList) throws CommandParseException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String time \u003d \"\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (Option option : optionList) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (option.getKey().equals(\"time\")) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                if (\"\".equals(time)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    time \u003d option.getValue();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    throw new CommandParseException(\"Each task can have only one time option\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Pre-checks whether the number is too large to be parsed by integer. Maximum of 5 digits is allowed."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param numberString string of number input"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return whether the number is too large to be parsed by integer"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static boolean isNumberTooLarge(String numberString) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String strippedString \u003d numberString.replaceAll(\"^0+\", \"\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return strippedString.length() \u003e\u003d 6;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Two types of input, prefix will be displayed according to this in the userInput text field."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public enum InputType {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        TASK,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        EMAIL"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * An type of exception dedicated to handling the unexpected user/file input. The message contains more"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * specific information."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static class CommandParseException extends Exception {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        private String msg;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         * Instantiates the exception with a message, which is ready to be displayed by the UI."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         * @param msg the message that is ready to be displayed by UI."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        public CommandParseException(String msg) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            this.msg \u003d msg;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         * Converts the exception ot string by returning its message, so that it can be displayed by the UI."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         * @return the message of the exception"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        public String getMessage() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return msg;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 43,
      "limryan": 12,
      "JokerYan": 172,
      "lee761": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/storage/ResourceHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.common.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import org.json.JSONArray;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import org.json.JSONException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import org.json.JSONObject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class ResourceHelper {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static final String TEST_FILE_NAME \u003d \"test_template.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    //--------------Prepare test data--------------"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static void prepareTestFile() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Path path \u003d StorageHelper.prepareDataPath(\"test_template.txt\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            StorageHelper.saveToFile(path, prepareTestJsonObject().toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (IOException | JSONException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"Prepare test template file failed with exception...\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static JSONObject prepareTestJsonObject() throws IOException, JSONException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        List\u003cString\u003e testDataFilenames \u003d getTestDataFilenames();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        List\u003cString\u003e testEmailFilenames \u003d getTestEmailFilenames();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        JSONObject testJson \u003d new JSONObject();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        JSONArray testDataArray \u003d new JSONArray();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        JSONArray testEmailArray \u003d new JSONArray();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (String testDataFilename : testDataFilenames) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            testDataArray.put(prepareTestDataJsonObject(testDataFilename));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (String testEmailFilename : testEmailFilenames) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            testEmailArray.put(prepareTestEmailJsonObject(testEmailFilename));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        testJson.put(\"test_data\", testDataArray);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        testJson.put(\"test_email\", testEmailArray);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return testJson;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static Path prepareTestDataPath(String filename) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return Path.of(\".\", \"data\", \"test_data\", filename);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static Path prepareTestEmailPath(String filename) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return Path.of(\".\", \"data\", \"test_data\", \"emails\", filename);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static JSONObject prepareTestDataJsonObject(String filename) throws IOException, JSONException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Path path \u003d prepareTestDataPath(filename);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return prepareJsonObjectFromPath(filename, path);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static JSONObject prepareTestEmailJsonObject(String filename) throws IOException, JSONException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Path path \u003d prepareTestEmailPath(filename);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return prepareJsonObjectFromPath(filename, path);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static JSONObject prepareJsonObjectFromPath(String filename, Path path) throws IOException, JSONException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String content \u003d StorageHelper.readFromFile(path);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        JSONObject json \u003d new JSONObject();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        json.put(\"filename\", filename);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        json.put(\"content\", content);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return json;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Get all filenames from the test data file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return a list of filenames"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @author RoflcoptrException from https://stackoverflow.com/questions/5694385/getting-the-filenames-of"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * -all-files-in-a-folder"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static List\u003cString\u003e getTestDataFilenames() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        File folder \u003d new File(Path.of(\".\", \"data\", \"test_data\").toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return getFilenamesFromFolder(folder);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static List\u003cString\u003e getTestEmailFilenames() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        File folder \u003d new File(Path.of(\".\", \"data\", \"test_data\", \"emails\").toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return getFilenamesFromFolder(folder);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static List\u003cString\u003e getFilenamesFromFolder(File folder) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        File[] listOfFiles \u003d folder.listFiles();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        List\u003cString\u003e filenames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (File listOfFile : listOfFiles) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (listOfFile.isFile()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                filenames.add(listOfFile.getName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return filenames;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    //--------------apply test data--------------"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static boolean applyTestData() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            prepareDirectories();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            JSONObject testJson \u003d new JSONObject(readTestContent());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            writeTestDataFiles(testJson.getJSONArray(\"test_data\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            writeTestEmailFiles(testJson.getJSONArray(\"test_email\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showDebug(\"Apply test data successful.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (IOException | JSONException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"Apply test data failed with exception...\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static void prepareDirectories() throws IOException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Files.createDirectories(Path.of(\".\", \"data\", \"test_data\", \"emails\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static void writeTestDataFiles(JSONArray fileArray) throws JSONException, IOException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (int i \u003d 0; i \u003c fileArray.length(); i++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            JSONObject fileJson \u003d fileArray.getJSONObject(i);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Path path \u003d prepareTestDataPath(fileJson.getString(\"filename\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            StorageHelper.saveToFile(path, fileJson.getString(\"content\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static void writeTestEmailFiles(JSONArray fileArray) throws JSONException, IOException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (int i \u003d 0; i \u003c fileArray.length(); i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            JSONObject fileJson \u003d fileArray.getJSONObject(i);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Path path \u003d prepareTestEmailPath(fileJson.getString(\"filename\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            StorageHelper.saveToFile(path, fileJson.getString(\"content\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static String readTestContent() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        InputStream in \u003d ResourceHelper.class.getResourceAsStream(\"/\" + TEST_FILE_NAME);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return StorageHelper.readFromInputStream(in);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JokerYan": 143
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/storage/StorageHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.common.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.nio.file.StandardOpenOption;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " * A helper class for all file io operations."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class StorageHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Saves content to a designated path."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param path    where the content is stored to"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param content the content of the file to be saved"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @throws IOException when error occurs at file io"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static void saveToFile(Path path, String content) throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (!fileExists(path)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            createFileIfNotExist(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Files.writeString(path, content, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Reads content from a designated path."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param path where content is read from"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return the content of the file being read"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @throws IOException when error occurs at file io"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static String readFromFile(Path path) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return Files.readString(path);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static List\u003cString\u003e readLinesFromFile(Path path) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String content \u003d readFromFile(path);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return content.lines().collect(Collectors.toList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Checks whether the file already exists at the given path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param path where the existence of the file is to be checked"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return the existence of the file"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static boolean fileExists(Path path) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return Files.exists(path);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Creates a file at the designated path when the file does not already exist."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param path where the file is to be checked and saved"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static void createFileIfNotExist(Path path) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Files.createFile(path);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showDebug(\"File at \" + path.toString() + \" already exist. File creation abort..\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    + \".\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Prepares the path of a data folder with the given filename."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return the path of the data file"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static Path prepareDataFolderPath() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return Path.of(\".\", \"data\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Prepares the path of a log folder with the given filename."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return the path of the data file"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static Path prepareLogFolderPath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return Path.of(\".\", \"data\", \"logs\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Prepares the path of a data file with the given filename."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param filename the filename of the data file"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return the path of the data file"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static Path prepareDataPath(String filename) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return Path.of(\".\", \"data\", filename);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Prepares the path of a email file with the given filename."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param filename the filename of the email file"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return the path of the email file"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static Path prepareEmailPath(String filename) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return Path.of(\".\", \"data\", \"emails\", filename);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static final String[] directories \u003d {\"emails\", \"logs\"};"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static final String[] dataFilenames \u003d {\"email.txt\", \"keywords.txt\", \"task.txt\", \"user.txt\"};"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static void createDirectories() throws IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (String directory : directories) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Path path \u003d prepareDataPath(directory);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Files.createDirectories(path);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static void createDataFiles() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (String filename : dataFilenames) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Path path \u003d prepareDataPath(filename);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            createFileIfNotExist(path);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static String defaultUserToken \u003d \"OAQABAAAAAACQN9QBRU3jT6bcBQLZNUj7K1yjcIy6vDS0hoXDM6pkuR4CpC7o\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            + \"Ke_6geouyaawHd40IJpGZZqXlYQNZX5O4KKVvdT5i0B6AuEhRRv8Ol0E9rtMC9VRQ6JUNzlJJBIJKNlBSrB_xXLCl1K9\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            + \"_4yAL7BvvE1R68nk-F02jdNrN_Nn5ZS9gz_QqAYPEgvTLwraKjHi0RRFtDxqKMQpdQAjL329xKmAXr68LvGGTg3gOQB\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            + \"kPay4vPSO7-xpLAI6TMccPpWQfsnR-2R664gC9couXZa77kSzOmuB-7nT79oRDF_ho8h7aQDAM-t5OgkPl0cHNG-3k3\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            + \"hWQNyokyR5lhE8y28UuDcwUyTJoV-hhNVTx3wQU8434_0NgZ4tF-G0m4qY8sEhabuvlLSiLMDRlwly_1Y8qKjqMLT\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            + \"FWfOWGtYcmwEeraJqSNAaP31T9N6RtaFye6kOfJQCY-bqGTL5KuQqrIAoPMzRTGQKNpXzhf41JG1_Y2-fNC1LjurA\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            + \"Qh0GirE-tG07xiWkzQ5wk-hrKZ9oBqEjEcoUADb2J6To-iFlK8VbR5Z46_bgvhbpaxdRLhCale9TfQM6YwQR1foF4\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            + \"iNPeXrV5XAwOz6b4ZgMdj5WH0Sq7rX3AgruYS3RJSTGw6s0ZGpZ97eN5KZQvi2ZooMRzZ9r7r7OeTSkh5IjhOQP6O\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            + \"poNfSAJ_rEag4gSgAHQfCCp9Z9YThF1QfYlmkt5OKvoNimJTz47KhYySBwKk6KZ3hT7qHnib4HVDkCbVo3wAWON8Sr\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            + \"9UEMmuKehoLWlgA8lYkhv855EO6rRWhJXPwRrvKpXLK7fZShgvJg1YXn12DIMDOiUsZqe2kqxeCCjhog7eu6GiHSNw\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            + \"ga0ODJE8wUmNQZqMfDb4R8FOFxfiKQxnXlIo0KwK-XzogSqUdL47vea64GIAA\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static void writeDefaultUserToken() throws IOException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Path path \u003d prepareDataPath(\"user.txt\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (readFromFile(path).length() \u003c 1) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            saveToFile(path, defaultUserToken);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Creates all the necessary directories and files in data folder, including the data folder itself."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return whether this operation is successful."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static boolean constructDataDirectory() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            createDirectories();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            createDataFiles();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            writeDefaultUserToken();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"Prepare data directory failed...\" + System.lineSeparator() +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    \"Please transfer the JAR file to a clean and accessible directory and start again. \");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Read content from a file through the input stream."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param in the input stream of the file"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return content of the file"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @author Viacheslav Vedenin from https://stackoverflow.com/questions/309424/how-do-i-read-convert-an-"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * inputstream-into-a-string-in-java"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static String readFromInputStream(InputStream in) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Scanner s \u003d new Scanner(in).useDelimiter(\"\\\\A\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return s.hasNext() ? s.next() : \"\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JokerYan": 178
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/storage/TimestampHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.common.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class TimestampHelper {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static DateTimeFormatter timestampFormatter \u003d DateTimeFormatter.ofPattern(\"uuuu-MM-dd\u0027T\u0027HH:mm:ss\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            + \"\u0027Z\u0027\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Gets a timestamp to be used in file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return timestamp in string"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static String getTimestamp() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return LocalDateTime.now().format(timestampFormatter);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static String formatDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return dateTime.format(timestampFormatter);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return LocalDateTime.now();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Parses a timestamp to LocalDateTime."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param timestamp timestamp stored in file in string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return LocalDateTime parsed from timestamp"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static LocalDateTime parseTimestamp(String timestamp) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return LocalDateTime.parse(timestamp, timestampFormatter);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JokerYan": 37
    }
  },
  {
    "path": "src/main/java/seedu/duke/email/EmailKeywordPairList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.email;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import javafx.util.converter.TimeStringConverter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.storage.TimestampHelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.entity.KeywordPair;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.sql.Time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.sql.Timestamp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class EmailKeywordPairList extends ArrayList\u003cKeywordPair\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private LocalDateTime updatedOn;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public EmailKeywordPairList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        updatedOn \u003d TimestampHelper.getDateTime();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public LocalDateTime getUpdatedOn() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return updatedOn;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void setUpdatedOn(LocalDateTime updatedOn) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.updatedOn \u003d updatedOn;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Sets updatedOn to current time."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void updateTimestamp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.updatedOn \u003d TimestampHelper.getDateTime();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private EmailKeywordPairList copy() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        EmailKeywordPairList newList \u003d new EmailKeywordPairList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (KeywordPair keywordPair : this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            newList.add(keywordPair);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        newList.updateTimestamp();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Checks whether the keyword in the keyword pair already exists."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param keywordPair the keyword pair to be checked"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return the existing keyword pair if exists, otherwise returns null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private KeywordPair checkExists(KeywordPair keywordPair) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (KeywordPair existingPair : this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (keywordPair.getKeyword().equals(existingPair.getKeyword())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                return existingPair;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Adds a keyword pair to a copied list of the existing keyword pair list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param keywordPair to be added"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return the copied keyword pair list after adding"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public EmailKeywordPairList addAndCopy(KeywordPair keywordPair) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        EmailKeywordPairList newList \u003d this.copy();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        KeywordPair existingPair \u003d checkExists(keywordPair);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (existingPair \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            newList.add(keywordPair);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            for (String expression: keywordPair.getExpressions()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                existingPair.addExpression(expression);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JokerYan": 76
    }
  },
  {
    "path": "src/main/java/seedu/duke/email/EmailList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.email;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.parser.CommandParseHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.entity.Email;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "public class EmailList extends ArrayList\u003cEmail\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private SortOrder order \u003d SortOrder.TIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void setOrder(SortOrder order) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.order \u003d order;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        sortByGivenOrder();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Converts the email list to a string of the pre-determined format that is ready to be displayed by the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * UI."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @return list of emails in formatted String."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        if (this.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            return \"There is nothing in your email list.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        String listOfEmails \u003d \"This is your list of emails \" + \"(total of \" + this.size() + \"): \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        for (Email email : this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            listOfEmails +\u003d System.lineSeparator() + (++index) + \". \" + email.toGuiString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return listOfEmails;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public String toString(ArrayList\u003cInteger\u003e indexes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (this.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return \"There is nothing in your email list.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (indexes.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return \"There is nothing to be shown.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            String listOfEmails \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            for (int i \u003d 0; i \u003c indexes.size(); i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                listOfEmails +\u003d indexes.get(i) + this.get(indexes.get(i)).toGuiString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return listOfEmails;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return \"Some index provided is out of bounds.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Show the email in browser."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @param index of the email to be shown in the email list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @return a string to inform the user that the particular email is being shown in browser."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @throws CommandParseHelper.CommandParseException thrown when index parsing failed or out of range"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @throws IOException                              if fails to load the filepath or open the browser."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public String[] show(int index) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        Email email \u003d this.get(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String emailContent \u003d email.highlightOnTag();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String responseMsg \u003d \"Showing email in browser: \" + email.getSubject();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String[] responseArray \u003d {responseMsg, emailContent};"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return responseArray;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Adds tags to email specified in index."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param index email to add tags to"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param tags  tags to be added to the email"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @return confirmation message to be displayed to user"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public String addTags(int index, ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        Email email \u003d this.get(index);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        ArrayList\u003cString\u003e successList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        for (String tag : tags) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            boolean success \u003d email.addTag(tag);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (success) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                successList.add(tag);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String responseMsg \u003d \"\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (successList.size() \u003e 0) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            responseMsg \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    \"Tags added: \" + tags.toString() + System.lineSeparator() + \"to email: \" + email.getSubject();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return responseMsg;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Generates a list of string of all emails for gui display."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return list of string generated for gui display"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public ArrayList\u003cString\u003e getEmailGuiStringList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        ArrayList\u003cString\u003e emailStringList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (Email email : this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            emailStringList.add(email.toGuiString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return emailStringList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Sort the email list by the order given earlier."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void sortByGivenOrder() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        switch (order) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        case TIME:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            sort(Comparator.comparing(Email::getReceivedDateTime).reversed());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public enum SortOrder {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        TIME,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        RELEVANCE"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 43,
      "limryan": 6,
      "JokerYan": 77
    }
  },
  {
    "path": "src/main/java/seedu/duke/email/EmailTags.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "package seedu.duke.email;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.email.entity.Email;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "public class EmailTags {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private static TagMap tagMap \u003d new TagMap();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    //private static HashMap\u003cString, SubTagMap\u003e tagMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Read emailList to construct a HashMap for tree-structured tagged emails."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @param emailList Duke emailList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @return HashMap of tags with their associated emails."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public static HashMap\u003cString, SubTagMap\u003e updateEmailTagList(EmailList emailList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        for (Email email : emailList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            ArrayList\u003cEmail.Tag\u003e tags \u003d email.getTags();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            for (Email.Tag rootTag : tags) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                String rootTagName \u003d rootTag.getKeywordPair().getKeyword();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                for (Email.Tag subTag : tags) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                    String subTagName \u003d subTag.getKeywordPair().getKeyword();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                    EmailList subEmailList \u003d new EmailList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                    SubTagMap subTagMap \u003d new SubTagMap(subTagName, subEmailList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                    if (tagMap.containsKey(rootTagName)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                        subTagMap \u003d tagMap.get(rootTagName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                        if (subTagMap.containsKey(subTagName)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                            subEmailList \u003d subTagMap.get(subTagName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                    if (!subEmailList.contains(email)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                        subEmailList.add(email);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                        subTagMap.put(subTagName, subEmailList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                        tagMap.put(rootTagName, subTagMap);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return tagMap;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Display the tagged emails given the tagName."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @param tags tag(s) input by users."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @return String of tagged emails."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public static String displayEmailTagList(ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        String responseMsg \u003d \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        if (tags.size() \u003e 2) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            responseMsg \u003d \"[Input format error] Maximum of 2 tag names are allowed for email tag-\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                    + \"searching.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            return responseMsg;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        if (tags.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            String tagName \u003d tags.get(0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            if (!tagMap.containsKey(tagName)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                responseMsg \u003d \"[Input content error] The tag #\" + tagName + \" does not exists.\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                return responseMsg;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            responseMsg +\u003d \"Here are the email(s) tagged with #\" + tagName + \": \" + System.lineSeparator()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    + System.lineSeparator();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            EmailList emailList \u003d tagMap.get(tagName).get(tagName);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            responseMsg +\u003d emailList.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            return responseMsg;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        if (tags.size() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            String tagNameOne \u003d tags.get(0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            String tagNameTwo \u003d tags.get(1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            if (!tagMap.containsKey(tagNameOne) \u0026\u0026 !tagMap.containsKey(tagNameTwo)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                responseMsg \u003d \"[Input content error] The tags #\" + tagNameOne + \" and #\" + tagNameTwo"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                        + \" does not exists.\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                return responseMsg;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            if (!tagMap.containsKey(tagNameOne)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                responseMsg \u003d \"[Input content error] The tag #\" + tagNameOne + \" does not exists. \";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                responseMsg +\u003d \"Here are the email(s) tagged with #\" + tagNameTwo + \": \" + System.lineSeparator()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                        + System.lineSeparator();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                EmailList emailList \u003d tagMap.get(tagNameTwo).get(tagNameTwo);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                responseMsg +\u003d emailList.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                return responseMsg;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            if (!tagMap.containsKey(tagNameTwo)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                responseMsg \u003d \"[Input content error] The tag #\" + tagNameTwo + \" does not exists. \";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                responseMsg +\u003d \"Here are the email(s) tagged with #\" + tagNameOne + \": \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limryan"
        },
        "content": "                        + System.lineSeparator() + System.lineSeparator();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                EmailList emailList \u003d tagMap.get(tagNameOne).get(tagNameOne);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                responseMsg +\u003d emailList.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                return responseMsg;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            if (!tagMap.get(tagNameOne).containsKey(tagNameTwo)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                responseMsg \u003d \"No email is tagged with both #\" + tagNameOne + \" and #\" + tagNameTwo + \": \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                        + System.lineSeparator();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                responseMsg +\u003d System.lineSeparator() + \"Here are the email(s) tagged with #\" + tagNameOne"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limryan"
        },
        "content": "                        + \": \" + System.lineSeparator() + System.lineSeparator();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                EmailList emailListOne \u003d tagMap.get(tagNameOne).get(tagNameOne);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                responseMsg +\u003d emailListOne.toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                responseMsg +\u003d System.lineSeparator() + System.lineSeparator() + \"Here are the email(s) \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                        + \"tagged with #\" + tagNameTwo + \": \" + System.lineSeparator() + System.lineSeparator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                EmailList emailListTwo \u003d tagMap.get(tagNameTwo).get(tagNameTwo);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                responseMsg +\u003d emailListTwo.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                return responseMsg;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            responseMsg \u003d \"Here are the email(s) tagged with both #\" + tagNameOne + \" and #\" + tagNameTwo"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    + \": \" + System.lineSeparator() + System.lineSeparator();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            EmailList emailList \u003d tagMap.get(tagNameOne).get(tagNameTwo);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            responseMsg +\u003d emailList.toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return responseMsg;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * String for displaying root tagged emails."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @param tagName tagName input by user."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @return String for displaying root tagged emails."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public String displayRootEmailTag(String tagName) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String responseMsg \u003d \"Here are the email(s) tagged with #\" + tagName + \": \" + System.lineSeparator()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + System.lineSeparator();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        SubTagMap subTagMap \u003d tagMap.get(tagName);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        for (HashMap.Entry\u003cString, EmailList\u003e entry : subTagMap.entrySet()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            String subTagName \u003d entry.getKey();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            EmailList emailList \u003d entry.getValue();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            if (subTagName.equals(tagName)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            responseMsg +\u003d subTagName + System.lineSeparator() + System.lineSeparator() + \": \" + emailList.toString()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    + \"\" + System.lineSeparator() + System.lineSeparator();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return responseMsg;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public static class SubTagMap extends HashMap\u003cString, EmailList\u003e {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        private String subTagName;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        private EmailList subEmailList;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        public SubTagMap(String subTagName, EmailList subEmailList) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            this.subTagName \u003d subTagName;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            this.subEmailList \u003d subEmailList;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public static class TagMap extends HashMap\u003cString, SubTagMap\u003e {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        private String rootTagName;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        private SubTagMap subTagMap;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        public TagMap() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        public TagMap(String rootTagName, SubTagMap subTagMap) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            this.rootTagName \u003d rootTagName;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            this.subTagMap \u003d subTagMap;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 151,
      "limryan": 2,
      "JokerYan": 15
    }
  },
  {
    "path": "src/main/java/seedu/duke/email/command/EmailAddKeywordCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.email.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import org.json.JSONException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.EmailKeywordPairList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.EmailList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.entity.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.parser.EmailContentParseHelper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.storage.EmailKeywordPairStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class EmailAddKeywordCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    EmailKeywordPairList newKeywordPairList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public EmailAddKeywordCommand(EmailKeywordPairList newKeywordPairList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.newKeywordPairList \u003d newKeywordPairList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public boolean execute(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        EmailKeywordPairList oldKeywordPairList \u003d model.getKeywordPairList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        EmailList emailList \u003d model.getEmailList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        removeAllOldKeywords(emailList, oldKeywordPairList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        model.setKeywordPairList(newKeywordPairList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        addAllNewKeywords(emailList, newKeywordPairList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        model.updateGuiEmailList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            EmailKeywordPairStorage.saveKeywordPairList(newKeywordPairList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (JSONException | IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"Keyword pairs save to file fails\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        responseMsg \u003d \"Keyword add successful!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        UI.getInstance().showResponse(responseMsg);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private void removeAllOldKeywords(EmailList emailList, EmailKeywordPairList oldKeywordPairList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (Email email : emailList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            EmailContentParseHelper.clearOldKeywordPairs(email, oldKeywordPairList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private void addAllNewKeywords(EmailList emailList, EmailKeywordPairList newKeywordPairList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (Email email : emailList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            EmailContentParseHelper.allKeywordInEmail(email);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JokerYan": 52
    }
  },
  {
    "path": "src/main/java/seedu/duke/email/command/EmailFetchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.email.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.storage.EmailStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class EmailFetchCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public EmailFetchCommand() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public boolean execute(Model model) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        if (!silent) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            EmailStorage.syncWithServer();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            responseMsg \u003d \"Fetching emails and syncing with local storage...\" + System.lineSeparator()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    + System.lineSeparator();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            responseMsg +\u003d model.getEmailList().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showResponse(responseMsg);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 11,
      "JokerYan": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/email/command/EmailListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.email.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.EmailList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class EmailListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public EmailListCommand() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public boolean execute(Model model) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        if (!silent) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            EmailList emailList \u003d model.getEmailList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                responseMsg +\u003d emailList.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                UI.getInstance().showResponse(responseMsg);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                UI.getInstance().showError(e.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 14,
      "JokerYan": 12
    }
  },
  {
    "path": "src/main/java/seedu/duke/email/command/EmailListKeywordCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "package seedu.duke.email.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.common.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.email.EmailKeywordPairList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.email.entity.KeywordPair;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "public class EmailListKeywordCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public boolean execute(Model model) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        responseMsg \u003d \"Here is your keyword list: \" + System.lineSeparator();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        EmailKeywordPairList keywordPairList \u003d model.getKeywordPairList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        for (KeywordPair keywordPair : keywordPairList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            responseMsg +\u003d i + \". \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            responseMsg +\u003d keywordPair.getKeyword() + System.lineSeparator();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            responseMsg +\u003d \"Expressions: \" + keywordPair.getExpressions() + System.lineSeparator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        UI.getInstance().showResponse(responseMsg);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/email/command/EmailListTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "package seedu.duke.email.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.common.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.email.EmailTags;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "public class EmailListTagCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private ArrayList\u003cString\u003e tags;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public EmailListTagCommand(ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public boolean execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        responseMsg \u003d EmailTags.displayEmailTagList(tags);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        UI.getInstance().showResponse(responseMsg);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 20,
      "JokerYan": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/email/command/EmailShowCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.email.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limryan"
        },
        "content": "import seedu.duke.email.EmailList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class EmailShowCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public EmailShowCommand(int index) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public boolean execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        EmailList emailList \u003d model.getEmailList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String[] parsedMsg \u003d emailList.show(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        responseMsg \u003d parsedMsg[0];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        UI.getInstance().showResponse(parsedMsg[0]);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        UI.getInstance().setEmailContent(parsedMsg[1]);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        UI.getInstance().updateHtml();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 12,
      "limryan": 1,
      "JokerYan": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/email/command/EmailTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "package seedu.duke.email.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.common.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.email.EmailList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limryan"
        },
        "content": " * Command to add tags to emails."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "public class EmailTagCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private ArrayList\u003cString\u003e tags;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Instantiates attributes for command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param index specific email which tags should be added to"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param tags  tags to be added to the email"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public EmailTagCommand(int index, ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public boolean execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        EmailList emailList \u003d model.getEmailList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        responseMsg \u003d emailList.addTags(index, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        UI.getInstance().showResponse(responseMsg);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 19,
      "limryan": 8,
      "JokerYan": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/email/entity/Email.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.email.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import org.json.JSONArray;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import org.json.JSONException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import org.json.JSONObject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.storage.TimestampHelper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.parser.EmailFormatParseHelper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.math.BigInteger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.security.MessageDigest;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.security.NoSuchAlgorithmException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    protected ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private String subject;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private EmailFormatParseHelper.Sender sender;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private LocalDateTime receivedDateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private LocalDateTime updatedOn;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private String body;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private String rawJson;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public Email(String subject) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Detailed constructor of Email class with more parameters."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param subject          subject of the email"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param sender           the sender of the email"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param receivedDateTime the date and time when the email is received"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param body             the body of the email"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param rawJson          the raw json of the email when retrieved from the Outlook server"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public Email(String subject, EmailFormatParseHelper.Sender sender, LocalDateTime receivedDateTime, String body,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                 String rawJson) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.sender \u003d sender;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.receivedDateTime \u003d receivedDateTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.body \u003d body;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.rawJson \u003d rawJson;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Alternative constructor for Email, used with the information retrieved from the index file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param subject          subject of the"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param sender           the sender of the email"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param receivedDateTime the date and time when the email is received"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param updatedOn        the time when the email keywords are last updated"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param tags             list of tags of the email"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public Email(String subject, EmailFormatParseHelper.Sender sender, LocalDateTime receivedDateTime,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                 LocalDateTime updatedOn, ArrayList\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.sender \u003d sender;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.receivedDateTime \u003d receivedDateTime;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.updatedOn \u003d updatedOn;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Get title of this email."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @return title of this email."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public String getSubject() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return this.subject;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public LocalDateTime getReceivedDateTime() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return this.receivedDateTime;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public ArrayList\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return this.tags;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Sets the updatedOn to current time."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void updateTimestamp() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        updatedOn \u003d TimestampHelper.getDateTime();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public LocalDateTime getUpdatedOn() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return updatedOn;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void setUpdatedOn(LocalDateTime updatedOn) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.updatedOn \u003d updatedOn;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Add tag from string if not exist."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param keyword keyword of the tag"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public boolean addTag(String keyword) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (tag.getKeywordPair().getKeyword().toUpperCase().equals(keyword.toUpperCase())) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                UI.getInstance().showError(\"Tag \\\u0027\" + keyword + \"\\\u0027 already exists.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.tags.add(new Tag(keyword));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Add tag from keywordPair if not exist."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param keywordPair keywordPair of the tag"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param relevance   relevance of the tag"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void addTag(KeywordPair keywordPair, int relevance) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (tag.getKeywordPair().getKeyword().equals(keywordPair.getKeyword())) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                UI.getInstance().showError(\"Tag already exists.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.tags.add(new Tag(keywordPair, relevance));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Add tag to tag list if keyword not exist."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param newTag the new tag to be added to the list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void addTag(Tag newTag) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (tag.getKeywordPair().getKeyword().equals(newTag.getKeywordPair().getKeyword())) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                UI.getInstance().showError(\"Tag already exists.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.tags.add(newTag);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Removes the tag with the given keyword in the keyword pair."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param keyword contained by the deleted tag"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void removeTag(String keyword) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (tag.getKeywordPair().getKeyword().equals(keyword)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                this.tags.remove(tag);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Highlights the email with all the tags. Also, longer expression will have a higher priority to be"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * colored currently."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return email body after the coloring"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public String highlightOnTag() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        ArrayList\u003cString\u003e expressions \u003d getAllExpressions();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String output \u003d toWebViewString();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        expressions.sort((ex1, ex2) -\u003e ex1.length() \u003e\u003d ex2.length() ? -1 : 1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        output \u003d addHighlightToExpressions(output, expressions);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private String toWebViewString() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        output +\u003d \"\u003ch3\u003e\" + this.subject + \"\u003c/h3\u003e\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        output +\u003d \"\u003ch5 style\u003d\\\"color:gray\\\"\u003e\" + this.sender.toWebViewString() + \"\u003c/h5\u003e\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        output +\u003d \"\u003ch5 style\u003d\\\"color:gray\\\"\u003e\" + this.getReceivedDateTime() + \"\u003c/h5\u003e\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        output +\u003d bodyWithoutAttachmentImage();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private String bodyWithoutAttachmentImage() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        //String newBody \u003d body.replaceAll(\"(width\u003d\\\"\\\\d+\\\" height\u003d\\\"\\\\d+\\\")|(width:[\\\\d.]+\\\\w*;\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        //                + \"\\\\s*height:[\\\\d.]+)\","
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String newBody \u003d body.replaceAll(\"\u003cimg\","
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                \"\u003cimg style\u003d\\\"display: none;\\\"\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        System.out.println(newBody);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return newBody;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private ArrayList\u003cString\u003e getAllExpressions() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        ArrayList\u003cString\u003e expressions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (Tag tag : this.tags) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (tag.getKeywordPair().getKeyword().equals(\"Spam\")) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            for (String expression : tag.getKeywordPair().getExpressions()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                expressions.add(expression);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return expressions;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private String addHighlightToExpressions(String emailContent, ArrayList\u003cString\u003e expressions) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String content \u003d emailContent;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (String expression : expressions) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Pattern colorPattern \u003d Pattern.compile(\"(^|\\\\W)(?!\u003cmark style\u003d\\\"color:black;\""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                            + \"background-color:yellow\\\"\u003e)(\" + expression + \")(?!\u003c/mark\u003e)(\\\\W|$)\","
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    Pattern.CASE_INSENSITIVE);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Matcher colorMatcher \u003d colorPattern.matcher(content);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            while (colorMatcher.find()) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                content \u003d colorMatcher.replaceFirst(\"$1\u003cmark style\u003d\\\"color:black;background-color:yellow\\\"\u003e\""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                        + expression + \"\u003c/mark\u003e$3\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                colorMatcher \u003d colorPattern.matcher(content);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //content \u003d colorMatcher.replaceAll(\"$1\u003cmark style\u003d\\\"color:black;background-color:yellow\\\"\u003e\""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //        + expression + \"\u003c/mark\u003e$3\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public String getRawJson() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return this.rawJson;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public String getSenderString() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return this.sender.toString();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public String toFilename() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String filename \u003d shaHash(this.subject) + \"-\" + this.getDateTimePlainString() + \".htm\";"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return filename;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Formats the email object to a json object to be saved to index file."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return a json object containing all the parsed information of the email object"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public JSONObject toIndexJson() throws JSONException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        JSONObject indexJson \u003d new JSONObject();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        indexJson.put(\"subject\", this.subject);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        indexJson.put(\"sender\", this.sender.toString());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        indexJson.put(\"receivedDateTime\", this.getDateTimeString());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        indexJson.put(\"updatedOn\", TimestampHelper.formatDateTime(this.updatedOn));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        JSONArray tagArray \u003d prepareTagJsonArray();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        indexJson.put(\"tags\", tagArray);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return indexJson;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private JSONArray prepareTagJsonArray() throws JSONException {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        JSONArray tagArray \u003d new JSONArray();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (Tag tag : this.tags) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            tagArray.put(tag.toJsonObject());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return tagArray;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private String getDateTimeString() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return EmailFormatParseHelper.formatEmailDateTime(receivedDateTime);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private String getDateTimePlainString() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return EmailFormatParseHelper.formatEmailDateTimePlain(receivedDateTime);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Helper function for the email to be printed in command line."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return a string capturing the email info"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public String toCliString() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "limryan"
        },
        "content": "        String output \u003d this.subject + System.lineSeparator() + \"\\t\" + \"From: \" + this.sender.toString()"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "limryan"
        },
        "content": "                + System.lineSeparator() + \"\\tReceivedDateTime: \" + getDateTimeString()"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "limryan"
        },
        "content": "                + System.lineSeparator() + \"\\t\" + \"Body: \" + body.substring(0, 30) + \"...\""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "limryan"
        },
        "content": "                + System.lineSeparator();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public String getBody() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return body;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "limryan"
        },
        "content": "    public String getShaHash() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "limryan"
        },
        "content": "        return shaHash(this.subject);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private String shaHash(String input) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            MessageDigest md \u003d MessageDigest.getInstance(\"SHA-256\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            // Change this to UTF-16 if needed"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //md.update(input.getBytes(StandardCharsets.UTF_16));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            md.update(input.getBytes());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            byte[] digest \u003d md.digest();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            String hex \u003d String.format(\"%064x\", new BigInteger(1, digest));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return hex;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (NoSuchAlgorithmException e) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"Hashing email name error\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Converts information about email to string that will be displayed to user."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @return string that will be displayed in GUI"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public String toGuiString() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        String guiStr \u003d this.subject;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        if (tags.size() \u003e 0) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            guiStr +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            for (Tag tag : tags) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                guiStr +\u003d \" #\" + tag.getKeywordPair().getKeyword();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return guiStr;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Tag of an email with both a keyword pair and a score indicating its relevance."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static class Tag {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "limryan"
        },
        "content": "        private static final int INFINITY \u003d 0x3f3f3f;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        private KeywordPair keywordPair;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        private int relevance \u003d INFINITY;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        public Tag(KeywordPair keywordPair, int relevance) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            this.keywordPair \u003d keywordPair;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            this.relevance \u003d relevance;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        public Tag(String keyword) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            this.keywordPair \u003d new KeywordPair(keyword);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         * Initialize from a json object in the same structure as the json output."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         *"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         * @param json json object containing the information of this tag, in the same format as the json"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         *             output from toJsonObject()"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        public Tag(JSONObject json) throws JSONException {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            String keyword \u003d json.getString(\"keyword\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            JSONArray expressions \u003d json.getJSONArray(\"expressions\");"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            ArrayList\u003cString\u003e expressionList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            for (int i \u003d 0; i \u003c expressions.length(); i++) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                expressionList.add(expressions.getString(i));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            int relevance \u003d json.getInt(\"relevance\");"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            this.keywordPair \u003d new KeywordPair(keyword, expressionList);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            this.relevance \u003d relevance;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        public KeywordPair getKeywordPair() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return this.keywordPair;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        public int getRelevance() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return relevance;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        public void setRelevance(int relevance) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            this.relevance \u003d relevance;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         * Converts tag to a json object for storage purpose."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         *"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         * @return formatting result in JSONObject"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        public JSONObject toJsonObject() throws JSONException {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            JSONObject json \u003d new JSONObject();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            json.put(\"keyword\", this.keywordPair.getKeyword());"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            JSONArray expressionArray \u003d new JSONArray();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            for (String expression : this.keywordPair.getExpressions()) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                expressionArray.put(expression);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            json.put(\"expressions\", expressionArray);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            json.put(\"relevance\", this.relevance);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return json;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 24,
      "limryan": 15,
      "JokerYan": 348
    }
  },
  {
    "path": "src/main/java/seedu/duke/email/entity/KeywordPair.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.email.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import org.json.JSONArray;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import org.json.JSONException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import org.json.JSONObject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " * A pair of keyword with its possible expressions."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class KeywordPair {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private ArrayList\u003cString\u003e expressions;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Constructs a keyword pair."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param keyword     the value of keyword looked for"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param expressions the possible expressions of that keyword"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public KeywordPair(String keyword, ArrayList\u003cString\u003e expressions) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.expressions \u003d expressions;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Constructs a keyword pair with only keyword. Expression will be the same as the keyword by"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * default."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param keyword the value of keyword looked for"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public KeywordPair(String keyword) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.expressions \u003d new ArrayList\u003c\u003e(List.of(keyword));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Construct kewordPair from a json object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param json a json object containing full information of a keyword pair"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public KeywordPair(JSONObject json) throws JSONException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        keyword \u003d json.getString(\"keyword\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        expressions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        JSONArray expressionArray \u003d json.getJSONArray(\"expressions\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (int i \u003d 0; i \u003c expressionArray.length(); i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            expressions.add(expressionArray.getString(i));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public String getKeyword() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return this.keyword;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public ArrayList\u003cString\u003e getExpressions() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return this.expressions;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Adds the expression to the expression list if not already exists."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param newExpression the new expression to be added"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void addExpression(String newExpression) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (String expression: expressions) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (expression.equals(newExpression)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.expressions.add(newExpression);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Converts to JSON Object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limryan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @return JSON Object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @throws JSONException when unable to convert"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public JSONObject toJsonObject() throws JSONException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        JSONObject json \u003d new JSONObject();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        json.put(\"keyword\", this.keyword);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        JSONArray expressionArray \u003d new JSONArray();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (String expression : expressions) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            expressionArray.put(expression);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        json.put(\"expressions\", expressionArray);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return json;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limryan": 6,
      "JokerYan": 85
    }
  },
  {
    "path": "src/main/java/seedu/duke/email/parser/EmailCommandParseHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.email.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.parser.CommandParseHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.command.FlipCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.command.HelpCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.command.InvalidCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.EmailKeywordPairList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.command.EmailAddKeywordCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.command.EmailFetchCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.command.EmailListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.email.command.EmailListKeywordCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.command.EmailListTagCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.command.EmailShowCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.command.EmailTagCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.entity.KeywordPair;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import static seedu.duke.common.parser.CommandParseHelper.isNumberTooLarge;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class EmailCommandParseHelper {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static UI ui \u003d UI.getInstance();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Parses the specific part of a user/file input that is relevant to email. A successful parsing always"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * returns an email-relevant Command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param rawInput user/file input ready to be parsed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return an email-relevant Command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @throws EmailParseException an exception when the parsing is failed, probably due to the wrong format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *                             of input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static Command parseEmailCommand(String rawInput, ArrayList\u003cCommand.Option\u003e optionList)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            throws EmailParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        String strippedPrefixInput \u003d stripPrefix(rawInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        if (strippedPrefixInput \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(\"Command must not be empty. \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        String emailCommand \u003d extractCommandWord(strippedPrefixInput);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return parseByCommandType(optionList, strippedPrefixInput, emailCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private static Command parseByCommandType(ArrayList\u003cCommand.Option\u003e optionList, String strippedPrefixInput,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                              String emailCommand) throws EmailParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        switch (strippedPrefixInput) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        case \"flip\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new FlipCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        case \"fetch\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new EmailFetchCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        case \"listKeyword\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            return new EmailListKeywordCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lee761"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        switch (emailCommand) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            return parseEmailListCommand(optionList, strippedPrefixInput);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        case \"show\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            return parseShowEmailCommand(strippedPrefixInput);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        case \"update\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            return parseEmailTagCommand(optionList, strippedPrefixInput);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        case \"addKeyword\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            return parseEmailAddKeywordCommand(optionList, strippedPrefixInput);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            throw new EmailParseException(\"Invalid command word. Please enter \\\u0027help\\\u0027 for more information\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static String extractCommandWord(String input) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return input.split(\" \")[0];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static String stripPrefix(String rawInput) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (!rawInput.contains(\"email \")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return rawInput.split(\"email \", 2)[1].strip();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private static Command parseEmailListCommand(ArrayList\u003cCommand.Option\u003e optionList, String input) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        if (optionList.size() \u003d\u003d 0 \u0026\u0026 \"list\".equals(input)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            return new EmailListCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d CommandParseHelper.extractTags(optionList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        if (!tagsNotEmpty(tags)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(\"Please enter a tag name after \\\u0027-tag\\\u0027 option\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return new EmailListTagCommand(tags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static Command parseShowEmailCommand(String input) throws EmailParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Pattern showCommandPattern \u003d Pattern.compile(\"^show\\\\s+(?\u003cindex\u003e\\\\d+)\\\\s*$\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Matcher showCommandMatcher \u003d showCommandPattern.matcher(input);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (!showCommandMatcher.matches()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(\"Please enter a valid index (positive integer equal or less than the \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    + \"number of emails) of task after \\\u0027show\\\u0027\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            int index \u003d parseEmailIndex(showCommandMatcher.group(\"index\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new EmailShowCommand(index);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (EmailParseException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            throw new EmailParseException(e.getMessage());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static Command parseEmailTagCommand(ArrayList\u003cCommand.Option\u003e optionList,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                                String input) throws EmailParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Pattern emailTagCommandPattern \u003d Pattern.compile(\"^update\\\\s+(?\u003cindex\u003e\\\\d+)\\\\s*$\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Matcher emailTagCommandMatcher \u003d emailTagCommandPattern.matcher(input);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (!emailTagCommandMatcher.matches()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(\"Please enter a valid email index (positive integer equal or lss \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    + \"than the number of emails) after \\\u0027update\\\u0027\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d CommandParseHelper.extractTags(optionList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (!tagsNotEmpty(tags)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(\"Please enter a tag name after \\\u0027-tag\\\u0027 option\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            int index \u003d parseEmailIndex(emailTagCommandMatcher.group(\"index\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new EmailTagCommand(index, tags);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (EmailParseException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            throw new EmailParseException(e.getMessage());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static Command parseEmailAddKeywordCommand(ArrayList\u003cCommand.Option\u003e optionList,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                                       String input) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Pattern emailAddKeywordCommandPattern \u003d Pattern.compile(\"^addKeyword\\\\s+(?\u003ckeyword\u003e\\\\w+)\\\\s*$\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Matcher emailAddKeywordCommandMatcher \u003d emailAddKeywordCommandPattern.matcher(input);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (!emailAddKeywordCommandMatcher.matches()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(\"Please enter a keyword after \\\u0027addKeyword\\\u0027\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String keyword \u003d emailAddKeywordCommandMatcher.group(\"keyword\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        ArrayList\u003cString\u003e expressionList \u003d extractExpressions(optionList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (expressionList.size() \u003c 1) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(\"Please enter at least one expression option with \\\u0027-exp \""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    + \"EXPRESSION\\\u0027 format\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        KeywordPair addedKeywordPair \u003d new KeywordPair(keyword, expressionList);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        EmailKeywordPairList newKeywordPairList \u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                Model.getInstance().getKeywordPairList().addAndCopy(addedKeywordPair);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return new EmailAddKeywordCommand(newKeywordPairList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static boolean tagsNotEmpty(ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (tags.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static int parseEmailIndex(String input) throws EmailParseException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (isNumberTooLarge(input)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            throw new EmailParseException(\"Invalid index. Index of range 1 ~ 99999 is accepted.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        int index \u003d Integer.parseInt(input) - 1;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d Model.getInstance().getEmailListLength()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            throw new EmailParseException(\"Index \" + (index + 1) + \" out of bounds of 1 to \""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    + Model.getInstance().getEmailListLength());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static ArrayList\u003cString\u003e extractExpressions(ArrayList\u003cCommand.Option\u003e optionList) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        ArrayList\u003cString\u003e expressionList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (Command.Option option : optionList) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (option.getKey().equals(\"exp\")) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                expressionList.add(option.getValue());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return expressionList;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static class EmailParseException extends CommandParseHelper.CommandParseException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         * Instantiates the exception with a message, which is ready to be displayed by the UI."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         * @param msg the message that is ready to be displayed by UI."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        public EmailParseException(String msg) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            super(msg);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 28,
      "JokerYan": 165,
      "lee761": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/email/parser/EmailContentParseHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.email.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import org.json.JSONException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.EmailKeywordPairList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.entity.Email;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.entity.KeywordPair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.storage.EmailKeywordPairStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limryan"
        },
        "content": " * A parser to process the content of emails to support automatic management of email."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class EmailContentParseHelper {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static int KEYWORD_SUBJECT_WEIGHTAGE \u003d 5;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static int KEYWORD_SENDER_WEIGHTAGE \u003d 3;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static int KEYWORD_BODY_WEIGHTAGE \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static int INFINITY \u003d 0x3f3f3f;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static int FUZZY_LIMIT \u003d 3;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Finds all keywords in email."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param email Email to be scanned for keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static void allKeywordInEmail(Email email) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        EmailKeywordPairList keywordList \u003d Model.getInstance().getKeywordPairList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        //skip if the email update is more recent than the keyword update"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (email.getUpdatedOn() !\u003d null \u0026\u0026 email.getUpdatedOn().compareTo(keywordList.getUpdatedOn()) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (KeywordPair keywordPair : keywordList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            int relevance \u003d keywordInEmail(email, keywordPair);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (relevance \u003e 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                UI.getInstance().showDebug(keywordPair.getKeyword() + \": \" + keywordInEmail(email, keywordPair)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limryan"
        },
        "content": "                        + \" \u003d\u003e \" + email.getSubject());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                email.addTag(keywordPair, relevance);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        email.updateTimestamp();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Calculates the keyword relevance score within an email based on its position and number of occurrence."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param email       the email where the keyword pair is to be looked for"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param keywordPair the target keyword pair"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return the occurrence score"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static int keywordInEmail(Email email, KeywordPair keywordPair) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        int totalScore \u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        totalScore +\u003d keywordInSubject(email, keywordPair) * KEYWORD_SUBJECT_WEIGHTAGE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        totalScore +\u003d keywordInSender(email, keywordPair) * KEYWORD_SENDER_WEIGHTAGE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        totalScore +\u003d keywordInBody(email, keywordPair) * KEYWORD_BODY_WEIGHTAGE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return totalScore;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static int keywordInSubject(Email email, KeywordPair keywordPair) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return keywordInString(email.getSubject(), keywordPair);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static int keywordInSender(Email email, KeywordPair keywordPair) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return keywordInString(email.getSenderString(), keywordPair);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static int keywordInBody(Email email, KeywordPair keywordPair) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return keywordInString(email.getBody(), keywordPair);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Looks for a keyword within a given string."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param input       the string where the keyword is looked for"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param keywordPair the target keyword looking for"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return whether the keyword pair is found in the string"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public static int keywordInString(String input, KeywordPair keywordPair) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        int occurrence \u003d 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (int i \u003d 0; i \u003c keywordPair.getExpressions().size(); i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            String expression \u003d keywordPair.getExpressions().get(i);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            String processedInput \u003d input;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Pattern expressionPattern \u003d Pattern.compile(\"(^|\\\\W)\" + expression + \"(\\\\W|$)\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    Pattern.CASE_INSENSITIVE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Matcher expressionMatcher \u003d expressionPattern.matcher(processedInput);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            while (expressionMatcher.find()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                occurrence++;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                processedInput \u003d expressionMatcher.replaceFirst(\" \");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                expressionMatcher \u003d expressionPattern.matcher(processedInput);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return occurrence;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Keyword List for searching."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static EmailKeywordPairList initKeywordList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (EmailKeywordPairStorage.keywordPairFileExists()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                return EmailKeywordPairStorage.readKeywordPairList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            } catch (IOException | JSONException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                UI.getInstance().showDebug(\"Keyword list file is empty or in wrong format. Default used...\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        EmailKeywordPairList keywordList \u003d getDefaultKeywordPairList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            EmailKeywordPairStorage.saveKeywordPairList(keywordList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (JSONException | IOException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"Keyword Pair List Save Failed...\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return keywordList;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static EmailKeywordPairList getDefaultKeywordPairList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        EmailKeywordPairList keywordList \u003d new EmailKeywordPairList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        keywordList.add(new KeywordPair(\"CS2113T\", new ArrayList\u003c\u003e(List.of("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                \"CS2113T\", \"CS2113\", \"TAN KIAN WEI, JASON\", \"Leow Wei Xiang\", \"Akshay Narayan\", \"Akshay\"))));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        keywordList.add(new KeywordPair(\"CS2101\", new ArrayList\u003c\u003e(List.of("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                \"CS2101\", \"Anita Toh Ann Lee\"))));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        keywordList.add(new KeywordPair(\"CG2271\", new ArrayList\u003c\u003e(List.of("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                \"CG2271\", \"Djordje Jevdjic\"))));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        keywordList.add(new KeywordPair(\"CS2102\", new ArrayList\u003c\u003e(List.of("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                \"CS2102\", \"Adi Yoga Sidi Prabawa\"))));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        keywordList.add(new KeywordPair(\"CS3230\", new ArrayList\u003c\u003e(List.of("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                \"CS3230\", \"Divesh Aggarwal\"))));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        keywordList.add(new KeywordPair(\"CEG Admin\", new ArrayList\u003c\u003e(List.of("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                \"Low Mun Bak\"))));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        keywordList.add(new KeywordPair(\"SEP\", new ArrayList\u003c\u003e(List.of("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                \"SEP\", \"Student Exchange Programme\"))));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        keywordList.add(new KeywordPair(\"Tutorial\", new ArrayList\u003c\u003e(List.of("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                \"Tutorial\"))));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        keywordList.add(new KeywordPair(\"Assignment\", new ArrayList\u003c\u003e(List.of("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                \"Assignment\"))));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        keywordList.add(new KeywordPair(\"Spam\", new ArrayList\u003c\u003e(List.of("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                \"UHC Wellness\", \"luminus-do-not-reply\", \"NUS Libraries\"))));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return keywordList;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Removes all the old keywords in an email."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param email the email where the keywords are removed"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param keywordPairList the list of old keyword pairs to be removed"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static void clearOldKeywordPairs(Email email, EmailKeywordPairList keywordPairList) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (KeywordPair keywordPair : keywordPairList) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            email.removeTag(keywordPair.getKeyword());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Computes the edit distance between first and second, which is the number of steps required to transform"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * first to second if only addition, deletion, update of a single character is allowed for each step."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param w1 first word"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param w2 second word"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @return edit distance between first and second"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static int editDistance(String w1, String w2) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (w1.length() \u003d\u003d 0 || w2.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return w1.length() + w2.length();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String first \u003d w1.toLowerCase();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String second \u003d w2.toLowerCase();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        //Prepare a distance array for DP"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limryan"
        },
        "content": "        int[][] dist \u003d new int[first.length() + 1][second.length() + 1];"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        //Initialize distance array with all zeros"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (int[] row : dist) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Arrays.fill(row, 0);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        //Initialize starting positions for DP"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limryan"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d first.length(); i++) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            dist[i][0] \u003d i;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limryan"
        },
        "content": "        for (int j \u003d 0; j \u003c\u003d second.length(); j++) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            dist[0][j] \u003d j;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        //Start DP"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limryan"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d first.length(); i++) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limryan"
        },
        "content": "            for (int j \u003d 1; j \u003c\u003d second.length(); j++) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                int min \u003d INFINITY;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limryan"
        },
        "content": "                min \u003d Math.min(min, dist[i - 1][j - 1] + (first.charAt(i - 1) \u003d\u003d second.charAt(j - 1) ? 0 : 1));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                min \u003d Math.min(min, dist[i - 1][j] + 1);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                min \u003d Math.min(min, dist[i][j - 1] + 1);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                dist[i][j] \u003d min;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limryan"
        },
        "content": "        return dist[first.length()][second.length()];"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Searches a keyword in input string with some tolerance of inaccuracy."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param input  input string where the keyword is searched"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param target the target keyword to be searched"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return a relevance score related to both occurrence and relevance"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static int fuzzySearchInString(String input, String target) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        int relevance \u003d 0;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String[] inputWords \u003d input.split(\"\\\\W\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String[] targetWords \u003d target.split(\"\\\\W\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (String inputWord : inputWords) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            for (String targetWord : targetWords) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                if (inputWord.length() \u003d\u003d 0 || targetWord.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                int distance \u003d editDistance(inputWord, targetWord);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                if (distance \u003c\u003d FUZZY_LIMIT) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    relevance +\u003d FUZZY_LIMIT - distance + 1;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        UI.getInstance().showError(relevance + \" : \" + input + \" \u003c\u003e \" + target);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return relevance;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 1,
      "limryan": 19,
      "JokerYan": 206
    }
  },
  {
    "path": "src/main/java/seedu/duke/email/parser/EmailFormatParseHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.email.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import org.json.JSONArray;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import org.json.JSONException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import org.json.JSONObject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.storage.TimestampHelper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.EmailList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.entity.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class EmailFormatParseHelper {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    protected static DateTimeFormatter format \u003d DateTimeFormatter"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            .ofPattern(\"uuuu-MM-dd\u0027T\u0027HH:mm:ss\u0027Z\u0027\", Locale.ENGLISH)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    //plain format is for filename without special characters"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    protected static DateTimeFormatter formatPlain \u003d DateTimeFormatter"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            .ofPattern(\"uuuu-MM-dd-HHmmss\", Locale.ENGLISH)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Parses the response of email fetching from Outlook server."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param response response from Outlook server"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return a list of emails containing all the parsed email from the response"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @throws EmailParsingException the exception of the failure of the response parsing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static EmailList parseFetchResponse(String response) throws EmailParsingException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        //UI.getInstance().showDebug(response);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        EmailList emailList \u003d new EmailList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            JSONObject responseJson \u003d new JSONObject(response);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            JSONArray emailJsonArray \u003d responseJson.getJSONArray(\"value\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            for (int i \u003d 0; i \u003c emailJsonArray.length(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                JSONObject emailJson \u003d emailJsonArray.getJSONObject(i);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                Email email \u003d parseComponentsToEmail(emailJson);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                emailList.add(email);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (JSONException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            throw new EmailParsingException(\"Email fetch response failed to parse\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return emailList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static Email parseComponentsToEmail(JSONObject emailJson) throws JSONException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String subject \u003d emailJson.getString(\"subject\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Sender from \u003d new Sender(emailJson.getJSONObject(\"from\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        LocalDateTime dateTime \u003d parseEmailDateTime(emailJson.getString(\"receivedDateTime\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String body \u003d emailJson.getJSONObject(\"body\").getString(\"content\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return new Email(subject, from, dateTime, body, emailJson.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Parses an email from a raw json string stored or retrieved from the Outlook server."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param jsonString raw json string of the email to be parsed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return email object as the pars result"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @throws EmailParsingException thrown when raw json passed in is in wrong format"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static Email parseRawJson(String jsonString) throws EmailParsingException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            JSONObject emailJson \u003d new JSONObject(jsonString);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return parseComponentsToEmail(emailJson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (JSONException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            throw new EmailParsingException(\"Email raw json failed to parse\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Parses the email information stored in index file in the format of JSON to produce an email."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param jsonString email index json string loaded from index file"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return email generated from the index json"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @throws EmailParsingException when the format of the index json is incorrect"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static Email parseIndexJson(String jsonString) throws EmailParsingException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            JSONObject indexJson \u003d new JSONObject(jsonString);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            String subject \u003d indexJson.getString(\"subject\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Sender sender \u003d new Sender(indexJson.getString(\"sender\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            LocalDateTime receivedDateTime \u003d parseEmailDateTime(indexJson.getString(\"receivedDateTime\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            LocalDateTime updatedOn \u003d TimestampHelper.parseTimestamp(indexJson.getString(\"updatedOn\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            ArrayList\u003cEmail.Tag\u003e tags \u003d extractTagsFromJson(indexJson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new Email(subject, sender, receivedDateTime, updatedOn, tags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (JSONException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            throw new EmailParsingException(\"Email index json failed to parse\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static ArrayList\u003cEmail.Tag\u003e extractTagsFromJson(JSONObject indexJson) throws JSONException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        JSONArray tagArray \u003d indexJson.getJSONArray(\"tags\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        ArrayList\u003cEmail.Tag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (int i \u003d 0; i \u003c tagArray.length(); i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            JSONObject tagObject \u003d tagArray.getJSONObject(i);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            tags.add(new Email.Tag(tagObject));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Parses the email date time string to a LocalDateTime."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param dateTimeString string of the date time"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return LocalDateTime object to be stored"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static LocalDateTime parseEmailDateTime(String dateTimeString) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return LocalDateTime.parse(dateTimeString, format);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Formats the email date time to a string."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param dateTime LocalDateTime object stored in the Email object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return String of the formatted date time."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static String formatEmailDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return dateTime.format(format);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Formats the email date time to a plain string without any special character for filename."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param dateTime LocalDateTiem object stored in the Email object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return String of plain formatted date time."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static String formatEmailDateTimePlain(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return dateTime.format(formatPlain);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Class of the email sender containing the name and address."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static class Sender {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        private String address;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        public Sender(String name, String address) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         * Constructor of the sender class with the json object containing the information."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         * @param senderInfo json object containing the information"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         * @throws JSONException exception of failure of parsing"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        public Sender(JSONObject senderInfo) throws JSONException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            this.name \u003d senderInfo.getJSONObject(\"emailAddress\").getString(\"name\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            this.address \u003d senderInfo.getJSONObject(\"emailAddress\").getString(\"address\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limryan"
        },
        "content": "         * Constructor of the sender based on the string output of a sender."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         * @param senderString the string of sender toString() output used to parse a sender"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        public Sender(String senderString) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            String name \u003d senderString.split(\"\u003d\u003e\")[0].strip();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            String address \u003d senderString.split(\"\u003d\u003e\")[1].strip();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return name + \" \u003d\u003e \" + address;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         * Formats sender in a user friendly way to be displayed in WebView."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         * @return a user friendly display of sender"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        public String toWebViewString() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return name + \" \u0026#60;\" + address + \"\u0026#62;\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Exception dedicated for failed email parsing."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static class EmailParsingException extends Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        private String msg;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        public EmailParsingException(String msg) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            this.msg \u003d msg;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return this.msg;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 7,
      "limryan": 1,
      "JokerYan": 190
    }
  },
  {
    "path": "src/main/java/seedu/duke/email/storage/EmailKeywordPairStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.email.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import org.json.JSONArray;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import org.json.JSONException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import org.json.JSONObject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.storage.StorageHelper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.storage.TimestampHelper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.EmailKeywordPairList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.entity.KeywordPair;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " * A helper class to save and read keyword pairs to and from local file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class EmailKeywordPairStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static String keywordPairFilename \u003d \"keywords.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Save keyword pair list to local file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param keywordPairList keyword pair list to be saved"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @throws JSONException when error occurs at serializing keyword pair json array"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @throws IOException when error occurs at file io of keyword pair file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static void saveKeywordPairList(EmailKeywordPairList keywordPairList) throws JSONException,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String content \u003d constructKeywordFileJson(keywordPairList).toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Path path \u003d StorageHelper.prepareDataPath(keywordPairFilename);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        StorageHelper.saveToFile(path, content);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * read keyword pair list from local file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return keyword pair list read"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @throws IOException when error occurs at file io of keyword pair file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @throws JSONException when error occurs at parsing keyword pair json array"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static EmailKeywordPairList readKeywordPairList() throws IOException, JSONException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Path path \u003d StorageHelper.prepareDataPath(keywordPairFilename);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String content \u003d StorageHelper.readFromFile(path);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return parseKeywordPairJson(new JSONObject(content));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Checks whether the keyword pair file already exists."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return whether the keyword pair file already exists"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static boolean keywordPairFileExists() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return StorageHelper.fileExists(StorageHelper.prepareDataPath(keywordPairFilename));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static JSONObject constructKeywordFileJson(EmailKeywordPairList keywordPairList) throws JSONException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        JSONObject fileJson \u003d new JSONObject();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        fileJson.put(\"timestamp\", getKeywordPairTimestamp(keywordPairList));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        fileJson.put(\"keywordPairs\", constructKeywordPairJson(keywordPairList));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return fileJson;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static String getKeywordPairTimestamp(EmailKeywordPairList keywordPairList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (keywordPairList.getUpdatedOn() \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return TimestampHelper.getTimestamp();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return TimestampHelper.formatDateTime(keywordPairList.getUpdatedOn());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static JSONArray constructKeywordPairJson(EmailKeywordPairList keywordPairList) throws JSONException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        JSONArray array \u003d new JSONArray();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (KeywordPair keywordPair : keywordPairList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            array.put(keywordPair.toJsonObject());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return array;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static EmailKeywordPairList parseKeywordPairJson(JSONObject fileJson) throws JSONException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        LocalDateTime timestamp \u003d TimestampHelper.parseTimestamp(fileJson.getString(\"timestamp\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        JSONArray array \u003d fileJson.getJSONArray(\"keywordPairs\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        EmailKeywordPairList keywordPairList \u003d new EmailKeywordPairList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (int i \u003d 0; i \u003c array.length(); i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            keywordPairList.add(new KeywordPair(array.getJSONObject(i)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        keywordPairList.setUpdatedOn(timestamp);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return keywordPairList;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JokerYan": 89
    }
  },
  {
    "path": "src/main/java/seedu/duke/email/storage/EmailStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.email.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import org.json.JSONException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limryan"
        },
        "content": "import seedu.duke.common.network.Http;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.storage.StorageHelper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.parser.EmailFormatParseHelper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.EmailList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.entity.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limryan"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limryan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import static seedu.duke.email.parser.EmailContentParseHelper.allKeywordInEmail;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyun99"
        },
        "content": " * Handles loading and saving of emails from local storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyun99"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class EmailStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static String indexFilename \u003d \"email.txt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static String userFilename \u003d \"user.txt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * To implement with code to fetch emails from online server to local storage. May need to sync the"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * current email list with local storage after that by calling syncEmailListWithHtml()."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public static void syncWithServer() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        EmailList serverEmailList \u003d Http.fetchEmail(60);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        EmailList updatedEmailList \u003d combineServerAndLocalEmailList(serverEmailList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Model.getInstance().setEmailList(updatedEmailList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        saveEmails(updatedEmailList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static EmailList combineServerAndLocalEmailList(EmailList serverEmailList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        EmailList modelEmailList \u003d Model.getInstance().getEmailList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (Email serverEmail : serverEmailList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (!emailRepeated(serverEmail)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                allKeywordInEmail(serverEmail);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                modelEmailList.add(serverEmail);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return modelEmailList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static boolean emailRepeated(Email serverEmail) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        boolean exist \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        EmailList modelEmailList \u003d Model.getInstance().getEmailList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (Email localEmail : modelEmailList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (localEmail.getSubject().equals(serverEmail.getSubject())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    \u0026\u0026 serverEmail.getReceivedDateTime().equals(localEmail.getReceivedDateTime())) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                exist \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return exist;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * To save the information for the emailList including subject and tags(not implemented yet) for each"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * email before exiting the app."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @param emailList the emailList to be saved before exiting the app."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public static void saveEmails(EmailList emailList) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            saveEmailListToIndex(emailList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            saveEmailListToFolder(emailList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"Write to output file IO exception!\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (JSONException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"Email index formatting exception!\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static void saveEmailListToFolder(EmailList emailList) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (Email email : emailList) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (email.getBody() !\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                saveEmailToFolder(email);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static void saveEmailToFolder(Email email) throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Path emailPath \u003d StorageHelper.prepareEmailPath(email.toFilename());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        StorageHelper.saveToFile(emailPath, email.getRawJson());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static void saveEmailListToIndex(EmailList emailList) throws IOException, JSONException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String content \u003d prepareEmailListIndexString(emailList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Path indexPath \u003d StorageHelper.prepareDataPath(indexFilename);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        StorageHelper.saveToFile(indexPath, content);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static String prepareEmailListIndexString(EmailList emailList) throws JSONException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (Email email : emailList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            content +\u003d email.toIndexJson().toString() + System.lineSeparator();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Get emailList according to previously saved information about emails from the data/email.txt at the"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * start of the app."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @return EmailList created from data/email.txt."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static EmailList readEmailFromFile(String indexDir) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        EmailList emailList \u003d new EmailList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Path indexPath \u003d StorageHelper.prepareDataPath(assignIndexDirIfNotExist(indexDir));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            List\u003cString\u003e emailStringList \u003d StorageHelper.readLinesFromFile(indexPath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            for (int i \u003d 0; i \u003c emailStringList.size(); i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                readAndAddEmailWithIndexString(emailList, emailStringList.get(i));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showMessage(\"Saved email file successfully loaded...\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"Read save file IO exception\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (EmailFormatParseHelper.EmailParsingException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"Email save file is in wrong format\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return emailList;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static String assignIndexDirIfNotExist(String indexDir) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (\"\".equals(indexDir)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return indexFilename;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return indexDir;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static void readAndAddEmailWithIndexString(EmailList emailList, String input)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            throws EmailFormatParseHelper.EmailParsingException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Email indexEmail \u003d EmailFormatParseHelper.parseIndexJson(input);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String emailFilename \u003d indexEmail.toFilename();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Email fileEmail \u003d readEmailFromFolder(indexEmail, emailFilename);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            emailList.add(fileEmail);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showDebug(\"Email file not found for \" + indexEmail.getSubject());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static Email readEmailFromFolder(Email indexEmail, String emailFilename)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            throws IOException, EmailFormatParseHelper.EmailParsingException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Path emailPath \u003d StorageHelper.prepareEmailPath(emailFilename);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String emailContent \u003d StorageHelper.readFromFile(emailPath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Email fileEmail \u003d parseEmailFromFolder(indexEmail, emailContent);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return fileEmail;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static Email parseEmailFromFolder(Email indexEmail, String emailContent)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            throws EmailFormatParseHelper.EmailParsingException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Email fileEmail \u003d EmailFormatParseHelper.parseRawJson(emailContent);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (Email.Tag tag : indexEmail.getTags()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fileEmail.addTag(tag);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        fileEmail.setUpdatedOn(indexEmail.getUpdatedOn());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return fileEmail;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Saves authorisation token for user account."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limryan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param token Authorisation token"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static void saveRefreshToken(String token) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Path userPath \u003d StorageHelper.prepareDataPath(userFilename);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            StorageHelper.saveToFile(userPath, token);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"Save refresh token failed\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Read token from info file."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limryan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @return refresh token"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static String readRefreshToken() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return readRefreshTokenContent();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"User info file not found\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"Read user info file IO Exception\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static String readRefreshTokenContent() throws IOException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Path userPath \u003d StorageHelper.prepareDataPath(userFilename);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return StorageHelper.readFromFile(userPath);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 38,
      "limryan": 13,
      "JokerYan": 150
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.common.parser.CommandParseHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lee761"
        },
        "content": "import seedu.duke.task.command.TaskParseNaturalDateHelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limryan"
        },
        "content": "import seedu.duke.task.entity.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limryan"
        },
        "content": "import seedu.duke.task.entity.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.entity.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lee761"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " * TaskList class is the special type of ArrayList that contains Task and has some special functions used to"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " * manipulate the tasks in this list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class TaskList extends ArrayList\u003cTask\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Converts the task list to a string of the pre-determined format that is ready to be displayed by the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * UI."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @return message that lists all tasks in the list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (this.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            return \"There is nothing in your task list.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String msg \u003d \"Here are the tasks in your task list (total of \" + this.size() + \"):\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (int i \u003d 0; i \u003c this.size(); i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            msg +\u003d System.lineSeparator() + (i + 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            msg +\u003d \". \" + this.get(i);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Searches through all the tasks in the list to look for the keyword specified. The result will be the"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * string containing all the task string that is ready to be displayed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param keyword the target keyword for searching"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return a string containing all the tasks found and is ready to be displayed by UI"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public String findKeyword(String keyword) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        ArrayList\u003cTask\u003e searchResult \u003d prepareSearchResult(keyword);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return constructSearchMessage(searchResult);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private String constructSearchMessage(ArrayList\u003cTask\u003e searchResult) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String msg \u003d \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (searchResult.size() \u003e 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            msg +\u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            for (int i \u003d 0; i \u003c searchResult.size(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                msg +\u003d System.lineSeparator() + (i + 1) + \". \" + searchResult.get(i);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            msg +\u003d \"There is no matching task in your list.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private ArrayList\u003cTask\u003e prepareSearchResult(String keyword) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        ArrayList\u003cTask\u003e searchResult \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (Task task : this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (task.matchKeyword(keyword)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                searchResult.add(task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return searchResult;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Marks the task at the specified index in the task list as done."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param index the target index of which the task is to be marked as done"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return a message that is ready to be displayed by UI"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @throws CommandParseHelper.CommandParseException an exception thrown when index parsing failed or out"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *                                                  of range"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public String markDone(int index) throws CommandParseHelper.CommandParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d this.size()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            throw new CommandParseHelper.CommandParseException(\"Invalid Index\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.get(index).markDone();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return constructDoneMessage(index);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private String constructDoneMessage(int index) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String msg \u003d \"Nice! I\u0027ve marked this task as done:\" + System.lineSeparator();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        msg +\u003d this.get(index).toString() + System.lineSeparator();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        msg +\u003d \"Now you have \" + this.size()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + \" tasks in the list.\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Deletes the task at the specified index in the task list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param index the target index of which the task is to be deleted"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return a message that is ready to be displayed by UI"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @throws CommandParseHelper.CommandParseException an exception thrown when index parsing failed or out"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *                                                  of range"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public String delete(int index) throws CommandParseHelper.CommandParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        validateIndex(index);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Task deleted \u003d this.remove(index);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return constructDeleteMessage(deleted);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private String constructDeleteMessage(Task deleted) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String msg \u003d \"Noted. I\u0027ve removed this task:\" + System.lineSeparator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        msg +\u003d deleted + System.lineSeparator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        msg +\u003d \"Now you have \" + this.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Finds all the tasks that are considered as near."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param dayLimit the maximum number of days from now for a task to be considered as near"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return whether the task is near"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public TaskList findNear(int dayLimit) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        TaskList nearTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (Task t : this) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (t.isNear(dayLimit)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                nearTasks.add(t);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return nearTasks;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Snooze or delay the tasks."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @param index of the task in taskList."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @return string msg."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public String snoozed(int index, int duration) throws CommandParseHelper.CommandParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        validateIndex(index);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lee761"
        },
        "content": "        Task task \u003d this.get(index);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lee761"
        },
        "content": "        return constructSnoozeMessage(task, duration, index);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lee761"
        },
        "content": "    private String constructSnoozeMessage(Task task, int duration, int index) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limryan"
        },
        "content": "        if (task.getTaskType() !\u003d Task.TaskType.TODO) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lee761"
        },
        "content": "            task.snooze(duration);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lee761"
        },
        "content": "            return \"Noted. I\u0027ve snoozed task \" + (index + 1) + \" by \" + duration + \" days\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lee761"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return \"This task cannot be snoozed\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lee761"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lee761"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Adds or modifies task to include a \u0027do after\u0027 task."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lee761"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param index       Position of task in list"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param description Name of task"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @return confirmation message that do after task has been added"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @throws CommandParseHelper.CommandParseException when input is in wrong format"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public String setDoAfter(int index, String description) throws CommandParseHelper.CommandParseException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        validateIndex(index);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Task task \u003d this.get(index);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        task.setDoAfterDescription(description);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return constructDoAfterMessage(description, index + 1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private String constructDoAfterMessage(String description, int size) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return \"Do after task \" + description + \" has been added to task \" + size;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Modifies task time."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limryan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param index       Position of task in list"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param description Name of task"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @return confirmation message that do after task has been added"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @throws CommandParseHelper.CommandParseException when input is in wrong format"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public String setTime(int index, String description) throws CommandParseHelper.CommandParseException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        validateIndex(index);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        setTimeByType(description, this.get(index));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return constructSetTimeMessage(index, description);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private void setTimeByType(String description, Task task) throws CommandParseHelper.CommandParseException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limryan"
        },
        "content": "        if (task.getTaskType() \u003d\u003d Task.TaskType.DEADLINE) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lee761"
        },
        "content": "            ((Deadline) task).setTime(TaskParseNaturalDateHelper.getDate(description));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limryan"
        },
        "content": "        } else if (task.getTaskType() \u003d\u003d Task.TaskType.EVENT) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lee761"
        },
        "content": "            ((Event) task).setTime(TaskParseNaturalDateHelper.getDate(description));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private String constructSetTimeMessage(int index, String description) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return \"Time for task \" + (index + 1) + \" has been changed to \" + description;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Generates a list of string containing all tasks in string form."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return a list of task string"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public ArrayList\u003cString\u003e getTaskGuiStringList() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        ArrayList\u003cString\u003e stringList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (Task task : this) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            stringList.add(task.toString());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return stringList;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lee761"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Adds or modifies task to include a priority level."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lee761"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @param index    Position of task in list"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @param priority Priority level of task"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @return Confirmation message that priority level has been added"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @throws CommandParseHelper.CommandParseException when input is in wrong format"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lee761"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lee761"
        },
        "content": "    public String setPriority(int index, Task.Priority priority) throws CommandParseHelper.CommandParseException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        validateIndex(index);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Task task \u003d this.get(index);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lee761"
        },
        "content": "        task.setPriorityLevelTo(priority);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return constructSetPriorityMessage(priority, index + 1);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private void validateIndex(int index) throws CommandParseHelper.CommandParseException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lee761"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d this.size()) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            throw new CommandParseHelper.CommandParseException(\"Invalid index\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lee761"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lee761"
        },
        "content": "    private String constructSetPriorityMessage(Task.Priority priority, int size) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lee761"
        },
        "content": "        return \"Priority of task \" + size + \" is set to \" + priority.name();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Adds or modifies tags of a task."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "limryan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param index Position of task in list"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param tags  Priority level of task"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @return Confirmation message that tags have been added"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @throws CommandParseHelper.CommandParseException when input is in wrong format"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public String setTags(int index, ArrayList\u003cString\u003e tags) throws CommandParseHelper.CommandParseException {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "limryan"
        },
        "content": "        validateIndex(index);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "limryan"
        },
        "content": "        Task task \u003d this.get(index);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "limryan"
        },
        "content": "        task.setTags(tags);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "limryan"
        },
        "content": "        return constructSetTagsMessage(index + 1);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private String constructSetTagsMessage(int size) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "limryan"
        },
        "content": "        return \"Tags of task \" + size + \" has been updated\";"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Detect if a task being added clashes with another task in the list."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @param task task to be added."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @return TaskList containing tasks that clashes with the new task being added."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public TaskList findClash(Task task) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        TaskList clashTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        for (Task t : this) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            if (t.isClash(task)) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                clashTasks.add(t);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return clashTasks;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lee761"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * Clears the task list by deleting the task one by one."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lee761"
        },
        "content": "     *"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @return a string message to be printed"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lee761"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lee761"
        },
        "content": "    public String clearList() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lee761"
        },
        "content": "        if (this.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lee761"
        },
        "content": "            return \"The task list has already been cleared\";"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lee761"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lee761"
        },
        "content": "            while (this.size() !\u003d 0) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lee761"
        },
        "content": "                this.remove(0);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lee761"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lee761"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lee761"
        },
        "content": "        return constructClearListMessage();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lee761"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lee761"
        },
        "content": "    private String constructClearListMessage() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lee761"
        },
        "content": "        return \"Task List has been cleared\";"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lee761"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lee761"
        },
        "content": "    public void sortListByPriority() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lee761"
        },
        "content": "        sort(Comparator.comparing(Task::getPriority));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lee761"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 24,
      "limryan": 42,
      "JokerYan": 179,
      "lee761": 50
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/command/TaskAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.task.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.entity.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.entity.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.entity.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.entity.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " * AddCommand is a specific kind of command used to add task to the task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class TaskAddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private Task.TaskType taskType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private LocalDateTime time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private String doAfter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private ArrayList\u003cString\u003e tags;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private ArrayList\u003cString\u003e links;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lee761"
        },
        "content": "    private Task.Priority priority;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private boolean done;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Instantiation of add command with all the necessary variables. it needs to execute."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param taskType the type of task that is to be added."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param name     he name of the task, which is needed to instantiate the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param time     the time of the task, which is needed to instantiate the task. ToDo tasks does not have"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *                 time attribute, so any Date can be passed in and will be ignored."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @param doAfter  task to be done after main task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @param tags     tag associated with the task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @param priority priority level of the task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param links    linked emails of the task"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limryan"
        },
        "content": "    public TaskAddCommand(Task.TaskType taskType, String name, LocalDateTime time, String doAfter,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limryan"
        },
        "content": "                          ArrayList\u003cString\u003e tags, Task.Priority priority, ArrayList\u003cString\u003e links) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limryan"
        },
        "content": "        this.doAfter \u003d doAfter;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lee761"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limryan"
        },
        "content": "        this.links \u003d links;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Executes the add command by instantiating the task first and then add the task to task list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return a flag whether the task is successfully added. Returns false if the taskType is not recognised."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public boolean execute(Model model) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        TaskList taskList \u003d model.getTaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Task task \u003d prepareTaskByType();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (task \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String clashMsg \u003d findClash(taskList, task);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (done) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            task.markDone();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (!silent) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            constructAddCommandMessage(taskList, task, clashMsg);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private Task prepareTaskByType() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limryan"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limryan"
        },
        "content": "            task \u003d new ToDo(name, doAfter, tags, priority, links);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limryan"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limryan"
        },
        "content": "            task \u003d new Deadline(name, time, doAfter, tags, priority, links);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limryan"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limryan"
        },
        "content": "            task \u003d new Event(name, time, doAfter, tags, priority, links);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            task \u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private String findClash(TaskList taskList, Task task) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        TaskList clashTasks \u003d taskList.findClash(task);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        String clashMsg \u003d \"\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        if (clashTasks.size() \u003e 0) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            clashMsg \u003d System.lineSeparator() + System.lineSeparator() + \"Warning: New task added clashes \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    + \"with other task(s) in the list.\" + System.lineSeparator();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            clashMsg +\u003d clashTasks.toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return clashMsg;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private void constructAddCommandMessage(TaskList taskList, Task task, String clashMsg) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String msg \u003d \"Got it. I\u0027ve added this task: \" + System.lineSeparator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        msg +\u003d \"  \" + task.toString() + System.lineSeparator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        msg +\u003d \"Now you have \" + taskList.size() + \" task(s) in the list. \";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        msg +\u003d clashMsg;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        responseMsg \u003d msg;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        UI.getInstance().showResponse(msg);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 7,
      "limryan": 13,
      "JokerYan": 92,
      "lee761": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/command/TaskClearListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lee761"
        },
        "content": "package seedu.duke.task.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lee761"
        },
        "content": "import seedu.duke.common.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lee761"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lee761"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lee761"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lee761"
        },
        "content": "public class TaskClearListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lee761"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * Instantiation of the clear list command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lee761"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lee761"
        },
        "content": "    public TaskClearListCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lee761"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lee761"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * Executes the clear command by calling the clear list function of task list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lee761"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @return a flag whether clearing of task list is done successfully. Returns false if the delete"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limryan"
        },
        "content": "     *     function of task list throws an exception"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lee761"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lee761"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lee761"
        },
        "content": "    public boolean execute(Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lee761"
        },
        "content": "        TaskList taskList \u003d model.getTaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lee761"
        },
        "content": "        String msg \u003d taskList.clearList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lee761"
        },
        "content": "        if (!silent) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lee761"
        },
        "content": "            responseMsg \u003d msg;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lee761"
        },
        "content": "            UI.getInstance().showResponse(responseMsg);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lee761"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lee761"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lee761"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lee761"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limryan": 2,
      "lee761": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/command/TaskDeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.task.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.common.parser.CommandParseHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " * DeleteCommand that is used delete a task from the task list with its index."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class TaskDeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Instantiation of delete command with all the necessary variables."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param index the index of task that is to be deleted"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public TaskDeleteCommand(int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Executes the delete command by calling the delete function of task list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @return a flag whether deletion is done successfully. Returns false if the delete function of"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limryan"
        },
        "content": "     *     task list throws an exception."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public boolean execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            TaskList taskList \u003d model.getTaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            String msg \u003d taskList.delete(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (!silent) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                responseMsg \u003d msg;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                UI.getInstance().showResponse(msg);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (CommandParseHelper.CommandParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (!silent) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                UI.getInstance().showError(e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 2,
      "limryan": 2,
      "JokerYan": 43
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/command/TaskDoAfterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.task.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.common.parser.CommandParseHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyun99"
        },
        "content": " * Add a task which do after another task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyun99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class TaskDoAfterCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private String doAfterDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Instantiation of do after command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param index              index of task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @param doAfterDescription of task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public TaskDoAfterCommand(int index, String doAfterDescription) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limryan"
        },
        "content": "        this.doAfterDescription \u003d doAfterDescription;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Set do after task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @return true."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public boolean execute(Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        TaskList taskList \u003d model.getTaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            String msg \u003d taskList.setDoAfter(index, doAfterDescription);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (!silent) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                responseMsg \u003d msg;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                UI.getInstance().showResponse(responseMsg);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (CommandParseHelper.CommandParseException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 14,
      "limryan": 11,
      "JokerYan": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/command/TaskDoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.task.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.common.parser.CommandParseHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " * DoneCommand is a specific kind of command used to mark a task as done."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class TaskDoneCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Instantiation of done command with the index of the target task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param i the index of the target task to be marked as done"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public TaskDoneCommand(int i) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        index \u003d i;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public TaskDoneCommand(int i, ArrayList\u003cOption\u003e inputOptionList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        index \u003d i;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        optionList \u003d inputOptionList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Executes the done command by calling the markDone function of the task list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return a flag whether the task is successfully marked as done. Returns false if the markDone function"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *         throws exception."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public boolean execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            TaskList taskList \u003d model.getTaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            String msg \u003d taskList.markDone(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (!silent) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                responseMsg \u003d msg;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                UI.getInstance().showResponse(msg);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (CommandParseHelper.CommandParseException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (!silent) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                UI.getInstance().showError(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 2,
      "JokerYan": 52
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/command/TaskFindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.task.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * FindCommand is a specific kind of command used to find a task from task list with a keyword."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class TaskFindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Instantiation of find command with all the necessary variables it needs to execute."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param keyword the keyword that the target task needs to match"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public TaskFindCommand(String keyword) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the find command by calling the findKeyword function from the task list. Find result will be"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * shown by the UI."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true after the look after is completed. Note that no result found will be reflected in the UI"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *         output instead of the returned value of this function."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public boolean execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        TaskList taskList \u003d model.getTaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!silent) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            responseMsg \u003d taskList.findKeyword(keyword);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showResponse(responseMsg);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JokerYan": 13,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/command/TaskListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.task.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " * ListCommand is a specific kind of command used to display all task in a task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class TaskListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Instantiation of the list command with the target task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public TaskListCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Executes the list command by calling the UI to display the target task list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return true after display is completed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public boolean execute(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        TaskList taskList \u003d model.getTaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (!silent) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            responseMsg \u003d taskList.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showResponse(responseMsg);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JokerYan": 34
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/command/TaskParseNaturalDateHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lee761"
        },
        "content": "package seedu.duke.task.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lee761"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.common.parser.CommandParseHelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lee761"
        },
        "content": "import seedu.duke.task.entity.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lee761"
        },
        "content": "import seedu.duke.task.parser.TaskCommandParseHelper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lee761"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lee761"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lee761"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lee761"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lee761"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lee761"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lee761"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lee761"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lee761"
        },
        "content": "public class TaskParseNaturalDateHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lee761"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * Checks if the input is a short form for a day of the week."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lee761"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @param input an input to be checked."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @return false if the input is not short form or not a day of the week."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lee761"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lee761"
        },
        "content": "    private static boolean isCorrectNaturalDate(String input) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lee761"
        },
        "content": "        DayOfWeek[] dayOfWeeks \u003d DayOfWeek.values();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lee761"
        },
        "content": "        for (int i \u003d 0; i \u003c dayOfWeeks.length; i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lee761"
        },
        "content": "            String shortForm \u003d dayOfWeeks[i].getDisplayName(TextStyle.SHORT, Locale.US);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lee761"
        },
        "content": "            String fullForm \u003d dayOfWeeks[i].getDisplayName(TextStyle.FULL, Locale.US);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lee761"
        },
        "content": "            if (fullForm.equals(input) || shortForm.equals(input)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lee761"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lee761"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lee761"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lee761"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lee761"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lee761"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * Converts the input from a string that contains a day of the week to the next nearest date corresponding"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * to the day of the week. If they day has already passed in that week, the next date corresponding to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * day will be returned."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lee761"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @param parsedDay    an input that contains the day of the task to be done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @param parsedTiming an input that contains the time of the task to be done."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @return dateTime that gives the date and time of the input."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @throws CommandParseHelper.CommandParseException an exception when the parsing is failed, most likely"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *                                                  due to a wrong format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lee761"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lee761"
        },
        "content": "    public static LocalDateTime convertNaturalDate(String parsedDay, String parsedTiming)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            throws CommandParseHelper.CommandParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lee761"
        },
        "content": "        LocalDate date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lee761"
        },
        "content": "        LocalDateTime dateTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lee761"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lee761"
        },
        "content": "            if (parsedTiming \u003d\u003d null || parsedTiming.isEmpty()) { //if no timing is inputted, set time as 0000"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lee761"
        },
        "content": "                dateTime \u003d date.atStartOfDay();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lee761"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lee761"
        },
        "content": "                LocalTime timing \u003d LocalTime.parse(parsedTiming, DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lee761"
        },
        "content": "                dateTime \u003d date.atTime(timing);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lee761"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lee761"
        },
        "content": "            DayOfWeek dayOfWeek \u003d dateTime.getDayOfWeek();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lee761"
        },
        "content": "            String fullForm \u003d dayOfWeek.getDisplayName(TextStyle.FULL, Locale.US);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lee761"
        },
        "content": "            while (!fullForm.contains(parsedDay)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lee761"
        },
        "content": "                dateTime \u003d dateTime.plusDays(1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lee761"
        },
        "content": "                dayOfWeek \u003d dateTime.getDayOfWeek();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lee761"
        },
        "content": "                fullForm \u003d dayOfWeek.getDisplayName(TextStyle.FULL, Locale.US);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lee761"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lee761"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            throw new CommandParseHelper.CommandParseException(\"Wrong Date Time format\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lee761"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lee761"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lee761"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lee761"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * Gets the date in LocalDateTime format from the time string extracted."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lee761"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @param timeString time of the task in string format"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @return time LocalDateTime format"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @throws CommandParseHelper.CommandParseException an exception when the parsing is failed, most likely"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *                                                  due to a wrong format"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lee761"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static LocalDateTime getDate(String timeString) throws CommandParseHelper.CommandParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lee761"
        },
        "content": "        Pair\u003cString, String\u003e dateTime \u003d TaskCommandParseHelper.checkTimeString(timeString);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lee761"
        },
        "content": "        String day \u003d dateTime.getKey();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lee761"
        },
        "content": "        String timing \u003d dateTime.getValue();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lee761"
        },
        "content": "        if (isCorrectNaturalDate(day)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lee761"
        },
        "content": "            return convertNaturalDate(day, timing);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lee761"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lee761"
        },
        "content": "            return Task.parseDate(timeString);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lee761"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lee761"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lee761"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 1,
      "JokerYan": 7,
      "lee761": 83
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/command/TaskReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.task.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class TaskReminderCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private int dayLimit \u003d 3; //default limit is 3 days"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Instantiation of the ReminderCommand which can be used to print all the tasks near."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dayLimit the maximum number of days from now for a task to be considered as near"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public TaskReminderCommand(int dayLimit) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dayLimit \u003d dayLimit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Instantiation of the ReminderCommand which can be used to print all the tasks near. This overload uses"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * the default dayLimit instead."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public TaskReminderCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Execute the ReminderCommand to print out all the near tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true as the command can always be correctly executed"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public boolean execute(Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        TaskList taskList \u003d model.getTaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList nearTasks \u003d taskList.findNear(dayLimit);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        responseMsg \u003d constructReminderMessage(nearTasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (!silent) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showResponse(responseMsg);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private String constructReminderMessage(TaskList nearTasks) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String msg \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (nearTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            msg +\u003d \"There is no near event or deadline. \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            msg +\u003d \"There are near events or deadlines within \" + dayLimit + \" days: \" + System.lineSeparator();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            msg +\u003d nearTasks.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JokerYan": 23,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/command/TaskSetPriorityCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lee761"
        },
        "content": "package seedu.duke.task.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.common.parser.CommandParseHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lee761"
        },
        "content": "import seedu.duke.common.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lee761"
        },
        "content": "import seedu.duke.task.entity.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lee761"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limryan"
        },
        "content": " * Adds a priority level for a task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lee761"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lee761"
        },
        "content": "public class TaskSetPriorityCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lee761"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lee761"
        },
        "content": "    private Task.Priority priorityLevel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lee761"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Instantiation of set priority command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lee761"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @param index         index of task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @param priorityLevel priority level set for the task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lee761"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lee761"
        },
        "content": "    public TaskSetPriorityCommand(int index, Task.Priority priorityLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lee761"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lee761"
        },
        "content": "        this.priorityLevel \u003d priorityLevel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lee761"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lee761"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Sets priority level for a task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lee761"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @return true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lee761"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lee761"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public boolean execute(Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lee761"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            TaskList taskList \u003d model.getTaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            String msg \u003d taskList.setPriority(index, priorityLevel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (!silent) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                UI.getInstance().showResponse(msg);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (CommandParseHelper.CommandParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (!silent) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                UI.getInstance().showError(e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lee761"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lee761"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lee761"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lee761"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 1,
      "limryan": 3,
      "JokerYan": 14,
      "lee761": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/command/TaskSnoozeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.task.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.common.parser.CommandParseHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class TaskSnoozeCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lee761"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lee761"
        },
        "content": "    private int duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lee761"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * Instantiation of the snooze command which can be used to snooze a task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @param index the index of the task to be snoozed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lee761"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public TaskSnoozeCommand(int index, int duration) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lee761"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lee761"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lee761"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lee761"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Executes the SnoozeCommand to snooze a task for 3 days."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lee761"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @return true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lee761"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lee761"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public boolean execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        TaskList taskList \u003d model.getTaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lee761"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lee761"
        },
        "content": "            String msg \u003d taskList.snoozed(index, duration);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lee761"
        },
        "content": "            if (!silent) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                responseMsg \u003d msg;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                UI.getInstance().showResponse(msg);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lee761"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lee761"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (CommandParseHelper.CommandParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lee761"
        },
        "content": "            if (!silent) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                UI.getInstance().showError(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lee761"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lee761"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lee761"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lee761"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lee761"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ziyun99": 2,
      "limryan": 1,
      "JokerYan": 13,
      "lee761": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/command/TaskUpdateCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limryan"
        },
        "content": "package seedu.duke.task.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.common.parser.CommandParseHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limryan"
        },
        "content": "import seedu.duke.common.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limryan"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limryan"
        },
        "content": "import seedu.duke.task.entity.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limryan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limryan"
        },
        "content": " * Edit command to change (or add) certain attributes of a task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limryan"
        },
        "content": "public class TaskUpdateCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private ArrayList\u003cString\u003e descriptions;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private ArrayList\u003cTaskUpdateCommand.Attributes\u003e attributes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Instantiates a find command with all variables necessary. \u003d\u003d\u003d\u003d BASE \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param index        position of task as specified by input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param descriptions what to modify to"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param attributes   what attribute to modify \u003d\u003d\u003d\u003d BASE \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public TaskUpdateCommand(int index, ArrayList\u003cString\u003e descriptions,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limryan"
        },
        "content": "                             ArrayList\u003cTaskUpdateCommand.Attributes\u003e attributes) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limryan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limryan"
        },
        "content": "        this.descriptions \u003d descriptions;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limryan"
        },
        "content": "        this.attributes \u003d attributes;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Executes the edit command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @return true if successful, false otherwise"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public boolean execute(Model model) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        TaskList taskList \u003d model.getTaskList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limryan"
        },
        "content": "        String msg \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        responseMsg \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limryan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limryan"
        },
        "content": "            for (int i \u003d 0; i \u003c descriptions.size(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limryan"
        },
        "content": "                switch (attributes.get(i)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limryan"
        },
        "content": "                case TIME:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    msg \u003d updateTime(taskList, i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limryan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limryan"
        },
        "content": "                case DO_AFTER:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    msg \u003d updateDoAfter(taskList, i);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limryan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limryan"
        },
        "content": "                case PRIORITY:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    msg \u003d updatePriority(taskList, i);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limryan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limryan"
        },
        "content": "                case TAG:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limryan"
        },
        "content": "                    msg \u003d updateTags(taskList, i);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limryan"
        },
        "content": "                    i \u003d descriptions.size();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limryan"
        },
        "content": "                    // tags will be the last entries in descriptions ArrayList and updateTags will handle"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limryan"
        },
        "content": "                    // them all. So skip to the end."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limryan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limryan"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limryan"
        },
        "content": "                    msg \u003d \"Invalid attribute\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limryan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limryan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            responseMsg +\u003d msg + System.lineSeparator();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (CommandParseHelper.CommandParseException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (!silent) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                UI.getInstance().showError(e.getMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limryan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (!silent) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showResponse(msg);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limryan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private String updatePriority(TaskList taskList, int i) throws CommandParseHelper.CommandParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String msg;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lee761"
        },
        "content": "        Task.Priority level \u003d Task.getPriorityLevel(descriptions.get(i));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lee761"
        },
        "content": "        msg \u003d taskList.setPriority(index, level);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private String updateDoAfter(TaskList taskList, int i) throws CommandParseHelper.CommandParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String msg;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        msg \u003d taskList.setDoAfter(index, descriptions.get(i));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private String updateTime(TaskList taskList, int i) throws CommandParseHelper.CommandParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String msg;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limryan"
        },
        "content": "        if (taskList.get(index).getTaskType() \u003d\u003d Task.TaskType.TODO) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            throw new CommandParseHelper.CommandParseException(\"Time cannot be added to Todo task.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        msg \u003d taskList.setTime(index, descriptions.get(i));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private String updateTags(TaskList taskList, int i) throws CommandParseHelper.CommandParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limryan"
        },
        "content": "        String msg;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limryan"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limryan"
        },
        "content": "        for (int j \u003d i; j \u003c descriptions.size(); j++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limryan"
        },
        "content": "            if (attributes.get(j).equals(Attributes.TAG)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limryan"
        },
        "content": "                tags.add(descriptions.get(j));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limryan"
        },
        "content": "        msg \u003d taskList.setTags(index, tags);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limryan"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public enum Attributes {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limryan"
        },
        "content": "        TIME, DO_AFTER, PRIORITY, TAG"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 1,
      "limryan": 69,
      "JokerYan": 45,
      "lee761": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/entity/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.task.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Deadline is a type of task with a date/time which is the deadline time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private LocalDateTime time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Instantiates the Deadline with the name and the time. Time must be in during the instantiation as it"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * cannot be changed later."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name name of the Deadline"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param time time of the Deadline"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public Deadline(String name, LocalDateTime time) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limryan"
        },
        "content": "        this.taskType \u003d TaskType.DEADLINE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Instantiates the Deadline with the name and the time. Time must be in during the instantiation as it"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * cannot be changed later. This method accepts another task to be done after the first task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param name         name of the Deadline"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param time         time of the Deadline"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param doAfter      task to be done after main task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param tags         tag associated with the task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @param priority     priority level of the task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param linkedEmails emails to be linked to the task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limryan"
        },
        "content": "    public Deadline(String name, LocalDateTime time, String doAfter, ArrayList\u003cString\u003e tags,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limryan"
        },
        "content": "                    Priority priority, ArrayList\u003cString\u003e linkedEmails) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limryan"
        },
        "content": "        this.taskType \u003d TaskType.DEADLINE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        setDoAfterDescription(doAfter);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        setTags(tags);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lee761"
        },
        "content": "        setPriorityLevelTo(priority);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limryan"
        },
        "content": "        for (String email : linkedEmails) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limryan"
        },
        "content": "            addLinkedEmails(email);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public LocalDateTime getTime() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void setTime(LocalDateTime time) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts the Deadline to a human readable string containing important information about the Deadline,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * including the type and time of this Deadline."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a human readable string containing the important information"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        output \u003d \"[D]\" + this.getStatus() + \" (by: \" + formatDate() + \")\" + overdueString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (this.doAfterDescription !\u003d null \u0026\u0026 !this.doAfterDescription.equals(\"\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            output +\u003d System.lineSeparator() + \"\\tAfter which: \" + doAfterDescription;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            output +\u003d \" #\" + tagName;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lee761"
        },
        "content": "        if (this.level !\u003d Priority.NULL) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lee761"
        },
        "content": "            output +\u003d \" Priority: \" + level.name();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lee761"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs a string with all the information of this Deadline to be stored in a file for future usage."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a string containing all information of this Deadline"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        output \u003d (this.isDone ? \"1\" : \"0\") + \" deadline \" + this.name + \" -time \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limryan"
        },
        "content": "                + formatDate();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (this.doAfterDescription !\u003d null \u0026\u0026 !this.doAfterDescription.equals(\"\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            output +\u003d \" -doafter \" + doAfterDescription;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            output +\u003d \" -tag \" + tagName;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limryan"
        },
        "content": "        for (String email : linkedEmails) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limryan"
        },
        "content": "            output +\u003d \" -link \" + email;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lee761"
        },
        "content": "        if (this.level !\u003d Priority.NULL) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lee761"
        },
        "content": "            output +\u003d \" -priority \" + level.name();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lee761"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs a formatted string of the time of this Deadline. The format is the same as input format and is"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * shared by all tasks."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a formatted string of the time of this Deadline"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private String formatDate() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return format.format(this.time);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private String overdueString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (isOverdue()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return \"(Overdue)\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private boolean isOverdue() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return this.time.compareTo(LocalDateTime.now()) \u003c 0;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calculates whether the time set for the deadline is near enough."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dayLimit maximum number of days from now for the deadline to be considered as near"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the flag whether the deadline is near enough"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isNear(int dayLimit) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.time.compareTo(now) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return now.compareTo(this.time.minusDays(dayLimit)) \u003e\u003d 0;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lee761"
        },
        "content": "    public void snooze(int duration) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lee761"
        },
        "content": "        time \u003d time.plusDays(duration);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Check if this task clashes with the new task being added."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task the new task being added into the list."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if this task clashes with the new task being added, false if not."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isClash(Task task) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limryan"
        },
        "content": "            if (task.taskType.equals(TaskType.DEADLINE)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                Deadline deadlineTask \u003d (Deadline) task;  // downcasting task to Deadline in order to use"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                // getTime()."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                if (this.time.compareTo(deadlineTask.getTime()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limryan"
        },
        "content": "            if (task.taskType.equals(TaskType.EVENT)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                Event eventTask \u003d (Event) task;  // downcasting task to Event in order to use getTime()."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                if (this.time.compareTo(eventTask.getTime()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"Error when finding clashes of tasks.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 1,
      "limryan": 19,
      "JokerYan": 44,
      "-": 99,
      "lee761": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/entity/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.task.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Event class is a typ of task with a date/time when the event is going to happen."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private LocalDateTime time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Instantiates the Event class with name and time. Time must be passed in during the instantiation as it"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * cannot be changed later."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name name of the Event"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param time time of the Event that is going to happen"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public Event(String name, LocalDateTime time) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limryan"
        },
        "content": "        this.taskType \u003d TaskType.EVENT;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Instantiates the Event class with name and time. Time must be passed in during the instantiation as it"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * cannot be changed later. Supports adding a task to be done after the first main task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param name         name of the Event"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param time         time of the Event that is going to happen"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param doAfter      task to be done after the main task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param tags         tag associated with the task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @param priority     priority level of the task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param linkedEmails emails to be linked to the task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limryan"
        },
        "content": "    public Event(String name, LocalDateTime time, String doAfter, ArrayList\u003cString\u003e tags,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limryan"
        },
        "content": "                 Priority priority, ArrayList\u003cString\u003e linkedEmails) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        setDoAfterDescription(doAfter);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limryan"
        },
        "content": "        this.taskType \u003d TaskType.EVENT;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        setTags(tags);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lee761"
        },
        "content": "        setPriorityLevelTo(priority);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limryan"
        },
        "content": "        for (String email : linkedEmails) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limryan"
        },
        "content": "            addLinkedEmails(email);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public LocalDateTime getTime() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void setTime(LocalDateTime time) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts the Event to a human readable string containing important information about the Event,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * including the type and time of this Event."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a human readable string containing the important information"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        output \u003d \"[E]\" + this.getStatus() + \" (by: \" + formatDate() + \")\" + pastString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (this.doAfterDescription !\u003d null \u0026\u0026 !this.doAfterDescription.equals(\"\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            output +\u003d System.lineSeparator() + \"\\tAfter which: \" + doAfterDescription;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            output +\u003d \" #\" + tagName;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lee761"
        },
        "content": "        if (this.level !\u003d Priority.NULL) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lee761"
        },
        "content": "            output +\u003d \" Priority: \" + level.name();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lee761"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs a string with all the information of this Event to be stored in a file for future usage."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a string containing all information of this Event"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        output \u003d (this.isDone ? \"1\" : \"0\") + \" event \" + this.name + \" -time \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + formatDate();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (this.doAfterDescription !\u003d null \u0026\u0026 !this.doAfterDescription.equals(\"\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            output +\u003d \" -doafter \" + doAfterDescription;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            output +\u003d \" -tag \" + tagName;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limryan"
        },
        "content": "        for (String email : linkedEmails) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limryan"
        },
        "content": "            output +\u003d \" -link \" + email;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lee761"
        },
        "content": "        if (this.level !\u003d Priority.NULL) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lee761"
        },
        "content": "            output +\u003d \" -priority \" + level.name();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lee761"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs a formatted string of the time of this Event. The format is the same as input format and is"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * shared by all tasks."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a formatted string of the time of this Event"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private String formatDate() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return format.format(this.time);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private String pastString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (isPast()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return \"(Past)\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private boolean isPast() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return this.time.compareTo(LocalDateTime.now()) \u003c 0;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calculates whether the time set for the event is near enough."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dayLimit maximum number of days from now for the event to be considered as near"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the flag whether the event is near enough"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isNear(int dayLimit) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.time.compareTo(now) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return now.compareTo(this.time.minusDays(dayLimit)) \u003e\u003d 0;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lee761"
        },
        "content": "    public void snooze(int duration) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lee761"
        },
        "content": "        time \u003d time.plusDays(duration);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Check if this task clashes with the new task being added."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task the new task being added into the list."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if this task clashes with the new task being added, false if not."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isClash(Task task) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limryan"
        },
        "content": "            if (task.taskType.equals(TaskType.DEADLINE)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                Deadline deadlineTask \u003d (Deadline) task;  // downcasting task to Deadline in order to use"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                // getTime()."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                if (this.time.compareTo(deadlineTask.getTime()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limryan"
        },
        "content": "            if (task.taskType.equals(TaskType.EVENT)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                Event eventTask \u003d (Event) task;  // downcasting task to Event in order to use getTime()."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                if (this.time.compareTo(eventTask.getTime()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"Error when finding clashes of tasks.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 1,
      "limryan": 18,
      "JokerYan": 45,
      "-": 99,
      "lee761": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/entity/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.task.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.parser.CommandParseHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Super class of all kinds of tasks, with the basic functionality that all tasks share."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lee761"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * The enumeration of priority level."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lee761"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lee761"
        },
        "content": "    public enum Priority {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lee761"
        },
        "content": "        HIGH, MEDIUM, MED, LOW, NULL"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lee761"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lee761"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * The enumeration of all task type."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lee761"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lee761"
        },
        "content": "    public enum TaskType {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limryan"
        },
        "content": "        TODO, DEADLINE, EVENT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lee761"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * A date format that is shared by all tasks to parse and out the date involved in the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    protected static DateTimeFormatter format \u003d DateTimeFormatter"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            .ofPattern(\"dd/MM/uuuu HHmm\", Locale.ENGLISH)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * The name of the task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The flag whether is task is already done. Can only be set from false to true."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * The type of the task, following the enumeration declared."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected TaskType taskType;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String doAfterDescription;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * The tag list that the task has."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    protected ArrayList\u003cString\u003e tags;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * The list of linked emails that the task has."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limryan"
        },
        "content": "    protected ArrayList\u003cString\u003e linkedEmails;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * The level of priority."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lee761"
        },
        "content": "    protected Priority level;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Instantiation of a task with the name and the default false value if isDone attribute."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name the name of the task"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String name) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.doAfterDescription \u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limryan"
        },
        "content": "        this.linkedEmails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lee761"
        },
        "content": "        this.level \u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * The function is used to parse the input string to a Date that is used by the tasks with time involved."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * The function can be called before the initialization of a Task so that the Data can be directly passed"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * to the constructor."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param dateString an input string to be parsed"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return parsed result from the input string"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @throws CommandParseHelper.CommandParseException an exception when the parsing is failed, most likely"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *                                                  due to a wrong format"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static LocalDateTime parseDate(String dateString) throws CommandParseHelper.CommandParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return LocalDateTime.parse(dateString, format);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            throw new CommandParseHelper.CommandParseException(\"Wrong Date Time format\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Marks the isDone as true."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the status whether the task is done."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the isDone attribute"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean getDone() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * Snoozes task for the duration inputted."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lee761"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @param duration the duration to snooze the task by"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lee761"
        },
        "content": "    public void snooze(int duration) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limryan"
        },
        "content": "        if (taskType \u003d\u003d TaskType.TODO) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * The function that returns a human readable string of the basic information of the task."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the human readable string of the basic information the task."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String getStatus() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return \"[/] \" + this.name;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return \"[X] \" + this.name;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskType getTaskType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.taskType;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts the task to a human readable string. This will return the same string as the get status"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * function for a basic task, but is overridden by more advanced task class to add more information."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a human readable string that contains all important information of a task."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.getStatus();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * The function returns a string that contains full information of the task which is used to be stored in"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * a file for future usage."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a string containing full information of the task."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * The function checks whether this task, when converted to string, contains the keyword specified. Case"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * ignored."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyword search target string"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a flag whether the keyword is found in the task string"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean matchKeyword(String keyword) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return this.toString().toUpperCase().contains(keyword.toUpperCase());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * The default function determining whether the deadline or event is near enough. It will be overridden in"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * deadline or event, but not todo."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dayLimit the maximum number of days from now for a task to be considered as near"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return whether the task is near enough"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isNear(int dayLimit) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limryan"
        },
        "content": "    public void addLinkedEmails(String email) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limryan"
        },
        "content": "        linkedEmails.add(email);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limryan"
        },
        "content": "    public ArrayList\u003cString\u003e getLinkedEmails() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limryan"
        },
        "content": "        return linkedEmails;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isClash(Task task) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limryan"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limryan"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void setTags(ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lee761"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lee761"
        },
        "content": "    public ArrayList\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lee761"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lee761"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void setDoAfterDescription(String description) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.doAfterDescription \u003d description;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lee761"
        },
        "content": "    public void setPriorityLevelTo(Priority level) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lee761"
        },
        "content": "        this.level \u003d level;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lee761"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lee761"
        },
        "content": "        return this.level;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lee761"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lee761"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * Get the priority level of task by user input."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lee761"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @param input user input"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @return priority level of task."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lee761"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lee761"
        },
        "content": "    public static Priority getPriorityLevel(String input) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lee761"
        },
        "content": "        Priority level \u003d null;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lee761"
        },
        "content": "        if (level.HIGH.name().equals(input)) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lee761"
        },
        "content": "            return level.HIGH;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lee761"
        },
        "content": "        } else if (level.MEDIUM.name().equals(input) || level.MED.name().equals(input)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lee761"
        },
        "content": "            return level.MEDIUM;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lee761"
        },
        "content": "        } else if (level.LOW.name().equals(input)) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lee761"
        },
        "content": "            return level.LOW;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lee761"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lee761"
        },
        "content": "            return level.NULL;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lee761"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lee761"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limryan": 18,
      "JokerYan": 57,
      "-": 117,
      "lee761": 53
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/entity/ToDo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.task.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " * ToDo class is a rather basic type of Task, which has only name and isDone status, without any date/time"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " * involved."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Instantiates the ToDo class, which only takes in the name and set isDone flag to false like all tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param name name of the task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public ToDo(String name) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limryan"
        },
        "content": "        this.taskType \u003d TaskType.TODO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Instantiates the ToDo class, which only takes in the name and set isDone flag to false like all tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * This method also allows a doAfter task to be entered."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limryan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param name     name of the task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param doAfter  task to be done after the main task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param tags     tag associated with the task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @param priority priority level of the task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limryan"
        },
        "content": "    public ToDo(String name, String doAfter, ArrayList\u003cString\u003e tags, Priority priority,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limryan"
        },
        "content": "                ArrayList\u003cString\u003e linkedEmails) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limryan"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limryan"
        },
        "content": "        setDoAfterDescription(doAfter);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limryan"
        },
        "content": "        this.taskType \u003d TaskType.TODO;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        setTags(tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lee761"
        },
        "content": "        setPriorityLevelTo(priority);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limryan"
        },
        "content": "        for (String email : linkedEmails) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limryan"
        },
        "content": "            addLinkedEmails(email);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Converts the task to a human readable string containing important information about the ToDo, including"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * the type of this task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return a human readable string containing the important information"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        output \u003d \"[T]\" + this.getStatus();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (this.doAfterDescription !\u003d null \u0026\u0026 !this.doAfterDescription.equals(\"\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            output +\u003d System.lineSeparator() + \"\\tAfter which: \" + doAfterDescription;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            output +\u003d \" #\" + tagName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lee761"
        },
        "content": "        if (this.level !\u003d Priority.NULL) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lee761"
        },
        "content": "            output +\u003d \" Priority: \" + level.name();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lee761"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Outputs a string with all the information of this ToDo to be stored in a file for future usage."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return a string containing all information of this ToDo"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limryan"
        },
        "content": "        output \u003d (this.isDone ? \"1\" : \"0\") + \" todo \" + this.name;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (this.doAfterDescription !\u003d null \u0026\u0026 !this.doAfterDescription.equals(\"\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            output +\u003d \" -doafter \" + doAfterDescription;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            output +\u003d \" -tag \" + tagName;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limryan"
        },
        "content": "        for (String email : linkedEmails) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limryan"
        },
        "content": "            output +\u003d \" -link \" + email;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lee761"
        },
        "content": "        if (this.level !\u003d Priority.NULL) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lee761"
        },
        "content": "            output +\u003d \" -priority \" + level.name();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lee761"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limryan": 24,
      "JokerYan": 54,
      "lee761": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/parser/TaskCommandParseHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.task.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lee761"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.common.parser.CommandParseHelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limryan"
        },
        "content": "import seedu.duke.common.command.InvalidCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limryan"
        },
        "content": "import seedu.duke.common.command.LinkCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limryan"
        },
        "content": "import seedu.duke.common.command.HelpCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limryan"
        },
        "content": "import seedu.duke.common.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limryan"
        },
        "content": "import seedu.duke.common.command.FlipCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limryan"
        },
        "content": "import seedu.duke.common.command.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.command.TaskAddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lee761"
        },
        "content": "import seedu.duke.task.command.TaskClearListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.command.TaskDeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.command.TaskDoAfterCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.command.TaskDoneCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.command.TaskFindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.command.TaskListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.command.TaskParseNaturalDateHelper;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.command.TaskReminderCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.command.TaskSetPriorityCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.command.TaskSnoozeCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.command.TaskUpdateCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.entity.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import static seedu.duke.common.parser.CommandParseHelper.extractTags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import static seedu.duke.common.parser.CommandParseHelper.extractTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import static seedu.duke.common.parser.CommandParseHelper.isNumberTooLarge;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class TaskCommandParseHelper {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static UI ui \u003d UI.getInstance();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Parses a task command based on user input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param rawInput   the raw user input without the options"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param optionList the options that are extracted from the raw input"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return the command parsed"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static Command parseTaskCommand(String rawInput,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                           ArrayList\u003cCommand.Option\u003e optionList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (rawInput.length() \u003c\u003d 5) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String input \u003d rawInput.split(\"task \", 2)[1].strip();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (\"flip\".equals(input)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new FlipCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } else if (\"bye\".equals(input)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } else if (\"list\".equals(input)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new TaskListCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } else if (\"help\".equals(input)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } else if (input.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return parseDoneCommand(input);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } else if (input.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return parseDeleteCommand(input);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } else if (input.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return parseFindCommand(input);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } else if (input.startsWith(\"reminder\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return parseReminderCommand(input);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } else if (input.startsWith(\"doafter\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return parseDoAfterCommand(input, optionList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } else if (input.startsWith(\"snooze\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lee761"
        },
        "content": "            return parseSnoozeCommand(input, optionList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } else if (input.startsWith(\"todo\") | input.startsWith(\"deadline\") | input.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return parseAddTaskCommand(input, optionList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } else if (input.startsWith(\"update\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return parseUpdateCommand(input, optionList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } else if (input.startsWith(\"set\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return parsePriorityCommand(input, optionList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limryan"
        },
        "content": "        } else if (input.startsWith(\"link\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limryan"
        },
        "content": "            return parseLinkCommand(input, optionList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lee761"
        },
        "content": "        } else if (\"clear\".equals(input)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lee761"
        },
        "content": "            return new TaskClearListCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return new InvalidCommand(\"Invalid command word. Please enter \\\u0027help\\\u0027 for more information\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static Matcher prepareCommandMatcher(String input, String s) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Pattern commandPattern \u003d Pattern.compile(s);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return commandPattern.matcher(input);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static Command parseDoneCommand(String input) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Matcher doneCommandMatcher \u003d prepareCommandMatcher(input, \"^done\\\\s+(?\u003cindex\u003e\\\\d+)\\\\s*$\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (!doneCommandMatcher.matches()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(\"Please enter a valid index (positive integer equal or less than the \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    + \"number of tasks) of task after \\\u0027done\\\u0027\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            int index \u003d parseTaskIndex(doneCommandMatcher.group(\"index\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new TaskDoneCommand(index);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (TaskParseException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(e.getMessage());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static Command parseDeleteCommand(String input) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Matcher deleteCommandMatcher \u003d prepareCommandMatcher(input, \"^delete\\\\s+(?\u003cindex\u003e\\\\d+)\\\\s*$\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (!deleteCommandMatcher.matches()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(\"Please enter a valid index (positive integer equal or less than the \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    + \"number of tasks) of task after \\\u0027delete\\\u0027\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                int index \u003d parseTaskIndex(deleteCommandMatcher.group(\"index\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                return new TaskDeleteCommand(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            } catch (TaskParseException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                return new InvalidCommand(e.getMessage());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static int parseTaskIndex(String input) throws TaskParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (isNumberTooLarge(input)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            throw new TaskParseException(\"Invalid index. Index should be integer of range 1 ~ 99999.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        int index \u003d Integer.parseInt(input) - 1;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d Model.getInstance().getTaskListLength()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            throw new TaskParseException(\"Index \" + (index + 1) + \" out of bounds of 1 to \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    + Model.getInstance().getTaskListLength());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static Command parseFindCommand(String input) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Matcher findCommandMatcher \u003d prepareCommandMatcher(input, \"^find\\\\s+(?\u003ckeyword\u003e[\\\\w]+[\\\\s|\\\\w]*)\\\\s*$\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (!findCommandMatcher.matches()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(\"Please enter keyword for searching after \\\u0027find\\\u0027\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            String keyword \u003d findCommandMatcher.group(\"keyword\").strip();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new TaskFindCommand(keyword);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static Command parseReminderCommand(String input) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Matcher reminderCommandMatcher \u003d prepareCommandMatcher(input, \"^reminder(?:\\\\s+(?\u003cdayLimit\u003e[\\\\d]*)\\\\s*)?\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (!reminderCommandMatcher.matches()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(\"Please enter reminder with or without a number, which is the maximum number \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    + \"of days from now for a task to be considered as near\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            int dayLimit \u003d extractDayLimit(reminderCommandMatcher);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new TaskReminderCommand(dayLimit);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            showError(\"Reminder day limit in wrong format. Default is used.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new TaskReminderCommand();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (TaskParseException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            showError(e.getMessage());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new TaskReminderCommand();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lee761"
        },
        "content": "    private static int extractDayLimit(Matcher reminderCommandMatcher)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lee761"
        },
        "content": "            throws NumberFormatException, TaskParseException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        int dayLimit;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String dayLimitString \u003d reminderCommandMatcher.group(\"dayLimit\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (dayLimitString \u003d\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            throw new TaskParseException(\"Day limit not specified. Default is used.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (dayLimitString.length() \u003e 6) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            throw new TaskParseException(\"Reminder day limit only accept positive integer from 1 to 99999. \""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    + \"Default is used.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            dayLimit \u003d Integer.parseInt(dayLimitString);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (dayLimit \u003c\u003d 0) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            throw new TaskParseException(\"Reminder day limit must be positive. Default is used.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return dayLimit;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Extracts linked emails from the option list."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limryan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param optionList the list of options where the tags are extracted"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @return the ArrayList of strings"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limryan"
        },
        "content": "    public static ArrayList\u003cString\u003e extractLinks(ArrayList\u003cCommand.Option\u003e optionList) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limryan"
        },
        "content": "        ArrayList\u003cString\u003e linksList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limryan"
        },
        "content": "        for (Command.Option option : optionList) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limryan"
        },
        "content": "            if (option.getKey().equals(\"link\")) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limryan"
        },
        "content": "                linksList.add(option.getValue().strip());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limryan"
        },
        "content": "        return linksList;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static Command parseDoAfterCommand(String input, ArrayList\u003cCommand.Option\u003e optionList) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Matcher doAfterCommandMatcher \u003d prepareCommandMatcher(input, \"^do[a|A]fter\\\\s+(?\u003cindex\u003e[\\\\d]+)\\\\s*$\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (!doAfterCommandMatcher.matches()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(\"Please enter doAfter command in the correct format with index \""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    + \"(positive integer equal or less than the number of tasks) and description\""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    + \" in -msg option\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String description \u003d extractMsg(optionList);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (\"\".equals(description)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(\"Please enter a description of doAfter command after \\\u0027-msg \\\u0027 option\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            int index \u003d parseTaskIndex(doAfterCommandMatcher.group(\"index\"));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new TaskDoAfterCommand(index, description);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (TaskParseException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(e.getMessage());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static String extractMsg(ArrayList\u003cCommand.Option\u003e optionList) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (Command.Option option : optionList) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (option.getKey().equals(\"msg\")) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                description \u003d option.getValue();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static Command parsePriorityCommand(String input, ArrayList\u003cCommand.Option\u003e optionList) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Matcher priorityCommandMatcher \u003d prepareCommandMatcher(input, \"^set\\\\s+(?\u003cindex\u003e[\\\\d]+)\\\\s*$\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (!priorityCommandMatcher.matches()) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(\"Please enter task index (positive integer equal or less than the \""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    + \"number of tasks) after \u0027set\u0027 and priority level after \u0027-priority\u0027 option\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            String priority \u003d extractPriority(optionList);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lee761"
        },
        "content": "            Task.Priority level \u003d Task.getPriorityLevel(priority);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (\"\".equals(priority)) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "limryan"
        },
        "content": "                return new InvalidCommand(\"Please enter a priority level to set for the task after\""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "limryan"
        },
        "content": "                        + \" \\\u0027-priority\\\u0027 option\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lee761"
        },
        "content": "            } else if (!validPriority(priority)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lee761"
        },
        "content": "                return new InvalidCommand(\"Invalid priority\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            int index \u003d parseTaskIndex(priorityCommandMatcher.group(\"index\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lee761"
        },
        "content": "            return new TaskSetPriorityCommand(index, level);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (TaskParseException e) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(e.getMessage());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(\"Please enter a valid task index (positive integer equal or less \""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    + \"then the number of tasks) after \\\u0027set\\\u0027\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lee761"
        },
        "content": "    private static Command parseSnoozeCommand(String input, ArrayList\u003cCommand.Option\u003e optionList) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lee761"
        },
        "content": "        Matcher snoozeCommandMatcher \u003d prepareCommandMatcher(input, \"^snooze\\\\s+(?\u003cindex\u003e[\\\\d]+)\\\\s*$\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (!snoozeCommandMatcher.matches()) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(\"Please enter a valid task index (positive integer equal or less \""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    + \"then the number of tasks) after \\\u0027snooze\\\u0027 and duration to snooze after \\\u0027-by\\\u0027 \");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            index \u003d parseTaskIndex(snoozeCommandMatcher.group(\"index\"));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (TaskParseException e) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(e.getMessage());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            int snoozeDuration \u003d extractSnooze(optionList);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new TaskSnoozeCommand(index, snoozeDuration);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (TaskParseException e) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showMessage(e.getMessage());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new TaskSnoozeCommand(index, 3);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(\"Please enter a valid number of days for snooze (positive integer \""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    + \"from 1 to 99999)\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static Command parseUpdateCommand(String input, ArrayList\u003cCommand.Option\u003e optionList) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        ArrayList\u003cTaskUpdateCommand.Attributes\u003e attributes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        ArrayList\u003cString\u003e descriptions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Matcher editMatcher \u003d prepareCommandMatcher(input, \"^update\\\\s+(?\u003cindex\u003e\\\\d+)\\\\s*$\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (!editMatcher.matches()) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(\"Please enter an index after \\\u0027update\\\u0027\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            final int index \u003d parseTaskIndex(editMatcher.group(\"index\"));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            addTimeToUpdateCommand(optionList, attributes, descriptions);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            addDoAfterToUpdateCommand(optionList, attributes, descriptions);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            addPriorityToUpdateCommand(optionList, attributes, descriptions);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "limryan"
        },
        "content": "            addTagsToUpdateCommand(optionList, attributes, descriptions);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "limryan"
        },
        "content": "            if (descriptions.isEmpty()) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "limryan"
        },
        "content": "                return new InvalidCommand(\"Please enter at least one valid attribute to update\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "limryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new TaskUpdateCommand(index, descriptions, attributes);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(\"Please enter a valid task index (positive integer equal or less \""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    + \"than the number of tasks)\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (CommandParseHelper.CommandParseException e) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lee761"
        },
        "content": "            return new InvalidCommand(\"Index out of bound\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static void addTimeToUpdateCommand(ArrayList\u003cCommand.Option\u003e optionList,"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                               ArrayList\u003cTaskUpdateCommand.Attributes\u003e attributes,"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                               ArrayList\u003cString\u003e descriptions)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            throws CommandParseHelper.CommandParseException {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "limryan"
        },
        "content": "        if (!\"\".equals(extractTime(optionList))) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "limryan"
        },
        "content": "            descriptions.add(extractTime(optionList));"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "limryan"
        },
        "content": "            attributes.add(TaskUpdateCommand.Attributes.TIME);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static void addDoAfterToUpdateCommand(ArrayList\u003cCommand.Option\u003e optionList,"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                                  ArrayList\u003cTaskUpdateCommand.Attributes\u003e attributes,"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                                  ArrayList\u003cString\u003e descriptions)"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            throws TaskParseException {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (!extractDoAfter(optionList).equals(\"\")) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            descriptions.add(extractDoAfter(optionList));"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "limryan"
        },
        "content": "            attributes.add(TaskUpdateCommand.Attributes.DO_AFTER);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static void addPriorityToUpdateCommand(ArrayList\u003cCommand.Option\u003e optionList,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                                   ArrayList\u003cTaskUpdateCommand.Attributes\u003e attributes,"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lee761"
        },
        "content": "                                                   ArrayList\u003cString\u003e descriptions) throws TaskParseException {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lee761"
        },
        "content": "        String priority \u003d extractPriority(optionList);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lee761"
        },
        "content": "        Task.Priority level \u003d Task.getPriorityLevel(priority);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lee761"
        },
        "content": "        if (validPriority(priority)) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lee761"
        },
        "content": "            descriptions.add(level.name());"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "limryan"
        },
        "content": "            attributes.add(TaskUpdateCommand.Attributes.PRIORITY);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "limryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private static void addTagsToUpdateCommand(ArrayList\u003cCommand.Option\u003e optionList,"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                               ArrayList\u003cTaskUpdateCommand.Attributes\u003e attributes,"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lee761"
        },
        "content": "                                               ArrayList\u003cString\u003e descriptions) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "limryan"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d extractTags(optionList);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "limryan"
        },
        "content": "        if (!tags.isEmpty()) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "limryan"
        },
        "content": "            for (String tag : tags) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "limryan"
        },
        "content": "                descriptions.add(tag);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "limryan"
        },
        "content": "                attributes.add(TaskUpdateCommand.Attributes.TAG);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "limryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static String extractDoAfter(ArrayList\u003cCommand.Option\u003e optionList)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            throws TaskParseException {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String doafter \u003d \"\";"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (Command.Option option : optionList) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (option.getKey().equals(\"doafter\")) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "limryan"
        },
        "content": "                if (\"\".equals(doafter)) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    doafter \u003d option.getValue();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    throw new TaskParseException(\"Each task can have only one doafter option\");"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return doafter;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lee761"
        },
        "content": "    private static String extractPriority(ArrayList\u003cCommand.Option\u003e optionList) throws TaskParseException {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String priority \u003d \"\";"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (Command.Option option : optionList) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (option.getKey().equals(\"priority\")) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "limryan"
        },
        "content": "                if (\"\".equals(priority)) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    priority \u003d option.getValue();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    throw new TaskParseException(\"Each task can have only one priority\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lee761"
        },
        "content": "        return priority.toUpperCase();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lee761"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * Checks if the input priority is valid."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lee761"
        },
        "content": "     *"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @param input priority extracted from input"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @return true is priority is valid"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lee761"
        },
        "content": "     */"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lee761"
        },
        "content": "    public static boolean validPriority(String input) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lee761"
        },
        "content": "        for (Task.Priority priority : Task.Priority.values()) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lee761"
        },
        "content": "            if (priority.name().equals(input) \u0026\u0026 !\"NULL\".equals(input)) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lee761"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lee761"
        },
        "content": "            }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lee761"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lee761"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lee761"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static int extractSnooze(ArrayList\u003cCommand.Option\u003e optionList) throws TaskParseException {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String snoozeString \u003d \"\";"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lee761"
        },
        "content": "        for (Command.Option option : optionList) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (option.getKey().equals(\"by\") \u0026\u0026 snoozeString.equals(\"\")) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                snoozeString \u003d option.getValue();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lee761"
        },
        "content": "            }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (snoozeString \u003d\u003d \"\") {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            throw new TaskParseException(\"Number of days snoozed not specified. Default is used.\");"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lee761"
        },
        "content": "        }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (isNumberTooLarge(snoozeString)) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            throw new TaskParseException(\"Number of days snoozed should be integer of range 1 ~ 99999. \""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    + \"Default is used.\");"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "lee761"
        },
        "content": "        }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        int snooze \u003d Integer.parseInt(snoozeString);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "lee761"
        },
        "content": "        return snooze;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "lee761"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Parses the specific part of a user/file input that is relevant to a task. A successful parsing always"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * returns an AddCommand, as it is assumed that an input starting with a task name is an add command."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param input      user/file input ready to be parsed"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param optionList contains all options specified in input command"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return an AddCommand of the task parsed from the input"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static Command parseAddTaskCommand(String input,"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                               ArrayList\u003cCommand.Option\u003e optionList) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            String doAfter \u003d extractDoAfter(optionList);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            LocalDateTime time \u003d parseTaskTime(optionList);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "limryan"
        },
        "content": "            ArrayList\u003cString\u003e tags \u003d extractTags(optionList);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            String priority \u003d extractPriority(optionList);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "limryan"
        },
        "content": "            ArrayList\u003cString\u003e links \u003d extractLinks(optionList);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "limryan"
        },
        "content": "            return constructAddCommandByType(input, doAfter, time, tags, priority, links);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (TaskParseException e) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(e.getMessage());"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "lee761"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * Gets time in LocalDateTime format from string extracted."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "lee761"
        },
        "content": "     *"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @param optionList contains all options specified in input command"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @return time in LocalDateTime format"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "lee761"
        },
        "content": "     */"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static LocalDateTime parseTaskTime(ArrayList\u003cCommand.Option\u003e optionList) throws TaskParseException {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "lee761"
        },
        "content": "            String timeString \u003d extractTime(optionList);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            LocalDateTime dateTime \u003d TaskParseNaturalDateHelper.getDate(timeString);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return dateTime;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (CommandParseHelper.CommandParseException e) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static Command constructAddCommandByType(String input, String doAfter, LocalDateTime time,"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                                     ArrayList\u003cString\u003e tags, String priority,"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                                     ArrayList\u003cString\u003e links) {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "lee761"
        },
        "content": "        Task.Priority level \u003d Task.getPriorityLevel(priority);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "lee761"
        },
        "content": "        if (\"\".equals(priority)) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "lee761"
        },
        "content": "            return constructByType(input, doAfter, time, tags, Task.Priority.NULL, links);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "lee761"
        },
        "content": "        } else if (validPriority(priority)) {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "limryan"
        },
        "content": "            return constructByType(input, doAfter, time, tags, level, links);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "lee761"
        },
        "content": "        }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "lee761"
        },
        "content": "        return new InvalidCommand(\"Invalid priority\");"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "lee761"
        },
        "content": "    }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "lee761"
        },
        "content": "    private static Command constructByType(String input, String doAfter, LocalDateTime time,"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                           ArrayList\u003cString\u003e tags, Task.Priority priority,"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                           ArrayList\u003cString\u003e links) {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (input.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "limryan"
        },
        "content": "            return parseAddToDoCommand(input, doAfter, tags, priority, links);"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } else if (input.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "limryan"
        },
        "content": "            return parseAddDeadlineCommand(input, time, doAfter, tags, priority, links);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } else if (input.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "limryan"
        },
        "content": "            return parseEventCommand(input, time, doAfter, tags, priority, links);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(\"Invalid task type. Only todo, deadline, event are accepted. \");"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static Command parseAddToDoCommand(String input, String doAfter,"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                               ArrayList\u003cString\u003e tags, Task.Priority priority,"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                               ArrayList\u003cString\u003e links) {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "limryan"
        },
        "content": "        Task.TaskType taskType \u003d Task.TaskType.TODO;"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Matcher toDoMatcher \u003d prepareCommandMatcher(input, \"todo\\\\s+(?\u003cname\u003e\\\\w+[\\\\s+\\\\w+]*)\\\\s*\");"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (!toDoMatcher.matches()) {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(\"Please enter a name after todo\");"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String name \u003d toDoMatcher.group(\"name\");"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "limryan"
        },
        "content": "        return new TaskAddCommand(taskType, name, null, doAfter, tags, priority, links);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private static Command parseAddDeadlineCommand(String input, LocalDateTime time, String doAfter,"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                                   ArrayList\u003cString\u003e tags, Task.Priority priority,"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                                   ArrayList\u003cString\u003e links) {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Matcher deadlineMatcher \u003d prepareCommandMatcher(input, \"deadline\\\\s+(?\u003cname\u003e\\\\w+[\\\\s+\\\\w+]*)\\\\s*\");"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (!deadlineMatcher.matches()) {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(\"Please enter a name after \\\u0027deadline\\\u0027\");"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(\"Please enter a time of correct format (dd/mm/yyyy HHMM) after \""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    + \"\\\u0027-time\\\u0027\");"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String name \u003d deadlineMatcher.group(\"name\");"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "lee761"
        },
        "content": "        return new TaskAddCommand(Task.TaskType.DEADLINE, name, time, doAfter, tags, priority, links);"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private static Command parseEventCommand(String input, LocalDateTime time, String doAfter,"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                             ArrayList\u003cString\u003e tags, Task.Priority priority,"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                             ArrayList\u003cString\u003e links) {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Matcher eventMatcher \u003d prepareCommandMatcher(input, \"event\\\\s+(?\u003cname\u003e\\\\w+[\\\\s+\\\\w+]*)\\\\s*\");"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (!eventMatcher.matches()) {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(\"Please enter a name after \\\u0027event\\\u0027\");"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new InvalidCommand(\"Please enter a time of correct format (dd/mm/yyyy HHMM) after \""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    + \"\\\u0027-time\\\u0027\");"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String name \u003d eventMatcher.group(\"name\");"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "lee761"
        },
        "content": "        return new TaskAddCommand(Task.TaskType.EVENT, name, time, doAfter, tags, priority, links);"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private static Command parseLinkCommand(String input, ArrayList\u003cCommand.Option\u003e optionList) {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "limryan"
        },
        "content": "        Matcher linkCommandMatcher \u003d prepareCommandMatcher(input, \"^link\\\\s+(?\u003cindex\u003e[\\\\d]*)\\\\s*?\");"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "limryan"
        },
        "content": "        if (!linkCommandMatcher.matches()) {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "limryan"
        },
        "content": "            return new InvalidCommand(\"Please enter a valid task index (positive integer equal or less then \""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "limryan"
        },
        "content": "                    + \"the number of tasks) and email indexes (optional)\");"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "limryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "limryan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "limryan"
        },
        "content": "            int index \u003d parseTaskIndex(linkCommandMatcher.group(\"index\"));"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "limryan"
        },
        "content": "            ArrayList\u003cInteger\u003e emailIndexList \u003d extractEmails(optionList);"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "limryan"
        },
        "content": "            ArrayList\u003cInteger\u003e taskIndexList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "limryan"
        },
        "content": "            taskIndexList.add(index);"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "limryan"
        },
        "content": "            return new LinkCommand(taskIndexList, emailIndexList);"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "limryan"
        },
        "content": "        } catch (TaskParseException e) {"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "limryan"
        },
        "content": "            return new InvalidCommand(\"Please enter a valid task index\");"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "limryan"
        },
        "content": "        } catch (EmailParseException e) {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "limryan"
        },
        "content": "            return new InvalidCommand(\"Please ensure all email indexes are valid\");"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "limryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Extracts email index from the option list."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "limryan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param optionList the list of options where the parameters are extracted"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @return the ArrayList of email index"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "limryan"
        },
        "content": "    public static ArrayList\u003cInteger\u003e extractEmails(ArrayList\u003cCommand.Option\u003e optionList)"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "limryan"
        },
        "content": "            throws EmailParseException {"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "limryan"
        },
        "content": "        ArrayList\u003cInteger\u003e emailList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "limryan"
        },
        "content": "        for (Command.Option option : optionList) {"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "limryan"
        },
        "content": "            if (option.getKey().equals(\"email\")) {"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "limryan"
        },
        "content": "                int index \u003d Integer.parseInt(option.getValue().strip()) - 1;"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "limryan"
        },
        "content": "                if (index \u003c 0 || index \u003e\u003d Model.getInstance().getEmailListLength()) {"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "limryan"
        },
        "content": "                    throw new EmailParseException(\"Index out of bounds.\");"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "limryan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "limryan"
        },
        "content": "                emailList.add(index);"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "limryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "limryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "limryan"
        },
        "content": "        return emailList;"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Wraps around ui.showError by checking whether ui is null. This avoids the problem that ui is not"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * initialized during unit test."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param errorMessage the error message to be shown"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static void showError(String errorMessage) {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (ui !\u003d null) {"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            ui.showError(errorMessage);"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static class TaskParseException extends CommandParseHelper.CommandParseException {"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         * Instantiates the exception with a message, which is ready to be displayed by the UI."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         *"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         * @param msg the message that is ready to be displayed by UI."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        public TaskParseException(String msg) {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            super(msg);"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private static class EmailParseException extends CommandParseHelper.CommandParseException {"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "limryan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "limryan"
        },
        "content": "         * Instantiates the exception with a message, which is ready to be displayed by the UI."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "limryan"
        },
        "content": "         *"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "limryan"
        },
        "content": "         * @param msg the message that is ready to be displayed by UI."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "limryan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "limryan"
        },
        "content": "        public EmailParseException(String msg) {"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "limryan"
        },
        "content": "            super(msg);"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "limryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "lee761"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * Parses timeString to get day and time respectively."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "lee761"
        },
        "content": "     *"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @param timeString the input string"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @return a pair containing day and time"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "lee761"
        },
        "content": "     */"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "lee761"
        },
        "content": "    public static Pair\u003cString, String\u003e checkTimeString(String timeString) {"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "lee761"
        },
        "content": "        Pair\u003cString, String\u003e dateTime \u003d new Pair\u003c\u003e(null, null);"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "lee761"
        },
        "content": "        String day \u003d dateTime.getKey();"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "lee761"
        },
        "content": "        String timing \u003d dateTime.getValue();"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "lee761"
        },
        "content": "        if (!timeString.contains(\"/\") \u0026\u0026 !timeString.isEmpty()) {"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "lee761"
        },
        "content": "            String timeStr \u003d timeString.substring(0, 1).toUpperCase() + timeString.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "lee761"
        },
        "content": "            if (timeStr.contains(\" \")) {"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "lee761"
        },
        "content": "                String[] tokens \u003d timeStr.split(\"\\\\s+\", 3);"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "lee761"
        },
        "content": "                day \u003d tokens[0];"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "lee761"
        },
        "content": "                timing \u003d tokens[1];"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "lee761"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "lee761"
        },
        "content": "                day \u003d timeStr;"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "lee761"
        },
        "content": "            }"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "lee761"
        },
        "content": "        }"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "lee761"
        },
        "content": "        dateTime \u003d new Pair\u003c\u003e(day, timing);"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "lee761"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "lee761"
        },
        "content": "    }"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 3,
      "limryan": 125,
      "JokerYan": 398,
      "lee761": 88
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/storage/TaskStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.task.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.common.parser.CommandParseHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.storage.StorageHelper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.command.TaskAddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.command.TaskReminderCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.entity.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.ui.UI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyun99"
        },
        "content": " * Interacts with the file storing the task information."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class TaskStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * This function clears the content of the file and write all the information of the tasks in the task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * list to that file. This file follows similar structure as the user input and can be used to"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * re-construct the task list later."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param taskList the list of task that is to be written to the file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static void saveTasks(TaskList taskList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Path path \u003d StorageHelper.prepareDataPath(\"task.txt\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            StorageHelper.saveToFile(path, constructTaskListFileString(taskList));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"Write to output file IO exception!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static String constructTaskListFileString(TaskList taskList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            content +\u003d task.toFileString() + System.lineSeparator();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * This function reads the file that is previously saved to re-construct and return the task list from the"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * file information. Note: if any error occurs during the reading or parsing of the file, an empty task"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * list will always be returned for the integrity of data."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return task list re-constructed from the save file"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static TaskList readTaskFromFile() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Path taskPath \u003d StorageHelper.prepareDataPath(\"task.txt\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            processTaskFile(StorageHelper.readLinesFromFile(taskPath));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            TaskList taskList \u003d Model.getInstance().getTaskList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showMessage(\"Saved task file successfully loaded... \u003d\u003e \" + taskList.size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            new TaskReminderCommand().execute(Model.getInstance());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new TaskList(); //it is acceptable if there is no save file"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(\"Read save file IO exception\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (CommandParseHelper.CommandParseException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            UI.getInstance().showError(e.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static void processTaskFile(List\u003cString\u003e lines) throws"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            CommandParseHelper.CommandParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (String line : lines) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            processTaskString(line);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static void processTaskString(String line) throws CommandParseHelper.CommandParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lee761"
        },
        "content": "        if (!line.contains(\" \")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lee761"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lee761"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        boolean done \u003d line.split(\" \", 2)[0].equals(\"1\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String commandString \u003d line.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Command addCommand \u003d CommandParseHelper.parseCommand(\"task \" + commandString,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                CommandParseHelper.InputType.TASK);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        ((TaskAddCommand) addCommand).setDone(done);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        addCommand.setSilent();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        addCommand.execute(Model.getInstance());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Exception that belongs to the process of storing and reading of file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static class StorageException extends Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        private String msg;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         * Instantiates storage exception with a message, which can be later displayed by the UI."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         * @param msg the message of the exception that can be displayed by UI"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        public StorageException(String msg) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            this.msg \u003d msg;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         * Converts the exception to string by returning its message."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         * @return message of the exception."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        public String getMessage() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return msg;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 2,
      "limryan": 1,
      "JokerYan": 112,
      "lee761": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " * An example of a custom control using FXML. This control represents a dialog box consisting of an ImageView"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": " * to represent the speaker\u0027s face and a label containing text from the speaker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "class DialogBox extends HBox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private HBox dialogBox;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private DialogBox(String text, Image img, String actor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limryan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            FXMLLoader fxmlLoader;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            if (\"user\".equals(actor)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/UserDialogBox\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                        + \".fxml\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DukeDialogBox.fxml\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limryan"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limryan"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limryan"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limryan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limryan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        //BackgroundFill background_fill \u003d new BackgroundFill(Color.PINK, CornerRadii.EMPTY, Insets.EMPTY);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        //Background background \u003d new Background(background_fill);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        //dialogBox.setBackground(background);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limryan"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limryan"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return new DialogBox(text, img, \"user\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Constructs a dialog box from the text and img given."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param text text to be displayed"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param img  img to be displayed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return dialogBox ready to be displayed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        var db \u003d new DialogBox(text, img, \"duke\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limryan"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limryan"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 16,
      "limryan": 36,
      "JokerYan": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/KeyBinding.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "class KeyBinding {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Set key binding to read from scene."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @param scene      whole scene of application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @param userInput  textfield for user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @param mainWindow fxml controller."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    KeyBinding(Scene scene, TextField userInput, MainWindow mainWindow) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        scene.addEventFilter(KeyEvent.KEY_PRESSED, (KeyEvent e) -\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            KeyCode keyCode \u003d e.getCode();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            Object focus \u003d scene.getFocusOwner();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            if (focus.equals(userInput)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                mainWindow.handleUserInputKeyEvent(keyCode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            mainWindow.handleSceneKeyEvent(keyCode);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            e.consume();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        });"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ziyun99": 26,
      "JokerYan": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import javafx.geometry.Rectangle2D;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.layout.Priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import javafx.scene.web.WebEngine;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import javafx.stage.Popup;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.parser.CommandParseHelper;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limryan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limryan"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limryan"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static Stage mainStage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private AnchorPane rootAnchorPane;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private VBox taskContainer;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private ListView\u003cString\u003e tasksListView;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private ListView\u003cEmailHBoxCell\u003e emailsListView;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private WebView webView;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private WebEngine webEngine;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private UserInputHandler userInputHandler;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private boolean isShowingEmail \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private boolean isUpKey;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private int inputListIndex \u003d 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private ArrayList\u003cString\u003e inputList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/winner.png\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/robot.png\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Starts up GUI screen by loading welcome message, task list and email list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limryan"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        resizeToFitScreen();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limryan"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        // show email"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        webEngine \u003d webView.getEngine();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        //webEngine.load(\"https://www.google.com\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        webEngine.loadContent(loadDefaultWebView());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        // initialize GUI with database"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        //updateTasksList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        //updateEmailsList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        userInputHandler \u003d new UserInputHandler(userInput, sendButton);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        //setInputPrefix();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        // disable webView so that userInput can get focus"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        webView.setDisable(true);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        userInput.requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Resizes AnchorPane to fit window dimensions."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private void resizeToFitScreen() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        Rectangle2D screenBounds \u003d Screen.getPrimary().getVisualBounds();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        double screenHeight \u003d screenBounds.getHeight(); //680"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        double screenWidth \u003d screenBounds.getWidth(); //1280"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        rootAnchorPane.setPrefHeight(screenHeight - 30);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        rootAnchorPane.setPrefWidth(screenWidth);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private String loadDefaultWebView() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limryan"
        },
        "content": "            String htmlDir \u003d \".\" + File.separator + \"src\" + File.separator + \"main\" + File.separator"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limryan"
        },
        "content": "                    + \"resources\" + File.separator + \"html\" + File.separator + \"defaultWebView.html\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            File htmlFile \u003d new File(htmlDir);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            FileInputStream in \u003d new FileInputStream(htmlFile);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Scanner scanner \u003d new Scanner(in);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            String content \u003d \"\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                content +\u003d scanner.nextLine();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return content;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return \"Welcome to Email Manager!\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Display a message on the main window chat box."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limryan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param msg     main message to be displayed"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param input   the user input triggered this display"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void showGuiMessage(String msg, String input) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (input.length() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    DialogBox.getDukeDialog(msg, dukeImage)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            );"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    DialogBox.getDukeDialog(msg, dukeImage)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            );"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void setKeyBinding(Scene scene) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        new KeyBinding(scene, userInput, this);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void setMainStage(Stage stage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        mainStage \u003d stage;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Handle userInput key event."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @param keyCode key code of the key pressed when focus is in the userInput."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void handleUserInputKeyEvent(KeyCode keyCode) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        switch (keyCode) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        case ENTER:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            sendButton.fire();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            isUpKey \u003d true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            getPrevInput();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            isUpKey \u003d false;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            getPrevInput();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        case LEFT:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            userInputHandler.moveCaretLeft();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        case RIGHT:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            userInputHandler.moveCaretRight();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        case BACK_SPACE:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            userInputHandler.setTextBackSpace();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            userInputHandler.setTextDelete();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Handle scene key event."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @param keyCode key code of the key pressed when focus is in any nodes in the scene."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void handleSceneKeyEvent(KeyCode keyCode) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (keyCode \u003d\u003d KeyCode.ESCAPE) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            toggleEmailDisplay();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * them to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        webView.setDisable(false);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limryan"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        UI.getInstance().respond(input);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        UI.getInstance().syncWithModel();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        setInputPrefix();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        updateInputList(input);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Updates the email content shown in gui."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void updateHtml() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        webEngine.loadContent(UI.getInstance().getEmailContent());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        showHtml();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lee761"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Gets the input without prefixes."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lee761"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private void updateInputList(String input) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String stripedInput \u003d input.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (inputList.contains(stripedInput)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            inputListIndex \u003d inputList.indexOf(stripedInput) + 1;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "limryan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            inputList.add(stripedInput);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            inputListIndex \u003d inputList.size();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lee761"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lee761"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lee761"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Shows the previous inputs with the prefix. The prefix is non-deletable while the previous input shown"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * can be edited."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lee761"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lee761"
        },
        "content": "    private void getPrevInput() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String prefix \u003d CommandParseHelper.getInputPrefix();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lee761"
        },
        "content": "        String prevInput \u003d navigateInputList();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        userInputHandler.setUserInputText(prefix + prevInput);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lee761"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lee761"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Navigates the inputList and gets the previous input depending on which arrow key is pressed."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lee761"
        },
        "content": "     * @return prevInput to be shown in the textfield"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lee761"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lee761"
        },
        "content": "    private String navigateInputList() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lee761"
        },
        "content": "        String prevInput \u003d \"\";"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (isUpKey) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            inputListIndex \u003d (inputListIndex - 1) % inputList.size();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            inputListIndex \u003d inputListIndex \u003c 0 ? inputListIndex + inputList.size() : inputListIndex;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            prevInput \u003d inputList.get(inputListIndex);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "limryan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            inputListIndex \u003d (inputListIndex + 1) % inputList.size();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            prevInput \u003d inputList.get(inputListIndex);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lee761"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lee761"
        },
        "content": "        return prevInput;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private void toggleEmailDisplay() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        if (isShowingEmail) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            showEmailList();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            showHtml();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private void showHtml() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        emailsListView.setMaxHeight(0);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        webView.setMaxHeight(800);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        isShowingEmail \u003d true;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private void showEmailList() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        webView.setMaxHeight(0);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        emailsListView.setMaxHeight(800);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        isShowingEmail \u003d false;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * To begin the userInput textfield with a prefix either as \"task\" or \"email\". The prefix is"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * non-deletable, enter \"flip\" to toggle between them."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void setInputPrefix() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String prefix \u003d UI.getInstance().getPrefix();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        userInputHandler.setUserInputText(prefix);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Updates the gui for task list display."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param taskStringList the task list to be displayed."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void updateTasksList(ArrayList\u003cString\u003e taskStringList) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "limryan"
        },
        "content": "        ObservableList\u003cString\u003e observableList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (int i \u003d 0; i \u003c taskStringList.size(); i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            String taskString \u003d taskStringList.get(i);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            String output \u003d (i + 1) + \". \" + taskString;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "limryan"
        },
        "content": "            observableList.add(output);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "limryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "limryan"
        },
        "content": "        tasksListView.setItems(observableList);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Updates the gui for email list display."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param emailStringList the email list to be displayed."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void updateEmailsList(ArrayList\u003cString\u003e emailStringList) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "limryan"
        },
        "content": "        ArrayList\u003cEmailHBoxCell\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        for (int i \u003d 0; i \u003c emailStringList.size(); i++) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            list.add(new EmailHBoxCell(emailStringList.get(i), i));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "limryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "limryan"
        },
        "content": "        ObservableList\u003cEmailHBoxCell\u003e observableList \u003d FXCollections.observableList(list);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "limryan"
        },
        "content": "        emailsListView.setItems(observableList);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Shows a popup displaying long text message."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param text the text that is to be displayed in the popup"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void showTextPopup(String text) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        final Popup popup \u003d new Popup();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        AnchorPane outerPane \u003d prepareAnchorPanForPopup();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        ScrollPane scroll \u003d prepareScrollPaneForPopup();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Button button \u003d prepareButtonForPopup(popup);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        combinePopupComponents(text, outerPane, scroll, button);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        popup.getContent().add(outerPane);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        popup.show(mainStage);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private void combinePopupComponents(String text, AnchorPane outerPane, ScrollPane scroll, Button button) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        AnchorPane pane \u003d new AnchorPane();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Label label \u003d new Label(text);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        pane.getChildren().add(label);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        scroll.setContent(pane);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        outerPane.getChildren().addAll(scroll, button);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private Button prepareButtonForPopup(Popup popup) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "limryan"
        },
        "content": "        Button button \u003d new Button(\"Close\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        button.setPrefSize(80, 16);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        button.setLayoutX(380);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        button.setLayoutY(610);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        button.setOnAction(new EventHandler\u003cActionEvent\u003e() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            public void handle(ActionEvent event) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                popup.hide();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return button;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private ScrollPane prepareScrollPaneForPopup() {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        ScrollPane scroll \u003d new ScrollPane();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        scroll.setPrefSize(796, 600);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        scroll.setLayoutX(2);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        scroll.setPadding(new Insets(0, 10, 0, 10));"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return scroll;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private AnchorPane prepareAnchorPanForPopup() {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        AnchorPane outerPane \u003d new AnchorPane();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        outerPane.setPrefSize(800, 650);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        outerPane.setStyle(\"-fx-background-color: #FFFFFF;\""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + \"-fx-border-color: black;\");"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return outerPane;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "limryan"
        },
        "content": "    public static class EmailHBoxCell extends HBox {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "limryan"
        },
        "content": "        EmailHBoxCell(String email, int i) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "limryan"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "limryan"
        },
        "content": "            Label emailName \u003d new Label();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "limryan"
        },
        "content": "            emailName.setWrapText(true);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "limryan"
        },
        "content": "            emailName.setText((i + 1) + \". \" + email);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "limryan"
        },
        "content": "            emailName.setMaxWidth(USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "limryan"
        },
        "content": "            HBox.setHgrow(emailName, Priority.ALWAYS);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "limryan"
        },
        "content": "            this.getChildren().addAll(emailName);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "limryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "limryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 115,
      "limryan": 89,
      "JokerYan": 160,
      "lee761": 18
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/TaskCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limryan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.entity.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limryan"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limryan"
        },
        "content": "public class TaskCard extends HBox {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX. As a"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * consequence, UI elements\u0027 variable names cannot be set to such keywords or an exception will be thrown"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *         level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limryan"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limryan"
        },
        "content": "    public final int index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private Label taskName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private Label taskType;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private Label doAfter;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limryan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limryan"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Constructor for TaskCard."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param task           Task object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param displayedIndex Index as displayed in Task List Pane"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limryan"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limryan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limryan"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/TaskCard.fxml\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limryan"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limryan"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limryan"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limryan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limryan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limryan"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limryan"
        },
        "content": "        this.index \u003d displayedIndex;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limryan"
        },
        "content": "        id.setText(index + \". \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limryan"
        },
        "content": "        taskName.setText(task.getName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limryan"
        },
        "content": "        String type \u003d task.getTaskType().toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limryan"
        },
        "content": "        taskType.setText(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limryan": 57,
      "JokerYan": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/UI.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.parser.CommandParseHelper;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.common.logger.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private static Logger logger \u003d LogsCenter.getLogger(UI.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static final String ANSI_RESET \u003d \"\\u001B[0m\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static final String ANSI_BLACK \u003d \"\\u001B[30m\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static final String ANSI_RED \u003d \"\\u001B[31m\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static final String ANSI_GREEN \u003d \"\\u001B[32m\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static final String ANSI_YELLOW \u003d \"\\u001B[33m\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static final String ANSI_BLUE \u003d \"\\u001B[34m\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static final String ANSI_PURPLE \u003d \"\\u001B[35m\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static final String ANSI_CYAN \u003d \"\\u001B[36m\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static final String ANSI_WHITE \u003d \"\\u001B[37m\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static boolean debug \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private static UI ui;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    // to output result to GUI"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private String input \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    // variable returned to GUI"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private String emailContent \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    private String responseMsg \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Constructor with necessary configurations."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private UI() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        debug \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Gets singleton ui instance."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @return ui instance"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public static UI getInstance() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (ui \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            ui \u003d new UI();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return ui;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Initializes ui."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void initUi() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String helloMsg \u003d \"Hello from Email Manager\" + System.lineSeparator();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        helloMsg +\u003d \"What can I do for you?\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        showMessage(helloMsg);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        mainWindow.setInputPrefix();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void setKeyBinding(Scene scene) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        mainWindow.setKeyBinding(scene);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Links up command output with GUI display."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param input user input"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void respond(String input) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            setInput(input);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Command command \u003d CommandParseHelper.parseCommand(input);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            logger.info(\"[User Input] \" + input);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            logger.info(\"[Command] \" + command.toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            command.execute(Model.getInstance());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        } catch (CommandParseHelper.CommandParseException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            logger.severe(\"[CommandParserHelperError] \" + e.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void setDebug(boolean flag) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        debug \u003d flag;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Shows a simple message without any format."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param msg the message that is to be shown"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void showMessage(String msg) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (\"\".equals(msg)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        System.out.println(ANSI_RESET + msg);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limryan"
        },
        "content": "        showGui(msg);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        logger.info(\"[Message] \" + msg);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Shows a message in the format of a response, which is in between two lines."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param msg the message that is to be shown"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void showResponse(String msg) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (\"\".equals(msg)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        this.responseMsg \u003d msg;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        System.out.println(ANSI_RESET + \"------------------------------\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        System.out.println(msg);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        System.out.println(\"------------------------------\" + System.lineSeparator());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limryan"
        },
        "content": "        showGui(msg);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        logger.info(\"[Response] \" + msg);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Shows an error message in the red color."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param msg the error message that is to be shown"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void showError(String msg) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (\"\".equals(msg)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        String errorMsg \u003d ANSI_RED + msg + ANSI_RESET;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        System.out.println(errorMsg);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        showGui(msg);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        logger.severe(\"[Error] \" + errorMsg);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Shows a debug message when debug flag is on in yellow color."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param msg the debug message that is to be shown"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void showDebug(String msg) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        String debugMsg \u003d ANSI_YELLOW + msg + ANSI_RESET;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (debug) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            System.out.println(debugMsg);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        logger.fine(\"[Debug] \" + msg);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        //showGui(debugMsg);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public String getEmailContent() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return this.emailContent;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void setEmailContent(String emailContent) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.emailContent \u003d emailContent;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public String getResponseMsg() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        return responseMsg;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void setMainStage(Stage stage) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.mainWindow.setMainStage(stage);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void setMainWindow(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Updates the task displayed in GUI when read from file or after user input handled."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limryan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param taskStringList list of tasks in string form to be displayed"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void updateTaskList(ArrayList\u003cString\u003e taskStringList) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        mainWindow.updateTasksList(taskStringList);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Updates email content shown on gui."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void updateHtml() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        mainWindow.updateHtml();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Updates the emails displayed in GUI when read from file/Outlook server or after user input handled."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param emailStringList list of emails in string form to be displayed"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void updateEmailList(ArrayList\u003cString\u003e emailStringList) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        if (mainWindow !\u003d null) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            mainWindow.updateEmailsList(emailStringList);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Synchronizes the gui display of tasks and emails with the model."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void syncWithModel() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Model model \u003d Model.getInstance();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        model.updateGuiTaskList();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        model.updateGuiEmailList();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        model.updateEmailTagList();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "limryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * Show input command and output response in GUI."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limryan"
        },
        "content": "     * @param msg input"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "limryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "limryan"
        },
        "content": "    public void showGui(String msg) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (mainWindow \u003d\u003d null || \"\".equals(msg)) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "limryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        mainWindow.showGuiMessage(msg, input);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        input \u003d \"\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Shows a popup displaying long text message."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * @param text the text that is to be displayed in the popup"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void showTextPopup(String text) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        mainWindow.showTextPopup(text);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public void setInput(String input) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        return CommandParseHelper.getInputPrefix();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Duke.getInstance().exit();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 42,
      "limryan": 11,
      "JokerYan": 188
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/UserInputHandler.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import javafx.scene.control.TextFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.util.function.UnaryOperator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "class UserInputHandler {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    UserInputHandler(TextField userInput, Button sendButton) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        this.sendButton \u003d sendButton;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Set text in userInput."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * @param text to set in userInput."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void setUserInputText(String text) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        removeFilter(text);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        applyFilter();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        int pos \u003d userInput.getText().length();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (pos \u003c UI.getInstance().getPrefix().length()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            userInput.positionCaret(UI.getInstance().getPrefix().length());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            userInput.positionCaret(pos);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private void removeFilter(String text) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        // To apply a noFilter to userInput to remove the effect of the previous filter so that clear()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        // can work properly."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        UnaryOperator\u003cTextFormatter.Change\u003e noFilter \u003d c -\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            return c;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        userInput.setTextFormatter(new TextFormatter\u003cString\u003e(noFilter));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        userInput.setText(text);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private void applyFilter() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        // To apply a filter to any changes in userInput text field so that the prefix is non-deletable text."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        UnaryOperator\u003cTextFormatter.Change\u003e filter \u003d c -\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            if (c.getCaretPosition() \u003c UI.getInstance().getPrefix().length()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                return c;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        };"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        userInput.setTextFormatter(new TextFormatter\u003cString\u003e(filter));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Update text in userInput when DELETE is pressed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void setTextDelete() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        int pos \u003d userInput.getCaretPosition();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        String text \u003d userInput.getText();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        if (pos \u003e\u003d text.length()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        String newText \u003d text.substring(0, pos) + text.substring(pos + 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        setUserInputText(newText);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        userInput.positionCaret(pos);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     * Update text in userInput when BACKSPACE is pressed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void setTextBackSpace() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        int pos \u003d userInput.getCaretPosition();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        if (pos \u003c\u003d UI.getInstance().getPrefix().length()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        String text \u003d userInput.getText();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        String newText \u003d text.substring(0, pos - 1) + text.substring(pos);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        setUserInputText(newText);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        userInput.positionCaret(pos - 1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Moves the position of caret to the right by 1."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void moveCaretRight() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        int pos \u003d userInput.getCaretPosition();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        userInput.positionCaret(pos + 1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     * Moves the position of caret to the left by 1."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void moveCaretLeft() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        int pos \u003d userInput.getCaretPosition();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        userInput.positionCaret(pos - 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 70,
      "JokerYan": 32
    }
  },
  {
    "path": "src/main/resources/view/DukeDialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"TOP_RIGHT\" minHeight\u003d\"-Infinity\" fx:id\u003d\"dialogBox\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "         style\u003d\"-fx-background-color: #eeeeee; -fx-background-radius: 10; -fx-border-radius: 10;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "         -fx-border-color: #ffffff;\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         type\u003d\"javafx.scene.layout.HBox\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11.0.1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limryan"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limryan"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limryan"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limryan"
        },
        "content": "                \u003cInsets/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limryan"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limryan"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limryan"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                   preserveRatio\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limryan"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limryan"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limryan"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limryan"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 3,
      "limryan": 18,
      "JokerYan": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "\u003cAnchorPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"rootAnchorPane\" minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            prefHeight\u003d\"600.0\" prefWidth\u003d\"1000.0\" style\u003d\"-fx-background-color: #ffffff;\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            xmlns\u003d\"http://javafx.com/javafx/11.0.1\" fx:controller\u003d\"seedu.duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limryan"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        \u003cSplitPane dividerPositions\u003d\"0.34540117416829746, 0.6614481409001957\" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                   AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            \u003citems\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limryan"
        },
        "content": "                \u003cAnchorPane minWidth\u003d\"100.0\" prefHeight\u003d\"716.0\" prefWidth\u003d\"358.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limryan"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                        \u003cAnchorPane layoutY\u003d\"704.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                    AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                \u003cTextField fx:id\u003d\"userInput\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                           prefWidth\u003d\"277.0\" text\u003d\"task \" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                           AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"63.0\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                        \u003cFont size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                \u003c/TextField\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"268.0\" mnemonicParsing\u003d\"false\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                        onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"64.0\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                        text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"0.7999999999999972\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                        AnchorPane.rightAnchor\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                \u003cInsets bottom\u003d\"3.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"3.0\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                        \u003cAnchorPane prefHeight\u003d\"674.0\" prefWidth\u003d\"350.0\" AnchorPane.bottomAnchor\u003d\"51.0\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                    AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                    AnchorPane.topAnchor\u003d\"40.0\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                \u003cScrollPane fx:id\u003d\"scrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                            hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"678.0\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                            prefWidth\u003d\"340.0\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                            AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                            AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                    \u003ccontent\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                        \u003cVBox fx:id\u003d\"dialogContainer\" alignment\u003d\"TOP_CENTER\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                              style\u003d\"-fx-background-color: #ffffff;\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                                \u003cInsets/\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                                \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                    \u003c/content\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                        \u003cInsets bottom\u003d\"3.0\" left\u003d\"3.0\" right\u003d\"3.0\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limryan"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limryan"
        },
        "content": "                        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                        \u003cAnchorPane layoutX\u003d\"11.0\" layoutY\u003d\"5.0\" prefWidth\u003d\"350.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                    AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                \u003cText layoutX\u003d\"22.0\" layoutY\u003d\"29.0\" lineSpacing\u003d\"2.0\" strokeType\u003d\"OUTSIDE\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                      strokeWidth\u003d\"0.0\" text\u003d\"Commands\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                      AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                        \u003cFont size\u003d\"18.0\"/\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                \u003c/Text\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                \u003cInsets left\u003d\"10.0\" top\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limryan"
        },
        "content": "                \u003cAnchorPane minWidth\u003d\"150.0\" prefHeight\u003d\"720.0\" prefWidth\u003d\"300.0\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limryan"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                        \u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                    AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                    AnchorPane.topAnchor\u003d\"40.0\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limryan"
        },
        "content": "                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                        \u003cVBox fx:id\u003d\"taskContainer\" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                              AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                              AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                                                \u003cListView fx:id\u003d\"tasksListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                            \u003c/children\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limryan"
        },
        "content": "                            \u003c/content\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                \u003cInsets bottom\u003d\"3.0\" left\u003d\"3.0\" right\u003d\"3.0\"/\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limryan"
        },
        "content": "                        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                        \u003cAnchorPane layoutX\u003d\"11.0\" layoutY\u003d\"5.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                    AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                \u003cText lineSpacing\u003d\"2.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Tasks\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                      AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                      AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                        \u003cFont size\u003d\"18.0\"/\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                \u003c/Text\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limryan"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                \u003cInsets left\u003d\"10.0\" top\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limryan"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limryan"
        },
        "content": "                \u003cAnchorPane minWidth\u003d\"150.0\" prefHeight\u003d\"720.0\" prefWidth\u003d\"300.0\"\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limryan"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                        \u003cAnchorPane layoutX\u003d\"11.0\" layoutY\u003d\"5.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                    AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                \u003cText strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                      text\u003d\"Emails (press ESC to toggle the display)\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                      AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                      AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                        \u003cFont size\u003d\"18.0\"/\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                \u003c/Text\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                \u003cInsets left\u003d\"10.0\" top\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                        \u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                    AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                    AnchorPane.topAnchor\u003d\"40.0\"\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limryan"
        },
        "content": "                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                        \u003cVBox fx:id\u003d\"emailContainer\" prefHeight\u003d\"440.0\" prefWidth\u003d\"328.0\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                              AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                              AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limryan"
        },
        "content": "                                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                                \u003cListView fx:id\u003d\"emailsListView\" prefHeight\u003d\"370.0\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                                          prefWidth\u003d\"337.0\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                                \u003cWebView fx:id\u003d\"webView\" pickOnBounds\u003d\"true\" prefHeight\u003d\"370\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                                         prefWidth\u003d\"337.0\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                            \u003c/children\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limryan"
        },
        "content": "                            \u003c/content\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                                \u003cInsets bottom\u003d\"3.0\" left\u003d\"3.0\" right\u003d\"3.0\"/\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limryan"
        },
        "content": "                        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limryan"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limryan"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            \u003c/items\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limryan"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 2,
      "limryan": 56,
      "JokerYan": 112
    }
  },
  {
    "path": "src/main/resources/view/TaskCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "      xmlns\u003d\"http://javafx.com/javafx/11.0.1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limryan"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limryan"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limryan"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limryan"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limryan"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limryan"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limryan"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limryan"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limryan"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limryan"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limryan"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limryan"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limryan"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limryan"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limryan"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limryan"
        },
        "content": "                \u003cLabel fx:id\u003d\"taskName\" text\u003d\"\\$taskName\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limryan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limryan"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limryan"
        },
        "content": "            \u003cLabel fx:id\u003d\"taskType\" text\u003d\"\\$taskType\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limryan"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" text\u003d\"\\$date\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limryan"
        },
        "content": "            \u003cLabel fx:id\u003d\"doAfter\" text\u003d\"\\$doAfter\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limryan"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limryan"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limryan"
        },
        "content": "            \u003cRowConstraints/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limryan"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limryan"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "limryan": 38,
      "JokerYan": 2
    }
  },
  {
    "path": "src/main/resources/view/UserDialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"TOP_RIGHT\" minHeight\u003d\"-Infinity\" fx:id\u003d\"dialogBox\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "         style\u003d\"-fx-background-color: #dddddd; -fx-background-radius: 10; -fx-border-radius: 10;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "         -fx-border-color: #ffffff;\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         type\u003d\"javafx.scene.layout.HBox\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11.0.1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limryan"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limryan"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limryan"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limryan"
        },
        "content": "                \u003cInsets/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limryan"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limryan"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limryan"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                   preserveRatio\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limryan"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limryan"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limryan"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limryan"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limryan"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 3,
      "limryan": 18,
      "JokerYan": 7
    }
  },
  {
    "path": "src/test/java/seedu/duke/CommandParserHelperTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.common.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.common.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.common.command.FlipCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.common.command.HelpCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.common.command.InvalidCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.email.EmailList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.email.command.EmailFetchCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.email.command.EmailListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.email.command.EmailListTagCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.email.command.EmailShowCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.email.command.EmailTagCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.email.entity.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.lang.reflect.InvocationTargetException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.lang.reflect.Method;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "public class CommandParserHelperTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public void parseEmailCommandTest() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        Email emailOne \u003d new Email(\"TestEmailOne\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        Email emailTwo \u003d new Email(\"TestEmailTwo\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        Email emailThree \u003d new Email(\"TestEmailThree\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        EmailList emailList \u003d new EmailList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        emailList.add(emailOne);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        emailList.add(emailTwo);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        emailList.add(emailThree);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        Model model \u003d Model.getInstance();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        model.setIsUpdateGui(false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        model.setEmailList(emailList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        ArrayList\u003cCommand.Option\u003e optionListEmpty \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        //ArrayList\u003cCommand.Option\u003e optionListCorrect \u003d new ArrayList\u003c\u003e(Arrays.asList(new Command.Option("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        //        \"msg\", \"do after description\")));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        ArrayList\u003cCommand.Option\u003e optionListExtra \u003d new ArrayList\u003c\u003e(Arrays.asList(new Command.Option("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                \"msg\", \"do after description\"), new Command.Option(\"tag\", \"123\")));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            Class\u003c?\u003e parser \u003d Class.forName(\"seedu.duke.common.parser.CommandParseHelper\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            Method method \u003d parser.getDeclaredMethod(\"parseEmailCommand\", String.class, ArrayList.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            method.setAccessible(true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            assertTrue(method.invoke(null, \"email show 1\", null) instanceof EmailShowCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            assertTrue(method.invoke(null, \"email show 4\", null) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            assertTrue(method.invoke(null, \"email show -1\", null) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            assertTrue(method.invoke(null, \"email flip\", null) instanceof FlipCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            assertTrue(method.invoke(null, \"email bye\", null) instanceof ExitCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            assertTrue(method.invoke(null, \"email help\", null) instanceof HelpCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            assertTrue(method.invoke(null, \"email fetch\", null) instanceof EmailFetchCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            assertTrue(method.invoke(null, \"email list\", optionListExtra) instanceof EmailListTagCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            assertTrue(method.invoke(null, \"email list\", optionListEmpty) instanceof EmailListCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            assertTrue(method.invoke(null, \"email update 1\", optionListEmpty) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            assertTrue(method.invoke(null, \"email update\", optionListExtra) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            assertTrue(method.invoke(null, \"email update 4\", optionListExtra) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            assertTrue(method.invoke(null, \"email update 1\", optionListExtra) instanceof EmailTagCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        } catch (ClassNotFoundException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            fail(\"No such class\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        } catch (NoSuchMethodException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            fail(\"No such method\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        } catch (InvocationTargetException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            fail(e.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        } catch (IllegalAccessException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            fail(\"No Access\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 80
    }
  },
  {
    "path": "src/test/java/seedu/duke/EmailContentParseHelperTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.entity.KeywordPair;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.parser.EmailContentParseHelper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.email.parser.EmailFormatParseHelper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.email.entity.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import static seedu.duke.email.parser.EmailContentParseHelper.editDistance;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import static seedu.duke.email.parser.EmailContentParseHelper.keywordInString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class EmailContentParseHelperTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void editDistanceTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertEquals(1, editDistance(\"a\", \"b\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertEquals(1, editDistance(\"a\", \"\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertEquals(2, editDistance(\"a\", \"bc\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertEquals(1, editDistance(\"a\", \"ba\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertEquals(4, editDistance(\"food\", \"money\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertEquals(3, editDistance(\"kitten\", \"sitting\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public void keywordInStringTest() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String input1 \u003d \"CS2113T CS2113 Akshay Narayan CS2113 TAN KIAN WEI\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String input2 \u003d \"CS2113 Tutorial CS2113ABC CS2113\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        String input3 \u003d \"CS2113 CS2113 CS2113 CS2113\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        KeywordPair keywordPair \u003d new KeywordPair("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                \"CS2113T\", new ArrayList\u003cString\u003e(List.of(\"CS2113T\", \"CS2113\", \"TAN KIAN WEI, JASON\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                \"Leow Wei Xiang\", \"Akshay Narayan\", \"Akshay\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertEquals(5, keywordInString(input1, keywordPair));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertEquals(2, keywordInString(input2, keywordPair));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertEquals(4, keywordInString(input3, keywordPair));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public void allKeyWordInEmailTest() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        String body \u003d \"CS2113T Akshay Narayan CS2113 TAN KIAN WEI \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        EmailFormatParseHelper.Sender sender \u003d new EmailFormatParseHelper.Sender(\"Akshay\", null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        Email email \u003d new Email(\"CS2113\", sender, null, body, null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        Model.getInstance().initModel();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        //EmailContentParseHelper.initKeywordList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        EmailContentParseHelper.allKeywordInEmail(email);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        ArrayList\u003cEmail.Tag\u003e tags \u003d email.getTags();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        for (Email.Tag tag : tags) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            if (tag.getKeywordPair().getKeyword().equals(\"CS2113T\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                assertEquals(12, tag.getRelevance());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 27,
      "JokerYan": 33
    }
  },
  {
    "path": "src/test/java/seedu/duke/EmailTagsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.email.EmailList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.email.EmailTags;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.email.entity.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lee761"
        },
        "content": "import seedu.duke.email.parser.EmailContentParseHelper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lee761"
        },
        "content": "import seedu.duke.email.parser.EmailFormatParseHelper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lee761"
        },
        "content": "import seedu.duke.email.storage.EmailStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "public class EmailTagsTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public void updateEmailTagListTestFromStorage() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        // To get emailList from local storage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lee761"
        },
        "content": "        EmailList emailList \u003d EmailStorage.readEmailFromFile(\"emailTagsTestFile.txt\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        System.out.println(emailList.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        HashMap\u003cString, EmailTags.SubTagMap\u003e tagMap \u003d EmailTags.updateEmailTagList(emailList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        System.out.println(tagMap);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        assertNotNull(tagMap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        //assertTrue(tagMap.containsKey(\"SEP\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        //assertTrue(tagMap.containsKey(\"Spam\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        //assertTrue(tagMap.containsKey(\"CS2113T\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        //assertTrue(tagMap.containsKey(\"CG2271\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        //assertTrue(tagMap.containsKey(\"Assignment\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        //"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        //assertTrue(tagMap.get(\"CS2113T\").containsKey(\"CS2113T\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        //assertTrue(tagMap.get(\"CS2113T\").containsKey(\"Spam\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        //assertTrue(tagMap.get(\"CS2113T\").containsKey(\"Tutorial\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        //assertFalse(tagMap.get(\"CS2113T\").containsKey(\"SEP\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        //"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        //assertTrue(tagMap.get(\"CG2271\").containsKey(\"Spam\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        //assertTrue(tagMap.get(\"CG2271\").containsKey(\"Tutorial\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        //assertFalse(tagMap.get(\"CG2271\").containsKey(\"SEP\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        //"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        //assertTrue(tagMap.get(\"Spam\").containsKey(\"Spam\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        //assertTrue(tagMap.get(\"Spam\").containsKey(\"Tutorial\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        //assertTrue(tagMap.get(\"Spam\").containsKey(\"CG2271\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        //assertFalse(tagMap.get(\"Spam\").containsKey(\"SEP\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        //"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        //assertTrue(tagMap.get(\"Tutorial\").containsKey(\"Tutorial\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        //assertTrue(tagMap.get(\"Tutorial\").containsKey(\"Spam\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        //assertTrue(tagMap.get(\"Tutorial\").containsKey(\"CS2113T\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        //assertTrue(tagMap.get(\"Tutorial\").containsKey(\"CG2271\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        //assertFalse(tagMap.get(\"Tutorial\").containsKey(\"SEP\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public void updateEmailTagListTest() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        // To create a dummy emailList"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lee761"
        },
        "content": "        String body \u003d \"CS2113T Akshay Narayan CS2113 TAN KIAN WEI uhc Wellness\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        EmailFormatParseHelper.Sender sender \u003d new EmailFormatParseHelper.Sender(\"Akshay\", null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        Email email \u003d new Email(\"CS2113 SEP\", sender, null, body, null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lee761"
        },
        "content": "        EmailContentParseHelper.initKeywordList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lee761"
        },
        "content": "        EmailContentParseHelper.allKeywordInEmail(email);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        EmailList emailList \u003d new EmailList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        emailList.add(email);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        HashMap\u003cString, EmailTags.SubTagMap\u003e tagMap \u003d EmailTags.updateEmailTagList(emailList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        assertTrue(tagMap.containsKey(\"SEP\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        assertTrue(tagMap.containsKey(\"Spam\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        assertTrue(tagMap.containsKey(\"CS2113T\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        assertFalse(tagMap.containsKey(\"CG2271\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        assertFalse(tagMap.containsKey(\"Assignment\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        assertTrue(tagMap.get(\"SEP\").containsKey(\"SEP\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        assertTrue(tagMap.get(\"Spam\").containsKey(\"Spam\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        assertTrue(tagMap.get(\"CS2113T\").containsKey(\"CS2113T\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        assertTrue(tagMap.get(\"SEP\").containsKey(\"CS2113T\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        assertTrue(tagMap.get(\"SEP\").containsKey(\"Spam\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        assertTrue(tagMap.get(\"CS2113T\").containsKey(\"Spam\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        assertTrue(tagMap.get(\"CS2113T\").containsKey(\"SEP\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        assertTrue(tagMap.get(\"Spam\").containsKey(\"CS2113T\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        assertTrue(tagMap.get(\"Spam\").containsKey(\"SEP\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        assertFalse(tagMap.get(\"CS2113T\").containsKey(\"Tutorial\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 84,
      "lee761": 7
    }
  },
  {
    "path": "src/test/java/seedu/duke/EmailTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.email.entity.Email;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    public void addTagTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        Email email \u003d new Email(\"Test Email\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        String keyword \u003d \"Spam\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        email.addTag(keyword);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        int infinity \u003d 0x3f3f3f;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        ArrayList\u003cEmail.Tag\u003e tags \u003d email.getTags();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        for (Email.Tag tag : tags) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            if (tag.getKeywordPair().getKeyword().equals(keyword)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                assertEquals(infinity, tag.getRelevance());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 29
    }
  },
  {
    "path": "src/test/java/seedu/duke/NaturalDateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lee761"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lee761"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lee761"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lee761"
        },
        "content": "import seedu.duke.task.command.TaskParseNaturalDateHelper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lee761"
        },
        "content": "import seedu.duke.task.entity.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lee761"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lee761"
        },
        "content": "public class NaturalDateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lee761"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lee761"
        },
        "content": "    public void getDateTest() throws Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lee761"
        },
        "content": "        LocalDateTime dateTime \u003d TaskParseNaturalDateHelper.convertNaturalDate(\"Mon\", \"1220\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lee761"
        },
        "content": "        assertEquals(dateTime, TaskParseNaturalDateHelper.getDate(\"Mon 1220\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lee761"
        },
        "content": "        assertEquals(dateTime, TaskParseNaturalDateHelper.getDate(\"mon 1220\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lee761"
        },
        "content": "        assertEquals(dateTime, TaskParseNaturalDateHelper.getDate(\"Mon     1220\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lee761"
        },
        "content": "        dateTime \u003d TaskParseNaturalDateHelper.convertNaturalDate(\"Thu\", null);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lee761"
        },
        "content": "        assertEquals(dateTime, TaskParseNaturalDateHelper.getDate(\"Thu\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lee761"
        },
        "content": "        assertEquals(dateTime, TaskParseNaturalDateHelper.getDate(\"Thu   \"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lee761"
        },
        "content": "        assertEquals(dateTime, TaskParseNaturalDateHelper.getDate(\"thu\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lee761"
        },
        "content": "        LocalDateTime time \u003d Task.parseDate(\"21/10/2019 1220\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lee761"
        },
        "content": "        assertEquals(time, TaskParseNaturalDateHelper.getDate(\"21/10/2019 1220\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lee761"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lee761"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lee761": 26
    }
  },
  {
    "path": "src/test/java/seedu/duke/TaskCommandParseHelperTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.common.command.InvalidCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.common.parser.CommandParseHelper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.task.command.TaskAddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.task.command.TaskDeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.task.command.TaskDoAfterCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.task.command.TaskDoneCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.task.command.TaskFindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.task.command.TaskReminderCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "import seedu.duke.task.command.TaskSnoozeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import seedu.duke.task.entity.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lee761"
        },
        "content": "import seedu.duke.task.parser.TaskCommandParseHelper;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lee761"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.lang.reflect.Field;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.lang.reflect.InvocationTargetException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.lang.reflect.Method;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limryan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limryan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limryan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "public class TaskCommandParseHelperTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    private void fakeModel() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Method add \u003d List.class.getDeclaredMethod(\"add\", Object.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            TaskList newTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            add.invoke(newTaskList, new Task(\"\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            add.invoke(newTaskList, new Task(\"\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            add.invoke(newTaskList, new Task(\"\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            add.invoke(newTaskList, new Task(\"\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            add.invoke(newTaskList, new Task(\"\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            Class\u003c?\u003e modelClass \u003d Class.forName(\"seedu.duke.common.model.Model\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            Object model \u003d modelClass.getMethod(\"getInstance\").invoke(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            Field taskList \u003d modelClass.getDeclaredField(\"taskList\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            taskList.setAccessible(true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            taskList.set(model, newTaskList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "        } catch (ClassNotFoundException | NoSuchFieldException | NoSuchMethodException"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "                | IllegalAccessException | InvocationTargetException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void isCommandFormatTest() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        //positive cases"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertTrue(CommandParseHelper.isCommandFormat(\"task deadline 123abc -by asdas\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertTrue(CommandParseHelper.isCommandFormat(\"task deadline 123abc -by asdas -asd nisnds\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertTrue(CommandParseHelper.isCommandFormat(\"task deadline 123abc 123abc -by asdas -asd nisnds\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertTrue(CommandParseHelper.isCommandFormat(\"task deadline -by asdas -asd nisnds\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertTrue(CommandParseHelper.isCommandFormat(\"task deadline 123abc -by asdas -asd nis nds\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertTrue(CommandParseHelper.isCommandFormat(\"email 123abc -by asdas\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertTrue(CommandParseHelper.isCommandFormat(\"task deadline 123abc\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertTrue(CommandParseHelper.isCommandFormat(\"task deadline 123abc -by asdas\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertTrue(CommandParseHelper.isCommandFormat(\"task ads deadline 123abc -by asdas\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertTrue(CommandParseHelper.isCommandFormat(\"task done 1\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertTrue(CommandParseHelper.isCommandFormat(\"task deadline 123 -time 11/11/1111 1111\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertTrue(CommandParseHelper.isCommandFormat(\"task bye\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        //negative cases"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        //not starting with email/task"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertFalse(CommandParseHelper.isCommandFormat(\"deadline 123abc -by asdas\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        //empty option"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertFalse(CommandParseHelper.isCommandFormat(\"task deadline 123abc -by \"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertFalse(CommandParseHelper.isCommandFormat(\"task deadline 123abc -by 123 -time\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void parseOptionsTest() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertEquals(2, CommandParseHelper.parseOptions(\"todo 123abc -tag sad -remarks pick\").size());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertEquals(\"remarks\", CommandParseHelper.parseOptions(\"todo 123abc -tag sad -remarks pick\").get(0).getKey());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertEquals(\"pick\", CommandParseHelper.parseOptions(\"todo 123abc -tag sad -remarks pick\").get(0).getValue());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertEquals(\"tag\", CommandParseHelper.parseOptions(\"todo 123abc -tag sad -remarks pick\").get(1).getKey());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertEquals(\"sad\", CommandParseHelper.parseOptions(\"todo 123abc -tag sad -remarks pick\").get(1).getValue());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertEquals(\"remarks\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                CommandParseHelper.parseOptions(\"todo 123abc -tag sad -remarks pick one side\").get(0).getKey());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertEquals(\"pick one side\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                CommandParseHelper.parseOptions(\"todo 123abc -tag sad -remarks pick one side\").get(0).getValue());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertEquals(\"11/11/1111 1111\", CommandParseHelper.parseOptions(\"task deadline 123 -time 11/11/1111 \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + \"1111\").get(0).getValue());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertEquals(0, CommandParseHelper.parseOptions(\"todo 123abc\").size());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void stripOptionsTest() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertEquals(\"todo 123abc\", CommandParseHelper.stripOptions(\"todo 123abc -tag sad -remarks pick\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertEquals(\"todo 123abc\", CommandParseHelper.stripOptions(\"todo 123abc -tag sad -remarks pick one\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertEquals(\"todo 123abc\", CommandParseHelper.stripOptions(\"todo 123abc -tag sad\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertEquals(\"todo 123abc\", CommandParseHelper.stripOptions(\"todo 123abc\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        assertEquals(\"task deadline 123\", CommandParseHelper.stripOptions(\"task deadline 123 -time 11/11/1111 \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                + \"1111\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void parseDoneCommandTest() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Class\u003c?\u003e parser \u003d Class.forName(\"seedu.duke.task.parser.TaskCommandParseHelper\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Method method \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    parser.getDeclaredMethod(\"parseDoneCommand\", String.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            method.setAccessible(true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //positive cases"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"done 1\") instanceof TaskDoneCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"done 1\") instanceof TaskDoneCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"done 1  \") instanceof TaskDoneCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //negative cases"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //no index"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"done \") instanceof InvalidCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //random character after index with space"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"done 1  a\") instanceof InvalidCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //random character after index"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"done 1a\") instanceof InvalidCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //large index"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"done 1000000\") instanceof InvalidCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //negative index"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"done -1000\") instanceof InvalidCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (ClassNotFoundException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(\"No such class\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (NoSuchMethodException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(\"No such method\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (InvocationTargetException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(e.getMessage());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (IllegalAccessException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(\"No Access\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void parseDeleteCommandTest() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fakeModel();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Class\u003c?\u003e parser \u003d Class.forName(\"seedu.duke.task.parser.TaskCommandParseHelper\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Method method \u003d parser.getDeclaredMethod(\"parseDeleteCommand\", String.class);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            method.setAccessible(true);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //positive cases"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"delete 1\") instanceof TaskDeleteCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"delete 1  \") instanceof TaskDeleteCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //negative cases"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //no index"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"delete \") instanceof InvalidCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //random character after index with space"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"delete 1  a\") instanceof InvalidCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //random character after index"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"delete 1a\") instanceof InvalidCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (ClassNotFoundException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(\"No such class\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (NoSuchMethodException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(\"No such method\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (InvocationTargetException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(e.getMessage());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (IllegalAccessException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(\"No Access\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void parseFindCommandTest() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Class\u003c?\u003e parser \u003d Class.forName(\"seedu.duke.task.parser.TaskCommandParseHelper\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Method method \u003d parser.getDeclaredMethod(\"parseFindCommand\", String.class);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            method.setAccessible(true);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //positive cases"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"find 1\") instanceof TaskFindCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"find 1 a\") instanceof TaskFindCommand);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //negative cases"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //no keyword"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"find   \") instanceof InvalidCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (ClassNotFoundException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(\"No such class\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (NoSuchMethodException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(\"No such method\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (InvocationTargetException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(e.getMessage());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (IllegalAccessException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(\"No Access\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void parseReminderCommandTest() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Class\u003c?\u003e parser \u003d Class.forName(\"seedu.duke.task.parser.TaskCommandParseHelper\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Method method \u003d parser.getDeclaredMethod(\"parseReminderCommand\", String.class);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            method.setAccessible(true);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limryan"
        },
        "content": "            //positive cases"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"reminder 1\") instanceof TaskReminderCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"reminder 1000000000000000\") instanceof TaskReminderCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"reminder 00 \") instanceof TaskReminderCommand);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //negative cases"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //random character after day limit with space"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"reminder 1 a\") instanceof InvalidCommand);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //negative day limit"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"reminder -1\") instanceof InvalidCommand);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //non-integer day limit"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"reminder abc \") instanceof InvalidCommand);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (ClassNotFoundException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(\"No such class\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (NoSuchMethodException e) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(\"No such method\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (InvocationTargetException e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(e.getMessage());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (IllegalAccessException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(\"No Access\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void parseDoAfterCommandTest() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Class\u003c?\u003e parser \u003d Class.forName(\"seedu.duke.task.parser.TaskCommandParseHelper\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Method method \u003d parser.getDeclaredMethod(\"parseDoAfterCommand\", String.class, ArrayList.class);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            method.setAccessible(true);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            ArrayList\u003cCommand.Option\u003e optionListCorrect \u003d new ArrayList\u003c\u003e(Arrays.asList(new Command.Option("
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    \"msg\", \"do after description\")));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ziyun99"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            ArrayList\u003cCommand.Option\u003e optionListExtra \u003d new ArrayList\u003c\u003e(Arrays.asList(new Command.Option("
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    \"msg\", \"do after description\"), new Command.Option(\"tag\", \"123\")));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //positive cases"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"doAfter 1\", optionListCorrect) instanceof TaskDoAfterCommand);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"doafter 1\", optionListCorrect) instanceof TaskDoAfterCommand);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"doafter 1\", optionListExtra) instanceof TaskDoAfterCommand);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //negative cases"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //no index"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"doafter \", optionListCorrect) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //no index or space"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"doafter\", optionListCorrect) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //non-integer index"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"doafter 123abc\", optionListCorrect) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //more than 1 integer"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"doafter 1 23\", optionListCorrect) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            ArrayList\u003cCommand.Option\u003e optionListEmpty \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //no description"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"doafter 1\", optionListEmpty) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (ClassNotFoundException e) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(\"No such class\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (NoSuchMethodException e) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(\"No such method\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (InvocationTargetException e) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(e.getMessage());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (IllegalAccessException e) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(\"No Access\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void parseSnoozeCommandTest() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Class\u003c?\u003e parser \u003d Class.forName(\"seedu.duke.task.parser.TaskCommandParseHelper\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Method method \u003d parser.getDeclaredMethod(\"parseSnoozeCommand\", String.class, ArrayList.class);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            method.setAccessible(true);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            ArrayList\u003cCommand.Option\u003e optionList \u003d new ArrayList\u003cCommand.Option\u003e();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //positive cases"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"snooze 1\", optionList) instanceof TaskSnoozeCommand);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"snooze 1\", optionList) instanceof TaskSnoozeCommand);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"snooze 1  \", optionList) instanceof TaskSnoozeCommand);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //negative cases"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //no index"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"snooze \", optionList) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //random character after index with space"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"snooze 1  a\", optionList) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //random character after index"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"snooze 1a\", optionList) instanceof InvalidCommand);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (ClassNotFoundException e) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(\"No such class\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (NoSuchMethodException e) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(\"No such method\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (InvocationTargetException e) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(e.getMessage());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (IllegalAccessException e) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(\"No Access\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void parseAddToDoCommandTest() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Class\u003c?\u003e parser \u003d Class.forName(\"seedu.duke.task.parser.TaskCommandParseHelper\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Method method \u003d parser.getDeclaredMethod(\"parseAddToDoCommand\", String.class,"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    String.class, ArrayList.class, String.class);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            method.setAccessible(true);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            ArrayList\u003cString\u003e tagList \u003d new ArrayList\u003c\u003e(Arrays.asList(\"123\", \"234\"));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            String doafter \u003d \"345\";"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //positive cases"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"todo 123\", null, null, \"\") instanceof TaskAddCommand);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"todo 123\", null, tagList, \"\") instanceof TaskAddCommand);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"todo 123\", doafter, tagList, \"\") instanceof TaskAddCommand);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"todo 123 234\", null, null, \"\") instanceof TaskAddCommand);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //negative cases"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //invalid character at the end"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"todo abc 123 /\", null, null, \"\") instanceof InvalidCommand);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //no name"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"todo \", null, null, \"\") instanceof InvalidCommand);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //no name or space"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"todo\", null, null, \"\") instanceof InvalidCommand);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (ClassNotFoundException e) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(\"No such class\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (NoSuchMethodException e) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            //fail(\"No such method\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (InvocationTargetException e) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(e.getMessage());"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (IllegalAccessException e) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(\"No Access\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void parseAddDeadlineCommandTest() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Class\u003c?\u003e parser \u003d Class.forName(\"seedu.duke.task.parser.TaskCommandParseHelper\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Method method \u003d parser.getDeclaredMethod(\"parseAddDeadlineCommand\", String.class,"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    LocalDateTime.class, String.class, ArrayList.class, String.class);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            method.setAccessible(true);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            ArrayList\u003cString\u003e tagList \u003d new ArrayList\u003c\u003e(Arrays.asList(\"123\", \"234\"));"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            LocalDateTime time \u003d Task.parseDate(\"11/12/2019 1220\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            String doafter \u003d \"345\";"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //positive cases"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"deadline 123\", time, null, null, \"\") instanceof TaskAddCommand);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"deadline 123\", time, null, tagList, \"\") instanceof TaskAddCommand);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"deadline 123\", time, doafter, tagList, \"\") instanceof TaskAddCommand);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"deadline 123 234\", time, null, null, \"\") instanceof TaskAddCommand);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //negative cases"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //invalid character at the back"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"deadline abc 123 /\", time, null, null, \"\") instanceof InvalidCommand);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //no name"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"deadline \", time, null, null, \"\") instanceof InvalidCommand);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //no name or space"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"deadline\", time, null, null, \"\") instanceof InvalidCommand);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //no time"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"deadline 123\", null, null, null, \"\") instanceof InvalidCommand);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (ClassNotFoundException e) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(\"No such class\");"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (NoSuchMethodException e) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            //fail(\"No such method\");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (InvocationTargetException e) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(e.getMessage());"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (IllegalAccessException e) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(\"No Access\");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (CommandParseHelper.CommandParseException e) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    public void parseAddEventCommandTest() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Class\u003c?\u003e parser \u003d Class.forName(\"seedu.duke.task.parser.TaskCommandParseHelper\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            Method method \u003d parser.getDeclaredMethod(\"parseEventCommand\", String.class, LocalDateTime.class,"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "                    String.class, ArrayList.class, String.class);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            method.setAccessible(true);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            ArrayList\u003cString\u003e tagList \u003d new ArrayList\u003c\u003e(Arrays.asList(\"123\", \"234\"));"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            LocalDateTime time \u003d Task.parseDate(\"11/12/2019 1220\");"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            String doafter \u003d \"345\";"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "JokerYan"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //positive cases"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"event 123\", time, null, null, \"\") instanceof TaskAddCommand);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"event 123\", time, null, tagList, \"\") instanceof TaskAddCommand);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"event 123\", time, doafter, tagList, \"\") instanceof TaskAddCommand);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"event 123 234\", time, null, null, \"\") instanceof TaskAddCommand);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //negative cases"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //invalid character at the end"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"event abc 123 /\", time, null, null, \"\") instanceof InvalidCommand);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //no name"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"event \", time, null, null, \"\") instanceof InvalidCommand);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //no name or space"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"event\", time, null, null, \"\") instanceof InvalidCommand);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            //no time"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            assertTrue(method.invoke(null, \"event 123\", null, null, null, \"\") instanceof InvalidCommand);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (ClassNotFoundException e) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(\"No such class\");"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (NoSuchMethodException e) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ziyun99"
        },
        "content": "            //fail(\"No such method\");"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (InvocationTargetException | CommandParseHelper.CommandParseException e) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(e.getMessage());"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        } catch (IllegalAccessException e) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "            fail(\"No Access\");"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "limryan"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "lee761"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "lee761"
        },
        "content": "    public void checkTimeStringTest() {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "lee761"
        },
        "content": "        assertEquals(\"Mon\", TaskCommandParseHelper.checkTimeString(\"Mon 1212\").getKey());"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "lee761"
        },
        "content": "        assertEquals(\"1212\", TaskCommandParseHelper.checkTimeString(\"Mon 1212\").getValue());"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "lee761"
        },
        "content": "        assertEquals(\"1212\", TaskCommandParseHelper.checkTimeString(\"Mon 1212  \").getValue());"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "lee761"
        },
        "content": "        assertEquals(\"Tue\", TaskCommandParseHelper.checkTimeString(\"Tue\").getKey());"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "lee761"
        },
        "content": "        assertEquals(null, TaskCommandParseHelper.checkTimeString(\"Tue\").getValue());"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "lee761"
        },
        "content": "        assertEquals(\"Tue\", TaskCommandParseHelper.checkTimeString(\"Tue   \").getKey());"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "lee761"
        },
        "content": "        assertEquals(\"Thu\", TaskCommandParseHelper.checkTimeString(\"thu\").getKey());"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "lee761"
        },
        "content": "        assertEquals(\"2322\", TaskCommandParseHelper.checkTimeString(\"thu 2322\").getValue());"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "lee761"
        },
        "content": "        assertEquals(\"Fri\", TaskCommandParseHelper.checkTimeString(\"Fri    2000\").getKey());"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "lee761"
        },
        "content": "        assertEquals(\"Tue\", TaskCommandParseHelper.checkTimeString(\"Tue tue\").getKey());"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "lee761"
        },
        "content": "        assertEquals(null, TaskCommandParseHelper.checkTimeString(\"1212\").getValue());"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "lee761"
        },
        "content": "        assertEquals(null, TaskCommandParseHelper.checkTimeString(\"\").getKey());"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "lee761"
        },
        "content": "        assertEquals(null, TaskCommandParseHelper.checkTimeString(\"\").getValue());"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "lee761"
        },
        "content": "        assertEquals(null, TaskCommandParseHelper.checkTimeString(\"\").getKey());"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lee761"
        },
        "content": "        assertEquals(\"1212\", TaskCommandParseHelper.checkTimeString(\"1212 1212\").getKey());"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "lee761"
        },
        "content": "        assertEquals(\"1212\", TaskCommandParseHelper.checkTimeString(\"1212\").getKey());"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "lee761"
        },
        "content": "    }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "JokerYan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyun99": 18,
      "limryan": 5,
      "JokerYan": 379,
      "lee761": 21
    }
  }
]
