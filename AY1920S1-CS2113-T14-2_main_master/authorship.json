[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    archiveBaseName \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    archiveVersion \u003d \"v1.3\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "sourceSets{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    main {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        resources {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            srcDirs \u003d [\u0027src/main/java\u0027]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "saradj"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "saradj"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    compile group: \u0027com.massisframework\u0027, name: \u0027j-text-utils\u0027, version: \u00270.3.4\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "saradj"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "saradj"
        },
        "content": "test {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "saradj"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "saradj"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"duke/Duke\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "9hafidz6": 11,
      "saradj": 7,
      "-": 32
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.command.Cmd;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.command.ingredientCommand.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.command.ingredientCommand.RemoveAllExpired;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.dish.Dish;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.dish.DishList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.fridge.Fridge;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.ingredient.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.order.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.order.OrderList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.storage.FridgeStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.storage.OrderStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "saradj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": " * MAIN CLASS DUKE, start from main function."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "saradj"
        },
        "content": "    private FridgeStorage fridgeStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "saradj"
        },
        "content": "    private Storage orderStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    private DishList dish;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    private OrderList order;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "saradj"
        },
        "content": "    private Fridge fridge;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public enum Type {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "saradj"
        },
        "content": "        INGREDIENT, DISH, ORDER"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * The constructor method for Duke."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "saradj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath used to specify the location of the file in the hard disc."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "saradj"
        },
        "content": "        String fridgeFilePath \u003d \"data/fridge.txt\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "saradj"
        },
        "content": "        String orderFilePath \u003d \"data/order.txt\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        dish \u003d new DishList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        order \u003d new OrderList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "saradj"
        },
        "content": "        fridge \u003d new Fridge();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "saradj"
        },
        "content": "        //taskStorage \u003d new TaskStorage(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "saradj"
        },
        "content": "        fridgeStorage \u003d new FridgeStorage(fridgeFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "saradj"
        },
        "content": "        orderStorage \u003d new OrderStorage(orderFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "saradj"
        },
        "content": "            //tasks \u003d new TaskList(taskStorage.load().getAllEntries());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "saradj"
        },
        "content": "            fridge \u003d new Fridge(fridgeStorage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "saradj"
        },
        "content": "            // System.out.println(e);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "saradj"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * The execution core of the Duke class."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void run() throws IOException, InterruptedException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "saradj"
        },
        "content": "        String fullCommand;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        ui.clearScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "saradj"
        },
        "content": "        if (fridge.hasExpiredIngredients()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "saradj"
        },
        "content": "            ui.showHasExpiring();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "saradj"
        },
        "content": "            fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "saradj"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "saradj"
        },
        "content": "            if (fullCommand.equalsIgnoreCase(\"yes\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "saradj"
        },
        "content": "                ui.show(fridge.getExpiredIngredients().toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "saradj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "saradj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "saradj"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "saradj"
        },
        "content": "        boolean back \u003d false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                ui.chefDrawing();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "saradj"
        },
        "content": "                ui.showOptions();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "saradj"
        },
        "content": "                fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                ui.clearScreen();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "saradj"
        },
        "content": "                switch (fullCommand) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    case \"options\": {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "saradj"
        },
        "content": "                        ui.showOptions();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "saradj"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    case \"q\": {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "saradj"
        },
        "content": "                        Cmd command \u003d new ExitCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "saradj"
        },
        "content": "                        command.execute(null, ui, null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "saradj"
        },
        "content": "                        isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "saradj"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    case \"a\": {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "saradj"
        },
        "content": "                        Cmd\u003cIngredient\u003e command \u003d new RemoveAllExpired(fridge);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "saradj"
        },
        "content": "                        command.execute(fridge.getAllIngredients(), ui, fridgeStorage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "saradj"
        },
        "content": "                        isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "saradj"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    case \"b\": {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "saradj"
        },
        "content": "                        // ui.showIngredientsInFridge(fridge.getAllIngredients());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "saradj"
        },
        "content": "                        ui.showIngredientTask();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "saradj"
        },
        "content": "                        while (true) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "saradj"
        },
        "content": "                            try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "saradj"
        },
        "content": "                                fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                                ui.clearScreen();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "saradj"
        },
        "content": "                                if (fullCommand.trim().equals(\"back\")) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "saradj"
        },
        "content": "                                    break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "saradj"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "saradj"
        },
        "content": "                                if (fullCommand.trim().equals(\"q\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "saradj"
        },
        "content": "                                    Cmd command \u003d new ExitCommand();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "saradj"
        },
        "content": "                                    command.execute(null, ui, null);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "saradj"
        },
        "content": "                                    isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "saradj"
        },
        "content": "                                    break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "saradj"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "saradj"
        },
        "content": "                                if (fullCommand.trim().equals(\"show\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "saradj"
        },
        "content": "                                    ui.showIngredientsInFridge(fridge.getAllIngredients());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "saradj"
        },
        "content": "                                    continue;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "saradj"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "saradj"
        },
        "content": "                                if (fullCommand.trim().equals(\"template\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "saradj"
        },
        "content": "                                    ui.showIngredientTemplate();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "saradj"
        },
        "content": "                                    continue;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "saradj"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "saradj"
        },
        "content": "                                Cmd\u003cIngredient\u003e command \u003d Parser.parse(fullCommand, Type.INGREDIENT);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "saradj"
        },
        "content": "                                command.execute(fridge.getAllIngredients(), ui, fridgeStorage);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                            } catch (DukeException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "saradj"
        },
        "content": "                                System.out.println(e.getLocalizedMessage());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "saradj"
        },
        "content": "                                // e.printStackTrace();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "saradj"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "saradj"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "saradj"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    case \"c\": {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                        ui.showOrderTemplate();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                        while (true) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                            try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "saradj"
        },
        "content": "                                fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                                ui.clearScreen();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                                if (fullCommand.trim().equals(\"back\")) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                                    break;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                                if (fullCommand.trim().equals(\"q\")) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                                    Cmd command \u003d new ExitCommand();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                                    command.execute(null, ui, null);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                                    isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                                    break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                                if (fullCommand.trim().equals(\"template\")) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                                    ui.showOrderTemplate();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                                    continue;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "saradj"
        },
        "content": "                                Cmd\u003cOrder\u003e command \u003d Parser.parse(fullCommand, Type.ORDER);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "saradj"
        },
        "content": "                                command.execute(order, ui, orderStorage);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                            } catch (DukeException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                                System.out.println(e.getLocalizedMessage());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "saradj"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    case \"d\": {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                        while(true) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                            try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                                ui.showDishTemplate();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "saradj"
        },
        "content": "                                fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                                ui.clearScreen();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                                if(fullCommand.trim().equals(\"q\")) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                                    Cmd command \u003d new ExitCommand();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                                    command.execute(null, ui, null);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                                    isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                                    break;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                                if(fullCommand.trim().equals(\"back\")) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                                    break;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                                if(fullCommand.trim().equals(\"template\")) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                                    ui.clearScreen();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                                    continue;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "saradj"
        },
        "content": "                                Cmd\u003cDish\u003e command \u003d Parser.parse(fullCommand, Type.DISH);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "saradj"
        },
        "content": "                                command.execute(dish, ui, orderStorage);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                            } catch (DukeException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                                System.out.println(e.getLocalizedMessage());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "saradj"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "saradj"
        },
        "content": "                        throw new DukeException(\"wrong input\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "saradj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "saradj"
        },
        "content": "            } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MAIN FUNCTION \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public static void main(String[] args) throws IOException, InterruptedException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "9hafidz6": 41,
      "saradj": 105,
      "-": 40,
      "VirginiaYu": 27
    }
  },
  {
    "path": "src/main/java/duke/command/Cmd.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.command.ingredientCommand.ExitCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.list.GenericList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "saradj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "public abstract class Cmd\u003cT\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    public abstract void execute(GenericList\u003cT\u003e genlist, Ui ui, Storage storage) throws DukeException, IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Returns the boolean indicating that it is( not) an {@link ExitCommand}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return false by default"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "x3chillax"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "saradj": 2,
      "x3chillax": 2,
      "-": 15,
      "VirginiaYu": 3
    }
  },
  {
    "path": "src/main/java/duke/command/FindIngredientCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "x3chillax"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.list.GenericList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.ingredient.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "x3chillax"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "saradj"
        },
        "content": " * Represents a specific {@link Cmd} used to find a String occurring in the {@link TaskList}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "x3chillax"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "saradj"
        },
        "content": "public class FindIngredientCommand extends Cmd\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "x3chillax"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    private String toFind;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "x3chillax"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    public FindIngredientCommand(String toFind) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        this.toFind \u003d toFind;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "x3chillax"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "x3chillax"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void execute(GenericList\u003cIngredient\u003e tasklist, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "9hafidz6": 4,
      "saradj": 6,
      "x3chillax": 17
    }
  },
  {
    "path": "src/main/java/duke/command/dishesCommand/AddDishCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "package duke.command.dishesCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.command.Cmd;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.dish.Dish;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import duke.list.GenericList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "public class AddDishCommand extends Cmd\u003cDish\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "saradj"
        },
        "content": "    private Dish dish;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public AddDishCommand(Dish dish) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        //super(dish);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        this.dish \u003d dish;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public void execute(GenericList\u003cDish\u003e dishList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        boolean flag \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            if(dishList.size() \u003d\u003d 0) { //if the list is empty, immediately add dish in it"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "saradj"
        },
        "content": "                dishList.addEntry(dish);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                ui.showAddedDishes(dish.getDishname());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                //storage.update();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                for( int i \u003d 0; i \u003c dishList.size(); i++) { //check for duplicates in list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    if(dishList.getEntry(i).getDishname().equals(dish.getDishname())){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                        flag \u003d false; //dish already exist in list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                if(flag) { //if there are no duplicates"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    dishList.addEntry(dish); // add dish into list found in dishes class"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                    ui.showAddedDishes(dish.getDishname());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                    //storage.update();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                else { //if there are duplicates"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                    System.out.println(\"\\t dish already exist in list\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            throw new DukeException(\"unable to add dish\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "9hafidz6": 38,
      "saradj": 5,
      "x3chillax": 2,
      "VirginiaYu": 4
    }
  },
  {
    "path": "src/main/java/duke/command/dishesCommand/AddIngredient.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "package duke.command.dishesCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.command.Cmd;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.dish.Dish;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import duke.list.GenericList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "public class AddIngredient extends Cmd\u003cDish\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "saradj"
        },
        "content": "    private Ingredient ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public AddIngredient(Ingredient ingredient, int index) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        this.ingredient \u003d ingredient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public void execute(GenericList\u003cDish\u003e dishList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            dishList.getEntry(index - 1).addIngredients(ingredient);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            ui.showIngredients(ingredient,dishList.getEntry(index - 1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            throw new DukeException(\"cannot add ingredient as the dish is not in list\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "9hafidz6": 24,
      "saradj": 3,
      "x3chillax": 1,
      "VirginiaYu": 4
    }
  },
  {
    "path": "src/main/java/duke/command/dishesCommand/DeleteDishCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "package duke.command.dishesCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.command.Cmd;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.dish.Dish;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "import duke.list.GenericList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "x3chillax"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "public class DeleteDishCommand extends Cmd\u003cDish\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    private int Nb;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public DeleteDishCommand(int dishNb) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        //super(dishNb);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        this.Nb \u003d dishNb;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    public void execute(GenericList\u003cDish\u003e dish1, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "saradj"
        },
        "content": "            ui.showDeletedDIsh(dish1.getEntry(Nb - 1).getDishname());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "saradj"
        },
        "content": "            dish1.removeEntry(Nb - 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            throw new DukeException(\"dish does not exist\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "9hafidz6": 17,
      "saradj": 2,
      "x3chillax": 6,
      "VirginiaYu": 4
    }
  },
  {
    "path": "src/main/java/duke/command/dishesCommand/InitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "package duke.command.dishesCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.command.Cmd;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.dish.Dish;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.list.GenericList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "saradj"
        },
        "content": "public class InitCommand extends Cmd\u003cDish\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public InitCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        //clears all the amount in dishes"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void execute(GenericList\u003cDish\u003e dish1, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"\\t are you sure you want to clear list? (yes or no)\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        String command \u003d ui.readCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        if(command.equals(\"yes\")){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            dish1.clearList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            System.out.println(\"\\t LIST IS CLEARED\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        else if(command.equals(\"no\")){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            System.out.println(\"\\t LIST IS NOT CLEARED\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "9hafidz6": 21,
      "saradj": 3,
      "VirginiaYu": 4
    }
  },
  {
    "path": "src/main/java/duke/command/dishesCommand/ListDishCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "package duke.command.dishesCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.dish.Dish;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.command.Cmd;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.list.GenericList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "saradj"
        },
        "content": "public class ListDishCommand extends Cmd\u003cDish\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "    //private TextTable tt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    private String[] ColNames \u003d {\"Dish\", \"ingredient\"}; //initialize the column names of the table"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void execute(GenericList\u003cDish\u003e dish1, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        Object[][] data \u003d new Object[dish1.size()][2]; //using text utils to display data in form of a table"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        if (dish1.size() \u003d\u003d 0) { //if list is empty"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            throw new DukeException(\"No Dishes yet!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            System.out.println(\"\\t Here are the dishes in your list:\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            for( int a \u003d 0; a \u003c dish1.size(); a++) { //store each dish along with its ingredients into data"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                stringBuilder.append(dish1.getEntry(a).toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                data[a][0] \u003d dish1.getEntry(a).getDishname();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                data[a][1] \u003d stringBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "            //tt \u003d new TextTable(ColNames, data); //place data in table"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "            //tt.setAddRowNumbering(true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "            //tt.printTable(); //print out table to user"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CEGLincoln": 4,
      "9hafidz6": 23,
      "saradj": 6,
      "VirginiaYu": 3
    }
  },
  {
    "path": "src/main/java/duke/command/ingredientCommand/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "package duke.command.ingredientCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.command.Cmd;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.ingredient.IngredientsList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.list.GenericList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "x3chillax"
        },
        "content": " * Represents a Command to add a specific {@link Task} in the {@link TaskList}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "x3chillax"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "public class AddCommand\u003cT\u003e extends Cmd\u003cT\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    private T entry;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "     * The constructor method for AddCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "     * @param entry : the {@link Ingredient} to be added in the list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    public AddCommand(T entry) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        this.entry \u003d entry;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    public AddCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "x3chillax"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "x3chillax"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "     * Public method used to add the task in the taskList, and write it on the hard disc."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "     * @param list    the {@link IngredientsList} to be expanded"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "     * @param ui      {@link Ui} used for printing the task output"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "     * @param storage {@link Storage} writes in the file on the hard disc"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "     * @throws DukeException Error while adding the command to the duke.txt file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    public void execute(GenericList\u003cT\u003e list, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        list.addEntry(entry);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        ui.showAddCommand(list.getEntry(entry).toString(), list.size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "x3chillax"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "saradj"
        },
        "content": "        storage.update();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "9hafidz6": 10,
      "saradj": 4,
      "x3chillax": 32,
      "VirginiaYu": 2
    }
  },
  {
    "path": "src/main/java/duke/command/ingredientCommand/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "package duke.command.ingredientCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.command.Cmd;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "import duke.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "import duke.ingredient.IngredientsList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.list.GenericList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "saradj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "saradj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "x3chillax"
        },
        "content": " * Represents a specific {@link Cmd} used to delete a {@link Ingredient} from the {@link IngredientsList}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "saradj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "saradj"
        },
        "content": "public class DeleteCommand\u003cT\u003e extends Cmd\u003cT\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "saradj"
        },
        "content": "    private int taskNb;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public DeleteCommand(int taskNb) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "saradj"
        },
        "content": "        this.taskNb \u003d taskNb;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "saradj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    public void execute(GenericList\u003cT\u003e IngredientsList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        if (taskNb \u003c\u003d IngredientsList.size() \u0026\u0026 taskNb \u003e 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "            T removed \u003d IngredientsList.removeEntry(taskNb - 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "saradj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "saradj"
        },
        "content": "                storage.removeFromFile(taskNb - 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "saradj"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "                throw new DukeException(\"Error while deleting the ingredient from the hard disc\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "saradj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "            ui.showRemovedIngredient(removed.toString(), IngredientsList.size());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "            throw new DukeException(\"Enter a valid ingredient index number after delete, between 1 and \" + IngredientsList.size());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "saradj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CEGLincoln": 2,
      "saradj": 23,
      "x3chillax": 9,
      "VirginiaYu": 4
    }
  },
  {
    "path": "src/main/java/duke/command/ingredientCommand/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "package duke.command.ingredientCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.command.Cmd;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "import duke.ingredient.IngredientsList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.list.GenericList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "x3chillax"
        },
        "content": " * Represents a specific {@link Cmd} used to mark a {@link IngredientsList} as done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "public class DoneCommand\u003cT\u003e extends Cmd\u003cT\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    private int taskNb;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public DoneCommand(int taskNb) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        this.taskNb \u003d taskNb;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    public void execute(GenericList\u003cT\u003e IngredientsList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        if (taskNb \u003c IngredientsList.size() \u0026\u0026 taskNb \u003e\u003d 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "            ((duke.ingredient.IngredientsList)IngredientsList).removeEntry(taskNb);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "            ui.showMarkDone(IngredientsList.getEntry(taskNb).toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            storage.changeContent(taskNb);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "            throw new DukeException(\"Enter a valid task number after done, between 1 and \" + IngredientsList.size());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "9hafidz6": 19,
      "saradj": 1,
      "x3chillax": 7,
      "VirginiaYu": 3
    }
  },
  {
    "path": "src/main/java/duke/command/ingredientCommand/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "package duke.command.ingredientCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.command.Cmd;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.list.GenericList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": " * Represents a specific {@link Cmd} used to exit the program after the user inputs \"bye\"."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "saradj"
        },
        "content": "public class ExitCommand\u003cT\u003e extends Cmd\u003cT\u003e{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    public void execute(GenericList IngredientsList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        System.out.println(\"\\t Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "saradj": 2,
      "x3chillax": 1,
      "VirginiaYu": 19
    }
  },
  {
    "path": "src/main/java/duke/command/ingredientCommand/FindIngredientCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "package duke.command.ingredientCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.command.Cmd;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.list.GenericList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "x3chillax"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "x3chillax"
        },
        "content": " * Represents a specific {@link Cmd} used to find a String occurring in the {@link Ingredient}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "saradj"
        },
        "content": "public class FindIngredientCommand extends Cmd\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    private String toFind;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    private String pattern \u003d \"dd/MM/yyyy\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    private SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(pattern);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public FindIngredientCommand(String toFind) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        this.toFind \u003d toFind;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void execute(GenericList\u003cIngredient\u003e ingList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        for (Ingredient ingredient : ingList.getAllEntries()) {     //for every ingredient, scan through the ingredientslist"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "            i +\u003d 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "            if (ingredient.getName().equals(toFind))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "            {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "                sb.append(\"\\t \").append(i-1).append(\". \").append(ingredient.getName()).append(\" \").append(ingredient.getAmount()).append(\" \").append(simpleDateFormat.format(ingredient.getExpiryDate())).append(\".\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "                sb.append(System.lineSeparator());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        if (sb.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "            System.out.println(\"No such ingredient found!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "            System.out.println(\"\\t These are the ingredients you searched for!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "            ui.showTask(sb.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "saradj": 4,
      "x3chillax": 21,
      "VirginiaYu": 20
    }
  },
  {
    "path": "src/main/java/duke/command/ingredientCommand/FindToday.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "package duke.command.ingredientCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "x3chillax"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.command.Cmd;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.list.GenericList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "x3chillax"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "x3chillax"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "public class FindToday extends Cmd\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    private Date today \u003d new Date();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    private String pattern \u003d \"dd/MM/yyyy\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    private SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(pattern);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "x3chillax"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    public void execute(GenericList\u003cIngredient\u003e IngredientsList, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        for (Ingredient ingredient : IngredientsList.getAllEntries())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        {     //for every ingredient, scan through the ingredientslist"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "            i +\u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "            if (ingredient.isExpiredToday(simpleDateFormat.format(ingredient.getExpiryDate())))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "            {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "                sb.append(\"\\t \").append(i-1).append(\". \").append(IngredientsList.getEntry(ingredient).toStringNoWarning()).append(\".\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "                sb.append(System.lineSeparator());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        if (sb.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "            System.out.println(\"No expired ingredients for today!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "            System.out.println(\"\\t Here are the expired ingredients for today\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "            ui.showTask(sb.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "x3chillax"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "x3chillax"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "saradj": 1,
      "x3chillax": 40,
      "VirginiaYu": 3
    }
  },
  {
    "path": "src/main/java/duke/command/ingredientCommand/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "package duke.command.ingredientCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.command.Cmd;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "import duke.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "import duke.ingredient.IngredientsList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.list.GenericList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "x3chillax"
        },
        "content": " * Represents a specific {@link Cmd} used to list all the {@link Ingredient}s in the {@link IngredientsList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "saradj"
        },
        "content": "public class ListCommand\u003cT\u003e extends Cmd\u003cT\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    public void execute(GenericList\u003cT\u003e IngredientsList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        if (IngredientsList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "            throw new DukeException(\"No ingredients yet!\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "            System.out.println(\"\\t Here are the ingredients in your list:\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d IngredientsList.size(); i++) { // looping to print all the saved tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "                ui.showTask(\"\\t \" + i + \".\" + IngredientsList.getEntry(i - 1).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "9hafidz6": 13,
      "saradj": 1,
      "x3chillax": 9,
      "VirginiaYu": 4
    }
  },
  {
    "path": "src/main/java/duke/command/ingredientCommand/RemoveAllExpired.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "saradj"
        },
        "content": "package duke.command.ingredientCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.command.Cmd;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.fridge.Fridge;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.ingredient.IngredientsList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.list.GenericList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "saradj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "saradj"
        },
        "content": "public class RemoveAllExpired extends Cmd\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "saradj"
        },
        "content": "    private Fridge fridge;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public RemoveAllExpired(Fridge fridge){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "saradj"
        },
        "content": "        this.fridge\u003dfridge;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "saradj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    public void execute(GenericList\u003cIngredient\u003e genlist, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "saradj"
        },
        "content": "        if(fridge.hasExpiredIngredients()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "saradj"
        },
        "content": "            //System.out.println(\" has expired \"+fridge.getExpiredIngredients().size());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "saradj"
        },
        "content": "            IngredientsList expired\u003dfridge.removeExpired();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "saradj"
        },
        "content": "            (storage).update();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "saradj"
        },
        "content": "            ui.show(\" Removed: \"+expired.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "saradj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "saradj"
        },
        "content": "        else"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "saradj"
        },
        "content": "            throw new DukeException(\"Seems like you don\u0027t have any expired ingredients in the fridge!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "saradj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "saradj": 30,
      "x3chillax": 1
    }
  },
  {
    "path": "src/main/java/duke/command/ingredientCommand/UseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "saradj"
        },
        "content": "package duke.command.ingredientCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.command.Cmd;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.list.GenericList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "saradj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "saradj"
        },
        "content": "public class UseCommand extends Cmd\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "saradj"
        },
        "content": "    private Ingredient toUse;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public UseCommand(Ingredient ingredient){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "saradj"
        },
        "content": "        toUse \u003d ingredient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "saradj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void execute(GenericList\u003cIngredient\u003e ingredientList, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "saradj"
        },
        "content": "        if(ingredientList.removeEntry(toUse)){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "saradj"
        },
        "content": "        ui.show(\"Great you used \"+ toUse.toStringWithoutDate());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "saradj"
        },
        "content": "        storage.update();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }else"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "saradj"
        },
        "content": "        ui.show(\"There is not a sufficient amount of \"+toUse.getName()+\" that is not expired, maybe you could buy some first? \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "saradj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "saradj": 27
    }
  },
  {
    "path": "src/main/java/duke/command/ingredientCommand/ViewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "package duke.command.ingredientCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.command.Cmd;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "import duke.ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.list.GenericList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": " * Represents a specific {@link Cmd} used to find a String occurring in the {@link TaskList}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": " * One of the B-Extensions."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": " * @author x3chillax"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "public class ViewCommand extends Cmd\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    private Date toView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public ViewCommand(Date toView) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        this.toView \u003d toView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    public void execute(GenericList\u003cIngredient\u003e ingredientList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "            for (Ingredient ingredient : ingredientList.getAllEntries()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "                if ((ingredient.getExpiryDate()).equals(toView)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                    //TODO: needs work on this part. comparing of time use Date always takes into account time 0000"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "                    sb.append(\"\\t \").append(i++).append(\".\").append(ingredient.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                    sb.append(System.lineSeparator());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            if (sb.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                System.out.println(\"No matching date found! \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                System.out.println(\"\\t Here are the tasks in the requested date:\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            sb.setLength(sb.length() - 1); // to remove the last new line"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            System.out.println(sb.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "9hafidz6": 37,
      "saradj": 1,
      "x3chillax": 6,
      "VirginiaYu": 4
    }
  },
  {
    "path": "src/main/java/duke/command/orderCommand/AddOrderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "package duke.command.orderCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "import duke.command.Cmd;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.list.GenericList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.order.Order;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.order.OrderList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "public class AddOrderCommand extends Cmd\u003cOrder\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    private Order order;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * The constructor method for AddOrderCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param order : the {@link Order} to be added in the list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public AddOrderCommand(Order order) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        this.order \u003d order;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Public method used to add a new order in the orderList, and write it on the hard disc."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param orderList the {@link OrderList} to be expanded"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param ui       {@link Ui} used for printing the order output"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param storage  {@link Storage} writes in the file on the hard disc"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @throws DukeException Error while adding the command to the duke.txt file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public void execute(GenericList\u003cOrder\u003e orderList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        orderList.addEntry(order);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        ui.showAddOrder(order.toString(), orderList.size());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        // to do:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        // 1. store the new order into file"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "x3chillax": 2,
      "VirginiaYu": 41
    }
  },
  {
    "path": "src/main/java/duke/command/orderCommand/AlterDateCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "package duke.command.orderCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.command.Cmd;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.list.GenericList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.order.Order;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": " * Represents a specific {@link Cmd} used to alter the {@link Order} serving date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "public class AlterDateCommand extends Cmd\u003cOrder\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * The constructor method for {@link AlterDateCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param orderNumber order index number, starting from 1, maximum orderList.size()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param newDate new serving date of the {@link Order}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public AlterDateCommand(int orderNumber, Date newDate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        this.index \u003d orderNumber-1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        this.date \u003d newDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void execute(GenericList\u003cOrder\u003e orderList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        if (index \u003c\u003d orderList.size() \u0026\u0026 index \u003e 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            Order order \u003d orderList.getEntry(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            if (order.isDone()) { throw new DukeException(\"Order done already. Date alteration is not expected.\"); }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            order.setDate(date);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            ui.showOrderChangedDate(order.getDate(),orderList.getEntry(index).toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            // to do:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            // 1. store the new order into file"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            //     storage.changeContent(orderNb);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            // 2. update today\u0027s dish(task) list if new date is today"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//            if (order.isToday()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//                String dishName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//                int amount;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//                for (Map.Entry\u003cString, Integer\u003e entry : order.getOrderContent().entrySet()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//                    dishName \u003d entry.getKey();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//                    amount \u003d entry.getValue();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//                    int dishIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//                    for (int i\u003d0; i\u003camount ;i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//                        //decrement dish amount from the menu"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//                        //new AddDishCommand(dishIndex)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//                    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            throw new DukeException(\"Must enter a valid order index number between 1 and \"+orderList.size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "saradj": 2,
      "VirginiaYu": 60
    }
  },
  {
    "path": "src/main/java/duke/command/orderCommand/DeleteOrderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "package duke.command.orderCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.command.Cmd;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.list.GenericList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.order.Order;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.order.OrderList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": " * Represents a specific {@link Cmd} used to cancel/delete a {@link Order} from the {@link OrderList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "public class DeleteOrderCommand extends Cmd\u003cOrder\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    private int orderIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * the constructor method of class {@link DeleteOrderCommand}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param orderNumber order number in the order list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public DeleteOrderCommand(int orderNumber) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        this.orderIndex \u003d orderNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void execute(GenericList\u003cOrder\u003e orderList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        if (orderList.size()\u003d\u003d0) { throw new DukeException(\"No order in the list! No order can be removed!\"); }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        if (orderIndex \u003c orderList.size() \u0026\u0026 orderIndex \u003e\u003d 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            Order removed \u003d orderList.getEntry(orderIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            // Need to update after menu is created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//            Dish dish;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//            int amount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//            for (Map.Entry\u003cDish, Integer\u003e entry : removed.getOrderContent().entrySet()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//                dish \u003d entry.getKey();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//                amount \u003d entry.getValue();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//                int dishIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//                for (int i\u003d0; i\u003camount ;i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//                    //decrement dish amount from the menu"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//                    //new DeleteDishCommand(dishIndex)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            orderList.removeEntry(orderIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            ui.showRemovedOrder(removed.toString(), orderList.size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//            List\u003cString\u003e fileContent \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//                fileContent \u003d new ArrayList\u003c\u003e(Files.readAllLines(storage.getPath(), StandardCharsets.UTF_8));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//                fileContent.remove(orderNb); // changing the file content"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//                Files.write(storage.getPath(), fileContent, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//            } catch (IOException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//                throw new DukeException(\"Error while cancelling the order from the hard disc.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            throw new DukeException(\"Please enter a valid order number between 1 and \" + orderList.size() + \" to remove.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "saradj": 2,
      "VirginiaYu": 59
    }
  },
  {
    "path": "src/main/java/duke/command/orderCommand/DoneOrderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "package duke.command.orderCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.command.Cmd;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.list.GenericList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.order.Order;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.order.OrderList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": " * Represents a specific {@link Cmd} used to mark a {@link Order} as done."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "public class DoneOrderCommand extends Cmd\u003cOrder\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    private int orderIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * the constructor method of {@link DoneOrderCommand}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param orderNumber order number in the order list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public DoneOrderCommand(int orderNumber) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        this.orderIndex \u003d orderNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void execute(GenericList\u003cOrder\u003e orderList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        if (orderList.size()\u003d\u003d0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            throw new DukeException(\"No order in the list! No order can be done!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        if (orderIndex \u003c orderList.size() \u0026\u0026 orderIndex \u003e\u003d 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            Order doneOrder \u003d orderList.getEntry(orderIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            if (doneOrder.isDone()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                int number \u003d orderIndex+1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                throw new DukeException(\"Order \"+number+\" has already been done!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            // to do"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            // 1. update storage file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            // 2. Need to update after menu is created"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//            String dish;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//            int amount;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//            for (Map.Entry\u003cString, Integer\u003e entry : doneOrder.getOrderContent().entrySet()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//                dish \u003d entry.getKey();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//                amount \u003d entry.getValue();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//                int dishIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//                for (int i\u003d0; i\u003camount ;i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//                    //decrement dish amount from the menu"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//                    //new DeleteDishCommand(dishIndex)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            ((OrderList)orderList).markOrderDone(orderIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            ui.showMarkDoneOrder(orderList.getEntry(orderIndex).toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            //storage.changeContent(orderIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            throw new DukeException(\"Must enter a valid order number, between 1 and \" + orderList.size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "saradj": 2,
      "VirginiaYu": 62
    }
  },
  {
    "path": "src/main/java/duke/command/orderCommand/ListOrderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "package duke.command.orderCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.command.Cmd;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.command.ingredientCommand.ListCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.list.GenericList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.order.Order;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.order.OrderList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.parser.Convert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": " * Represents a specific {@link Cmd} used to list all the {@link Order}s in the {@link OrderList}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "public class ListOrderCommand extends ListCommand\u003cOrder\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    private String listType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * the constructor method of {@link ListOrderCommand}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param command type of list: list all orders, list all undone orders,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     *                list all today\u0027s orders, list all undone today\u0027s orders."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public ListOrderCommand(String command) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        this.listType \u003d command;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public void execute(GenericList\u003cOrder\u003e orderList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        if (orderList.size() \u003d\u003d 0) { throw new DukeException(\"No orders in the order list!\");}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        List\u003cOrder\u003e filtered \u003d parse((OrderList) orderList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        if (filtered.size()\u003d\u003d0) { throw new DukeException(\"No orders found!\");}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        else if (filtered.size()\u003d\u003d1) { System.out.println(\"\\t Here are the order in the order list:\"); }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        else System.out.println(\"\\t Here are the orders in the order list:\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        int cnt \u003d 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        for (Order order: filtered) { // looping to print all the saved orders"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            ui.showTask(\"\\t \" + cnt + \".\" + order.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            cnt++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public List\u003cOrder\u003e parse(OrderList orderList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        List\u003cOrder\u003e tmp \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        if (listType.equals(\"all\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            tmp \u003d orderList.getAllEntries();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        } else if (listType.equals(\"undone\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            tmp \u003d orderList.getAllUndoneOrders();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        } else if (listType.equals(\"today\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            tmp \u003d orderList.getTodayOrders();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        } else if (listType.equals(\"undoneToday\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            tmp \u003d orderList.getTodayUndoneOrders();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            String s \u003dlistType;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            if (s.split(\"\\\\/\", 3).length\u003d\u003d3) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                Date date \u003d Convert.stringToDate(listType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                tmp \u003d orderList.findOrderByDate(date);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                String dishName \u003d listType;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                tmp \u003d orderList.findOrderByDishes(dishName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        return tmp;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "VirginiaYu": 69
    }
  },
  {
    "path": "src/main/java/duke/dish/Dish.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "saradj"
        },
        "content": "package duke.dish;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.ingredient.Ingredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.ingredient.IngredientsList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.storage.Printable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "saradj"
        },
        "content": "public class Dish implements Printable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    private String dishname;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "saradj"
        },
        "content": "    private IngredientsList ingredientsList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public Dish(String name) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        this.dishname \u003d name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "saradj"
        },
        "content": "        this.ingredientsList \u003d new IngredientsList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public int getIngredientSize() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        return ingredientsList.size();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public Ingredient getIngredients(int index) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        return ingredientsList.getEntry(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public String getDishname() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        return dishname;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void addIngredients(Ingredient ingredients) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "saradj"
        },
        "content": "        ingredientsList.addEntry(ingredients);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        String str \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "        for (Ingredient i : ingredientsList.getAllEntries()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            str +\u003d i.getName() + \",\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "saradj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public String printInFile() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CEGLincoln": 3,
      "9hafidz6": 30,
      "saradj": 16
    }
  },
  {
    "path": "src/main/java/duke/dish/DishList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "saradj"
        },
        "content": "package duke.dish;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.list.GenericList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "saradj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "saradj"
        },
        "content": "public class DishList extends GenericList\u003cDish\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public DishList(List\u003cDish\u003e dishList){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "saradj"
        },
        "content": "        super(dishList);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public DishList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "saradj"
        },
        "content": "       super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "saradj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "saradj": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": " * Represents an {@link Exception} class used to throw exceptions from the Duke class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        super(\"\\t OOPS!!! \" + message+\". \\n\\tYou can type: \\n\\t\u0027template\u0027 to see the format of the commands, \\n\\t\u0027back\u0027 to see all your options, \\n\\t\u0027q\u0027 to exit\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "9hafidz6": 2,
      "-": 9
    }
  },
  {
    "path": "src/main/java/duke/fridge/Fridge.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "saradj"
        },
        "content": "package duke.fridge;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.ingredient.IngredientsList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.storage.FridgeStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "saradj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "saradj"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "saradj"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "saradj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "saradj"
        },
        "content": "public class Fridge {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "saradj"
        },
        "content": "    private IngredientsList currentIngredients;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "saradj"
        },
        "content": "    private IngredientsList expiredIngredients;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "saradj"
        },
        "content": "    private FridgeStorage fridgeStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public Fridge(FridgeStorage fridgeStorage) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "saradj"
        },
        "content": "        this.fridgeStorage\u003dfridgeStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "saradj"
        },
        "content": "        currentIngredients\u003dnew IngredientsList(fridgeStorage.load().getAllEntries());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "saradj"
        },
        "content": "        expiredIngredients\u003dgetExpiredIngredients();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public Fridge(IngredientsList list) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "saradj"
        },
        "content": "        this.currentIngredients \u003d list;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "saradj"
        },
        "content": "        this.expiredIngredients \u003d getExpiredIngredients();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public Fridge() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "saradj"
        },
        "content": "        currentIngredients \u003d new IngredientsList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "saradj"
        },
        "content": "        expiredIngredients \u003d new IngredientsList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void putIngredient(Ingredient ingredient) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "saradj"
        },
        "content": "       currentIngredients.addEntry(ingredient);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "saradj"
        },
        "content": "               fridgeStorage.update();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public IngredientsList getAllIngredients(){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return currentIngredients;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public boolean hasEnough(Ingredient ingredient) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return currentIngredients.hasEnough(ingredient);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void useIngredient(Ingredient ingredient) throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "saradj"
        },
        "content": "        currentIngredients.addEntry(ingredient);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "saradj"
        },
        "content": "        fridgeStorage.update();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public boolean hasExpiredIngredients() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return !getExpiredIngredients(new Date()).isEmpty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public IngredientsList getExpiredIngredients(Date expireBefore) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "saradj"
        },
        "content": "        List\u003cIngredient\u003e expired \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "saradj"
        },
        "content": "        if(currentIngredients!\u003dnull)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "saradj"
        },
        "content": "        for (Ingredient ingredient : currentIngredients.getAllEntries()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "saradj"
        },
        "content": "            if (!ingredient.getExpiryDate().after(expireBefore)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "saradj"
        },
        "content": "                expired.add(ingredient);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "saradj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "saradj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return new IngredientsList(expired);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public IngredientsList removeExpiring(Date expireBefore) throws DukeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "saradj"
        },
        "content": "        List\u003cIngredient\u003e expired \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "saradj"
        },
        "content": "        for(int i\u003d0;i\u003ccurrentIngredients.getAllEntries().size();i++){"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "saradj"
        },
        "content": "            if (!currentIngredients.getAllEntries().get(i).getExpiryDate().after(expireBefore)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "saradj"
        },
        "content": "                expired.add(currentIngredients.getAllEntries().get(i));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "saradj"
        },
        "content": "                currentIngredients.getAllEntries().remove(i);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "saradj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "saradj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "saradj"
        },
        "content": "        fridgeStorage.update();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return new IngredientsList(expired);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public IngredientsList removeExpired() throws DukeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return removeExpiring(new Date());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public IngredientsList getExpiredIngredients() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return getExpiredIngredients(new Date()); // getting all the expired ingredients using the current date"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public IngredientsList getMostRecentlyExpiring(int nbIngredients) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "saradj"
        },
        "content": "        currentIngredients.sort(new Comparator\u003cIngredient\u003e() { // sorting the ingredients by expiry date"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "saradj"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "saradj"
        },
        "content": "            public int compare(Ingredient o1, Ingredient o2) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "saradj"
        },
        "content": "                if (o1.getExpiryDate().before(o2.getExpiryDate()))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    return -1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "saradj"
        },
        "content": "                return o1.getExpiryDate().equals(o2.getExpiryDate()) ? 0 : 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "saradj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "saradj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return nbIngredients \u003e currentIngredients.size() ? currentIngredients : new IngredientsList(currentIngredients.getAllEntries().subList(0, nbIngredients));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "saradj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "saradj": 99
    }
  },
  {
    "path": "src/main/java/duke/ingredient/Ingredient.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "saradj"
        },
        "content": "package duke.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.parser.Convert;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.storage.Printable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "saradj"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "saradj"
        },
        "content": "public class Ingredient implements Printable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "saradj"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "saradj"
        },
        "content": "    private int amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "saradj"
        },
        "content": "    private Date expiryDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "saradj"
        },
        "content": "    private String dateAsString;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public Ingredient(String name, Integer amount, Date expiryDate) throws DukeException       //beef 200 19/07/2019"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "saradj"
        },
        "content": "    {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "saradj"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "saradj"
        },
        "content": "        if (amount \u003c 0)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "saradj"
        },
        "content": "            throw new DukeException(\"The ingredient amount can not be negative, use a valid amount\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "saradj"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "saradj"
        },
        "content": "        this.expiryDate \u003d expiryDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public Ingredient(String name, Integer amount, String expiryDate) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "saradj"
        },
        "content": "        this(name, amount, Convert.stringToDate(expiryDate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "saradj"
        },
        "content": "        dateAsString \u003d expiryDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        return expiryDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public int getAmount() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void changeDate(Date date)       //to change date, we need new date"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "saradj"
        },
        "content": "    {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "saradj"
        },
        "content": "        this.expiryDate \u003d date;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void setName(String name)        //to change name, we need new name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "saradj"
        },
        "content": "    {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "saradj"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void changeAmount(Integer amount) //to change amount, we need new amount"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "saradj"
        },
        "content": "    {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "saradj"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public Date getExpiryDate() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return expiryDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "saradj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return other instanceof Ingredient \u0026\u0026 ((Ingredient) other).getName().equals(this.name);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return expiryDate.after(new Date()) ? name + \", amount is: \" + amount + \" expiring on \" + Convert.getDateString(expiryDate, dateAsString) : \"WARNING! expired ingredient: \" + name + \", amount is: \" + amount + \" expired on \" + Convert.getDateString(expiryDate, dateAsString);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public String toStringNoWarning(){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return name + \", amount is: \" + amount + \" expired on \" + Convert.getDateString(expiryDate, dateAsString);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public String toStringWithoutDate() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return name + \" amount: \" + amount;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public boolean isExpired() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return !expiryDate.after(new Date());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    public boolean isExpiredToday(String DateInQuestion){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "x3chillax"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        Date today \u003d new Date();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        String pattern \u003d \"dd/MM/yyyy\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(pattern);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        String TodayDate \u003d simpleDateFormat.format(today);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        return ((DateInQuestion).equals(TodayDate));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "x3chillax"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public boolean equalsCompletely(Ingredient other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return this.equals(other) \u0026\u0026 this.getExpiryDate().equals(other.getExpiryDate());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public String printInFile() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return this.getName() + \"|\" + this.getAmount() + \"|\" + dateAsString;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "saradj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "9hafidz6": 1,
      "saradj": 84,
      "x3chillax": 13
    }
  },
  {
    "path": "src/main/java/duke/ingredient/IngredientsList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "saradj"
        },
        "content": "package duke.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "x3chillax"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.list.GenericList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "saradj"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "saradj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "x3chillax"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "saradj"
        },
        "content": "public class IngredientsList extends GenericList\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public IngredientsList(List\u003cIngredient\u003e ingredientsList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "saradj"
        },
        "content": "        super(ingredientsList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "saradj"
        },
        "content": "        sortByExpiryDate();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public IngredientsList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "saradj"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "x3chillax"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void changeIngredientsDate(int Nb, Date date) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "saradj"
        },
        "content": "        genList.get(Nb).changeDate(date);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "saradj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void addEntry(Ingredient ingredient) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "saradj"
        },
        "content": "        if (genList.contains(ingredient) \u0026\u0026 this.getEntry(ingredient).getExpiryDate().equals(ingredient.getExpiryDate())) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "saradj"
        },
        "content": "            int currentAmount \u003d this.getEntry(ingredient).getAmount();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "saradj"
        },
        "content": "            this.getEntry(ingredient).changeAmount(currentAmount + ingredient.getAmount());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "saradj"
        },
        "content": "        } else"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "saradj"
        },
        "content": "            genList.add(ingredient); // if the ingredient was not in the fridge already or it\u0027s expiry date was different than the stored one"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "saradj"
        },
        "content": "            sortByExpiryDate();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public boolean hasEnough(Ingredient ingredient) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "saradj"
        },
        "content": "        int currAmount \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        for (Ingredient ing : getAllEntries()) {        //for all ingredients,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "            if (ing.equals(ingredient)\u0026\u0026!ing.isExpired())           //if they are the ingredient we want, and it has not expired,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "                currAmount +\u003d ing.getAmount();          //adds into count"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "saradj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        return ingredient.getAmount() \u003c\u003d currAmount;        //if needed amount is less than or equal to amount we have, means we have enough"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "saradj"
        },
        "content": "        // return getAllEntries().contains(ingredient);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void changeName(int Nb, String name) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "saradj"
        },
        "content": "        genList.get(Nb).setName(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "x3chillax"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void changeAmount(int Nb, Integer amount) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "saradj"
        },
        "content": "        genList.get(Nb).changeAmount(amount);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "saradj"
        },
        "content": "        String ingredients \u003d \" ingredients: \\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "saradj"
        },
        "content": "        for (Ingredient ingredient : genList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "saradj"
        },
        "content": "            ingredients +\u003d (ingredient.toStringNoWarning() + \"\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "saradj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return ingredients;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "saradj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public Ingredient getEntry(Ingredient entry) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "saradj"
        },
        "content": "        for (Ingredient ingredient : genList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "saradj"
        },
        "content": "            if (ingredient.equalsCompletely(entry))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "saradj"
        },
        "content": "                return ingredient;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "saradj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return genList.get(genList.indexOf(entry));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public Ingredient getNonExpiredEntry(Ingredient ingredient) throws DukeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "saradj"
        },
        "content": "        for(Ingredient ingredient1:genList){"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "saradj"
        },
        "content": "            if(ingredient.equals(ingredient)\u0026\u0026!ingredient1.isExpired())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "saradj"
        },
        "content": "                return ingredient1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "saradj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "saradj"
        },
        "content": "        throw new DukeException(\"There is not enough of \"+ ingredient.getName()+\" that is not expired!\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public IngredientsList sortByExpiryDate() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "saradj"
        },
        "content": "        genList.sort(new Comparator\u003cIngredient\u003e() { // sorting the ingredients descending by amount"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "saradj"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "saradj"
        },
        "content": "            public int compare(Ingredient o1, Ingredient o2) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "saradj"
        },
        "content": "                return o1.getExpiryDate().before(o2.getExpiryDate()) ? -1 : 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "saradj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "saradj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "saradj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public boolean removeEntry(Ingredient ingredient) throws DukeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "saradj"
        },
        "content": "        if (!hasEnough(ingredient)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "saradj"
        },
        "content": "           // int amountAvailable \u003d genList.contains(ingredient) ? getEntry(ingredient).getAmount() : 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "saradj"
        },
        "content": "            //System.out.println((\"There is not a sufficient amount of \" + ingredient.getName() + \" that is not expired, maybe you could buy some first? \"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "saradj"
        },
        "content": "       return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "saradj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "saradj"
        },
        "content": "        sortByExpiryDate();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "saradj"
        },
        "content": "        int neededAmount \u003d ingredient.getAmount();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "saradj"
        },
        "content": "        while (neededAmount \u003e 0) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "saradj"
        },
        "content": "            Ingredient toUse \u003d getNonExpiredEntry(ingredient);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "saradj"
        },
        "content": "            int amountLeft \u003d toUse.getAmount() - neededAmount;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "saradj"
        },
        "content": "            if (neededAmount \u003c toUse.getAmount()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "saradj"
        },
        "content": "                toUse.changeAmount(amountLeft);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "saradj"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "saradj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "saradj"
        },
        "content": "            neededAmount -\u003d toUse.getAmount();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "saradj"
        },
        "content": "            genList.remove(toUse);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "saradj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "saradj"
        },
        "content": "        sortByExpiryDate();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "saradj": 99,
      "x3chillax": 16
    }
  },
  {
    "path": "src/main/java/duke/list/GenericList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "saradj"
        },
        "content": "package duke.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "saradj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "saradj"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "saradj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "saradj"
        },
        "content": "public abstract class GenericList\u003cT\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "saradj"
        },
        "content": "    protected List\u003cT\u003e genList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "saradj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "saradj"
        },
        "content": "     * The constructor method(1) for TaskList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "saradj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public GenericList(List\u003cT\u003e genList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "saradj"
        },
        "content": "        this.genList \u003d genList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "saradj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "saradj"
        },
        "content": "     * The constructor method(2) for TaskList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "saradj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public GenericList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "saradj"
        },
        "content": "        this.genList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "saradj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "saradj"
        },
        "content": "     * Adds a task to the {@link GenericList}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "saradj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "saradj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "saradj"
        },
        "content": "     * @param entry {@link T} to be added to the list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "saradj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void addEntry(T entry) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "saradj"
        },
        "content": "        genList.add(entry);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "saradj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "saradj"
        },
        "content": "     * Returns the number of {@link Task}s in the {@link TaskList} so far."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "saradj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "saradj"
        },
        "content": "     * @return an integer indicating the size of the list of {@link Task}s stored"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "saradj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return genList.size();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "saradj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "saradj"
        },
        "content": "     * Returns the {@link Task} at the position indicated by the taskNb."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "saradj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "saradj"
        },
        "content": "     * @param taskNb the position of the {@link Task} requested in the {@link TaskList}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "saradj"
        },
        "content": "     * @return the requested {@link Task}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "saradj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public T getEntry(int taskNb) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return genList.get(taskNb);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "saradj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "saradj"
        },
        "content": "     * Returns a list of all the {@link Task}s in the {@link TaskList}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "saradj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "saradj"
        },
        "content": "     * @return {@link ArrayList} of {@link Task}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "saradj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public List\u003cT\u003e getAllEntries() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return genList;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "saradj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "saradj"
        },
        "content": "     * Returns the removed {@link Task} from position taskNb in the {@link TaskList}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "saradj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "saradj"
        },
        "content": "     * @param taskNb the position of the {@link Task} to be removed from the {@link TaskList}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "saradj"
        },
        "content": "     * @return Task the task that was removed"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "saradj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public T removeEntry(int taskNb) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return genList.remove(taskNb);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public boolean removeEntry(T entry) throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return genList.remove(entry);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return genList.isEmpty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public T getEntry(T entry) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "saradj"
        },
        "content": "        for (T e : genList)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "saradj"
        },
        "content": "            if (e.equals(entry))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "saradj"
        },
        "content": "                return e;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "x3chillax"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void sort(Comparator comparator) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "saradj"
        },
        "content": "        genList.sort(comparator);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void clearList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "saradj"
        },
        "content": "        genList.clear();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "saradj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "saradj": 99,
      "x3chillax": 1
    }
  },
  {
    "path": "src/main/java/duke/order/Order.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "package duke.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.storage.Printable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": " * Represents a general Order to be added by {@link Duke}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "saradj"
        },
        "content": "public class Order implements Printable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    private Map\u003cString, Integer\u003e content;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    private String dateToString;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * The constructor method for {@link Order}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public Order() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        this.date \u003d new Date();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        this.content \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        this.dateToString \u003d simpleDateFormat.format(this.date);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * The constructor method for the {@link Order} in reservation case."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param date date of serving the {@link Order}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public Order(Date date) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        if (date.before(new Date())) {date \u003d new Date();}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        this.content \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        this.dateToString \u003d simpleDateFormat.format(this.date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Used to get the serving date of the {@link Order}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public String getDate() { return this.dateToString;}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Used to alter the serving date of the {@link Order}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param date reset date of the {@link Order}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public void setDate(Date date) throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        Date setDate \u003d date;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        Date todayDate \u003d new Date();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        if (setDate.before(todayDate)) { throw new DukeException(\"Must set date equal or after today\"); }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Returns a boolean indicating whether the serving date of the {@link Order}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * is today or not."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @return boolean true if it is today\u0027s order, false otherwise (i.e., pre-order)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public boolean isToday() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        Date today \u003d new Date();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        String todayToString \u003d simpleDateFormat.format(today);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        if (this.dateToString.equals(todayToString)) { return true;}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        else return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Returns a boolean indicating whether the {@link Order} was completed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @return boolean true if the order was marked as done, false otherwise"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public boolean isDone() { return isDone; }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Used to mark the {@link Order} as finished."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Returns a String representation of the status icon, indicating whether the {@link Order} was done."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @return a tick or a cross"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Returns the content of the {@link Order}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @return content of the Order"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public Map\u003cString, Integer\u003e getOrderContent() { return this.content; }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Returns the content of the {@link Order}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * that will be print out as a msg."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @return content of the Order as a string"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        description \u003d \"[\"+this.getStatusIcon()+\"] \";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        if (this.isToday()) { description +\u003d \"Order today \"; }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        else { description +\u003d \"Order /on \" + dateToString + \" \"; }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        int count\u003d0;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        for (Map.Entry\u003cString, Integer\u003e entry : content.entrySet()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            String dishName \u003d entry.getKey();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            int amount \u003d entry.getValue();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            description +\u003d \"\\n\\t\"+\"    (\" + count + \") \" + dishName + \" \" + amount;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Returns the content of the {@link Order}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * that will be write into a txt file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @return content of the Order as a string"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public String printInFile() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        if (this.isDone()) { description \u003d \"1|\" + dateToString; }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        else { description \u003d \"0|\" + dateToString; }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        for (Map.Entry\u003cString, Integer\u003e entry : content.entrySet()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            String dishName \u003d entry.getKey();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            int amount \u003d entry.getValue();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            description +\u003d \"\\nD|\" + dishName + \"|\" + amount;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Returns a boolean indicating whether the {@link Order} has that dishes."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @return boolean true if the order has that dishes, false otherwise."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public boolean hasDishes(String dishes) { return content.containsKey(dishes); }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Returns the amount of the dishes ordered in the {@link Order}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param dishes dishes"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @return dishes amount"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public int getDishesAmount(String dishes) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        if (this.hasDishes(dishes)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            return content.get(dishes);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        } else {return 0; }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Add dishes to the undone {@link Order}. By default,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * add one more if not specifying the amount."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * If the dishes is not found in the {@link Order},"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * simply add a new element in the content map."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * If the order is done, do nothing."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public void addDish(String dishes){"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        if (!this.isDone())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            if (!this.hasDishes(dishes)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                content.put(dishes, 1);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                int oldAmount \u003d this.getDishesAmount(dishes);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                content.put(dishes, oldAmount+1);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Add dishes to the undone {@link Order}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * If the dishes is not found in the {@link Order},"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * simply add a new element in the content map."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * If the order is done, do nothing."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public void addDish(String dishes, int addAmount){"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        if (!this.isDone())"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            if (!content.containsKey(dishes)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                content.put(dishes, addAmount);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                int oldAmount \u003d content.get(dishes);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                content.put(dishes, oldAmount+addAmount);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "saradj": 2,
      "VirginiaYu": 189
    }
  },
  {
    "path": "src/main/java/duke/order/OrderList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "package duke.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.list.GenericList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.dish.Dish;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.parser.Convert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": " * Represents a list of {@link Order}s added by {@link Duke}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "saradj"
        },
        "content": "public class OrderList extends GenericList\u003cOrder\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * The constructor method(1) for OrderList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public OrderList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "saradj"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * The constructor method(2) for OrderList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public OrderList(List\u003cOrder\u003e orderList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "saradj"
        },
        "content": "        super(orderList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Marks a order as completed if the user finished it."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param orderNb the number of the {@link Order} in the {@link OrderList} that was completed"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public void markOrderDone(int orderNb) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "saradj"
        },
        "content": "        genList.get(orderNb).markAsDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Returns a list of all the undone {@link Order}s in the {@link OrderList}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Not including orders that has been done."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @return  {@link ArrayList} of {@link Order}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public List\u003cOrder\u003e getAllUndoneOrders() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        List\u003cOrder\u003e undoneOrderList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "saradj"
        },
        "content": "        for (Order order : genList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "saradj"
        },
        "content": "            if (!order.isDone()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "saradj"
        },
        "content": "                undoneOrderList.add(order);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "saradj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        return undoneOrderList;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Returns a list of all the {@link Order}s today in the {@link OrderList}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @return  {@link ArrayList} of {@link Order}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public List\u003cOrder\u003e getTodayOrders() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        List\u003cOrder\u003e todayOrderList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "saradj"
        },
        "content": "        for (Order order : genList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            if (order.isToday()) { todayOrderList.add(order); }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        return todayOrderList;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Returns a list of all the {@link Order}s on some date in the {@link OrderList}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @return  {@link ArrayList} of {@link Order}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public List\u003cOrder\u003e findOrderByDate(Date queryDate) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        List\u003cOrder\u003e theOrderList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        String qDate \u003d simpleDateFormat.format(queryDate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        for (Order order : genList) { if (qDate.equals(order.getDate())) { theOrderList.add(order); } }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        return theOrderList;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Returns a list of all the {@link Order}s containing some dishes in the {@link OrderList}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @return  {@link ArrayList} of {@link Order}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public List\u003cOrder\u003e findOrderByDishes(String dishName) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        List\u003cOrder\u003e theOrderList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        for (Order order : genList) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            if (order.hasDishes(dishName)) { theOrderList.add(order); }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        return theOrderList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Returns a list of all the undone {@link Order}s today"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * in the {@link OrderList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @return  {@link ArrayList} of {@link Order}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public List\u003cOrder\u003e getTodayUndoneOrders() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        List\u003cOrder\u003e todayOrderList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "saradj"
        },
        "content": "        for (Order order : genList) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "saradj"
        },
        "content": "            if (order.isToday()\u0026\u0026(!order.isDone())) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "saradj"
        },
        "content": "                todayOrderList.add(order);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "saradj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        return todayOrderList;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Used to alter the serving date of the {@link Order}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param orderNb order index"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param newDate reset date of the {@link Order}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @throws DukeException if the date is before the date today."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public void changeOrderDate(int orderNb, Date newDate) throws DukeException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "saradj"
        },
        "content": "        genList.get(orderNb).setDate(newDate);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Add dishes to the {@link Order}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Add one more if not specifying the amount."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param orderNb order index"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param dishName dishes"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public void addOrderDish(int orderNb, String dishName) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        genList.get(orderNb).addDish(dishName);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Add dishes to the {@link Order}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param orderNb order index"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param dishName dishes"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param amount add amount of that dishes"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public void addOrderDish(int orderNb, String dishName, int amount) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        genList.get(orderNb).addDish(dishName, amount);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Find dishes amount in the {@link Order}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param orderNb order index"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param dishName dishes"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @return the amount of that dishes"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public int findDishesAmount(int orderNb, String dishName) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        return genList.get(orderNb).getDishesAmount(dishName);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "saradj": 17,
      "VirginiaYu": 139
    }
  },
  {
    "path": "src/main/java/duke/parser/Convert.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": " * Convert between String and Date."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "public class Convert {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * Returns the suffix to be used after the days in the Date, useful for printing the Date in the desired format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * @param n indication the Day of the month"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * @return the suffix accordingly to the day of the month needed"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public static String getDaySuffix(int n) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        if (n \u003e\u003d 11 \u0026\u0026 n \u003c\u003d 13) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            return \"th\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        switch (n % 10) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                return \"st\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                return \"nd\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                return \"rd\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                return \"th\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * Returns a {@link Date} representation of a String in the format \"dd/MM/yyyy hhmm\" or \"dd/MM/yyyy\"."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * @param date String in the format \"dd/MM/yyyy hhmm\" or \"dd/MM/yyyy\", used to extract a {@link Date} instance from"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * @return The {@link Date} instance created from the argument string or null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public static Date stringToDate(String date) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        DateFormat formatter;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        if (date.length() \u003e 11) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            return formatter.parse(date);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            System.out.println(\"Warning: Unable to convert \\\"\" + date + \"\\\" to a Date.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * Returns the {@link Date } instance as a String to be printed in the file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * @param date deadline {@link Date} for finishing the task"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * @return String the date for the deadline"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public static String getDateString(Date date, String dateString) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            return dateString;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        LocalDate localDate \u003d date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        String pattern;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        if (dateString.length() \u003e 11) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            pattern \u003d \"d\u0027\" + getDaySuffix(localDate.getDayOfMonth()) + \"\u0027 \u0027of\u0027 MMMM yyyy, ha \";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            pattern \u003d \"d\u0027\" + getDaySuffix(localDate.getDayOfMonth()) + \"\u0027 \u0027of\u0027 MMMM yyyy\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(pattern);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        return formatter.format(date);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "9hafidz6": 78,
      "saradj": 1
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.command.Cmd;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.command.ingredientCommand.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.command.ingredientCommand.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.command.ingredientCommand.UseCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.command.orderCommand.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.dish.Dish;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.ingredient.Ingredient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import duke.order.Order;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "import duke.command.dishesCommand.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "import duke.command.ingredientCommand.*;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import duke.command.dishesCommand.InitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": " * Represents a parser used to parse the input String from the user into a Duke understandable Command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": " * It should deals with making sense of the user command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "    //There is no constructor method for all others are static."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "saradj"
        },
        "content": "     * Returns a {@link Cmd} that can be understood by {@link Duke} and executed after."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * We first split the fullCommand into 2, the keyword, followed by everything else."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * Then we perform switching based on the keyword."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * @param fullCommand The String command entered by the user"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * @return Command The Command to be executed"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * @throws DukeException for any invalid input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public static Cmd parse(String fullCommand, Duke.Type type) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "saradj"
        },
        "content": "        String[] splitted;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "saradj"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "saradj"
        },
        "content": "            case INGREDIENT: {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "saradj"
        },
        "content": "                splitted \u003d fullCommand.split(\" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "saradj"
        },
        "content": "                if (splitted[0].equals(\"add\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    if (splitted.length !\u003d 4)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "saradj"
        },
        "content": "                        throw new DukeException(\"must specify ingredient name, amount and/or expiry date\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "                    return new AddCommand(new Ingredient(splitted[1], Integer.parseInt(splitted[2]), splitted[3]));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "saradj"
        },
        "content": "                if (splitted[0].equals(\"remove\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    if (splitted.length !\u003d 2)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "saradj"
        },
        "content": "                        throw new DukeException(\"must specify a index\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    return new DeleteCommand\u003cIngredient\u003e(Integer.parseInt(splitted[1]));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "saradj"
        },
        "content": "                } else if (splitted[0].equals(\"use\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    if (splitted.length !\u003d 3)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "saradj"
        },
        "content": "                        throw new DukeException(\"follow the template: use \u003cingredient name\u003e \u003camount\u003e\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    return new UseCommand(new Ingredient(splitted[1], Integer.parseInt(splitted[2]), new Date()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "                } else if (splitted[0].equals(\"listtoday\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "                    if (splitted.length !\u003d 1)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "                        throw new DukeException(\"follow the template: listtoday\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "                    return new FindToday();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "                } else if(splitted[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "                    if(splitted.length !\u003d 2)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "                        throw new DukeException(\"follow the template: find \u003cingredient name\u003e\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "                    return new FindIngredientCommand(splitted[1]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "                else"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    throw new DukeException(\"not a valid command for an Ingredient\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "saradj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "saradj"
        },
        "content": "            case DISH: {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                splitted \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                switch (splitted[0]) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    case \"add\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                        if(splitted.length \u003c 2) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                            throw new DukeException(\"specify dish name\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                        else"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                            splitted[1] \u003d splitted[1].replaceAll(\"\\\\s+\", \" \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                        return new AddDishCommand(new Dish(splitted[1]));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    case \"remove\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                            return new DeleteDishCommand(Integer.parseInt(splitted[1]));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                        } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                            throw new DukeException(\"enter a valid index\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    case \"list\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                        return new ListDishCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    case \"initialize\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                        return new InitCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    case \"ingredient\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                        String[] getIng \u003d splitted[1].split(\" \", 3);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                        int amount \u003d 0;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                        int index \u003d 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                            amount \u003d Integer.parseInt(getIng[1]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                            index \u003d Integer.parseInt(getIng[2]);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                            throw new DukeException(\"enter a valid amount/index\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                        return new AddIngredient(new Ingredient(getIng[0], amount, new Date()), index);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                        throw new DukeException(\"not a valid command for a Dish\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "saradj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "saradj"
        },
        "content": "            case ORDER: {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                splitted \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "saradj"
        },
        "content": "                if (splitted.length \u003e 4)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    throw new DukeException(\"must specify ordered dishes and order date\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                else if (splitted[0].equals(\"add\")){ //add a new order"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    String[] split \u003d splitted[1].split(\" /on \",2);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    Order newOrder \u003d null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    Date orderDate;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    if (split.length\u003d\u003d1) { newOrder \u003d new Order(); }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    else if (split.length\u003d\u003d2) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                        orderDate \u003d Convert.stringToDate(split[1]);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                        newOrder \u003d new Order(orderDate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    } else { throw new DukeException(\"must enter a valid date\"); }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    String[] orderDishes \u003d split[0].split(\", \");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    for (String dishes: orderDishes) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                        String[] dishesSplit \u003d dishes.split(\"\\\\*\", 2);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                        newOrder.addDish(dishesSplit[0], Integer.parseInt(dishesSplit[1]));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    return new AddOrderCommand(newOrder);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                } else if (splitted[0].equals(\"alter\")) { //alter order date"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    if (splitted.length\u003d\u003d1) { throw new DukeException(\"Must specify order number! *starting from 1*\"); }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    Date orderDate;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    int orderIndex;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    String[] split2 \u003d splitted[1].split(\" \",2);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    if (split2.length\u003d\u003d1) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                        orderIndex \u003d Integer.parseInt(split2[0]);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                        orderDate \u003d new Date();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                        orderIndex \u003d Integer.parseInt(split2[0]);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                        orderDate \u003d Convert.stringToDate(split2[1]);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    return new AlterDateCommand(orderIndex,orderDate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                } else if (splitted[0].equals(\"done\")) {//done an order"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    if (splitted.length\u003d\u003d1) { throw new DukeException(\"Must specify order number! *starting from 1*\"); }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                        int orderIndex \u003d Integer.parseInt(splitted[1]);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                        return new DoneOrderCommand(orderIndex-1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                        throw new DukeException(\"enter a valid index\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                } else if (splitted[0].equals(\"remove\")) {//remove an order"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    if (splitted.length\u003d\u003d1) { throw new DukeException(\"Must specify order number! *starting from 1*\"); }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                        int orderIndex \u003d Integer.parseInt(splitted[1]);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                        return new DeleteOrderCommand(orderIndex-1);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                    } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                        throw new DukeException(\"enter a valid index\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                } else if (splitted[0].equals(\"list\")) {//list orders"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    if (splitted.length\u003d\u003d1) { return new ListOrderCommand(\"all\"); }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    String listType \u003d splitted[1];"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    String[] split2 \u003d listType.split(\" \",2);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    if (split2.length\u003d\u003d1) { return new ListOrderCommand(split2[0]); }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                    else { return new ListOrderCommand(split2[1]); }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                } else throw new DukeException(\"not a valid command for an order\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "saradj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "saradj"
        },
        "content": "                throw new DukeException(\"not a valid type\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * Checks the length of a String array is of size 2."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "saradj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * @throws DukeException when array is not of size 2."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "    public static void checkLength(String[] str) throws DukeException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "        if (str.length !\u003d 2) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "            throw new DukeException(\"The description cannot be empty.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * Split a string and check its length."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "    public static String[] splitAndCheck(String str, String regex) throws DukeException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "        String[] part \u003d str.split(regex, 2);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "        checkLength(part); //Throws DukeException"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "        return part;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * Converts a string into a number, and checks if it is out of bounds."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "saradj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * @return Returns a valid integer"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * @throws DukeException when it is invalid"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "    public static int checkNumber(String str, int size) throws DukeException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "        int x;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "            //Minus one because index starts from zero."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "            //Throws NumberFormatException"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "            x \u003d Integer.parseInt(str) - 1;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "        if (x \u003c 0 || x \u003e\u003d size) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "            //Index is out of bounds"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "            throw new DukeException(\"FUCK YOU JOEY!\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "saradj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "        return x;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CEGLincoln": 39,
      "9hafidz6": 29,
      "saradj": 35,
      "x3chillax": 12,
      "-": 30,
      "VirginiaYu": 63
    }
  },
  {
    "path": "src/main/java/duke/storage/FridgeStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "saradj"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.ingredient.IngredientsList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.list.GenericList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "saradj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "saradj"
        },
        "content": "public class FridgeStorage extends Storage\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "saradj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "saradj"
        },
        "content": "     * The constructor method for Storage."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "saradj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "saradj"
        },
        "content": "     * @param fp used to specify the location of the file in the hard disc."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "saradj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public FridgeStorage(String fp) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "saradj"
        },
        "content": "        super(fp);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "saradj"
        },
        "content": "        entries \u003d new IngredientsList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "saradj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "saradj"
        },
        "content": "    GenericList\u003cIngredient\u003e generate() throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "saradj"
        },
        "content": "        for (String next : contentSoFar) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "saradj"
        },
        "content": "            //splitting each line to extract the task:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "saradj"
        },
        "content": "            //type - words[0], done or not - words[1], description - words[2], and more."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "saradj"
        },
        "content": "            String[] words \u003d next.split(\"\\\\|\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "saradj"
        },
        "content": "            if (words.length !\u003d 3)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "saradj"
        },
        "content": "                throw new DukeException(\"Error while reading from the Fridge Storage \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "saradj"
        },
        "content": "            entries.addEntry(new Ingredient(words[0], Integer.parseInt(words[1]), words[2]));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "saradj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "saradj"
        },
        "content": "        // System.out.println(\"in generate size of list is \"+entries.size());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return entries;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void removeAllExpired() throws IOException, DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "saradj"
        },
        "content": "        for (int i \u003d 0; i \u003c entries.size(); i++)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "saradj"
        },
        "content": "            if (entries.getEntry(i).isExpired()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "saradj"
        },
        "content": "                entries.removeEntry(i);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "saradj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "saradj"
        },
        "content": "        update();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "saradj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "saradj": 46
    }
  },
  {
    "path": "src/main/java/duke/storage/OrderStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "saradj"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.list.GenericList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.order.Order;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "import duke.order.OrderList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "saradj"
        },
        "content": "public class OrderStorage extends Storage\u003cOrder\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "saradj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "saradj"
        },
        "content": "     * The constructor method for Storage."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "saradj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "saradj"
        },
        "content": "     * @param fp used to specify the location of the file in the hard disc."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "saradj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public OrderStorage(String fp) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "saradj"
        },
        "content": "        super(fp);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        entries \u003d new OrderList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "saradj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "saradj"
        },
        "content": "    GenericList\u003cOrder\u003e generate() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "saradj"
        },
        "content": "        for (String next : contentSoFar) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "saradj"
        },
        "content": "            //splitting each line to extract the task:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "saradj"
        },
        "content": "            //type - words[0], done or not - words[1], description - words[2], and more."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "saradj"
        },
        "content": "            String[] words \u003d next.split(\"\\\\|\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "saradj"
        },
        "content": "            if(words.length!\u003d3)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "saradj"
        },
        "content": "                throw new DukeException(\"Error while reading from the order Storage\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "saradj"
        },
        "content": "            entries.addEntry(new Order());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "saradj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return entries;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "saradj"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//    public Fridge(FridgeStorage fridgeStorage) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//        this.fridgeStorage\u003dfridgeStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//        currentIngredients\u003dnew IngredientsList(fridgeStorage.load().getAllEntries());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//        expiredIngredients\u003dgetExpiredIngredients();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "//    }"
      }
    ],
    "authorContributionMap": {
      "saradj": 30,
      "VirginiaYu": 10
    }
  },
  {
    "path": "src/main/java/duke/storage/Printable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "saradj"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "saradj"
        },
        "content": "public interface Printable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public abstract String printInFile();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "saradj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "saradj": 5
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.list.GenericList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": " * Represents a storage used to load {@link Task}s from a text {@link File} and store {@link Task}s in it."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "saradj"
        },
        "content": "public abstract class Storage\u003cT\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "saradj"
        },
        "content": "    protected String filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "saradj"
        },
        "content": "    protected Path path;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "saradj"
        },
        "content": "    protected List\u003cString\u003e contentSoFar;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "saradj"
        },
        "content": "    protected GenericList\u003cT\u003e entries;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * The constructor method for Storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "saradj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * @param fp used to specify the location of the file in the hard disc."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public Storage(String fp) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        filePath \u003d fp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        path \u003d Paths.get(fp);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * Load tasks from file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "saradj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * @return an {@link ArrayList} of {@link Task}s read from the text file indicated by the {@link Path}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public GenericList\u003cT\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            //to get the data from the hard disk until now"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            contentSoFar \u003d new ArrayList\u003c\u003e(Files.readAllLines(path, StandardCharsets.UTF_8));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                contentSoFar \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                throw new DukeException(\"Could not create file in the specified directory.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "saradj"
        },
        "content": "        entries \u003d generate();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return entries;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * Part of the load method, taken out."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * Generates tasks based on contentSoFar."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "saradj"
        },
        "content": "    abstract GenericList\u003cT\u003e generate() throws DukeException;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * Returns the {@link Path} that holds the directory used for I/O."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "saradj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Path specifies the directory of the text {@link File} used for writing or reading"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getPath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return path;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * Updates the content in the text file, by changing the specific {@link Task} indicated by the taskNb."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "saradj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * @param taskNb Positive integer indicating the number of the {@link Task} in the {@link TaskList} to be updated"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if the taskNb is invalid or there was an I/O Exception"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void changeContent(int taskNb) throws DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        if (taskNb \u003c 0) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            throw new DukeException(\"The task number should be positive, task number entered was: \" + taskNb);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            contentSoFar \u003d new ArrayList\u003c\u003e(Files.readAllLines(path, StandardCharsets.UTF_8));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "saradj"
        },
        "content": "            contentSoFar.set(taskNb, ((Printable) entries.getEntry(taskNb)).printInFile()); // changing the file content"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.write(path, contentSoFar, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            throw new DukeException(\"Error while updating the file\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void update() throws DukeException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "saradj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "saradj"
        },
        "content": "            contentSoFar \u003d new ArrayList\u003cString\u003e(entries.size());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "saradj"
        },
        "content": "            for (int i \u003d 0; i \u003c entries.size(); i++)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "saradj"
        },
        "content": "                contentSoFar.add(i, ((Printable) entries.getEntry(i)).printInFile()); // changing the file content"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "saradj"
        },
        "content": "            Files.write(path, contentSoFar, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "saradj"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "saradj"
        },
        "content": "            throw new DukeException(\"Error while updating the file\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "saradj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void removeFromFile(int index) throws IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "saradj"
        },
        "content": "        contentSoFar \u003d new ArrayList\u003c\u003e(Files.readAllLines(getPath(), StandardCharsets.UTF_8));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "saradj"
        },
        "content": "        contentSoFar.remove(index); // changing the file content"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "saradj"
        },
        "content": "        //System.out.println(\"removing index\"+index);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "saradj"
        },
        "content": "        Files.write(getPath(), contentSoFar, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * Used to add a {@link Task} by writing to {@link File}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "saradj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task {@link Task} to be written"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * @throws IOException whatever that is"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void addInFile(String task) throws IOException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        contentSoFar \u003d new ArrayList\u003c\u003e(Files.readAllLines(path, StandardCharsets.UTF_8));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        contentSoFar.add(task);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(path, contentSoFar, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "9hafidz6": 34,
      "saradj": 36,
      "-": 58
    }
  },
  {
    "path": "src/main/java/duke/storage/TaskStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "saradj"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.list.GenericList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "saradj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "saradj"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "saradj"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "saradj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "saradj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "saradj"
        },
        "content": "public class TaskStorage extends Storage\u003cTask\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "saradj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "saradj"
        },
        "content": "     * The constructor method for Storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "saradj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "saradj"
        },
        "content": "     * @param fp used to specify the location of the file in the hard disc."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "saradj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public TaskStorage(String fp) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "saradj"
        },
        "content": "        super(fp);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "saradj"
        },
        "content": "        entries\u003d new TaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "saradj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "saradj"
        },
        "content": "    GenericList\u003cTask\u003e generate() throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "saradj"
        },
        "content": "        for (String next : contentSoFar) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "saradj"
        },
        "content": "            //splitting each line to extract the task:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "saradj"
        },
        "content": "            //type - words[0], done or not - words[1], description - words[2], and more."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "saradj"
        },
        "content": "            String[] words \u003d next.split(\"\\\\|\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "saradj"
        },
        "content": "            switch (words[0]) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "saradj"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    entries.addEntry(new Todo(words[2]));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    if (words[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "saradj"
        },
        "content": "                        entries.getEntry(entries.size() - 1).markAsDone();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "saradj"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    entries.addEntry(new Deadline(words[2], words[3]));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    if (words[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "saradj"
        },
        "content": "                        entries.getEntry(entries.size() - 1).markAsDone();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "saradj"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    entries.addEntry(new Event(words[2], words[3]));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    if (words[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "saradj"
        },
        "content": "                        entries.getEntry(entries.size() - 1).markAsDone();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "saradj"
        },
        "content": "                case \"P\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    entries.addEntry(new DoWithinPeriodTasks(words[2], words[3], words[4]));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    if (words[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "saradj"
        },
        "content": "                        entries.getEntry(entries.size() - 1).markAsDone();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "saradj"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "saradj"
        },
        "content": "                    throw new DukeException(\"Error in extracting tasks from file.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "saradj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "saradj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "saradj"
        },
        "content": "        return entries;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "saradj"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "saradj": 65
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import duke.parser.Convert;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": " * Represents a deadline {@link Task } specified by the due {@link Date}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * The constructor method for Deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public Deadline(String description, String str) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        this.setNewDate(str);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setNewDate(String date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        this.by \u003d date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        this.date \u003d Convert.stringToDate(by);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getCurrentDate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        return \"[D]\" + super.toString() + \"(by: \" + by + \")\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * Formats {@link Deadline} into a String."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String used to print the {@link Task } in the text file"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String printInFile() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        if (this.isDone()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            return \"D|1|\" + this.getDescription() + \"|\" + by;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            return \"D|0|\" + this.getDescription() + \"|\" + by;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "9hafidz6": 19,
      "-": 33
    }
  },
  {
    "path": "src/main/java/duke/task/DoWithinPeriodTasks.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": " * One of the B-Extensions."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": " * @author CEGLincoln"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "public class DoWithinPeriodTasks extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    private String from;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    private String to;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * The constructor method for DoWithinPeriodTasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public DoWithinPeriodTasks(String d, String f, String t) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(d);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        from \u003d f;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        to \u003d t;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setNewDate(String date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        //which one?"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getCurrentDate() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        return \"[P]\" + super.toString() + \"(from: \" + from + \" to: \" + to + \")\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public String printInFile() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        if (super.isDone()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            return \"P|1|\" + super.getDescription() + \"|\" + from + \"|\" + to;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            return \"P|0|\" + super.getDescription() + \"|\" + from + \"|\" + to;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "9hafidz6": 24,
      "-": 22
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import duke.parser.Convert;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": " * Represents an Event, a {@link Task} which is happening at a specific Date and time."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String at;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * The constructor method for Event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public Event(String description, String str) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        this.setNewDate(str);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setNewDate(String date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        this.at \u003d date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        this.date \u003d Convert.stringToDate(at);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getCurrentDate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        return \"[E]\" + super.toString() + \"(at: \" + at + \")\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * Formats {@link Event} into a String."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String used to print the {@link Task } in the text file"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String printInFile() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        if (this.isDone()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            return \"E|1|\" + this.getDescription() + \"|\" + at;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            return \"E|0|\" + this.getDescription() + \"|\" + at;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "9hafidz6": 20,
      "-": 32
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.storage.Printable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": " * Represents a general Task to be added by {@link Duke}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "saradj"
        },
        "content": "public abstract class Task implements Printable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * The constructor method for Task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * @param description of the task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract void setNewDate(String date);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract Date getCurrentDate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * Returns a String representation of the status icon, indicating whether the {@link Task} was done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * @return a tick or a cross"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * Returns the String description of the {@link Task}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String description of the Task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * Used to mark the {@link Task} as finished."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + getDescription();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * Returns a boolean indicating whether the {@link Task} was completed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return boolean true if the task was marked as done, false otherwise"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "9hafidz6": 15,
      "saradj": 2,
      "-": 47
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.list.GenericList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": " * Represents a list of {@link Task}s added by {@link Duke}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "saradj"
        },
        "content": "public class TaskList extends GenericList\u003cTask\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * The constructor method(1) for TaskList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public TaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "saradj"
        },
        "content": "       super(taskList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * The constructor method(2) for TaskList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "saradj"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * Marks a task as completed if the user finished it."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskNb the number of the {@link Task} in the {@link TaskList} that was completed"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markTaskDone(int taskNb) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "saradj"
        },
        "content": "        genList.get(taskNb).markAsDone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public void changeTaskDate(int taskNb, String date) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "saradj"
        },
        "content": "        genList.get(taskNb).setNewDate(date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "9hafidz6": 7,
      "saradj": 6,
      "-": 28
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import duke.parser.Convert;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": " * This class..."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * The constructor method for this class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        date \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setNewDate(String date) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        this.date \u003d Convert.stringToDate(date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getCurrentDate() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String printInFile() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        if (this.isDone()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            return \"T|1|\" + this.getDescription();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            return \"T|0|\" + this.getDescription();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CEGLincoln": 2,
      "9hafidz6": 11,
      "-": 32
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.ingredient.IngredientsList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "saradj"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.dish.Dish;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": " * Represents the user interaction, used for getting the user input and printing the output on the screen."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    private static final String line \u003d \"_________________________________________________________________________________________\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * The constructor method for Ui."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * Returns the input entered by the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "saradj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String the input entered by the user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * Show a line."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t \" + line);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public void chefDrawing() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"                           (c)___c____(c)           \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"                            \\\\ ........../          \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"                             |.........|            \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"                              |.......|             \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"                              |.......|             \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"                              |\u003d\u003d\u003d\u003d\u003d\u003d\u003d|             \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"                              |\u003d\u003d\u003d\u003d\u003d\u003d\u003d|             \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"                             __o)\u0027\u0027\u0027\u0027::?            \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"                            C__    c)::;            \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"                               \u003e--   ::     /\\\\     \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"                               (____/      /__\\\\    \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"                               } /\u0027\u0027|      |##|     \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"                    __/       (|V ^ )\\\\     |##|    \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"                    o | _____/ |#/ / |     |##|     \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"           @        o_|}|_____/|/ /  |     |##|     \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"                          _____/ /   |     ~!!~     \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"              \u003d\u003d\u003d\u003d\u003d\u003dooo}{|______)#   |     /`\u0027\\\\    \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"          ~~~~ ;    ;          ###---|8     \u0027\u0027      \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"        ____;_____;____        ###\u003d\u003d\u003d\u003d     /:|\\\\    \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"       (///0///@///@///)       ###@@@@|             \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"       |~~~~~~~~~~~~~~~|       ###@@@@|             \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"        \\\\             /        ###@@@@|               +          \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"         \\\\___________/         ###xxxxx      /\\\\      //         \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"           H H   H  H          ###|| |      /  \\\\    //           \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"           H H   H  H           | || |     /____\\\\  /~_^_         \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"           H H   H  H           C |C |     _|@@|_ /__|#|_         \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"           H H   H  H            || ||    /_|@@|_/___|#|/|        \");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\" v    \\\\/   H(o) (o) H            || ::   |:::::::::::::|#|       \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\" ~    ~~  (o)      (o)        Ccc__)__)   |   CHEF      |#|       \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"  \\\\|/      ~   @* \u0026 ~                    |:::::::::::::|/  \\\\|/  \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"   ~           \\\\|/        !!        \\\\ !/  ~~~~~~~~~~~~~    ~~~  \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"               ~~~        ~~         ~~           ~~              \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "        System.out.println(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   \");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public void dishDrawing() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"            (\\\\                                      \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"             \\\\ \\\\                                   \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"               \\\\/ ___,.-------..__                  \");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"        //\\\\\\\\ _,-\u0027\\\\\\\\               `\u0027--._ //\\\\\\\\  \");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"        \\\\\\\\ ;\u0027      \\\\\\\\                   `: //    \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"         `(          \\\\\\\\                   )\u0027       \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"           :.          \\\\\\\\,----,         ,;         \");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"            `.`--.___   (    /  ___.--\u0027,\u0027            \");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"              `.     ``-----\u0027-\u0027\u0027     ,\u0027              \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"                 -.               ,-                 \");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"                     `-._______.-                    \");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "    //TODO: resolve unmappable character"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "    /*public void orderDrawing() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        System.out.println( \"\\t ╭━━━╮╱╱╱╱╱╱╱╱╱╭╮╱╱╱╱╱╱╱╱╱╱╱\\n\" +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                \"\\t ┃╭━╮┃╱╱╱╱╱╱╱╱╱┃┃╱╱╱╱╱╱╱╱╱╱╱\\n\" +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                \"\\t ┃┃╱┃┃╱╱╭━╮╱╱╭━╯┃╱╱╭━━╮╱╱╭━╮\\n\" +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                \"\\t ┃┃╱┃┃╱╱┃╭╯╱╱┃╭╮┃╱╱┃┃━┫╱╱┃╭╯\\n\" +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                \"\\t ┃╰━╯┃╱╱┃┃╱╱╱┃╰╯┃╱╱┃┃━┫╱╱┃┃╱\\n\" +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                \"\\t ╰━━━╯╱╱╰╯╱╱╱╰━━╯╱╱╰━━╯╱╱╰╯╱\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * Used to print the greeting message from {@link Duke}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "saradj"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "saradj"
        },
        "content": "        int timeOfDay \u003d c.get(Calendar.HOUR_OF_DAY);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "saradj"
        },
        "content": "        String greeting \u003d \"Hello\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "saradj"
        },
        "content": "        if (timeOfDay \u003e\u003d 0 \u0026\u0026 timeOfDay \u003c 12) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "saradj"
        },
        "content": "            greeting \u003d \"Good Morning\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "saradj"
        },
        "content": "        } else if (timeOfDay \u003e\u003d 12 \u0026\u0026 timeOfDay \u003c 16) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "saradj"
        },
        "content": "            greeting \u003d \"Good Afternoon\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "saradj"
        },
        "content": "        } else if (timeOfDay \u003e\u003d 16 \u0026\u0026 timeOfDay \u003c 21) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "saradj"
        },
        "content": "            greeting \u003d \"Good Evening\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "saradj"
        },
        "content": "        } else if (timeOfDay \u003e\u003d 21 \u0026\u0026 timeOfDay \u003c 24) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "saradj"
        },
        "content": "            greeting \u003d \"Good Night\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "saradj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "saradj"
        },
        "content": "        System.out.println(\"\\t \" + greeting + \" chef! I\u0027m Duke\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void showHasExpiring() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "saradj"
        },
        "content": "        System.out.println(\"\\t A gentle reminder you have some  expired ingredients in the fridge\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "saradj"
        },
        "content": "        System.out.println(\"\\t Would you like to see the list?\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void showOptions() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"\\t Options (choose one): \");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"\\t \u0027a\u0027 remove all expiring\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"\\t \u0027b\u0027 add/remove/use an ingredient\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"\\t \u0027c\u0027 place/remove/change an order\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"\\t \u0027d\u0027 add/remove/change a dish\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"\\t \u0027q\u0027 to exit\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void showUsed(Ingredient ingredient) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "saradj"
        },
        "content": "        System.out.println(\"Great, just used \" + ingredient);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void show(String message) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "saradj"
        },
        "content": "        System.out.println(\"\\t \" + message);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void showIngredientTask() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "saradj"
        },
        "content": "        showIngredientTemplate();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"\\t type \u0027back\u0027 to go back to the main menu\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"\\t type \u0027show\u0027 to see all ingredients currently in the fridge\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"\\t type \u0027template\u0027 to see the format of the commands\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void showIngredientTemplate(){"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"\\t Continue by adding, removing or using an ingredient \\n\\t Template: \");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "saradj"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"\\t add \u003cIngredient name\u003e \u003camount\u003e \u003cexpiry date: DD/MM/YYYY\u003e\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"\\t remove \u003cingredient number\u003e\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"\\t use \u003cingredient name\u003e \u003camount\u003e *always use most recently expiring ingredients first, to prevent food waste!*\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public void showDishTemplate() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        dishDrawing();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"\\t Continue by adding, removing, listing, adding ingredient and initializing \\n\\t Template: \");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"\\t add \u003cdish name\u003e\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"\\t remove \u003cdish index\u003e\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"\\t list\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "        System.out.println(\"\\t ingredient \u003cdescription\u003e \u003camount\u003e \u003cindex\u003e\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"\\t initialize (REMOVES all entries in the list)\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"\\t back, return to maim menu\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"\\t template\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public void showOrderTemplate() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "        //orderDrawing();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        System.out.println(\"\\t Continue by adding, removing, listing, altering, marking done order \\n\\t Template: \");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        System.out.println(\"\\t add \u003cdish1 name\u003e*\u003cdish1 amount\u003e, \u003cdish2 name\u003e*\u003cdish2 amount\u003e, ... , \u003cdishN name\u003e*\u003cdishN amount\u003e\" +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "                \" /on \u003corder date: DD/MM/YYYY\u003e\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        System.out.println(\"\\t list \u003clist type: all, undone, today, undoneToday\u003e\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        System.out.println(\"\\t list dish \u003cfiltering dish name\u003e\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        System.out.println(\"\\t list date \u003cfiltering order serving date: DD/MM/YYYY\u003e\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        System.out.println(\"\\t alter \u003corder index\u003e \u003corder date: DD/MM/YYYY\u003e\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        System.out.println(\"\\t done \u003corder index\u003e\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        System.out.println(\"\\t remove \u003corder index\u003e\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        System.out.println(\"\\t initialize (REMOVES all entries in the order list)\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        System.out.println(\"\\t ***** Note: order index starts from 1 *****\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "saradj"
        },
        "content": "    public void showIngredientsInFridge(IngredientsList ingredientsList) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "saradj"
        },
        "content": "        if (ingredientsList.isEmpty())"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            System.out.println(\"\\t The fridge is empty, better go buy some ingredients! \");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "saradj"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "            System.out.println(\"\\t Here is a list of all the ingredients in your fridge: \");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "saradj"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "saradj"
        },
        "content": "            for (Ingredient ingredient : ingredientsList.sortByExpiryDate().getAllEntries()) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "saradj"
        },
        "content": "                System.out.println(i + \": \" + ingredient);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "saradj"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "saradj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "saradj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * Show loading error."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t ☹ OOPS!!! Error while loading the list from the hard disc\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * Show the error to user."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "saradj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * @param e an error"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showError(String e) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(e);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * Show the task to user."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "saradj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * @param task string"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showTask(String task) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * Show that this task is marked."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "saradj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param doneOrder The description of the order that is marked as done"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public void showMarkDoneOrder(String doneOrder) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        System.out.println(\"\\t Nice! I\u0027ve marked this order as done:\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        System.out.println(\"\\t \" + doneOrder);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Show that this task is marked."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "saradj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param task The description of the task that is marked as done"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public void showMarkDone(String task) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        System.out.println(\"\\t \" + task);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Show the order that has been changed serving date."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "saradj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param date         the newly set date for serving the order"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param changedOrder the order that has been changed"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public void showOrderChangedDate(String date, String changedOrder) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        System.out.println(\"\\t Nice! I\u0027ve changed the order at \" + date + \":\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        System.out.println(\"\\t \" + changedOrder);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * Show the size of the list."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "saradj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * @param size the size"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "    public void showSize(int size) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.print(\"\\t Now you have \" + size);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "        if (size \u003d\u003d 1) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "            System.out.print(\" task\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "            System.out.print(\" tasks\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\" in the list.\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Show the size of the order list."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "saradj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param size the size"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public void showOrderListSize(int size) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        System.out.print(\"\\t Now you have \" + size);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        if (size \u003d\u003d 1) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            System.out.print(\" order\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "            System.out.print(\" orders\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        System.out.println(\" in the order list.\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * Shows that a task has been added."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "saradj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * @param command ay"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * @param size    ya"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showAddCommand(String command, int size) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "saradj"
        },
        "content": "        System.out.println(\"\\t Got it. I\u0027ve added this: \");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t \" + command);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "saradj"
        },
        "content": "        // showSize(size);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Shows that a order has been added."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "saradj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param description information of the order be added"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param size  current size of the whole order list"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public void showAddOrder(String description, int size) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        System.out.println(\"\\t Got it. I\u0027ve added this order: \");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        System.out.println(\"\\t \" + description);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        showOrderListSize(size);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * Show the task that has been removed."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "saradj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * @param removed the task"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * @param size    size of list"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    public void showRemovedIngredient(String removed, int size) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        System.out.println(\"\\t Noted. I\u0027ve removed this ingredient:\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t \" + removed);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        showSize(size);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * Show the order that has been removed."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "saradj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param removed the order"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     * @param size    size of order list"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    public void showRemovedOrder(String removed, int size) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        System.out.println(\"\\t Noted. I\u0027ve removed this order:\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        System.out.println(\"\\t \" + removed);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "        showOrderListSize(size);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "VirginiaYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public void showAddedDishes(String dish) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"\\t you have added the following dish: \");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"\\t \" + dish);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    public void showAddedIngredient(String ingredient) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        System.out.println(\"\\t you have added the following ingredient: \");"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "        System.out.println(\"\\t \" + ingredient);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "x3chillax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "x3chillax"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public void showDishes(String Dish, int Nb) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(Dish + \"\\t orders: \" + Nb);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public void showDeletedDIsh(String dish) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"\\t The following dish have been removed:\");"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"\\t \" + dish);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public void showIngredients(Ingredient ingredient, Dish dish) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        System.out.println(\"\\t ingredient: \" + ingredient.getName()"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "                + \"\\n\\t added to: \" + dish.getDishname());"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "CEGLincoln"
        },
        "content": "     * Every time this method is executed, it clears the console screen."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     * @throws InterruptedException"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    public void clearScreen() throws IOException, InterruptedException {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "        new ProcessBuilder(\"cmd\", \"/c\", \"cls\").inheritIO().start().waitFor();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "9hafidz6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CEGLincoln": 55,
      "9hafidz6": 112,
      "saradj": 75,
      "x3chillax": 7,
      "-": 63,
      "VirginiaYu": 72
    }
  },
  {
    "path": "src/test/FridgeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "saradj"
        },
        "content": "package duke.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.fridge.Fridge;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "saradj"
        },
        "content": "import duke.parser.Convert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "saradj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "saradj"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "saradj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "saradj"
        },
        "content": "class FridgeTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "saradj"
        },
        "content": "    Fridge fridge \u003d new Fridge();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "saradj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "saradj"
        },
        "content": "    void testPutIngredient() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "saradj"
        },
        "content": "        fridge \u003d new Fridge();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "saradj"
        },
        "content": "        Date expiryDate\u003d Convert.stringToDate( \"03/11/2019\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "saradj"
        },
        "content": "        Ingredient beef\u003dnew Ingredient(\"Beef\", 500, expiryDate);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "saradj"
        },
        "content": "        fridge.putIngredient(beef);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "saradj"
        },
        "content": "        assertTrue( fridge.hasEnough(beef));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "saradj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "saradj"
        },
        "content": "    void hasEnough() throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "saradj"
        },
        "content": "        fridge\u003dnew Fridge();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "saradj"
        },
        "content": "        Date expiryDate\u003d Convert.stringToDate( \"03/11/2019\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "saradj"
        },
        "content": "        fridge.putIngredient(new Ingredient(\"Pepper\", 2, expiryDate));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "saradj"
        },
        "content": "        assertTrue(fridge.hasEnough(new Ingredient(\"Pepper\",1,expiryDate)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "saradj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "saradj"
        },
        "content": "    void useIngredient() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "saradj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "saradj"
        },
        "content": "    void hasExpiredIngredients() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "saradj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "saradj"
        },
        "content": "    void getExpiredIngredients() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "saradj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "saradj"
        },
        "content": "    void removeExpiring() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "saradj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "saradj"
        },
        "content": "    void removeExpired() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "saradj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "saradj"
        },
        "content": "    void testGetExpiredIngredients() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "saradj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "saradj"
        },
        "content": "    void getMostRecentlyExpiring() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "saradj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "saradj"
        },
        "content": "    void putIngredient() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "saradj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "saradj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "saradj"
        },
        "content": "    void getAllIngredients() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "saradj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "saradj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "saradj": 69
    }
  }
]
