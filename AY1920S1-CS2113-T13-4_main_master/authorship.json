[
  {
    "path": "src/main/java/duke/AddWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "talesrune"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.scene.control.ComboBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": " * Controller for AddWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "public class AddWindow extends AnchorPane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private ComboBox\u003cString\u003e cbType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private TextField tfDesc;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private TextField tfDateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private TextField tfDuration;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private TextField tfUnit;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private ComboBox\u003cString\u003e cbExistingTask;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private Button btnAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private Button btnReset;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Setting up Add Window Interface."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param d The object of Duke."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param mainWindow The main window that runs DUKE Manager."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void setAddWindow(Duke d, MainWindow mainWindow) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cbType.getItems().addAll("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                \"Todo\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                \"Deadline\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                \"Event\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                \"Fixed Duration\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                \"Repeat\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                \"Do After\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        );"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        TaskList items \u003d d.getTaskList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            cbExistingTask.getItems().add(items.get(i).getDescription());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    void onMouseClickAdd() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        System.out.println(\"clicked on \" + cbType.getSelectionModel().getSelectedItem());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        if (cbType.getSelectionModel().getSelectedItem().equals(\"Todo\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            mainWindow.handleUserEvent(\"todo \" + tfDesc.getText().trim());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (cbType.getSelectionModel().getSelectedItem().equals(\"Deadline\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            mainWindow.handleUserEvent(\"deadline \" + tfDesc.getText().trim() + \" /by \" + tfDateTime.getText().trim());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (cbType.getSelectionModel().getSelectedItem().equals(\"Event\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            mainWindow.handleUserEvent(\"event \" + tfDesc.getText().trim() + \" /at \" +  tfDateTime.getText().trim());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (cbType.getSelectionModel().getSelectedItem().equals(\"Fixed Duration\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            mainWindow.handleUserEvent(\"fixedduration \" + tfDesc.getText().trim() + \" /for \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    +  tfDuration.getText().trim() + \" \" +  tfUnit.getText().trim());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (cbType.getSelectionModel().getSelectedItem().equals(\"Repeat\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            mainWindow.handleUserEvent(\"repeat \" + tfDesc.getText().trim()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    + \" /from \" +  tfDateTime.getText().trim() + \" /for \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    +  tfDuration.getText().trim()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    + \" \" + tfUnit.getText().trim());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (cbType.getSelectionModel().getSelectedItem().equals(\"Do After\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            mainWindow.handleUserEvent(\"doafter \" + tfDesc.getText().trim()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    + \" /after \" +  cbExistingTask.getSelectionModel().getSelectedItem());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        mainWindow.listViewRefresh();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Stage stage \u003d (Stage) btnAdd.getScene().getWindow();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        stage.close();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    void onMouseClickReset() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cbType.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        tfDesc.clear();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        tfDateTime.clear();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        tfDuration.clear();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        tfUnit.clear();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cbExistingTask.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "talesrune": 106
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.SetPriorityCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.AddMultipleCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.command.AddContactsCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.ListPriorityCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.BackupCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.storage.PriorityStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.storage.ContactStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.task.PriorityList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.ContactList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.command.ListContactsCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a duke that controls the program."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList items;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    private ContactStorage contactStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    private ContactList contactList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    private PriorityStorage priorityStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    private PriorityList priorityList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a duke to initialize storage, task list, and ui."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param filePath1 The location of the text file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param filePath2 The location of the priority text file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param filePathForContacts The location of the contact text file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public Duke(String filePath1, String filePath2, String filePathForContacts) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        storage \u003d new Storage(filePath1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        priorityStorage \u003d new PriorityStorage(filePath2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        contactStorage \u003d new ContactStorage(filePathForContacts);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            items \u003d new TaskList(storage.read());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            items \u003d new TaskList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            priorityList \u003d new PriorityList(priorityStorage.read());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            priorityList \u003d new PriorityList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            contactList \u003d new ContactList(contactStorage.read());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            contactList \u003d new ContactList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Echoes the user input back the the user."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String of the response."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves a command from interpreting the user input (GUI)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence The user input."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Command to be executed thereafter."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception  If there is an error reading the command."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command getCommand(String sentence) throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Command cmd \u003d Parser.parse(sentence, items);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return cmd;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a command to overwrite exiting storage with an updated task list (GUI)."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cmd Command to be executed."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException  If there is an error writing the text file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveState(Command cmd) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        cmd.executeStorage(items,ui,storage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a command and outputs the result to the user (GUI)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cmd Command to be executed."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String to be outputted."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public String executeCommand(Command cmd) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String str \u003d cmd.executeGui(items, ui);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command and outputs the result to the user (GUI)."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String to be outputted."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public TaskList getTaskList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        //String str \u003d cmd.executeGui(items, ui);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return items;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs the duke program until exit command is executed."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        Ui.showReminder(items);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        String sentence;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            sentence \u003d ui.readCommand();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            ui.showLine(); //Please do not remove!"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                Command cmd \u003d Parser.parse(sentence, items);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                if (cmd instanceof ExitCommand) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    priorityStorage.write(priorityList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    cmd.executeStorage(items, ui, storage);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else if (cmd instanceof ListPriorityCommand"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        || cmd instanceof AddMultipleCommand"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                        || cmd instanceof DeleteCommand"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                        || cmd instanceof SetPriorityCommand) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    cmd.execute(items, priorityList, ui);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                } else if (cmd instanceof BackupCommand) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                    cmd.executeStorage(items, ui, storage);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                } else if (cmd instanceof AddContactsCommand) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                    cmd.execute(items, contactList, ui);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                    cmd.executeStorage(items, ui, contactStorage,contactList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                } else if (cmd instanceof ListContactsCommand) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                    cmd.execute(items, contactList, ui);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                    cmd.execute(items,ui);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    priorityList \u003d priorityList.addDefaultPriority(cmd);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showErrorMsg(e.getMessage());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showErrorMsg(\"     New error, please fix:\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showErrorMsg(\"     Duke will continue as per normal.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        new Duke(\"data/duke.txt\", \"data/priority.txt\",\"data/contacts.txt\").run();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 26,
      "Dou-Maokang": 25,
      "maxxyx96": 2,
      "-": 108,
      "talesrune": 15
    }
  },
  {
    "path": "src/main/java/duke/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import javafx.stage.Popup;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import static javafx.application.Application.launch;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": " * Controller for a help page."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "public class HelpWindow extends Ui {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @param primaryStage Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    public void start(final Stage primaryStage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        primaryStage.setTitle(\"Popup Example\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        final Popup popup \u003d new Popup();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        popup.setX(300);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        popup.setY(200);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        popup.getContent().addAll(new Circle(25, 25, 50, Color.AQUAMARINE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        Button show \u003d new Button(\"Show\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        show.setOnAction(new EventHandler\u003cActionEvent\u003e() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            @Override public void handle(ActionEvent event) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                popup.show(primaryStage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        Button hide \u003d new Button(\"Hide\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        hide.setOnAction(new EventHandler\u003cActionEvent\u003e() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            @Override public void handle(ActionEvent event) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                popup.hide();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        HBox layout \u003d new HBox(10);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        layout.setStyle(\"-fx-background-color: cornsilk; -fx-padding: 10;\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        layout.getChildren().addAll(show, hide);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        primaryStage.setScene(new Scene(layout));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gervaiseang": 68,
      "Dou-Maokang": 10
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    private Duke duke \u003d new Duke(\"data/duke.txt\", \"data/priority.txt\", \"data/contacts.txt\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 3,
      "-": 28
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.scene.control.ComboBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private ListView\u003cTask\u003e listT;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private Label labelSelectedTask;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private Button btnDone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private Button btnDelete;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private Button btnUpdate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private Button btnOK;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private Button btnCancel;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private VBox vboxUpdate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private ComboBox\u003cString\u003e cbupdateType;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private TextField tfnewDesc;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private TextField tfnewDateTime;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private ComboBox\u003cString\u003e cbtaskType;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Setting up Duke GUI."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param d The object of Duke."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        updateGui();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        setVboxWidth(false);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        setButtonsVisibility(true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getDukeDialog(Ui.showWelcomeGui(), dukeImage)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    Timer timer \u003d new Timer();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    TimerTask exitDuke \u003d new TimerTask() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public void run() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    };"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getUserDialog(input, userImage)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            Command cmd \u003d duke.getCommand(input);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            if (cmd instanceof ExitCommand) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                duke.saveState(cmd);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                response \u003d Ui.showLineGui() + Ui.showByeGui() + Ui.showLineGui();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                        DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                );"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                timer.schedule(exitDuke, new Date(System.currentTimeMillis() + 500));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                response \u003d Ui.showLineGui() + duke.executeCommand(cmd) + Ui.showLineGui();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                );"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                updateGui();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            response \u003d Ui.showLineGui() + Ui.showErrorMsgGui(e.getMessage()) + Ui.showLineGui();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            );"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            response \u003d Ui.showLineGui() + Ui.showErrorMsgGui(\"     New error, please read console:\")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    +  Ui.showErrorMsgGui(\"     Duke will continue as per normal.\") + Ui.showLineGui();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            );"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected void handleUserEvent(String input) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        //String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                DialogBox.getUserDialog(input, userImage)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        );"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            Command cmd \u003d duke.getCommand(input);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            response \u003d Ui.showLineGui() + duke.executeCommand(cmd) + Ui.showLineGui();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            );"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            response \u003d Ui.showLineGui() + Ui.showErrorMsgGui(e.getMessage()) + Ui.showLineGui();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            );"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            response \u003d Ui.showLineGui() + Ui.showErrorMsgGui(\"     New error, please read console:\")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    +  Ui.showErrorMsgGui(\"     Duke will continue as per normal.\") + Ui.showLineGui();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            );"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private void onMouseClick_ListView() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        //System.out.println(\"clicked on \" + listT.getSelectionModel().getSelectedItem());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        labelSelectedTask.setText(\"Selected Task: \" + listT.getSelectionModel().getSelectedItem());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task taskObj \u003d listT.getSelectionModel().getSelectedItem();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        if (taskObj.isDone()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            btnDone.setDisable(true);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            btnDone.setDisable(false);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        btnDelete.setDisable(false);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        btnUpdate.setDisable(false);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private void onMouseClickDone() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        //System.out.println(\"CURRENTLY on \" + listT.getSelectionModel().getSelectedItem());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task taskObj \u003d listT.getSelectionModel().getSelectedItem();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        TaskList items \u003d duke.getTaskList();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int itemNumber \u003d items.getIndex(taskObj) + 1;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        handleUserEvent(\"done \" + itemNumber);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        updateGui();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private void onMouseClickDelete() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task taskObj \u003d listT.getSelectionModel().getSelectedItem();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        TaskList items \u003d duke.getTaskList();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int itemNumber \u003d items.getIndex(taskObj) + 1;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        handleUserEvent(\"delete \" + itemNumber);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        updateGui();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private void onMouseClickUpdate() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        setVboxWidth(true);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        setButtonsVisibility(false);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cleanUp();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cbupdateType.getItems().addAll("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                \"Description\","
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                \"Date/Time\","
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                \"Type of Task\""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        );"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cbtaskType.getItems().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                \"Todo\","
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                \"Deadline\","
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                \"Event\","
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                \"Fixed Duration\","
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                \"Repeat\","
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                \"Do After\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        );"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private void onMouseClickOK() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task taskObj \u003d listT.getSelectionModel().getSelectedItem();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        TaskList items \u003d duke.getTaskList();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int itemNumber \u003d items.getIndex(taskObj) + 1;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        if (cbupdateType.getSelectionModel().getSelectedItem().equals(\"Description\")) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            handleUserEvent(\"update \" + itemNumber + \" /desc \" + tfnewDesc.getText().trim());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (cbupdateType.getSelectionModel().getSelectedItem().equals(\"Date/Time\")) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            handleUserEvent(\"update \" + itemNumber + \" /date \" + tfnewDateTime.getText().trim());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (cbupdateType.getSelectionModel().getSelectedItem().equals(\"Type of Task\")) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            String typeStr \u003d \"\";"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            if (cbtaskType.getSelectionModel().getSelectedItem().equals(\"Todo\")) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                typeStr \u003d \"todo\";"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else  if (cbtaskType.getSelectionModel().getSelectedItem().equals(\"Deadline\")) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                typeStr \u003d \"deadline\";"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else  if (cbtaskType.getSelectionModel().getSelectedItem().equals(\"Event\")) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                typeStr \u003d \"event\";"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else  if (cbtaskType.getSelectionModel().getSelectedItem().equals(\"Fixed Duration\")) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                typeStr \u003d \"fixedduration\";"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else  if (cbtaskType.getSelectionModel().getSelectedItem().equals(\"Repeat\")) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                typeStr \u003d \"repeat\";"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else  if (cbtaskType.getSelectionModel().getSelectedItem().equals(\"Do After\")) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                typeStr \u003d \"doafter\";"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            handleUserEvent(\"update \" + itemNumber + \" /type \" + typeStr);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        updateGui();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        setVboxWidth(false);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        setButtonsVisibility(true);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private void onMouseClickCancel() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        setVboxWidth(false);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        setButtonsVisibility(true);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private void cleanUp() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cbupdateType.getItems().clear();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cbtaskType.getItems().clear();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        tfnewDateTime.clear();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        tfnewDesc.clear();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private void setVboxWidth(boolean isEnabled) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        if (isEnabled) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            vboxUpdate.setPrefWidth(200);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            vboxUpdate.setVisible(true);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            vboxUpdate.setPrefWidth(0);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            vboxUpdate.setVisible(false);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private void setButtonsVisibility(boolean isVisible) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        if (isVisible) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            btnOK.setVisible(false);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            btnCancel.setVisible(false);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            btnDone.setVisible(true);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            btnUpdate.setVisible(true);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            btnDelete.setVisible(true);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            btnOK.setVisible(true);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            btnCancel.setVisible(true);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            btnDone.setVisible(false);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            btnUpdate.setVisible(false);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            btnDelete.setVisible(false);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private void updateGui() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        listViewRefresh();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        setDisableButtons();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        labelSelectedTask.setText(\"Selected Task: \");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected void listViewRefresh() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        listT.getItems().clear();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        TaskList items \u003d duke.getTaskList();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            listT.getItems().add(items.get(i));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private void setDisableButtons() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        btnDone.setDisable(true);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        btnDelete.setDisable(true);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        btnUpdate.setDisable(true);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private void exitProgram() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String input \u003d \"bye\";"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                DialogBox.getUserDialog(input, userImage)"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        );"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            Command cmd \u003d duke.getCommand(input);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            duke.saveState(cmd);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            response \u003d Ui.showLineGui() + Ui.showByeGui() + Ui.showLineGui();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            );"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            timer.schedule(exitDuke, new Date(System.currentTimeMillis() + 500));"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "            response \u003d Ui.showLineGui() + Ui.showErrorMsgGui(e.getMessage()) + Ui.showLineGui();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "            dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "            response \u003d Ui.showLineGui() + Ui.showErrorMsgGui(\"     New error, please read console:\")"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "                    +  Ui.showErrorMsgGui(\"     Duke will continue as per normal.\") + Ui.showLineGui();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "            dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "            );"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Creates a new window to allow the user to add a new task via user friendly interface."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void createAddWindow() {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/AddWindow.fxml\"));"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            Stage stage \u003d new Stage();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            fxmlLoader.\u003cAddWindow\u003egetController().setAddWindow(duke, this);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 99,
      "talesrune": 270
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Representing a command that adds a new task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Task task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a command with the specified task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task The task to be added."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a command that adds the task into task list and outputs the result."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui To tell the user that it is added successfully."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        items.add(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.showAdd(items);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a command that adds the task into task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui To tell the user that it is added successfully."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        items.add(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String str \u003d Ui.showAddGui(items);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/duke/command/AddContactsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0318465"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.storage.ContactStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.ContactList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.Contacts;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0318465"
        },
        "content": "public class AddContactsCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    protected Contacts contactObj;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Creates a command with the specified contact."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param contactObj The contacts to be added."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public AddContactsCommand(Contacts contactObj) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        this.contactObj \u003d contactObj;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command with task list and ui."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command with task list and ui."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param contactList The contact list that contains a list of contacts."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void execute(TaskList items, ContactList contactList, Ui ui) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        contactList.add(contactObj);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        ui.showAddedContact(contactList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that adds the task into task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is added successfully."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated contact list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param contactStorage Contacts stored in storage."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param contactList The list of contacts."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @throws IOException If there is an error reading the file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, ContactStorage contactStorage,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                               ContactList contactList) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        contactStorage.write(contactList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0318465"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 84
    }
  },
  {
    "path": "src/main/java/duke/command/AddMultipleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.task.PriorityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Representing a command that adds multiple tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddMultipleCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    protected ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a command with the specified task list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks The array list of tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddMultipleCommand(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a command that adds the tasks into task list and outputs the result."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui To tell the user that they are added successfully."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task curTask : tasks) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            items.add(curTask);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.showAdd(items);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that adds the tasks and priority into task list and outputs the result."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param priorities Priority level of task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public void execute(TaskList items, PriorityList priorities, Ui ui) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        for (Task curTask : tasks) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            items.add(curTask);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        ui.showAdd(items);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        priorities.addMultiDefaultPriority(tasks.size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a command that adds the tasks into task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui To tell the user that they are added successfully."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task curTask : tasks) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            items.add(curTask);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String str \u003d Ui.showAddGui(items);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0318465"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 9,
      "Dou-Maokang": 9,
      "-": 65
    }
  },
  {
    "path": "src/main/java/duke/command/BackupCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": " * Representing a command that updates the current data file, and shows the folder"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": " * that the file is contained in to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "public class BackupCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    protected static File filePath \u003d new File(\"./data\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Opens the stored data file in the user\u0027s computer."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @throws IOException  If there is an error reading the file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public static void openBackupFolder() throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        Desktop desktop \u003d Desktop.getDesktop();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        desktop.open(filePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Executes a command using task list and outputs the result."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Executes a command using task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param ui To tell the user that the program is exiting."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @throws IOException  If there is an error reading the file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        ui.showBeforeBackupMsg();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        storage.write(items);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        openBackupFolder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        ui.showAfterBackupMsg();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyx96": 67,
      "talesrune": 2
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.storage.ContactStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.ContactList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.task.PriorityList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An abstract class that represents various kinds of commands."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a command with task list and ui."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract void execute(TaskList items, Ui ui);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Executes a command with task list and ui."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param priorities The list of priorities."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public void execute(TaskList items, PriorityList priorities, Ui ui) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command with task list, contactList and ui."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param contactList The list of contacts."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void execute(TaskList items, ContactList contactList, Ui ui) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a command with task list and ui (GUI)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract String executeGui(TaskList items, Ui ui);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @throws IOException If there is an error reading the file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract void executeStorage(TaskList items, Ui ui, Storage storage) throws IOException;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated contact list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param contactStorage Contacts stored in storage."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param contactList The list of contacts."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @throws IOException If there is an error reading the file."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, ContactStorage contactStorage,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                                ContactList contactList) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "e0318465": 21,
      "Dou-Maokang": 11,
      "-": 39,
      "talesrune": 5
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.task.PriorityList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Representing a command that deletes a task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a command with the specified index."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index The index of the task to be deleted."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a command that deletes the task from the task list and outputs the result."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui To tell the user that it is deleted successfully."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String deletedStr \u003d \"       \" + items.get(index).toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        items.remove(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.showDelete(items, deletedStr);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that deletes the task from the task list together with its priority."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param ui To tell the user that it is deleted successfully."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param priorities The list of priorities."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public void execute(TaskList items, PriorityList priorities, Ui ui) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        String deletedStr \u003d \"       \" + items.get(index).toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        items.remove(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        priorities.remove(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        ui.showDelete(items, deletedStr);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a command that deletes the task from the task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui To tell the user that it is deleted successfully."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String deletedStr \u003d \"       \" + items.get(index).toStringGui();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        items.remove(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String str \u003d Ui.showDeleteGui(items, deletedStr);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 2,
      "Dou-Maokang": 15,
      "-": 62
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Representing a command that marks a task as done."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a command with the specified index."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index The index of the task to be marked as done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a command that marks the task as done in the task list and outputs the result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui To tell the user that it is marked as done successfully."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        items.get(index).setStatusIcon(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.showDone(items, index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a command that marks the task as done in the task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui To tell the user that it is marked as done successfully."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        items.get(index).setStatusIcon(true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String str \u003d Ui.showDoneGui(items, index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/duke/command/DuplicateFoundCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0318465"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0318465"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0318465"
        },
        "content": " * Representing a command that states a task is duplicated."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0318465"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0318465"
        },
        "content": "public class DuplicateFoundCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Outputs the alert when duplicated task is detected."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is marked as done successfully."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        ui.showDuplicateMsg();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that marks the task as done in the task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is marked as done successfully."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0318465"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 48
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Representing a command that overwrites the storage with the updated task list before program exits."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a command using task list and outputs the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a command using task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui To tell the user that the program is exiting."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @throws IOException If there is an error reading the file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.showBye();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.write(items);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 2,
      "-": 46,
      "talesrune": 3
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Representing a command that locates certain tasks in task list using keyword."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a command with the specified keyword."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyword The task to be added."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a command that locates matching tasks in task list and outputs the result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui To tell the user the matching tasks based on the keyword."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.showFind(items, keyword);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a command that locates matching tasks in task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui To tell the user the matching tasks based on the keyword."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return List of tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String str \u003d Ui.showFindGui(items, keyword);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 2,
      "-": 56
    }
  },
  {
    "path": "src/main/java/duke/command/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": " * Displaying full help instructions that list down all functions and commands available."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Showing all help instructions.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that adds the task into task list and outputs the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is added successfully."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that adds the task into task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is added successfully."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        String str \u003d Ui.helpRequest(items); //replace with events later on"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gervaiseang": 29,
      "e0318465": 23,
      "Dou-Maokang": 2
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Representing a command that lists all tasks stored in task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a command that gathers all tasks from task list and outputs the result."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui To tell the user the list of tasks stored in task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.showTaskList(items);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a command that gathers all tasks from task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui To tell the user the list of tasks stored in task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String str \u003d Ui.showTaskListGui(items);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 2,
      "-": 45
    }
  },
  {
    "path": "src/main/java/duke/command/ListContactsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0318465"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.ContactList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0318465"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0318465"
        },
        "content": " * Representing a command that lists all contacts stored."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0318465"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0318465"
        },
        "content": "public class ListContactsCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that locates matching tasks in task list and outputs the result."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user the matching tasks based on the keyword."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that gathers all contacts from contact list and outputs the result."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param contactList The list of contacts."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user the list of tasks stored in task list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void execute(TaskList items, ContactList contactList, Ui ui) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        ui.showContactList(contactList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that gathers all tasks from task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user the list of tasks stored in task list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return List of tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String str \u003d Ui.showTaskListGui(items);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0318465"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 59
    }
  },
  {
    "path": "src/main/java/duke/command/ListPriorityCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.task.PriorityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": " * Representing a command that lists all tasks stored in task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "public class ListPriorityCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Executes a command with task list and ui."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Executes a command that gathers all tasks from task list and outputs the result."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param priorities The list of priorities."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user the list of tasks stored in task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public void execute(TaskList items, PriorityList priorities, Ui ui) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        ui.showTaskListWithPriority(items, priorities);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Executes a command that gathers all tasks from task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param ui To tell the user the list of tasks stored in task list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String str \u003d Ui.showTaskListGui(items);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 1,
      "Dou-Maokang": 57,
      "talesrune": 1
    }
  },
  {
    "path": "src/main/java/duke/command/RemindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "public class RemindCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    protected int taskIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    protected int reminder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    public RemindCommand(int task, int remind) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskIndex \u003d task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.reminder \u003d remind;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * Executes a command that deletes the task from the task list and outputs the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @param ui To tell the user that it is deleted successfully."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        Task task \u003d items.getTasks().get(taskIndex);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        task.setReminder(reminder);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        ui.showErrorMsg(String.format(\"You will get a reminder for this task in %d days\", reminder));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        ui.showErrorMsg(\" \" + task.toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that gathers all tasks from task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user the list of tasks stored in task list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return List of tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gervaiseang": 24,
      "e0318465": 8,
      "-": 23
    }
  },
  {
    "path": "src/main/java/duke/command/SetPriorityCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.task.PriorityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "public class SetPriorityCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    protected int taskNum;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    protected int priority;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Representing a command that set priority for each task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param taskNum The number of the task in the task list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param priority The priority level we want to set."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public SetPriorityCommand(int taskNum, int priority) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Executes a command that adds the task into task list and outputs the result."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param ui To tell the user that it is added successfully."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that adds the priority into priority list and outputs the result."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param priorityList List of priorities."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public void execute(TaskList items, PriorityList priorityList, Ui ui) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        priorityList.setPriority(taskNum, priority);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        ui.showSetPriority(items, taskNum, priority);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Executes a command that adds the task into task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param ui To tell the user that it is added successfully."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 7,
      "Dou-Maokang": 58
    }
  },
  {
    "path": "src/main/java/duke/command/UpdateCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "talesrune"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Repeat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.DoAfter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.FixedDuration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": " * Representing a command that updates an existing task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected String taskDesc;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected String dateDesc;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected String typeDesc;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected int typeOfUpdate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Creates a command with the specified parameters to update."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param taskDesc The task description to be updated."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param dateDesc The date/time to be updated."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param typeDesc The type of task to be updated."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param typeOfUpdate The type of update."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param index The index to be updated."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public UpdateCommand(String taskDesc, String dateDesc, String typeDesc, int typeOfUpdate, int index) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.taskDesc \u003d taskDesc;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.dateDesc \u003d dateDesc;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.typeDesc \u003d typeDesc;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.typeOfUpdate \u003d typeOfUpdate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that updates the task in task list and outputs the result."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is updated successfully."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            if (typeOfUpdate \u003d\u003d 1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                items.get(index).setDescription(taskDesc);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else if (typeOfUpdate \u003d\u003d 2) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                items.get(index).setDateTime(dateDesc);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else if (typeOfUpdate \u003d\u003d 3) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                Task newtaskObj \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                if (typeDesc.equals(\"todo\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (items.get(index) instanceof Todo) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        throw new DukeException(\"     You are updating the same type of task! (Todo)\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        newtaskObj \u003d new Todo(items.get(index).getDescription());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else if (typeDesc.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (items.get(index) instanceof Event || items.get(index) instanceof Repeat) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        newtaskObj \u003d new Deadline(items.get(index).getDescription(), items.get(index).getDateTime());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else if (items.get(index) instanceof Deadline) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        throw new DukeException(\"     You are updating the same type of task! (Deadline)\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        newtaskObj \u003d new Deadline(items.get(index).getDescription(), \"01/01/2001 0001\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else if (typeDesc.equals(\"event\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (items.get(index) instanceof Deadline || items.get(index) instanceof Repeat) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        newtaskObj \u003d new Event(items.get(index).getDescription(), items.get(index).getDateTime());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else if (items.get(index) instanceof Event) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        throw new DukeException(\"     You are updating the same type of task! (Event)\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        newtaskObj \u003d new Event(items.get(index).getDescription(), \"01/01/2001 0001\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else if (typeDesc.equals(\"doafter\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (items.get(index) instanceof DoAfter) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        throw new DukeException(\"     You are updating the same type of task! (DoAfter)\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        newtaskObj \u003d new DoAfter(items.get(index).getDescription(), \"null\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else if (typeDesc.equals(\"fixedduration\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (items.get(index) instanceof FixedDuration) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        throw new DukeException(\"     You are updating the same type of task! (FixedDuration)\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        newtaskObj \u003d new FixedDuration(items.get(index).getDescription(), 0, \"min\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else if (typeDesc.equals(\"repeat\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (items.get(index) instanceof Deadline || items.get(index) instanceof Event) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        newtaskObj \u003d new Repeat(items.get(index).getDescription(), items.get(index).getDateTime());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else if (items.get(index) instanceof Repeat) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        throw new DukeException(\"     You are updating the same type of task! (Repeat)\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        newtaskObj \u003d new Repeat(items.get(index).getDescription(), \"01/01/2001 0001\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                items.setTaskType(index, newtaskObj);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            ui.showUpdate(items, index);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            ui.showErrorMsg(e.getMessage());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that updates the task in task list and outputs the result."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is updated successfully."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            if (typeOfUpdate \u003d\u003d 1) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                items.get(index).setDescription(taskDesc);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else if (typeOfUpdate \u003d\u003d 2) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                items.get(index).setDateTime(dateDesc);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else if (typeOfUpdate \u003d\u003d 3) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                Task newtaskObj \u003d null;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                if (typeDesc.equals(\"todo\")) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (items.get(index) instanceof Todo) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        throw new DukeException(\"     You are updating the same type of task! (Todo)\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        newtaskObj \u003d new Todo(items.get(index).getDescription());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else if (typeDesc.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (items.get(index) instanceof Event || items.get(index) instanceof Repeat) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        newtaskObj \u003d new Deadline(items.get(index).getDescription(), items.get(index).getDateTime());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else if (items.get(index) instanceof Deadline) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        throw new DukeException(\"     You are updating the same type of task! (Deadline)\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        newtaskObj \u003d new Deadline(items.get(index).getDescription(), \"01/01/2001 0001\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else if (typeDesc.equals(\"event\")) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (items.get(index) instanceof Deadline || items.get(index) instanceof Repeat) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        newtaskObj \u003d new Event(items.get(index).getDescription(), items.get(index).getDateTime());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else if (items.get(index) instanceof Event) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        throw new DukeException(\"     You are updating the same type of task! (Event)\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        newtaskObj \u003d new Event(items.get(index).getDescription(), \"01/01/2001 0001\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else if (typeDesc.equals(\"doafter\")) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (items.get(index) instanceof DoAfter) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        throw new DukeException(\"     You are updating the same type of task! (DoAfter)\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        newtaskObj \u003d new DoAfter(items.get(index).getDescription(), \"null\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else if (typeDesc.equals(\"fixedduration\")) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (items.get(index) instanceof FixedDuration) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        throw new DukeException(\"     You are updating the same type of task! (FixedDuration)\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        newtaskObj \u003d new FixedDuration(items.get(index).getDescription(), 0, \"min\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else if (typeDesc.equals(\"repeat\")) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (items.get(index) instanceof Deadline || items.get(index) instanceof Event) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        newtaskObj \u003d new Repeat(items.get(index).getDescription(), items.get(index).getDateTime());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else if (items.get(index) instanceof Repeat) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        throw new DukeException(\"     You are updating the same type of task! (Repeat)\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        newtaskObj \u003d new Repeat(items.get(index).getDescription(), \"01/01/2001 0001\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                items.setTaskType(index, newtaskObj);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            ui.showErrorMsg(e.getMessage());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String str \u003d Ui.showUpdateGui(items, index);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 1,
      "talesrune": 193
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.SetPriorityCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.AddMultipleCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.ListPriorityCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.BackupCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.RemindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.UpdateCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.DuplicateFoundCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.command.AddContactsCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.command.ListContactsCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Repeat;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.DoAfter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.FixedDuration;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.task.DetectDuplicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.Contacts;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parser that breaks down user input into commands."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command based on the user input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence User input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Command to be executed afterwards."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception  If there is an error interpreting the user input."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Command parse(String sentence, TaskList items) throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] arr \u003d sentence.split(\" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String taskDesc \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String dateDesc \u003d \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean getDate \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (sentence.equals(\"list\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        } else if (sentence.equals(\"priority\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            return new ListPriorityCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        } else if (arr.length \u003e 0 \u0026\u0026 (arr[0].equals(\"done\") || arr[0].equals(\"delete\") || arr[0].equals(\"del\"))) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            if (arr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The task number cannot be empty.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                int tasknum \u003d Integer.parseInt(arr[1]) - 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                if (tasknum \u003c 0 || tasknum \u003e\u003d items.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"     (\u003e_\u003c) OOPS!!! Invalid task number.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (arr[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                        if (items.get(tasknum).toString().contains(\"[A]\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                            String tempString \u003d items.get(tasknum).toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                            tempString \u003d tempString.split(\": \", 2)[1];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                            tempString \u003d tempString.split(\"\\\\)\")[0];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                            if (!items.isTaskDone(tempString)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                                throw new DukeException(\"     (\u003e_\u003c) OOPS!! Task requirements has yet to be completed!\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                        + \" please complete task [\" + tempString + \"] before marking this as done!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                        return new DoneCommand(tasknum);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else { //delete"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                        return new DeleteCommand(tasknum);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (arr.length \u003e 0 \u0026\u0026 arr[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            if (arr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The keyword cannot be empty.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                if (arr[1].trim().isEmpty()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The keyword cannot be empty.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                    return new FindCommand(arr[1]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (arr.length \u003e 0 \u0026\u0026 arr[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            String[] getDescription \u003d sentence.split(\" \", 2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            DetectDuplicate detectDuplicate \u003d new DetectDuplicate(items);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            if (detectDuplicate.isDuplicate(getDescription[0], getDescription[1])) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                return new DuplicateFoundCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                for (int i \u003d 1; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    taskDesc +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                taskDesc \u003d taskDesc.trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                if (taskDesc.isEmpty()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    Task taskObj \u003d new Todo(taskDesc);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    return new AddCommand(taskObj);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        } else if (arr.length \u003e 0 \u0026\u0026 (arr[0].equals(\"deadline\") || arr[0].equals(\"dl\") || arr[0].equals(\"event\"))) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 1; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                if ((arr[i].trim().isEmpty() || !arr[i].substring(0, 1).equals(\"/\")) \u0026\u0026 !getDate) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskDesc +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (!getDate) { //detect \"/\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                        getDate \u003d true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                        dateDesc +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            taskDesc \u003d taskDesc.trim();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            dateDesc \u003d dateDesc.trim();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            if (taskDesc.isEmpty()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The description of a \" + arr[0] + \" cannot be empty.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (dateDesc.isEmpty()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The description of date/time for \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                        + arr[0] + \" cannot be empty.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                Task taskObj;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                if (arr[0].equals(\"deadline\") || arr[0].equals(\"dl\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskObj \u003d new Deadline(taskDesc, dateDesc);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskObj \u003d new Event(taskDesc, dateDesc);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (taskObj.getDateTime().equals(items.get(i).getDateTime()) \u0026\u0026 !items.get(i).isDone()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                        throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The date/time for \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                                + arr[0] + \" clashes with \" + items.get(i).toString()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                                + \"\\n     Please choose another date/time! Or mark the above task as Done first!\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                return new AddCommand(taskObj);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        } else if (arr.length \u003e 0 \u0026\u0026 (arr[0].equals(\"doafter\") || arr[0].equals(\"da\"))) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            //doafter \u003ctask\u003e /after \u003cpre-requisite task\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            String afterTaskDesc \u003d \"\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean detectBackSlash \u003d false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 1; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                if ((arr[i].trim().isEmpty() || !arr[i].substring(0, 1).equals(\"/\")) \u0026\u0026 !detectBackSlash) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskDesc +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (!detectBackSlash) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                        detectBackSlash \u003d true;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                        afterTaskDesc +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            taskDesc \u003d taskDesc.trim();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            afterTaskDesc \u003d afterTaskDesc.trim();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            if (taskDesc.isEmpty()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The description of a \" + arr[0] + \" cannot be empty.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (afterTaskDesc.isEmpty()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The description of Task for \""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                        + arr[0] + \" cannot be empty.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                String currentTasks \u003d items.getList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                if (currentTasks.contains(afterTaskDesc)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                    Task taskObj;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskObj \u003d new DoAfter(taskDesc, afterTaskDesc);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                    return new AddCommand(taskObj);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"(\u003e_\u003c) OOPS!!! You cant set a \""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                            + arr[0] + \" task for a task that is not in the list!\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        } else if (arr.length \u003e 0 \u0026\u0026 (arr[0].equals(\"repeat\") || arr[0].equals(\"rep\"))) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            //repeat \u003ctask\u003e /from \u003cdate time\u003e /for 3 \u003cday/week/month\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 1; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                if ((arr[i].trim().isEmpty() || !arr[i].substring(0, 1).equals(\"/\")) \u0026\u0026 !getDate) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskDesc +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (!getDate) { //detect \"/\""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                        getDate \u003d true;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                        dateDesc +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            taskDesc \u003d taskDesc.trim();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            dateDesc \u003d dateDesc.trim();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            if (taskDesc.isEmpty()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The description of a \" + arr[0] + \" cannot be empty.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (dateDesc.isEmpty()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The description of date/time for \""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                        + arr[0] + \" cannot be empty.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                String repeatSettings;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                int repeatTimes;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                String repeatPeriod;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                    repeatSettings \u003d dateDesc.split(\"/for \")[1];"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                    repeatTimes \u003d Integer.parseInt(repeatSettings.replaceAll(\"[\\\\D]\", \"\"));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                    repeatPeriod \u003d repeatSettings.split(repeatTimes + \" \")[1];"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"Format is in: repeat \u003ctask\u003e /from \u003cdate time\u003e \""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"/for \u003crepeat times\u003e \u003cdays/weeks\u003e\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                ArrayList\u003cTask\u003e repeatList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                String timeDesc \u003d dateDesc.split(\" \", 3)[1];"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 0; i \u003c repeatTimes; i++) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                    Task taskObj;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskObj \u003d new Repeat(taskDesc, dateDesc);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                    dateDesc \u003d DateParser.add(dateDesc, repeatPeriod) + \" \" + timeDesc;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                    repeatList.add(taskObj);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                    for (int j \u003d 0; j \u003c items.size(); j++) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        if (taskObj.getDateTime().equals(items.get(j).getDateTime()) \u0026\u0026 !items.get(j).isDone()) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                            throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The date/time for \""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                                    + arr[0] + \" clashes with \" + items.get(j).toString()"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                                    + \"\\n     Please choose another date/time! Or mark the above task as Done first!\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                return new AddMultipleCommand(repeatList);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        } else if (arr.length \u003e 0 \u0026\u0026 (arr[0].equals(\"fixedduration\") || arr[0].equals(\"fd\"))) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            //fixedduration \u003ctask\u003e /for \u003cduration\u003e \u003cunit\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            String description \u003d \"\";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            String durDesc;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            int duration;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            String unit;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 1; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                description +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            taskDesc \u003d description.split(\" /for \")[0].trim();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            durDesc \u003d description.split(\" /for \")[1].trim();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            DetectDuplicate detectDuplicate \u003d new DetectDuplicate(items);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            if (taskDesc.isEmpty()) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The description of a \" + arr[0] + \" cannot be empty.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (durDesc.isEmpty()) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The description of duration for \""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                        + arr[0] + \" cannot be empty.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            } else if (detectDuplicate.isDuplicate(arr[0], taskDesc)) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                return new DuplicateFoundCommand();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                    duration \u003d Integer.parseInt(durDesc.split(\" \")[0].trim());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"Format is in: fixedduration \u003ctask\u003e /for \u003cduration\u003e \u003cunit\u003e\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                unit \u003d durDesc.split(\" \")[1].trim();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                if (unit.isEmpty() || (!unit.toLowerCase().contains(\"min\") \u0026\u0026 ! unit.toLowerCase().contains(\"hour\"))) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"Format is in: fixedduration \u003ctask\u003e /for \u003cduration\u003e \u003cunit\u003e\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                    FixedDuration fixedDuration \u003d new FixedDuration(taskDesc, duration, unit);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                    return new AddCommand(fixedDuration);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        } else if (arr.length \u003e 0 \u0026\u0026 (arr[0].equals(\"setpriority\"))) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            //fixedduration \u003ctaskNum\u003e \u003cpriority\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            String description \u003d \"\";"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            int taskNum;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            int priority;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            for (int i \u003d 1; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                description +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            String[] holder \u003d description.split(\" \");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            if (holder.length \u003c 2) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! Format is in: setpriority \u003ctaskNum\u003e \u003cPriority\u003e\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    taskNum \u003d Integer.parseInt(holder[0].trim());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    throw new DukeException(\"The task number must be an integer\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                if (taskNum \u003c\u003d 0 || taskNum \u003e\u003d items.size()) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    throw new DukeException(\"     (\u003e_\u003c) OOPS!!! Invalid task number.\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    priority \u003d Integer.parseInt(holder[1].trim());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    throw new DukeException(\"The priority must be an integer\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                if (!((priority \u003e 0) \u0026\u0026 (priority \u003c 6))) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    throw new DukeException(\"     (\u003e_\u003c) OOPS!!! Invalid priority! (1 - High ~ 5 - Low).\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                return new SetPriorityCommand(taskNum, priority);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (arr.length \u003e 0 \u0026\u0026 arr[0].equals(\"remind\")) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            //remind \u003ctaskNumber\u003e /in \u003chowManyDays\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            String description \u003d \"\";"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            String durDesc;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            int duration;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            String unit;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            for (int i \u003d 1; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                description +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            if (description.isEmpty()) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The description of a \" + arr[0] + \" cannot be empty.\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            duration \u003d Integer.parseInt(description.split(\"/in\", 2)[0].trim()) - 1;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            String in \u003d description.split(\" /in \", 2)[1].trim();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            int howManyDays \u003d Integer.parseInt(in.split(\" \", 2)[0].trim());"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            return new RemindCommand(duration, howManyDays);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (arr.length \u003e 0 \u0026\u0026 (arr[0].equals(\"update\"))) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            if (arr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The task number cannot be empty.\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                int tasknum \u003d Integer.parseInt(arr[1]) - 1;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                if (tasknum \u003c 0 || tasknum \u003e\u003d items.size()) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    throw new DukeException(\"     (\u003e_\u003c) OOPS!!! Invalid task number.\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else if (arr.length \u003c 4) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    throw new DukeException(\"     (\u003e_\u003c) OOPS!!! Insufficient parameters.\""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                            + \"Format: update \u003ctasknum\u003e \u003ctype\u003e \u003cdesc or date\u003e\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    int typeOfUpdate \u003d -1;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    String typeDesc \u003d \"\";"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    for (int i \u003d 2; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        if (i \u003d\u003d 2) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                            if (arr[i].trim().isEmpty()"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    || (!arr[i].equals(\"/desc\")"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    \u0026\u0026 !arr[i].equals(\"/date\")"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    \u0026\u0026 !arr[i].equals(\"/type\"))) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! Unable to find either \""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                        + \"/date, /desc, or /type.\");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                if (arr[i].equals(\"/desc\")) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    typeOfUpdate \u003d 1;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                } else if (arr[i].equals(\"/date\")) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    typeOfUpdate \u003d 2;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                } else { //equals /type"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    typeOfUpdate \u003d 3;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                            if (typeOfUpdate \u003d\u003d 1) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                taskDesc +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                            } else if (typeOfUpdate \u003d\u003d 2) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                dateDesc +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                            } else { //type of update is number 3"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                typeDesc +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    taskDesc \u003d taskDesc.trim();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    dateDesc \u003d dateDesc.trim();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    typeDesc \u003d typeDesc.trim();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (typeOfUpdate \u003d\u003d 1 \u0026\u0026 taskDesc.isEmpty()) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The description of a \""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                + arr[0] + \" cannot be empty.\");"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else if (typeOfUpdate \u003d\u003d 2 \u0026\u0026 dateDesc.isEmpty()) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The description of date/time for \""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                + arr[0] + \" cannot be empty.\");"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else if (typeOfUpdate \u003d\u003d 3 \u0026\u0026 typeDesc.isEmpty()) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The description of type for \""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                + arr[0] + \" cannot be empty.\");"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        return new UpdateCommand(taskDesc, dateDesc, typeDesc, typeOfUpdate, tasknum);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        } else if (arr.length \u003e 0 \u0026\u0026 arr[0].equals(\"addcontact\")) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            String[] userInput \u003d sentence.split(\" \",2);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            String[] contactDetails \u003d userInput[1].split(\",\");"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                Contacts contactObj \u003d new Contacts(contactDetails[0], contactDetails[1],"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                                          contactDetails[2], contactDetails[3]);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                return new AddContactsCommand(contactObj);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                throw new DukeException(\"Format is in: addcontact \u003cname\u003e, \u003ccontact\u003e, \u003cemail\u003e, \u003coffice\u003e\");"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        } else if (sentence.equals(\"listcontacts\")) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            return new ListContactsCommand();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        } else if (sentence.equals(\"backup\")) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            return new BackupCommand();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        } else if (sentence.equals(\"bye\") || sentence.equals(\"exit\")) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"     (\u003e_\u003c) OoPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gervaiseang": 13,
      "e0318465": 23,
      "Dou-Maokang": 53,
      "maxxyx96": 12,
      "-": 223,
      "talesrune": 70
    }
  },
  {
    "path": "src/main/java/duke/storage/ContactStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0318465"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.ContactList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.Contacts;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0318465"
        },
        "content": "public class ContactStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    protected String filePathForContacts \u003d \"./\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Creates a storage with a specified filePathForContacts."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param filePathForContacts The location of the contacts text file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public ContactStorage(String filePathForContacts) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        this.filePathForContacts +\u003d filePathForContacts;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Updates the contact list from reading the contents of the contacts text file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return ArrayList to update the contactList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @throws IOException  If there is an error reading the text file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public ArrayList\u003cContacts\u003e read() throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        ArrayList\u003cContacts\u003e contacts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        File file \u003d new File(filePathForContacts);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String st;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String contact;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String office;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        while ((st \u003d br.readLine()) !\u003d null) {  //name + \",\" + contact + \",\" + email + \",\" + office"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            String[] contactDetails \u003d st.split(\",\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            name \u003d contactDetails[0];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            contact \u003d contactDetails[1];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            email \u003d contactDetails[2];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            office \u003d contactDetails[3];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            Contacts contactObj \u003d new Contacts(name, contact, email, office);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            contacts.add(contactObj);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        br.close();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return contacts;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Updates the text file from interpreting the contacts in contactList."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param contacts The contact list that contains a list of contacts."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @throws IOException If there is an error writing the text file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void write(ContactList contacts) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String fileContent \u003d \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        for (int i \u003d 0; i \u003c contacts.size(); i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            fileContent +\u003d contacts.get(i).toFile() + \"\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(filePathForContacts));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        writer.write(fileContent);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0318465"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 72
    }
  },
  {
    "path": "src/main/java/duke/storage/PriorityStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.task.PriorityList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "public class PriorityStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    protected String filePath \u003d \"./\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Creates a storage with a specified filePath."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param filePath The location of the text file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public PriorityStorage(String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        this.filePath +\u003d filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Updates the task list from reading the contents of the text file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @return ArrayList to update the priorityList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @throws IOException  If there is an error reading the text file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public ArrayList\u003cInteger\u003e read() throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        ArrayList\u003cInteger\u003e items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        String priority;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        while ((priority \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            items.add(Integer.parseInt(priority.trim()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        br.close();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        return items;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Updates the text file from interpreting the priorities of the priorityList."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param priorityList The list of priorities associated with each task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @throws IOException  If there is an error writing the text file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public void write(PriorityList priorityList) throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        String fileContent \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        for (int i \u003d 0; i \u003c priorityList.getSize(); i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            fileContent +\u003d priorityList.getList().get(i) + \"\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(filePath));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        writer.write(fileContent);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 7,
      "Dou-Maokang": 56
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Repeat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.DoAfter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.FixedDuration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage to store the task list into a text file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String filePath \u003d \"./\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a storage with a specified filePath."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param filePath The location of the text file for tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath +\u003d filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the task list from reading the contents of the text file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArrayList to update the task list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException  If there is an error reading the text file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e read() throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String st;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String taskDesc;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String dateDesc;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String afterDesc;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String durDesc;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        while ((st \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            String[] commandList \u003d st.split(\"\\\\|\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                //clear previous dates/desc"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                taskDesc \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                dateDesc \u003d \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                afterDesc \u003d \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                durDesc \u003d \"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 0; i \u003c commandList.length; i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (i \u003d\u003d 2) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                        taskDesc \u003d commandList[i];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else if (i \u003d\u003d 3) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                        if (commandList[0].equals(\"A\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                            afterDesc \u003d commandList[i];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                        } else if (commandList[0].equals(\"F\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                            durDesc \u003d commandList[i];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                            dateDesc \u003d commandList[i];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                boolean checked \u003d false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                if (commandList.length \u003e 1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (!(commandList[1].equals(\"1\") || commandList[1].equals(\"0\"))) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                        throw new DukeException(\"Error reading 1 or 0, skipping to next line\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                    checked \u003d commandList[1].equals(\"1\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                Task t;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                if (commandList[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (taskDesc.trim().isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                        throw new DukeException(\"Error reading description, skipping to next line\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                        t \u003d new Todo(taskDesc);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                        t.setStatusIcon(checked);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                        items.add(t);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                } else if (commandList[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (taskDesc.trim().isEmpty() || dateDesc.trim().isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                        throw new DukeException(\"Error reading description or date/time, skipping to next line\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                        t \u003d new Deadline(taskDesc, dateDesc);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                        t.setStatusIcon(checked);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                        items.add(t);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                } else if (commandList[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (taskDesc.isEmpty() || dateDesc.isEmpty()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                        throw new DukeException(\"Error reading description or date/time, skipping to next line\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                        t \u003d new Event(taskDesc, dateDesc);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                        t.setStatusIcon(checked);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                        items.add(t);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                } else if (commandList[0].equals(\"R\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (taskDesc.isEmpty() || dateDesc.isEmpty()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                        throw new DukeException(\"Error reading description or date/time, skipping to next line\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                        t \u003d new Repeat(taskDesc, dateDesc);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                        t.setStatusIcon(checked);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                        items.add(t);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                } else if (commandList[0].equals(\"A\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (taskDesc.isEmpty() || afterDesc.isEmpty()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                        throw new DukeException(\"Error reading description or do after description,\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                                + \" skipping to next line\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                        t \u003d new DoAfter(taskDesc, afterDesc);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                        t.setStatusIcon(checked);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                        items.add(t);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                } else if (commandList[0].equals(\"F\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                    System.out.println(taskDesc + dateDesc);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (taskDesc.isEmpty() || durDesc.isEmpty()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                        throw new DukeException(\"Error reading description or do after description,\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                                + \" skipping to next line\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                        int duration \u003d Integer.parseInt(durDesc.split(\" \")[0]);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                        t \u003d new FixedDuration(taskDesc, duration, durDesc.split(\" \")[1]);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                        t.setStatusIcon(checked);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                        items.add(t);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                } else if (!commandList[0].isEmpty()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    throw new DukeException(\"Error reading whether if its T, D, E, R, A, or F skipping to next line\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showErrorMsg(\"     Error when reading current line, please fix the text file:\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showErrorMsg(\"     Duke will continue reading the rest of file\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        br.close();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return items;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text file from interpreting the tasks of the task list."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException  If there is an error writing the text file."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void write(TaskList items) throws IOException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        String fileContent \u003d \"\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            fileContent +\u003d items.get(i).toFile() + \"\\n\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(filePath));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        writer.write(fileContent);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 8,
      "-": 154,
      "talesrune": 3
    }
  },
  {
    "path": "src/main/java/duke/task/ContactList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0318465"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0318465"
        },
        "content": " * Represents a list of contacts."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0318465"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0318465"
        },
        "content": "public class ContactList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    protected ArrayList\u003cContacts\u003e contactList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Creates an empty contact list using an array list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public ContactList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        contactList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Creates an updated contact list with the specified array list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param contactList The updated array list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public ContactList(ArrayList\u003cContacts\u003e contactList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        this.contactList \u003d contactList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * To add a contact into the contact list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param contactObj A contact to be added."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void add(Contacts contactObj) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        contactList.add(contactObj);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Retrieves the contact from the contact list via index."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param index The index of contact."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return Contact which is retrieved from the index."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public Contacts get(int index) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return contactList.get(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Retrieves all contacts from the contact list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return String that contains the whole list of contacts."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public String getContactList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String fullContactList \u003d \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        for (int i \u003d 0; i \u003c contactList.size(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            fullContactList +\u003d (i + 1) + \". \" + contactList.get(i).toStringGui() + \"\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return fullContactList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * The size of the contact list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return int that represents the contact list size."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return contactList.size();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0318465"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 67
    }
  },
  {
    "path": "src/main/java/duke/task/Contacts.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0318465"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0318465"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0318465"
        },
        "content": " * Represents a contact that stores information of a person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0318465"
        },
        "content": "public class Contacts {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    protected String contact;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    protected String email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    protected String office;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Creates a contact with the relevant details."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param name Name of contact."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param contact Number of contact."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param email Electronic mail of contact."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param office Office of contact."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public Contacts(String name, String contact, String email, String office) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        this.name \u003d name.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        this.contact \u003d contact.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        this.email \u003d email.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        this.office \u003d office.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Extracting a contact content into string that is suitable for text file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return String that contains the details of the contact."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return  name + \",\" + contact + \",\" + email + \",\" + office;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Extracting a contact content into readable string."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return String that contains the details of the contact."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return \"Name: \" + name"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                + \"\\nNumber: \" + contact"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                + \"\\nEmail: \" + email"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                + \"\\nOffice: \" + office;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Extracting a contact content into readable string (GUI)."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return String that contains the details of the contact."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public String toStringGui() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return \"Name: \" + name + \", \" + contact + \", \" + email + \", \" + office;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0318465"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 57
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a deadline that stores description and date/time."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Date by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String[] suf \u003d { \"st\", \"nd\", \"rd\", \"th\" };"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    protected SimpleDateFormat datetimeFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a deadline with the specified description and date/time."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param by The date/time of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException  If there is an error converting the date/time."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Deadline(String description, String by) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Date dateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            dateTime \u003d datetimeFormat.parse(by);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            this.by \u003d dateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Error reading date/time, please use this format \\\"d/MM/yyyy HHmm\\\"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracting a task content into readable string."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String to be displayed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat datetimeFormat2 \u003d new SimpleDateFormat(\"MMMMM yyyy, h:mm a\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat datetimeFormat3 \u003d new SimpleDateFormat(\"MMMMM yyyy, ha\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String displayDT \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        int day \u003d Integer.parseInt(new SimpleDateFormat(\"d\").format(by));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        int min \u003d Integer.parseInt(new SimpleDateFormat(\"m\").format(by));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (min \u003e 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            displayDT \u003d datetimeFormat2.format(by);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            displayDT \u003d datetimeFormat3.format(by);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        int sufIndex \u003d -1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (day \u003d\u003d 1 || day \u003d\u003d 21 || day \u003d\u003d 31) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            sufIndex \u003d 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (day \u003d\u003d 2 || day \u003d\u003d 22) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            sufIndex \u003d 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (day \u003d\u003d 3 || day \u003d\u003d 23) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            sufIndex \u003d 2;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (day \u003e 3 \u0026\u0026 day \u003c 31) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            sufIndex \u003d 3;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String suffixStr \u003d day + suf[sufIndex];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        displayDT \u003d suffixStr + \" of \" + displayDT;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + displayDT + \")\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracting a task content into readable string (GUI)."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String to be displayed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toStringGui() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat datetimeFormat2 \u003d new SimpleDateFormat(\"MMMMM yyyy, h:mm a\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat datetimeFormat3 \u003d new SimpleDateFormat(\"MMMMM yyyy, ha\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String displayDT \u003d \"\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        int day \u003d Integer.parseInt(new SimpleDateFormat(\"d\").format(by));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        int min \u003d Integer.parseInt(new SimpleDateFormat(\"m\").format(by));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (min \u003e 0) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            displayDT \u003d datetimeFormat2.format(by);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            displayDT \u003d datetimeFormat3.format(by);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        int sufIndex \u003d -1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (day \u003d\u003d 1 || day \u003d\u003d 21 || day \u003d\u003d 31) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            sufIndex \u003d 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (day \u003d\u003d 2 || day \u003d\u003d 22) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            sufIndex \u003d 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (day \u003d\u003d 3 || day \u003d\u003d 23) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            sufIndex \u003d 2;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (day \u003e 3 \u0026\u0026 day \u003c 31) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            sufIndex \u003d 3;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String suffixStr \u003d day + suf[sufIndex];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        displayDT \u003d suffixStr + \" of \" + displayDT;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return \"[D]\" + super.toStringGui() + \" (by: \" + displayDT + \")\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracting a task content into string that is suitable for text file."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String to be written into text file."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String datetimeStr \u003d datetimeFormat.format(by);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"D|\" + super.toFile() + \"|\" + datetimeStr;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the date of the task as a String format."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String of Date."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String datetimeStr \u003d datetimeFormat.format(by);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return datetimeStr;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Sets the date of the task."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void setDateTime(String by) throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Date dateTime;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            dateTime \u003d datetimeFormat.parse(by);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            this.by \u003d dateTime;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            System.out.println(\"Error reading date/time, please use this format \\\"d/MM/yyyy HHmm\\\"\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 120,
      "talesrune": 18
    }
  },
  {
    "path": "src/main/java/duke/task/DetectDuplicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0318465"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0318465"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0318465"
        },
        "content": " * Finds duplicated tasks and alerts the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0318465"
        },
        "content": "public class DetectDuplicate {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    protected TaskList items;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Creates a DetectDuplicate task with a list of TaskList available."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items List of tasks already in the system."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public DetectDuplicate(TaskList items) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        this.items \u003d items;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Checks if the input is already in the list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param command Type of task keyed in."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param description The input keyed in by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return Boolean that states if the input is a duplicate."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public boolean isDuplicate(String command, String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        if (\"todo\".equals(command) || \"fixedduration\".equals(command)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                if (items.get(i).isContain(description)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                    //contains, is implemented in Task.java"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0318465"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 34,
      "maxxyx96": 4
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an event that stores description and date/time."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Date at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String[] suf \u003d { \"st\", \"nd\", \"rd\", \"th\" };"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    protected SimpleDateFormat datetimeFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an event with the specified description and date/time."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param at The date/time of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException  If there is an error converting the date/time."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Event(String description, String at) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Date dateTime \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            dateTime \u003d datetimeFormat.parse(at);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            this.at \u003d dateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Error reading date/time, please use this format \\\"d/MM/yyyy HHmm\\\"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracting a task content into readable string."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String to be displayed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat datetimeFormat2 \u003d new SimpleDateFormat(\"MMMMM yyyy, h:mm a\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat datetimeFormat3 \u003d new SimpleDateFormat(\"MMMMM yyyy, ha\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String displayDT \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        int day \u003d Integer.parseInt(new SimpleDateFormat(\"d\").format(at));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        int min \u003d Integer.parseInt(new SimpleDateFormat(\"m\").format(at));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (min \u003e 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            displayDT \u003d datetimeFormat2.format(at);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            displayDT \u003d datetimeFormat3.format(at);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        int sufIndex \u003d -1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (day \u003d\u003d 1 || day \u003d\u003d 21 || day \u003d\u003d 31) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            sufIndex \u003d 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (day \u003d\u003d 2 || day \u003d\u003d 22) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            sufIndex \u003d 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (day \u003d\u003d 3 || day \u003d\u003d 23) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            sufIndex \u003d 2;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (day \u003e 3 \u0026\u0026 day \u003c 31) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            sufIndex \u003d 3;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String suffixStr \u003d day + suf[sufIndex];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        displayDT \u003d suffixStr + \" of \" + displayDT;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + displayDT + \")\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracting a task content into readable string (GUI)."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String to be displayed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toStringGui() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat datetimeFormat2 \u003d new SimpleDateFormat(\"MMMMM yyyy, h:mm a\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat datetimeFormat3 \u003d new SimpleDateFormat(\"MMMMM yyyy, ha\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String displayDT \u003d \"\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        int day \u003d Integer.parseInt(new SimpleDateFormat(\"d\").format(at));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        int min \u003d Integer.parseInt(new SimpleDateFormat(\"m\").format(at));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (min \u003e 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            displayDT \u003d datetimeFormat2.format(at);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            displayDT \u003d datetimeFormat3.format(at);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        int sufIndex \u003d -1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (day \u003d\u003d 1 || day \u003d\u003d 21 || day \u003d\u003d 31) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            sufIndex \u003d 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (day \u003d\u003d 2 || day \u003d\u003d 22) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            sufIndex \u003d 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (day \u003d\u003d 3 || day \u003d\u003d 23) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            sufIndex \u003d 2;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (day \u003e 3 \u0026\u0026 day \u003c 31) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            sufIndex \u003d 3;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String suffixStr \u003d day + suf[sufIndex];"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        displayDT \u003d suffixStr + \" of \" + displayDT;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[E]\" + super.toStringGui() + \" (at: \" + displayDT + \")\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracting a task content into string that is suitable for text file."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String to be written into text file."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String datetimeStr \u003d datetimeFormat.format(at);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"E|\" + super.toFile() + \"|\" + datetimeStr;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the date of the task as a String format."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String of Date."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String datetimeStr \u003d datetimeFormat.format(at);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return datetimeStr;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Sets the date of the task."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void setDateTime(String at) throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Date dateTime;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            dateTime \u003d datetimeFormat.parse(at);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            this.at \u003d dateTime;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            System.out.println(\"Error reading date/time, please use this format \\\"d/MM/yyyy HHmm\\\"\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 124,
      "talesrune": 16
    }
  },
  {
    "path": "src/main/java/duke/task/FixedDuration.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class FixedDuration extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    protected int duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String unit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Fixed Duration Task with the specific description and fixed duration."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description Description of the Task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param duration The duration needed to complete the task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param unit The time unit."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public FixedDuration(String description, int duration, String unit) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.unit \u003d unit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracting a task content into readable string."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String to be displayed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[F]\" + super.toString() + \" (needs \" + duration + \" \" + unit + \")\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracting a task content into string that is suitable for text file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String to be written into text file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"F|\" + super.toFile() + \"|\" + duration + \" \" + unit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "talesrune": 1
    }
  },
  {
    "path": "src/main/java/duke/task/PriorityList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": " * Represents a priority list that stores a list of priorities associated with each task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "public class PriorityList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    private ArrayList\u003cInteger\u003e priorityList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    private int defultPriority \u003d 5;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Creates an empty priority list using an array list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public PriorityList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        priorityList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Creates an updated priority list with the specified array list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param list The array list of priorities."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public PriorityList(ArrayList\u003cInteger\u003e list) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        priorityList \u003d list;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Add a priority associated with a task into the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param taskNum The number of the task in the task list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param priority The priority we want to set."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @return The updated Priority List."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public PriorityList setPriority(int taskNum, int priority) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        priorityList.set(taskNum - 1, priority);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        return new PriorityList(priorityList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Add a default priority associated with a task into the list when the task is generated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param cmd The command used to generate a new task;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @return The updated Priority List."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public PriorityList addDefaultPriority(duke.command.Command cmd) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        if (cmd instanceof AddCommand) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            priorityList.add(defultPriority);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        return new PriorityList(priorityList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Add multiple default priority associated with a task into the list when these tasks are generated."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param numOfTimes The number of times that one task is repeated."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @return The updated Priority List."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public PriorityList addMultiDefaultPriority(int numOfTimes) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        for (int i \u003d 0; i \u003c numOfTimes; i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            priorityList.add(defultPriority);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        return new PriorityList(priorityList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Remove a priority when the associated task is removed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param index The index of the priority to be removed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        priorityList.remove(index);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Get user input for the priority of a task."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @return The priority for a task."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public int getPriority() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        System.out.println(\"     Enter the priority for the above added task: (1-high ~ 5-low)\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        int priority;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                priority \u003d Integer.parseInt(input.trim());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                if ((1 \u003c\u003d priority) \u0026\u0026 (priority \u003c\u003d 5)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    System.out.printf(\"     Set the priority to %d\\n\", priority);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    System.out.println(\"Wrong input! Please enter an integer between 1 and 5!\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                System.out.println(\"Wrong input! Please enter an integer between 1 and 5!\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Get the length/size of the priority list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @return The size of the priority list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        return priorityList.size();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Get the list of priorities."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @return The list of priorities."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public ArrayList\u003cInteger\u003e getList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        return this.priorityList;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Make the priority list empty."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @return The empty priority list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    private PriorityList clearList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        return new PriorityList(new ArrayList\u003cInteger\u003e());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        for (int i \u003d 0; i \u003c priorityList.size(); i++) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            output +\u003d priorityList.get(i) + \" \";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 2,
      "Dou-Maokang": 147
    }
  },
  {
    "path": "src/main/java/duke/task/Repeat.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a recursive task that stores the same description and across the different dates."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Repeat extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Date from;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String[] suf \u003d { \"st\", \"nd\", \"rd\", \"th\" };"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    protected SimpleDateFormat datetimeFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a repeated task with the description of task and date/time."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param from The date/time of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If there is an error converting the date/time."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Repeat(String description, String from) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Date dateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            dateTime \u003d datetimeFormat.parse(from);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            this.from \u003d dateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Error reading date/time, please use this format \\\"d/MM/yyyy HHmm\\\"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracting a task content into readable string."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String to be displayed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat datetimeFormat2 \u003d new SimpleDateFormat(\"MMMMM yyyy, h:mm a\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat datetimeFormat3 \u003d new SimpleDateFormat(\"MMMMM yyyy, ha\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String displayDT \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        int day \u003d Integer.parseInt(new SimpleDateFormat(\"d\").format(from));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        int min \u003d Integer.parseInt(new SimpleDateFormat(\"m\").format(from));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (min \u003e 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            displayDT \u003d datetimeFormat2.format(from);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            displayDT \u003d datetimeFormat3.format(from);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        int sufIndex \u003d -1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (day \u003d\u003d 1 || day \u003d\u003d 21 || day \u003d\u003d 31) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            sufIndex \u003d 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (day \u003d\u003d 2 || day \u003d\u003d 22) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            sufIndex \u003d 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (day \u003d\u003d 3 || day \u003d\u003d 23) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            sufIndex \u003d 2;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (day \u003e 3 \u0026\u0026 day \u003c 31) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            sufIndex \u003d 3;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String suffixStr \u003d day + suf[sufIndex];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        displayDT \u003d suffixStr + \" of \" + displayDT;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[R]\" + super.toString() + \" (Last day of schedule: \" + displayDT + \")\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the date of the task as a String format."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String of Date."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String datetimeStr \u003d datetimeFormat.format(from);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return datetimeStr;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Sets the date of the task."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void setDateTime(String from) throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Date dateTime;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            dateTime \u003d datetimeFormat.parse(from);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            this.from \u003d dateTime;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            System.out.println(\"Error reading date/time, please use this format \\\"d/MM/yyyy HHmm\\\"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracting a task content into string that is suitable for text file."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String to be written into text file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String datetimeStr \u003d datetimeFormat.format(from);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"R|\" + super.toFile() + \"|\" + datetimeStr;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 88,
      "talesrune": 16
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a task that stores description and boolean that indicates the task as completed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public int numberOfDays \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public LocalDateTime currentDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public LocalDateTime dueDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public int priority;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a task with the specified description."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the description of a task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String of the description."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Sets the description of a task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param description String of the description."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a boolean of the task being done or not."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Boolean of isDone."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the status icon of a task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String of the status icon."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return (isDone ? \"[/]\" : \"[X]\"); //return [✓] : [✗] symbols; [/][X] for jar"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Sets the status icon of a task to true/false."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param setDone The boolean of the task."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void setStatusIcon(boolean setDone) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        isDone \u003d setDone;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the status icon of a task (GUI)."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String of the status icon."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStatusIconGui() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return (isDone ? \"[\\u2713]\" : \"[\\u2718]\"); //return [✓]\" : \"[✗] symbols"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Returns the status icon of a task (GUI)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String of the status icon."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String getTasks() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return (isDone ? \"[\\u2713]\" : \"[\\u2718]\"); //return [✓]\" : \"[✗] symbols"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Set the remaining days of reminder."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remainingDays The number of days left of the reminded task."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    public void setReminder(int remainingDays) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        this.numberOfDays \u003d remainingDays;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Set the remaining days of reminder."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return boolean that triggers the reminder."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public boolean isTriggerReminder() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        /*if (dueDate !\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime reminderDate \u003d dueDate.minusDays(numberOfDays);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return LocalDateTime.now().isAfter(reminderDate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (currentDate !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime reminderDate \u003d currentDate.minusDays(numberOfDays);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return LocalDateTime.now().isAfter(reminderDate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        if (isDone() \u003d\u003d false) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            System.out.println(\"     High priority: \");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Set the priority of one task."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param  priorityLevel The priority level of the task, 1 to 5, high to low."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public void setPriority(int priorityLevel) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        this.priority \u003d priorityLevel;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Set the priority of one task."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @return the priority of the task."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public int getPriority() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        return this.priority;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracting a task content into readable string."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String that contains the status and the description of the task."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return getStatusIcon() + \" \" + description;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracting a task content into readable string (GUI)."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String that contains the status and the description of the task."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toStringGui() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return getStatusIconGui() + \" \" + description;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracting a task content into string that is suitable for text file."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String that contains the status and the description of the task."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        String numStr \u003d \"\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            numStr \u003d \"1|\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            numStr \u003d \"0|\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return  numStr + description;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the date of the task as a String format."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String of Date (Only in Deadline and Event)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Set the date of the task."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param dateTime String of the date/time."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @throws Exception  If there is an error interpreting the user input"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void setDateTime(String dateTime) throws Exception {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        throw new DukeException(\"     Error! This task does not have date/time.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Checks if the input and description matches."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param arr1 Input from user."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return Boolean that states if the input is a duplicate."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public boolean isContain(String arr1) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return arr1.equalsIgnoreCase(description);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gervaiseang": 2,
      "e0318465": 9,
      "Dou-Maokang": 21,
      "maxxyx96": 4,
      "-": 126,
      "talesrune": 41
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a task list that stores a list of tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    protected ArrayList\u003cTask\u003e items;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty task list using an array list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        items \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an updated task list with the specified array list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The updated array list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e items) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.items \u003d items;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * To add a task into the task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskObj a task to be added."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Task taskObj) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        items.add(taskObj);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * To remove a task from the task list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index The index of task to be removed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        items.remove(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * To update a task with different type."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param index The index of task to be removed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param taskObj The index of task to be removed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void setTaskType(int index, Task taskObj) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.set(index, taskObj);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Get remaining tasks in the ArrayList."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return tasks that represents the items."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return items;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * The size of the task list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return int that represents the task list size."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return items.size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the task from the task list via the task\u0027s index."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index The index of task."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Task which is retrieved from the index."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return items.get(index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Retrieves index of task in the task list (GUI)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param taskObj A task from the task list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return int that contains the index of task."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public int getIndex(Task taskObj) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            if (taskObj.equals(items.get(i))) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                index \u003d i;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves all tasks from the task list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String that contains the whole list of tasks."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String listStr \u003d \"\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            listStr +\u003d \"     \" + (i + 1) + \".\" + items.get(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return listStr;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves all tasks from the task list (GUI)."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String that contains the whole list of tasks."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getListGui() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String listStr \u003d \"\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            listStr +\u003d \"     \" + (i + 1) + \".\" + items.get(i).toStringGui() + \"\\n\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return listStr;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if a task is marked as done."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyDesc description of the task"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return returns true if task is marked as done, false otherwise."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public boolean isTaskDone(String keyDesc) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList searchList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task searchTask : items) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            if (searchTask.toString().contains(keyDesc)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                if (searchTask.isDone()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gervaiseang": 2,
      "maxxyx96": 2,
      "-": 112,
      "talesrune": 27
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a to-do that stores description."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an event with the specified description and date/time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracting a task content into readable string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String to be displayed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracting a task content into readable string (GUI)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String to be displayed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toStringGui() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[T]\" + super.toStringGui();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracting a task content into string that is suitable for text file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String to be written into text file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"T|\" + super.toFile();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Sets the date of the task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void setDateTime(String dateTime) throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        throw new DukeException(\"     Error! Todo does not have date/time.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "talesrune": 10
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.task.PriorityList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.ContactList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a ui that informs the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    protected static final String BACKUP_FILENAME \u003d \"duke.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    protected static final String LINE \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final Scanner in;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final PrintStream out;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty ui using default scanner and print stream."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an ui using specified scanner and print stream."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param in The input stream."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param out The print stream."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Ui(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs an horizontal line to the user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        out.println(LINE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs an horizontal line to the user (GUI)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String of the horizontal line."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String showLineGui() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        return LINE + \"\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Show the help page."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @return an event requesting to view the help page"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    public static String helpRequest(TaskList items) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        String str \u003d \"     Here are the commands available in Duke Manager:\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        return  str;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reads the user input, and converts it into string."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String of the user input."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs all the reminders of the user."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks The task list that contains all reminders."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    public static void showReminder(TaskList tasks) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d tasks.getTasks();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        System.out.println(\"     You currently have these upcoming tasks:\\n\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        int currentIndex \u003d 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        for (Task remaining: taskList) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            remaining.isTriggerReminder();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            System.out.println(\"     \" + currentIndex + \".\" + remaining.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            currentIndex +\u003d 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs all the tasks of the task list to the user."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showTaskList(TaskList items) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        out.println(\"     Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        out.print(items.getList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Outputs all the tasks of the task list to the user."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param priorities The list of priorities associated with each task."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public void showTaskListWithPriority(TaskList items, PriorityList priorities) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        out.println(\"     Here are the tasks in your list with priority shown:\\n\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        out.printf(\"     Priority |\\tTask\\n\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size() \u0026\u0026 i \u003c priorities.getSize(); i++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            out.printf(\"        [%d]\\t  |\\t%d.%s\\n\", priorities.getList().get(i), i + 1, items.get(i));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Outputs all the contacts of the contact list to the user."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param contactList The list of contacts."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void showContactList(ContactList contactList) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        out.println(\"     Here are all your contacts:\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        out.print(contactList.getContactList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs all the tasks of the task list to the user (GUI)."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String of all tasks from the task list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String showTaskListGui(TaskList items) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        String str \u003d \"     Here are the tasks in your list:\\n\" + items.getListGui();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Outputs task that is updated to the user."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void showUpdate(TaskList items, int index) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        out.println(\"     Nice! I\u0027ve updated this task ^^:\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        out.println(\"       \" + (index + 1) + \".\" + items.get(index).toString());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Outputs task that is updated to the user (GUI)."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String of the task that is updated."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public static String showUpdateGui(TaskList items, int index) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String str \u003d \"     Nice! I\u0027ve updated this task ^^:\\n\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"       \" + (index + 1) + \".\" + items.get(index).toString();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs task that is completed to the user."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showDone(TaskList items, int index) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        out.println(\"     Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        out.println(\"       \" + items.get(index).toString());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs task that is completed to the user (GUI)."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String of the task that is completed."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String showDoneGui(TaskList items, int index) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        String str \u003d \"     Nice! I\u0027ve marked this task as done:\\n       \" + items.get(index).toStringGui() + \"\\n\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs task that is deleted to the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param deletedTask The task that is deleted."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showDelete(TaskList items, String deletedTask) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        out.println(\"     Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        out.println(deletedTask);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        out.println(\"     Now you have \" + items.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs task that is deleted to the user (GUI)."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param deletedTask The task that is deleted."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String of the task that is deleted."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String showDeleteGui(TaskList items, String deletedTask) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        String str \u003d \"     Noted. I\u0027ve removed this task:\\n\" + deletedTask"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"\\n     Now you have \" + items.size() + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs task that is added to the user."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showAdd(TaskList items) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        out.println(\"     Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        out.println(\"       \" + items.get(items.size() - 1).toString());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        out.println(\"     Now you have \" + items.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs task that is added to the user (GUI)."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String of the task that is added."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String showAddGui(TaskList items) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        String str \u003d \"     Got it. I\u0027ve added this task:\\n       \""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                + items.get(items.size() - 1).toStringGui() + \"\\n     Now you have \""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "                + items.size() + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs a welcome message to the user."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        out.println(\"     Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        out.println(\"     What can I do for you?\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs a welcome message to the user (GUI)."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String of the welcome message."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String showWelcomeGui() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        String str \u003d LINE + \"\\n     Hello! I\u0027m Duke\\n     What can I do for you?\\n\" + LINE;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs a bye message to the user."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showBye() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        out.println(\"     Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs a bye message to the user (GUI)."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String of the bye message."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String showByeGui() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        String str \u003d \"     Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs the tasks that are matched from the keyword to the user."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyword The task that is deleted."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showFind(TaskList items, String keyword) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        out.println(\"     Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        int numFound \u003d 0;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            if (items.get(i).getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                out.println(\"     \" + (i + 1) + \".\" + items.get(i).toString());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "                numFound++;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        if (numFound \u003d\u003d 0) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            out.println(\"     No matching tasks found.\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs the tasks that are matched from the keyword to the user (GUI)."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyword The task that is deleted."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String of the matching tasks of the task list."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String showFindGui(TaskList items, String keyword) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        String str \u003d \"     Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        int numFound \u003d 0;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            if (items.get(i).getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "                str +\u003d \"     \" + (i + 1) + \".\" + items.get(i).toStringGui() + \"\\n\";"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "                numFound++;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        if (numFound \u003d\u003d 0) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "            str +\u003d \"     No matching tasks found.\\n\";"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs the error when loading the file to the user."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        out.println(\"File not found, creating an empty list\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs the error message during operating actions to the user."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message The error message to be outputted."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showErrorMsg(String message) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        out.println(message);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs the error message during operating actions to the user (GUI)."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message The error message to be outputted."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String of the error message."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String showErrorMsgGui(String message) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        return message + \"\\n\";"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Outputs an alert when a duplicated inout is detected."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void showDuplicateMsg() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        out.println(\"     The same task is already in the list!\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Outputs a message to the user to let it know that it is updating."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public void showBeforeBackupMsg() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        out.println(\"     Updating duke.txt...\");"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Outputs a message to the user to let it know that it has finished updating,"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * and the file is shown in a folder."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public void showAfterBackupMsg() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        out.println(\"     Updated \" + BACKUP_FILENAME + \" with the current items in Duke Manager!\");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        out.println(\"     Directory of the file opened in explorer!\");"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Outputs a message to the user to let it know that it has changed the priority of a task."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param taskList The task list that contains a list of tasks."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param taskNum The index of the task in the task list."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param priority The index of the priority."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public void showSetPriority(TaskList taskList, int taskNum, int priority) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        out.println(\"     Updated the priority of \\n\\t\\t\" + taskList.get(taskNum));"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        out.println(\"     Current priority: \" + priority);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Outputs the contact details that are most recently added."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param contactList The list of contacts."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void showAddedContact(ContactList contactList) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        out.println(\"     Got it. Contact added:\");"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        if (contactList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            out.println(\"     You have no contacts!\");"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            out.println(contactList.get(contactList.size() - 1));"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            out.println(\"     Now you have \" + contactList.size() + \" contacts.\");"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gervaiseang": 11,
      "e0318465": 36,
      "Dou-Maokang": 25,
      "maxxyx96": 26,
      "-": 259,
      "talesrune": 33
    }
  },
  {
    "path": "src/main/resources/view/AddWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.ComboBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"300.0\" prefWidth\u003d\"300.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.AddWindow\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "      \u003cHBox layoutX\u003d\"163.0\" layoutY\u003d\"64.0\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003cVBox alignment\u003d\"TOP_RIGHT\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cLabel alignment\u003d\"TOP_LEFT\" text\u003d\"Type\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cLabel alignment\u003d\"TOP_LEFT\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" text\u003d\"Description\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cLabel alignment\u003d\"TOP_LEFT\" layoutX\u003d\"10.0\" layoutY\u003d\"45.0\" text\u003d\"Date/Time\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cLabel alignment\u003d\"TOP_LEFT\" layoutX\u003d\"10.0\" layoutY\u003d\"80.0\" text\u003d\"Duration\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cLabel alignment\u003d\"TOP_LEFT\" layoutX\u003d\"10.0\" layoutY\u003d\"115.0\" text\u003d\"Unit\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cLabel alignment\u003d\"TOP_LEFT\" layoutX\u003d\"70.0\" layoutY\u003d\"150.0\" text\u003d\"Existing Task\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003cVBox alignment\u003d\"TOP_RIGHT\" layoutX\u003d\"30.0\" layoutY\u003d\"40.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"150.0\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cComboBox fx:id\u003d\"cbType\" prefWidth\u003d\"150.0\" promptText\u003d\"Select Type\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/ComboBox\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cTextField fx:id\u003d\"tfDesc\"\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/TextField\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cTextField fx:id\u003d\"tfDateTime\"\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/TextField\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cTextField fx:id\u003d\"tfDuration\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/TextField\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cTextField fx:id\u003d\"tfUnit\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/TextField\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cComboBox fx:id\u003d\"cbExistingTask\" prefWidth\u003d\"150.0\" promptText\u003d\"Select Task\"\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/ComboBox\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cHBox alignment\u003d\"CENTER\" prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cButton fx:id\u003d\"btnAdd\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#onMouseClickAdd\" text\u003d\"Add\"\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003c/Button\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cButton fx:id\u003d\"btnReset\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#onMouseClickReset\" text\u003d\"Reset\"\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003c/Button\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "talesrune"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "talesrune"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003cInsets left\u003d\"20.0\" top\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "talesrune"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "talesrune"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "talesrune"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "talesrune": 129
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "      \u003cScrollPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "          \u003cAnchorPane maxHeight\u003d\"350.0\" maxWidth\u003d\"440.0\" minHeight\u003d\"1.0\" minWidth\u003d\"300.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "talesrune": 13
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.ComboBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"880.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "      \u003cMenuBar layoutX\u003d\"7.0\" layoutY\u003d\"2.0\" prefHeight\u003d\"25.0\" prefWidth\u003d\"364.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"516.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        \u003cmenus\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Add New\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003citems\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cMenuItem fx:id\u003d\"menuAdd\" mnemonicParsing\u003d\"false\" onAction\u003d\"#createAddWindow\" text\u003d\"New Task\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003c/items\u003e\u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Exit?\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003citems\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "              \u003cMenuItem fx:id\u003d\"exit\" mnemonicParsing\u003d\"false\" onAction\u003d\"#exitProgram\" text\u003d\"Close\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003c/items\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"View\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003citems\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "              \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Blank\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003c/items\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003citems\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": "              \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"About\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003c/items\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        \u003c/menus\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": "      \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"364.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"364.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFont name\u003d\"System Bold Italic\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutY\u003d\"27.0\" prefHeight\u003d\"530.0\" prefWidth\u003d\"440.0\" vvalue\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"440.0\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"513.0\" prefWidth\u003d\"428.0\" spacing\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/padding\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "talesrune"
        },
        "content": "      \u003cSplitPane dividerPositions\u003d\"0.64\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"600.0\" prefWidth\u003d\"440.0\" AnchorPane.bottomAnchor\u003d\"45.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"440.0\" AnchorPane.topAnchor\u003d\"28.0\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        \u003citems\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "talesrune"
        },
        "content": "          \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"160.0\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cTabPane prefHeight\u003d\"260.0\" prefWidth\u003d\"438.0\" side\u003d\"LEFT\" tabClosingPolicy\u003d\"UNAVAILABLE\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    \u003ctabs\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cTab text\u003d\"All\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                      \u003cTab text\u003d\"Todo\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                      \u003cTab text\u003d\"Deadline\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cTab text\u003d\"Event\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cTab text\u003d\"Repeat\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cTab text\u003d\"DoAfter\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cTab text\u003d\"Etc.\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    \u003c/tabs\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cScrollPane prefHeight\u003d\"340.0\" prefWidth\u003d\"438.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"32.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    \u003ccontent\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                      \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"339.0\" prefWidth\u003d\"437.0\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cListView fx:id\u003d\"listT\" onMouseClicked\u003d\"#onMouseClick_ListView\" prefHeight\u003d\"340.0\" prefWidth\u003d\"438.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    \u003c/content\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "talesrune"
        },
        "content": "          \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"160.0\"\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cBorderPane prefHeight\u003d\"186.0\" prefWidth\u003d\"438.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003ctop\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cLabel fx:id\u003d\"labelSelectedTask\" text\u003d\"Selected Task:\" BorderPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/top\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cright\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cVBox fx:id\u003d\"vboxUpdate\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cLabel text\u003d\"Type of Update\" /\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cComboBox fx:id\u003d\"cbupdateType\" prefWidth\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cLabel layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" text\u003d\"New Description\" /\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cTextField fx:id\u003d\"tfnewDesc\" /\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cLabel layoutX\u003d\"10.0\" layoutY\u003d\"52.0\" text\u003d\"New Date/Time\" /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cTextField fx:id\u003d\"tfnewDateTime\" layoutX\u003d\"10.0\" layoutY\u003d\"69.0\" /\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cLabel layoutX\u003d\"10.0\" layoutY\u003d\"94.0\" text\u003d\"New Task Type\" /\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cComboBox fx:id\u003d\"cbtaskType\" layoutX\u003d\"10.0\" layoutY\u003d\"111.0\" prefWidth\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003cpadding\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003c/padding\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/right\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003ccenter\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cVBox alignment\u003d\"CENTER\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cHBox fx:id\u003d\"hboxButtons\" alignment\u003d\"CENTER\" prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    \u003cButton fx:id\u003d\"btnDone\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#onMouseClickDone\" text\u003d\"Done\"\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                          \u003cFont size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    \u003cButton fx:id\u003d\"btnDelete\" layoutX\u003d\"125.0\" layoutY\u003d\"69.0\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#onMouseClickDelete\" text\u003d\"Delete\"\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                          \u003cFont size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    \u003cButton fx:id\u003d\"btnUpdate\" layoutX\u003d\"73.0\" layoutY\u003d\"69.0\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#onMouseClickUpdate\" text\u003d\"Update\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                          \u003cFont size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003c/HBox\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cHBox alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    \u003cButton fx:id\u003d\"btnOK\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#onMouseClickOK\" text\u003d\"OK\"\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                          \u003cFont size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    \u003cButton fx:id\u003d\"btnCancel\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#onMouseClickCancel\" text\u003d\"Cancel\"\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                          \u003cFont size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003c/HBox\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/center\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        \u003c/items\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "talesrune"
        },
        "content": "      \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "talesrune"
        },
        "content": "      \u003cButton disable\u003d\"true\" layoutX\u003d\"406.0\" mnemonicParsing\u003d\"false\" text\u003d\"--\u0026gt;\" /\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "talesrune"
        },
        "content": "      \u003cButton disable\u003d\"true\" layoutX\u003d\"364.0\" mnemonicParsing\u003d\"false\" text\u003d\"Save\" /\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "talesrune": 133
    }
  },
  {
    "path": "src/test/java/duke/command/UpdateCommTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "talesrune"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.DoAfter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "class UpdateCommTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    void updateTest() throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        TaskList items \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task \u003d new Todo(\"walk\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        task \u003d new Deadline(\"homework\", \"07/07/2017 1707\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        task \u003d new Event(\"movie\", \"05/05/2015 1500\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String taskDesc \u003d \"run\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String dateDesc \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String typeDesc \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int typeOfUpdate \u003d 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int tasknum \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Command cmd \u003d new UpdateCommand(taskDesc,dateDesc,typeDesc,typeOfUpdate,tasknum);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"     Nice! I\u0027ve updated this task ^^:\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"       1.[T][X] run\", cmd.executeGui(items,ui));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        dateDesc \u003d \"08/08/2018 1708\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        typeOfUpdate \u003d 2;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        tasknum \u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d new UpdateCommand(taskDesc,dateDesc,typeDesc,typeOfUpdate,tasknum);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"     Nice! I\u0027ve updated this task ^^:\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"       2.[D][X] homework (by: 8th of August 2018, 5:08 PM)\", cmd.executeGui(items,ui));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        taskDesc \u003d \"trampoline\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        typeOfUpdate \u003d 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        tasknum \u003d 2;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d new UpdateCommand(taskDesc,dateDesc,typeDesc,typeOfUpdate,tasknum);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"     Nice! I\u0027ve updated this task ^^:\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"       3.[E][X] trampoline (at: 5th of May 2015, 3PM)\", cmd.executeGui(items,ui));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        typeDesc \u003d \"event\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        typeOfUpdate \u003d 3;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        tasknum \u003d 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d new UpdateCommand(taskDesc,dateDesc,typeDesc,typeOfUpdate,tasknum);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"     Nice! I\u0027ve updated this task ^^:\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"       2.[E][X] homework (at: 8th of August 2018, 5:08 PM)\", cmd.executeGui(items,ui));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        typeDesc \u003d \"todo\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        typeOfUpdate \u003d 3;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        tasknum \u003d 2;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d new UpdateCommand(taskDesc,dateDesc,typeDesc,typeOfUpdate,tasknum);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"     Nice! I\u0027ve updated this task ^^:\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"       3.[T][X] trampoline\", cmd.executeGui(items,ui));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void updateTest_exceptionThrown() throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        TaskList items \u003d new TaskList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task \u003d new Todo(\"walk\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        task \u003d new Deadline(\"homework\", \"07/07/2017 1707\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        task \u003d new DoAfter(\"movie\", \"walk\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            items.get(0).setDateTime(\"07/07/2017 1707\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            assertEquals(\"     Error! Todo does not have date/time.\", e.getMessage());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            items.get(1).setDateTime(\"08/08/2018\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            assertEquals(\"Unparseable date: \\\"08/08/2018\\\"\", e.getMessage());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            items.get(2).setDateTime(\"09/09/2019\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            assertEquals(\"     Error! This task does not have date/time.\", e.getMessage());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "talesrune": 97
    }
  },
  {
    "path": "src/test/java/duke/parser/ParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.AddMultipleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    TaskList items \u003d new TaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    void parserTest() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d new Todo(\"Hi\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task2 \u003d new Todo(\"there\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        items.add(task);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        items.add(task2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Command cmd \u003d Parser.parse(\"todo Work\", items);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(cmd instanceof AddCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d Parser.parse(\"deadline basketball /by 19/04/2019 1900\", items);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(cmd instanceof AddCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        cmd \u003d Parser.parse(\"event watch movies /at 20/07/2018 1240\", items);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(cmd instanceof AddCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        cmd \u003d Parser.parse(\"find word\", items);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(cmd instanceof FindCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        cmd \u003d Parser.parse(\"done 1\", items);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(cmd instanceof DoneCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        cmd \u003d Parser.parse(\"list\", items);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(cmd instanceof ListCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        cmd \u003d Parser.parse(\"delete 1\", items);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(cmd instanceof DeleteCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        cmd \u003d Parser.parse(\"repeat this /from 10/05/2019 1234 /for 3 days\", items);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(cmd instanceof AddMultipleCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parserTest_exceptionThrown() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            Parser.parse(\"invalid\", items);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(\"     (\u003e_\u003c) OoPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    void parserTest_DetectAnomalies() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task \u003d new Deadline(\"basketball\", \"19/04/2019 1900\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Command cmd;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            Parser.parse(\"deadline soccer /by 19/04/2019 1900\", items);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            assertEquals(\"     (\u003e_\u003c) OOPS!!! The date/time for deadline clashes with \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    + \"[D][X] basketball (by: 19th of April 2019, 7PM)\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    + \"     Please choose another date/time! Or mark the above task as Done first!\", e.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d Parser.parse(\"deadline soccer /by 19/04/2019 2000\", items);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertTrue(cmd instanceof AddCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d Parser.parse(\"done 1\", items);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd.execute(items, ui);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d Parser.parse(\"event party /at 19/04/2019 1900\", items);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertTrue(cmd instanceof AddCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "talesrune": 24
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    void deadlineTest() throws ParseException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d new Deadline(\"homework\", \"08/04/2019 1000\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"[D][X] homework (by: 8th of April 2019, 10AM)\", task.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "talesrune": 1
    }
  },
  {
    "path": "src/test/java/duke/task/DetectDuplicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0318465"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0318465"
        },
        "content": "public class DetectDuplicateTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    void detectDuplicateTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        TaskList items \u003d new TaskList();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        DetectDuplicate detectDuplicate \u003d new DetectDuplicate(items);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        detectDuplicate.isDuplicate(\"todo\", \"something cool\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        //assertEquals(\"     The same task is already in the list!\", detectDuplicate.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        //your test is INVALID since you removed the toString()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0318465"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 14,
      "talesrune": 2
    }
  }
]
