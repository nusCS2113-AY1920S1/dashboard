[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    archiveVersion \u003d \"v1.3\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    //mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "talesrune": 3
    }
  },
  {
    "path": "src/main/java/duke/AddNotesWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "talesrune"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": " * Controller for AddNotesWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "public class AddNotesWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private int itemNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private TextField tfNotesDesc;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private Button btnAddNotes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Setting up Add Notes Window Interface."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param mainWindow The main window that runs DUKE Manager."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param itemNumber The number order of the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param notesDesc The existing notes of the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void setAddNotesWindow(MainWindow mainWindow, int itemNumber, String notesDesc) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.itemNumber \u003d itemNumber;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        tfNotesDesc.setText(notesDesc);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private void onMouseClick_AddNotes() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        mainWindow.handleUserEvent(\"notes \" + itemNumber + \" /add \" + tfNotesDesc.getText());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        mainWindow.listViewRefresh();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Stage stage \u003d (Stage) btnAddNotes.getScene().getWindow();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        stage.close();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "talesrune": 49
    }
  },
  {
    "path": "src/main/java/duke/AddWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "talesrune"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.scene.control.ComboBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": " * Controller for AddWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "public class AddWindow extends AnchorPane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private ComboBox\u003cString\u003e cbType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private TextField tfDesc;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private TextField tfDateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private TextField tfDuration;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private TextField tfUnit;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private ComboBox\u003cString\u003e cbExistingTask;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private Button btnAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private Button btnReset;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Setting up Add Window Interface."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param d The object of Duke."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param mainWindow The main window that runs DUKE Manager."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void setAddWindow(Duke d, MainWindow mainWindow) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cbType.getItems().addAll("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                \"Todo\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                \"Deadline\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                \"Fixed Duration\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                \"Repeat\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        );"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        TaskList items \u003d d.getTaskList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        for (int i \u003d ZERO; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            cbExistingTask.getItems().add(items.get(i).getDescription());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    void onMouseClickAdd() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        System.out.println(\"clicked on \" + cbType.getSelectionModel().getSelectedItem());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        if (cbType.getSelectionModel().getSelectedItem().equals(\"Todo\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            mainWindow.handleUserEvent(\"todo \" + tfDesc.getText().trim());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (cbType.getSelectionModel().getSelectedItem().equals(\"Deadline\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            mainWindow.handleUserEvent(\"deadline \" + tfDesc.getText().trim() + \" /by \" + tfDateTime.getText().trim());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (cbType.getSelectionModel().getSelectedItem().equals(\"Fixed Duration\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            mainWindow.handleUserEvent(\"fixedduration \" + tfDesc.getText().trim() + \" /for \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    +  tfDuration.getText().trim() + \" \" +  tfUnit.getText().trim());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (cbType.getSelectionModel().getSelectedItem().equals(\"Repeat\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            mainWindow.handleUserEvent(\"repeat \" + tfDesc.getText().trim()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    + \" /from \" +  tfDateTime.getText().trim() + \" /for \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    +  tfDuration.getText().trim()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    + \" \" + tfUnit.getText().trim());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        mainWindow.listViewRefresh();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Stage stage \u003d (Stage) btnAdd.getScene().getWindow();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        stage.close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    void onMouseClickReset() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cbType.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        tfDesc.clear();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        tfDateTime.clear();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        tfDuration.clear();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        tfUnit.clear();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cbExistingTask.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "talesrune": 101
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author talesrune-reused"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final Logger logr \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            logr.log(Level.SEVERE,\"Error loading dialog box\", e);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hi."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a dialog box with the image and the text of either the user or the bot."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param text THe text of the user or bot."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param img The image of the user or bot."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return DialogBox to display to the user."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "talesrune": 4
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.command.BackupCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.command.ListPriorityCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.command.AddMultipleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.command.SetPriorityCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.command.FilterCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.command.FindTasksByPriorityCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.storage.BudgetStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.storage.ContactStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.storage.PriorityStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.BudgetList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.PriorityList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.FilterList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.ContactList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a duke that controls the program."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList items;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private FilterList filterList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    private ContactStorage contactStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    private ContactList contactList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private DukeLogger dukeLogger;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    private PriorityStorage priorityStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    private PriorityList priorityList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    private BudgetStorage budgetStorage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    private BudgetList budgetList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String storageFilePath \u003d \"data\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String taskFilePath \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String priorityFilePath \u003d \"data/priority.txt\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String budgetFilePath \u003d \"data/budget.txt\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String contactsFilePath \u003d \"data/contacts.txt\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final Logger logr \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a duke to initialize storage, task list, and ui."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param filePath1 The location of the text file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param filePath2 The location of the priority text file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param filePathForBudget The location of the budget text file"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param filePathForContacts The location of the contact text file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public Duke(String filePath1, String filePath2, String filePathForBudget, String filePathForContacts) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        dukeLogger \u003d new DukeLogger();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        dukeLogger.setupLogger();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        filterList \u003d new FilterList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        storage \u003d new Storage(filePath1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        priorityStorage \u003d new PriorityStorage(filePath2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        contactStorage \u003d new ContactStorage(filePathForContacts);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        budgetStorage \u003d new BudgetStorage(filePathForBudget);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        checkStorageExist();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            items \u003d new TaskList(storage.read());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            ui.showErrorMsg(\"Storage NF\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            logr.log(Level.SEVERE,\"Storage text file is not found\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            items \u003d new TaskList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            priorityList \u003d new PriorityList(priorityStorage.read());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            ui.showErrorMsg(\"Priority Storage NF\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            logr.log(Level.SEVERE,\"Priority storage text file is not found\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            priorityList \u003d new PriorityList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            contactList \u003d new ContactList(contactStorage.read());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            ui.showErrorMsg(\"Contact List NF\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            logr.log(Level.SEVERE,\"Contact list text file is not found\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            contactList \u003d new ContactList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            budgetList \u003d new BudgetList(budgetStorage.read());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            logr.log(Level.SEVERE,\"Budget list text file is not found\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            budgetList \u003d new BudgetList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Echoes the user input back the the user."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String of the response."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    //@@author maxxyx96"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Creates a directory for data storage if there is none created yet."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public void checkStorageExist() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        File storageFileDirectory \u003d new File(storageFilePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        if (!storageFileDirectory.exists()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            storageFileDirectory.mkdirs();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Gets the budget list from Duke."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @return the budget List."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public BudgetList getBudgetList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        return budgetList;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    //@@author e0318465"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Retrieves the current contact list (GUI)."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return A list of contacts."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public ContactList getContactList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return contactList;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves a command from interpreting the user input (GUI)."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence The user input."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Command to be executed thereafter."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception  If there is an error reading the command."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command getCommand(String sentence) throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        Command cmd \u003d Parser.parse(sentence, items, budgetList, contactList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return cmd;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command to overwrite existing storage with the current updated lists(GUI)."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cmd Command to be executed."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException  If there is an error writing the text file."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveState(Command cmd) throws IOException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        cmd.executeStorage(items, ui, storage, budgetStorage, budgetList,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                contactStorage, contactList, priorityStorage, priorityList);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a command and outputs the result to the user (GUI)."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cmd Command to be executed."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String to be outputted."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @throws IOException  If there is an error writing the text file"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public String executeCommand(Command cmd) throws IOException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        String str \u003d cmd.executeGui(items, ui);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        if (cmd instanceof FilterCommand) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            cmd.execute(items,filterList);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    //@@author talesrune"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Retrieves the current task list (GUI)."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return A list of tasks."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public TaskList getTaskList() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return items;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Retrieves the current task list (GUI)."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return A list of tasks."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public FilterList getFilterList() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return filterList;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs the duke program until exit command is executed."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        Ui.showReminder(items);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        String sentence;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            sentence \u003d ui.readCommand();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                Command cmd \u003d Parser.parse(sentence, items, budgetList, contactList);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                if (cmd instanceof ExitCommand) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                    priorityStorage.write(priorityList);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                    budgetStorage.write(budgetList);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                    contactStorage.write(contactList);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    cmd.executeStorage(items, ui, storage);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else if (cmd instanceof ListPriorityCommand"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        || cmd instanceof AddMultipleCommand"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                        || cmd instanceof DeleteCommand"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                        || cmd instanceof SetPriorityCommand"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                        || cmd instanceof FindTasksByPriorityCommand) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    cmd.execute(items, priorityList, ui);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                } else if (cmd instanceof BackupCommand) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                    priorityStorage.write(priorityList);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                    budgetStorage.write(budgetList);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                    contactStorage.write(contactList);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                    storage.write(items);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                    cmd.execute(items, ui);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                    cmd.executeStorage(items, ui, storage);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                    cmd.execute(items,ui);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    priorityList \u003d priorityList.addDefaultPriority(cmd);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showErrorMsg(e.getMessage());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showErrorMsg(\"     New error, please fix:\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                logr.log(Level.WARNING,\"New error, please fix\", e);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showErrorMsg(\"     Duke will continue as per normal.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        new Duke(taskFilePath, priorityFilePath, budgetFilePath,contactsFilePath).run();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gervaiseang": 7,
      "e0318465": 42,
      "Dou-Maokang": 20,
      "maxxyx96": 36,
      "-": 112,
      "talesrune": 44
    }
  },
  {
    "path": "src/main/java/duke/DukeLogger.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "talesrune"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author talesrune-reused"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": " * A logger which helps to log warning and severe errors."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "public class DukeLogger {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final Logger logr \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Sets up a logger with a log file and log levels."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void setupLogger() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        logr.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        ConsoleHandler ch \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        ch.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        logr.addHandler(ch);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            FileHandler fh \u003d new FileHandler(\"dukeLogger.log\", true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            fh.setLevel(Level.FINE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            logr.addHandler(fh);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            SimpleFormatter formatter \u003d new SimpleFormatter();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            fh.setFormatter(formatter);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (java.io.IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            logr.log(Level.SEVERE, \"Duke logger is not working.\", e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "talesrune": 37
    }
  },
  {
    "path": "src/main/java/duke/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import javafx.scene.control.ComboBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import javafx.scene.layout.TilePane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "//@@author gervaiseang"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": " * Controller for a help page."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "public class HelpWindow extends AnchorPane {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    private ComboBox\u003cString\u003e cbCommands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    private Label getDescription;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * Setting up Help Window Interface."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @param d The object of Duke."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @param mainWindow The main window that runs DUKE Manager."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    public void setHelpWindow(Duke d, MainWindow mainWindow) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        cbCommands.getItems().addAll("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                \"todo\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                \"deadline\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                \"event\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                \"fixedduration\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                \"repeat\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                \"doafter\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "         * Create action event when command is selected from drop down list"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        EventHandler\u003cActionEvent\u003e event \u003d new EventHandler\u003cActionEvent\u003e() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            public void handle(ActionEvent actionEvent) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                if (cbCommands.getSelectionModel().getSelectedItem().equals(\"todo\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                    getDescription.setText(cbCommands.getValue() + \" \u003ctask description\u003e\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                    getDescription.getScene().getWindow();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                } else if (cbCommands.getSelectionModel().getSelectedItem().equals(\"deadline\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                    getDescription.setText(cbCommands.getValue() + \" \u003ctask description\u003e /by \u003cdate and time\u003e\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                    getDescription.getScene().getWindow();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                } else if (cbCommands.getSelectionModel().getSelectedItem().equals(\"event\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                    getDescription.setText(cbCommands.getValue() + \" \u003ctask description\u003e /at \u003cdate and time\u003e\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                    getDescription.getScene().getWindow();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                } else if (cbCommands.getSelectionModel().getSelectedItem().equals(\"fixedduration\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                    getDescription.setText(cbCommands.getValue() + \" \u003ctask description\u003e /for \u003cduration\u003e \u003cunit\u003e\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                    getDescription.getScene().getWindow();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                } else if (cbCommands.getSelectionModel().getSelectedItem().equals(\"repeat\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                    getDescription.setText(cbCommands.getValue()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                            + \" \u003ctask\u003e /from \u003cdate and time\u003e /for \u003cduration\u003e \u003cday/week/month\u003e\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                    getDescription.getScene().getWindow();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                } else if (cbCommands.getSelectionModel().getSelectedItem().equals(\"doafter\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                    getDescription.setText(cbCommands.getValue()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                            + \" \u003ctask description\u003e /after \u003cexisting task description\u003e\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                    getDescription.getScene().getWindow();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        cbCommands.setOnAction(event);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gervaiseang": 83
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author talesrune-reused"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    private Duke duke \u003d new Duke(\"data/duke.txt\", \"data/priority.txt\", \"data/budget.txt\",\"data/contacts.txt\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final Logger logr \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            logr.log(Level.SEVERE,\"Unable to load main window.\", e);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 1,
      "maxxyx96": 1,
      "-": 29,
      "talesrune": 4
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.command.BackupCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.command.FilterCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.FilterList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.scene.control.ComboBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.scene.control.SingleSelectionModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.scene.control.Tooltip;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private ListView\u003cTask\u003e listT;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private Label labelSelectedTask;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private Button btnDone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private Button btnDelete;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private Button btnUpdate;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private Button btnOK;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private Button btnCancel;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private VBox vboxUpdate;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private ComboBox\u003cString\u003e cbupdateType;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private TextField tfnewDesc;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private TextField tfnewDateTime;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private ComboBox\u003cString\u003e cbtaskType;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private TabPane tpTabs;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    SingleSelectionModel\u003cTab\u003e selectedTab;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private Tooltip toolTip;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private int refreshType \u003d 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int ONE \u003d 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int TIMER_DELAY \u003d 500;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int VBOX_WIDTH \u003d 200;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final Logger logr \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/myUser.png\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/myBot.png\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author talesrune-reused"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Setting up Duke GUI."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param d The object of Duke."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        updateGui();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        setVboxWidth(false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        setButtonsVisibility(true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        selectedTab \u003d  tpTabs.getSelectionModel();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        toolTip \u003d new Tooltip();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        toolTip.setText(\"\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        listT.setTooltip(toolTip);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        toolTip.setShowDelay(Duration.millis(75.0));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        toolTip.setShowDuration(Duration.millis(0.0));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getDukeDialog(Ui.showWelcomeGui(), dukeImage)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    Timer timer \u003d new Timer();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    TimerTask exitDuke \u003d new TimerTask() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public void run() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            System.exit(ZERO);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    };"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getUserDialog(input, userImage)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            Command cmd \u003d duke.getCommand(input);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            if (cmd instanceof ExitCommand) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                duke.saveState(cmd);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                response \u003d Ui.showByeGui();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                );"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                timer.schedule(exitDuke, new Date(System.currentTimeMillis() + TIMER_DELAY));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            }  else if (cmd instanceof BackupCommand) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                duke.saveState(cmd);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                response \u003d Ui.showBackupMessageGui();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                        DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                );"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                if (cmd instanceof FilterCommand) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    refreshType \u003d 1;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                response \u003d duke.executeCommand(cmd);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                );"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                updateGui();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            response \u003d Ui.showErrorMsgGui(e.getMessage());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            logr.log(Level.WARNING, response, e);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            );"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            response \u003d Ui.showErrorMsgGui(\"     New error, please read console:\")"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    +  Ui.showErrorMsgGui(\"     Duke will continue as per normal.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            logr.log(Level.WARNING, response, e);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            );"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    //@@author talesrune"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected void handleUserEvent(String input) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                DialogBox.getUserDialog(input, userImage)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        );"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            Command cmd \u003d duke.getCommand(input);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            response \u003d  duke.executeCommand(cmd);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            );"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            response \u003d Ui.showErrorMsgGui(e.getMessage());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            logr.log(Level.WARNING, response, e);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            );"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            response \u003d Ui.showErrorMsgGui(\"     New error, please read console:\")"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    +  Ui.showErrorMsgGui(\"     Duke will continue as per normal.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            logr.log(Level.WARNING, response, e);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            );"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private void onMouseClick_ListView(MouseEvent mouseEvent) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        labelSelectedTask.setText(\"Selected Task: \" + listT.getSelectionModel().getSelectedItem());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task taskObj \u003d listT.getSelectionModel().getSelectedItem();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        toolTip.setText(\"Notes: \" + taskObj.getNotes());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Node node \u003d (Node) mouseEvent.getSource();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        toolTip.show(node, mouseEvent.getScreenX() + 120, mouseEvent.getScreenY());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        if (taskObj.isDone()) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            btnDone.setDisable(true);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            btnDone.setDisable(false);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        btnDelete.setDisable(false);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        btnUpdate.setDisable(false);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private void onMouseClickTabs() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String str \u003d selectedTab.getSelectedItem().getText();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        if (str.toLowerCase().equals(\"all\")) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            handleUserEvent(\"list\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            handleUserEvent(\"filter \" + str.toLowerCase());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            refreshType \u003d 1;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        updateGui();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private void onMouseClickDone() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task taskObj \u003d listT.getSelectionModel().getSelectedItem();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        TaskList items \u003d duke.getTaskList();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int itemNumber \u003d items.getIndex(taskObj) + ONE;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        handleUserEvent(\"done \" + itemNumber);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        updateGui();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private void onMouseClickDelete() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task taskObj \u003d listT.getSelectionModel().getSelectedItem();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        TaskList items \u003d duke.getTaskList();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int itemNumber \u003d items.getIndex(taskObj) + ONE;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        handleUserEvent(\"delete \" + itemNumber);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        updateGui();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private void onMouseClick_DeleteNotes() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task taskObj \u003d listT.getSelectionModel().getSelectedItem();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        TaskList items \u003d duke.getTaskList();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int itemNumber \u003d items.getIndex(taskObj) + ONE;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        handleUserEvent(\"notes \" + itemNumber + \" /delete\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        updateGui();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private void onMouseClickUpdate() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        setVboxWidth(true);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        setButtonsVisibility(false);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cleanUp();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cbupdateType.getItems().addAll("
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                \"Description\","
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                \"Date/Time\","
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                \"Type of Task\""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        );"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cbtaskType.getItems().addAll("
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                \"Todo\","
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                \"Deadline\","
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                \"Fixed Duration\","
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                \"Repeat\""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        );"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private void onMouseClickOK() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task taskObj \u003d listT.getSelectionModel().getSelectedItem();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        TaskList items \u003d duke.getTaskList();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int itemNumber \u003d items.getIndex(taskObj) + ONE;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        if (cbupdateType.getSelectionModel().getSelectedItem().equals(\"Description\")) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            handleUserEvent(\"update \" + itemNumber + \" /desc \" + tfnewDesc.getText().trim());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (cbupdateType.getSelectionModel().getSelectedItem().equals(\"Date/Time\")) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            handleUserEvent(\"update \" + itemNumber + \" /date \" + tfnewDateTime.getText().trim());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (cbupdateType.getSelectionModel().getSelectedItem().equals(\"Type of Task\")) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            String typeStr \u003d \"\";"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            if (cbtaskType.getSelectionModel().getSelectedItem().equals(\"Todo\")) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                typeStr \u003d \"todo\";"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else  if (cbtaskType.getSelectionModel().getSelectedItem().equals(\"Deadline\")) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                typeStr \u003d \"deadline\";"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else  if (cbtaskType.getSelectionModel().getSelectedItem().equals(\"Fixed Duration\")) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                typeStr \u003d \"fixedduration\";"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else  if (cbtaskType.getSelectionModel().getSelectedItem().equals(\"Repeat\")) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                typeStr \u003d \"repeat\";"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            handleUserEvent(\"update \" + itemNumber + \" /type \" + typeStr);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        updateGui();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        setVboxWidth(false);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        setButtonsVisibility(true);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private void onMouseClickCancel() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        setVboxWidth(false);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        setButtonsVisibility(true);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private void cleanUp() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cbupdateType.getItems().clear();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cbtaskType.getItems().clear();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        tfnewDateTime.clear();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        tfnewDesc.clear();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private void setVboxWidth(boolean isEnabled) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        if (isEnabled) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            vboxUpdate.setPrefWidth(VBOX_WIDTH);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            vboxUpdate.setVisible(true);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            vboxUpdate.setPrefWidth(ZERO);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            vboxUpdate.setVisible(false);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private void setButtonsVisibility(boolean isVisible) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        if (isVisible) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            btnOK.setVisible(false);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            btnCancel.setVisible(false);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            btnDone.setVisible(true);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            btnUpdate.setVisible(true);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            btnDelete.setVisible(true);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            btnOK.setVisible(true);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            btnCancel.setVisible(true);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            btnDone.setVisible(false);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            btnUpdate.setVisible(false);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            btnDelete.setVisible(false);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private void updateGui() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        listViewRefresh();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        setDisableButtons();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        labelSelectedTask.setText(\"Selected Task: \");"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected void listViewRefresh() {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        listT.getItems().clear();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        TaskList items \u003d duke.getTaskList();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        FilterList filterList \u003d duke.getFilterList();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        if (refreshType \u003d\u003d 0) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            if (selectedTab !\u003d null) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                selectedTab.selectFirst();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            for (int i \u003d ZERO; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                listT.getItems().add(items.get(i));"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            for (int i \u003d ZERO; i \u003c filterList.size(); i++) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                listT.getItems().add(filterList.get(i));"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            selectedTab.select(filterList.getFilterIndex());"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        refreshType \u003d 0;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private void setDisableButtons() {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        btnDone.setDisable(true);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        btnDelete.setDisable(true);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        btnUpdate.setDisable(true);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private void exitProgram() {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String input \u003d \"bye\";"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                DialogBox.getUserDialog(input, userImage)"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        );"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            Command cmd \u003d duke.getCommand(input);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            duke.saveState(cmd);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            response \u003d Ui.showByeGui();"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            );"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            timer.schedule(exitDuke, new Date(System.currentTimeMillis() + TIMER_DELAY));"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            response \u003d Ui.showErrorMsgGui(e.getMessage());"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            logr.log(Level.WARNING, response, e);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            );"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            response \u003d Ui.showErrorMsgGui(\"     New error, please read console:\")"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    +  Ui.showErrorMsgGui(\"     Duke will continue as per normal.\");"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            logr.log(Level.WARNING, response, e);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            );"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Creates a new window to allow the user to add a new task via user friendly interface."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void createAddWindow() {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/AddWindow.fxml\"));"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            Stage stage \u003d new Stage();"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            fxmlLoader.\u003cAddWindow\u003egetController().setAddWindow(duke, this);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            logr.log(Level.SEVERE, \"Unable to load add window\", e);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Creates a new window to allow the user to add or update notes of existing task via user friendly interface."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void createAddNotesWindow() {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task taskObj \u003d listT.getSelectionModel().getSelectedItem();"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        TaskList items \u003d duke.getTaskList();"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int itemNumber \u003d items.getIndex(taskObj) + ONE;"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String notesDesc \u003d items.get(itemNumber - ONE).getNotes();"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/AddNotesWindow.fxml\"));"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            Stage stage \u003d new Stage();"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            fxmlLoader.\u003cAddNotesWindow\u003egetController().setAddNotesWindow(this, itemNumber, notesDesc);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            logr.log(Level.SEVERE, \"Unable to load add notes window\", e);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Creates a new window to allow the user to view commands under help via user friendly interface."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void createHelpWindow() {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/HelpWindow.fxml\"));"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            Stage stage \u003d new Stage();"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            fxmlLoader.\u003cHelpWindow\u003egetController().setHelpWindow(duke, this);"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            logr.log(Level.SEVERE, \"Unable to load help window\", e);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 2,
      "maxxyx96": 3,
      "-": 77,
      "talesrune": 409
    }
  },
  {
    "path": "src/main/java/duke/command/AddBudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.BudgetList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "//@@author maxxyx96"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "public class AddBudgetCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    protected BudgetList budgetList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    protected Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    protected float amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    protected String remark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    private static final String NO_DESCRIPTION \u003d \"No Description\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    private static final float MAX_BUDGET \u003d 999999;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Adds the amount specified into the budgetList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param budgetList The list of budget that is stored by Duke Manager."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param amount amount to be updated in the user\u0027s budget."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param remark Some description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public AddBudgetCommand(BudgetList budgetList, float amount, String remark) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        this.budgetList \u003d budgetList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Executes the command to add a certain amount to the existing budget."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param ui    To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        ui.showAddBudget(amount, budgetList.getBudget());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        budgetList.addToBudget(Float.toString(amount), remark);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        ui.showBudget(budgetList.getBudget());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Checks if the budget exceeds the limits of what was intended for."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param amount the amount to be checked."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @return Returns true if the amount is within limit, false otherwise."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public boolean isExceedLimit(float amount) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        if (amount \u003c -MAX_BUDGET || amount \u003e MAX_BUDGET) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Executes the command to add a certain amount to the existing budget."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        String beforeBudgetAdd \u003d ui.showAddBudgetGui(amount, budgetList.getBudget());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        if (!isExceedLimit(amount)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            if (remark.equals(\"\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                remark \u003d NO_DESCRIPTION;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            budgetList.addToBudget(Float.toString(amount), remark);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            return beforeBudgetAdd + \"\\n\" + ui.showBudgetGui(budgetList.getBudget()) + \"\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                    + ui.showRemarkGui(remark);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            return ui.showBudgetExceededLimitMessageGui();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * (not used)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param items   The task list that contains a list of tasks."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param ui      To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @throws IOException If there is an error reading the file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "e0318465": 1,
      "maxxyx96": 94,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": " * Represents a command that adds a new task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected Task task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Creates a command with the specified task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param task The task to be added."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that adds the task into task list and outputs the result."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is added successfully."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        ui.showAdd(items);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that adds the task into task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is added successfully."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String str \u003d Ui.showAddGui(items);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "talesrune": 54
    }
  },
  {
    "path": "src/main/java/duke/command/AddContactsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0318465"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.ContactList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.Contacts;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0318465"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0318465"
        },
        "content": " * Represents a command that adds contacts."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0318465"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0318465"
        },
        "content": "//@@author e0318465"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0318465"
        },
        "content": "public class AddContactsCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    protected Contacts contactObj;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    protected ContactList contactList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    protected Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Creates a command with the specified contact."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param contactObj The contacts to be added."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public AddContactsCommand(Contacts contactObj, ContactList contactList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        this.contactObj \u003d contactObj;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        this.contactList \u003d contactList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Adds the user input to a list of contacts."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        contactList.add(contactObj);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        ui.showAddedContact(contactList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that adds the contact into contact list and outputs the result (GUI)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is added successfully."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return A string value to be output to GUI."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        contactList.add(contactObj);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String str \u003d ui.showAddedContactGui(contactList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0318465"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 68
    }
  },
  {
    "path": "src/main/java/duke/command/AddMultipleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.task.PriorityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0318465"
        },
        "content": " * Represents a command that adds multiple tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0318465"
        },
        "content": "//@@author e0318465"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0318465"
        },
        "content": "public class AddMultipleCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    protected ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Creates a command with the specified task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param tasks The array list of tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public AddMultipleCommand(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that adds the tasks into task list and outputs the result."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that they are added successfully."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        for (Task curTask : tasks) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            items.add(curTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        ui.showAdd(items);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that adds the tasks and priority into task list and outputs the result."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param priorities Priority level of task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void execute(TaskList items, PriorityList priorities, Ui ui) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        for (Task curTask : tasks) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            items.add(curTask);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        ui.showAdd(items);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        priorities.addMultiDefaultPriority(tasks.size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that adds the tasks into task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that they are added successfully."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        for (Task curTask : tasks) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            items.add(curTask);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String str \u003d Ui.showAddGui(items);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0318465"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 72,
      "Dou-Maokang": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/duke/command/AddNotesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "talesrune"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": " * Representing a command that adds or updates notes an existing task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": "public class AddNotesCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected String notesDesc;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Creates a command with the specified parameters to add or update notes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param notesDesc The task description to be added or updated."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public AddNotesCommand(String notesDesc, int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.notesDesc \u003d notesDesc;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that adds or updates the notes of the task in task list and outputs the result."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is added or updated successfully."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.get(index).setNotes(notesDesc);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        ui.showAddNotes(items, index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that adds or updates the notes of the task in task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is added or updated successfully."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.get(index).setNotes(notesDesc);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String str \u003d ui.showAddNotesGui(items, index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "talesrune": 64
    }
  },
  {
    "path": "src/main/java/duke/command/BackupCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.storage.BudgetStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.storage.ContactStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.storage.PriorityStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.task.BudgetList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.task.ContactList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.task.PriorityList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "//@@author maxxyx96"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": " * Represents a command that updates the current data file, and shows the folder"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": " * that the file is contained in to the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "public class BackupCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    protected static File filePath \u003d new File(\"./data\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Opens the stored data file in the user\u0027s computer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @throws IOException  If there is an error reading the file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public static void openBackupFolder() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        Desktop desktop \u003d Desktop.getDesktop();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        desktop.open(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Executes a command using task list and outputs the result."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Executes a command using task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param ui To tell the user that the program is exiting."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @throws IOException  If there is an error reading the file."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Executes a command that overwrites existing storage with the all task list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param items Task list that contains a list of tasks."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param ui To tell user that it is executed successfully."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param storage Storage that stores and handles taskLists."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param budgetStorage Storage that stores and handles budgets."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param budgetList Budget list that contains the budget information."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param contactStorage Storage that stores and handles contact list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param contactList Contact list that contains a list of Contacts."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param priorityStorage Storage that stores and handles priority list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param priorityList Priority list that contains a list of Priorities."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @throws IOException If there is an error reading the file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                               BudgetStorage budgetStorage, BudgetList budgetList,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                               ContactStorage contactStorage, ContactList contactList,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                               PriorityStorage priorityStorage, PriorityList priorityList) throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        priorityStorage.write(priorityList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        budgetStorage.write(budgetList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        contactStorage.write(contactList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        storage.write(items);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        openBackupFolder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        ui.showBackupMessage();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "maxxyx96": 98
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.storage.BudgetStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.storage.ContactStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.storage.PriorityStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.task.BudgetList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.ContactList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.task.PriorityList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.task.FilterList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": " * Represents various kinds of commands using an abstract class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command with task list and ui."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public abstract void execute(TaskList items, Ui ui);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Executes a command with task list and ui."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param priorities The list of priorities."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public void execute(TaskList items, PriorityList priorities, Ui ui) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command with task list, contactList and ui."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param contactList The list of contacts."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void execute(TaskList items, ContactList contactList, Ui ui) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    //@@author talesrune"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command with Filter list and ui."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param filterList The list of filtered tasks."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void execute(TaskList items, FilterList filterList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command with task list and ui (GUI)."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public abstract String executeGui(TaskList items, Ui ui);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public String executeGui(TaskList items, ContactList contactList,Ui ui) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    //@@author talesrune"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @throws IOException If there is an error reading the file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public abstract void executeStorage(TaskList items, Ui ui, Storage storage) throws IOException;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated contact list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param contactStorage Contacts stored in storage."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param contactList The list of contacts."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @throws IOException If there is an error reading the file."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, ContactStorage contactStorage,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                                ContactList contactList) throws IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    //@@author maxxyx96"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Executes a command that overwrites existing storage with the all task list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param items Task list that contains a list of tasks."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param ui To tell user that it is executed successfully."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param storage Storage that stores and handles taskLists."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param budgetStorage Storage that stores and handles budgets."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param budgetList Budget list that contains the budget information."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param contactStorage Storage that stores and handles contact list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param contactList Contact list that contains a list of Contacts."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param priorityStorage Storage that stores and handles priority list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param priorityList Priority list that contains a list of Priorities."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @throws IOException If there is an error reading the file."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                               BudgetStorage budgetStorage, BudgetList budgetList,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                               ContactStorage contactStorage, ContactList contactList,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                               PriorityStorage priorityStorage, PriorityList priorityList) throws IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 24,
      "Dou-Maokang": 10,
      "maxxyx96": 27,
      "-": 9,
      "talesrune": 52
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.task.PriorityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": " * Represents a command that deletes a task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Creates a command with the specified index."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param index The index of the task to be deleted."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that deletes the task from the task list and outputs the result."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is deleted successfully."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String deletedStr \u003d \"       \" + items.get(index).toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.remove(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        ui.showDelete(items, deletedStr);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that deletes the task from the task list together with its priority."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is deleted successfully."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param priorities The list of priorities."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void execute(TaskList items, PriorityList priorities, Ui ui) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String deletedStr \u003d \"       \" + items.get(index).toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.remove(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        priorities.remove(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        ui.showDelete(items, deletedStr);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that deletes the task from the task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is deleted successfully."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String deletedStr \u003d \"       \" + items.get(index).toStringGui();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.remove(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String str \u003d Ui.showDeleteGui(items, deletedStr);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 1,
      "Dou-Maokang": 1,
      "-": 5,
      "talesrune": 71
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteContactCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0318465"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.ContactList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0318465"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0318465"
        },
        "content": " * Represents a command that deletes a contact."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0318465"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0318465"
        },
        "content": "public class DeleteContactCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    protected int indexOfContactToDelete;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    protected ContactList contactList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    protected Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    private static final int ONE \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * To delete a contact by the index of the contact."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param indexOfContactToDelete The index of the contact to be deleted."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public DeleteContactCommand(int indexOfContactToDelete, ContactList contactList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        this.indexOfContactToDelete \u003d indexOfContactToDelete;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        this.contactList \u003d contactList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that deletes the contact from the contact list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is deleted successfully."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        if (indexOfContactToDelete \u003e\u003d ZERO \u0026\u0026 indexOfContactToDelete + ONE \u003c\u003d contactList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            String deletedContact \u003d contactList.getAndDisplay(indexOfContactToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            contactList.remove(indexOfContactToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            ui.showContactDeleted(contactList, deletedContact);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        } else if (contactList.size() \u003d\u003d ZERO) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            ui.showErrorMsgGui(\"     No contacts to be deleted!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            ui.showErrorMsg(\"     Invalid index! Please choose 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                    + ((contactList.size() \u003d\u003d ONE) ? \"\" : \"to \" + contactList.size()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that deletes the contact from the contact list and outputs the deleted contact (GUI)."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return String to be output to the user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String str;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        if (indexOfContactToDelete \u003e\u003d ZERO \u0026\u0026 indexOfContactToDelete + ONE \u003c\u003d contactList.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            String deletedContact \u003d contactList.getAndDisplay(indexOfContactToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            contactList.remove(indexOfContactToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            str \u003d ui.showContactDeletedGui(contactList, deletedContact);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        } else if (contactList.size() \u003d\u003d ZERO) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            str \u003d ui.showErrorMsgGui(\"No contacts to be deleted!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            str \u003d ui.showErrorMsgGui(\"Invalid index! Please choose 1 \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                    + ((contactList.size() \u003d\u003d ONE) ? \"\" : \"to \" + contactList.size()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @throws IOException If there is an error reading the file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0318465"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 85
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteNotesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "talesrune"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": " * Representing a command that adds or updates notes an existing task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": "public class DeleteNotesCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Creates a command with the specified parameters to add or update notes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public DeleteNotesCommand(int index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that adds or updates the notes of the task in task list and outputs the result."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is added or updated successfully."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String deletedNotes \u003d items.get(index).getNotes();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.get(index).deleteNotes();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        ui.showDeleteNotes(items, index, deletedNotes);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that adds or updates the notes of the task in task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is added or updated successfully."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String deletedNotes \u003d items.get(index).getNotes();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.get(index).deleteNotes();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String str \u003d ui.showDeleteNotesGui(items, index, deletedNotes);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "talesrune": 64
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": " * Represents a command that marks a task as done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected final int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Creates a command with the specified index."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param index The index of the task to be marked as done."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that marks the task as done in the task list and outputs the result."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is marked as done successfully."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.get(index).setStatusIcon(true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        ui.showDone(items, index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that marks the task as done in the task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is marked as done successfully."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.get(index).setStatusIcon(true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String str \u003d Ui.showDoneGui(items, index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "talesrune": 55
    }
  },
  {
    "path": "src/main/java/duke/command/DuplicateFoundCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0318465"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0318465"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0318465"
        },
        "content": " * Represents a command that states a task is duplicated."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0318465"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0318465"
        },
        "content": "public class DuplicateFoundCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Outputs the alert when duplicated task is detected."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is marked as done successfully."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        ui.showDuplicateMsg();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that marks the task as done in the task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is marked as done successfully."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0318465"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 48
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.storage.BudgetStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.storage.ContactStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.storage.PriorityStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.task.BudgetList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.task.ContactList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.task.PriorityList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0318465"
        },
        "content": " * Represents a command that overwrites the storage with the updated task list before program exits."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a command using task list and outputs the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a command using task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui To tell the user that the program is exiting."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @throws IOException If there is an error reading the file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Executes a command that overwrites existing storage with the all task list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param items Task list that contains a list of tasks."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param ui To tell user that it is executed successfully."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param storage Storage that stores and handles taskLists."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param budgetStorage Storage that stores and handles budgets."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param budgetList Budget list that contains the budget information."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param contactStorage Storage that stores and handles contact list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param contactList Contact list that contains a list of Contacts."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param priorityStorage Storage that stores and handles priority list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param priorityList Priority list that contains a list of Priorities."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @throws IOException If there is an error reading the file."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                               BudgetStorage budgetStorage, BudgetList budgetList,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                               ContactStorage contactStorage, ContactList contactList,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                               PriorityStorage priorityStorage, PriorityList priorityList) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        priorityStorage.write(priorityList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        budgetStorage.write(budgetList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        contactStorage.write(contactList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.write(items);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        ui.showBye();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 3,
      "maxxyx96": 30,
      "-": 44,
      "talesrune": 3
    }
  },
  {
    "path": "src/main/java/duke/command/FilterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "talesrune"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.FilterList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.FixedDuration;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Repeat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": " * Represents a command that filters certain tasks in task list from the type of task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected String taskType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int MINUS_ONE \u003d -1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int ONE \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int TWO \u003d 2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int THREE \u003d 3;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int FOUR \u003d 4;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Creates a command with the specified type of task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param taskType The task\u0027s type to be filtered."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public FilterCommand(String taskType) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that filters tasks in task list and outputs the result."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user the filtered tasks based on the task\u0027s type."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        ui.showFilter(items, taskType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that filters tasks in task list and updates the updated list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param filterList  The task list that contains a list of filtered tasks."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void execute(TaskList items, FilterList filterList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        filterList.clear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        filterList.setFilterIndex(MINUS_ONE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        for (int i \u003d ZERO; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            if (taskType.equals(\"todo\") \u0026\u0026 items.get(i) instanceof Todo) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                filterList.add(items.get(i));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                filterList.setFilterIndex(ONE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else if (taskType.equals(\"deadline\") \u0026\u0026 items.get(i) instanceof Deadline) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                filterList.add(items.get(i));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                filterList.setFilterIndex(TWO);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else if (taskType.equals(\"repeat\") \u0026\u0026 items.get(i) instanceof Repeat) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                filterList.add(items.get(i));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                filterList.setFilterIndex(THREE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else if (taskType.equals(\"fixedduration\") \u0026\u0026 items.get(i) instanceof FixedDuration) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                filterList.add(items.get(i));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                filterList.setFilterIndex(FOUR);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that locates matching tasks in task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user the matching tasks based on the task\u0027s type."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return List of tasks."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String str \u003d ui.showFilterGui(items, taskType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "talesrune": 98
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": " * Represents a command that locates certain tasks in task list using keyword."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected String keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Creates a command with the specified keyword."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param keyword The task to be added."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that locates matching tasks in task list and outputs the result."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user the matching tasks based on the keyword."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        ui.showFind(items, keyword);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that locates matching tasks in task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user the matching tasks based on the keyword."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return List of tasks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String str \u003d Ui.showFindGui(items, keyword);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "talesrune": 53
    }
  },
  {
    "path": "src/main/java/duke/command/FindContactCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0318465"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.ContactList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0318465"
        },
        "content": "//@@author e0318465"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0318465"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0318465"
        },
        "content": " * Represents a command that locates a contact in contact list using keyword."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0318465"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0318465"
        },
        "content": "public class FindContactCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    protected String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    protected Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    protected ContactList contactList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Creates a command with the specified keyword."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param keyword The word to be searched in the list of contacts."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param contactList A list of Contacts."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public FindContactCommand(String keyword, ContactList contactList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        this.contactList \u003d contactList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that locates matching contacts in contact list and outputs the result."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user the matching tasks based on the keyword."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        ui.showFoundContacts(contactList, keyword);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that locates matching tasks in task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user the matching tasks based on the keyword."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return Contacts found that matches keyword."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return ui.showFoundContactsGui(contactList, keyword);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0318465"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 63
    }
  },
  {
    "path": "src/main/java/duke/command/FindTasksByPriorityCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.task.PriorityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "//@@author Dou-Maokang"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": " * Represents a command to find tasks with a target priority."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "public class FindTasksByPriorityCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    protected int targetPriority;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Creates a command with the target priority."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param targetPriority The target priority to be searched."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public FindTasksByPriorityCommand(int targetPriority) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        this.targetPriority \u003d targetPriority;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Executes a command with task list and ui."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Executes a command that locates matching tasks in task list and outputs the result."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param priorityList The list of priorities associated with the task list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param ui To tell the user the matching tasks based on the keyword."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public void execute(TaskList items, PriorityList priorityList, Ui ui) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        ui.showFindTasksByPriority(items, priorityList, targetPriority);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Executes a command that locates matching tasks in task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param ui To tell the user the matching tasks based on the keyword."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @return List of tasks."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    // this method needs to be rewritten"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        // String str \u003d Ui.showFindGui(items, targetPriority);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        // return str;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "Dou-Maokang": 75
    }
  },
  {
    "path": "src/main/java/duke/command/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "//@@author gervaiseang"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": " * Displays full help instructions that list down all functions and commands available."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Showing all help instructions.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * Executes a command that adds the task into task list and outputs the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @param ui To tell the user that it is added successfully."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * Executes a command that adds the task into task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @param ui To tell the user that it is added successfully."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        String str \u003d Ui.helpRequest(items); //replace with events later on"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gervaiseang": 53,
      "e0318465": 1,
      "Dou-Maokang": 1
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": " * Represents a command that lists all tasks stored in task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that gathers all tasks from task list and outputs the result."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user the list of tasks stored in task list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        ui.showTaskList(items);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that gathers all tasks from task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user the list of tasks stored in task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String str \u003d Ui.showTaskListGui(items);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 1,
      "-": 5,
      "talesrune": 42
    }
  },
  {
    "path": "src/main/java/duke/command/ListContactsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0318465"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.ContactList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0318465"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0318465"
        },
        "content": " * Represents a command that lists all contacts stored."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0318465"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0318465"
        },
        "content": "//@@author e0318465"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0318465"
        },
        "content": "public class ListContactsCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    protected ContactList contactList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    protected Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public ListContactsCommand(ContactList contactList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        this.contactList \u003d contactList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that gathers all contacts from contact list and outputs the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user the matching tasks based on the keyword."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        ui.showContactList(contactList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that gathers all contacts from contact list and outputs the list (GUI)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user the list of tasks stored in task list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return List of contacts."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String str \u003d Ui.showContactListGui(contactList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0318465"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 55
    }
  },
  {
    "path": "src/main/java/duke/command/ListPriorityCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.task.PriorityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "//@@author Dou-Maokang"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": " * Represents a command that lists all tasks stored in task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "public class ListPriorityCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Executes a command with task list and ui."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Executes a command that gathers all tasks from task list and outputs the result."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param priorities The list of priorities."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param ui To tell the user the list of tasks stored in task list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public void execute(TaskList items, PriorityList priorities, Ui ui) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        ui.showTaskListWithPriority(items, priorities);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Executes a command that gathers all tasks from task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param ui To tell the user the list of tasks stored in task list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        String str \u003d Ui.showTaskListGui(items);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "Dou-Maokang": 59
    }
  },
  {
    "path": "src/main/java/duke/command/RemindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "//import duke.task.Reminders;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "//@@author gervaiseang"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": " *  Represents a command to set reminders to tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "public class RemindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    protected int taskIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    protected int reminder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    //    protected Reminders reminders;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    public RemindCommand(int task, int remind) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        this.taskIndex \u003d task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        this.reminder \u003d remind;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * Executes a command that sets a reminder of a task in a specified noOfDays."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @param ui To tell the user that it is sets a reminder successfully."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        Task task \u003d items.getTasks().get(taskIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        task.setReminder(reminder);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        ui.showErrorMsg(String.format(\"You will get a reminder for this task in %d days\", reminder));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        ui.showErrorMsg(\" \" + task.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * Executes a command that gathers all tasks from task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @param ui To tell the user the list of tasks stored in task list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @return List of tasks."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        String str \u003d ui.showReminderGui(items, taskIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gervaiseang": 55,
      "-": 7
    }
  },
  {
    "path": "src/main/java/duke/command/ResetBudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.task.BudgetList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "//@@author maxxyx96"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": " * Represents a command to reset the budget amount."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "public class ResetBudgetCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    protected BudgetList budgetList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    protected Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    protected float amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    private static final float MAX_BUDGET \u003d 999999;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Obtaining the parameters of budget from budget corner."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param budgetList The list of budget that is stored by Duke Manager."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param amount The amount to be updated."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public ResetBudgetCommand(BudgetList budgetList, float amount) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        this.budgetList \u003d budgetList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Checks if the budget exceeds the limits of what was intended for."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param amount the amount to be checked."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @return Returns true if the amount is within limit, false otherwise."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public boolean isExceedLimit(float amount) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        if (amount \u003c -MAX_BUDGET || amount \u003e MAX_BUDGET) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Executes a command with task list and ui."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * (not used)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param ui    To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        ui.showResetBudget(budgetList.getBudget());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        budgetList.resetBudget(amount);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        ui.showBudget(budgetList.getBudget());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Executes a command with task list and ui (GUI)."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * (not used)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param ui    To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        if (!isExceedLimit(amount)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            Float previousBudget \u003d budgetList.getBudget();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            budgetList.resetBudget(amount);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            return ui.showResetBudgetGui(previousBudget) + \"\\n\" + ui.showBudgetGui(budgetList.getBudget());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            return ui.showBudgetExceededLimitMessageGui();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * (not used)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param items   The task list that contains a list of tasks."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param ui      To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @throws IOException If there is an error reading the file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "maxxyx96": 93
    }
  },
  {
    "path": "src/main/java/duke/command/SetPriorityCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.task.PriorityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "//@@author Dou-Maokang"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": " * Represents a command to set priorities for every task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "public class SetPriorityCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    protected int taskNum;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    protected int priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Represents a command that set priority for each task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param taskNum The number of the task in the task list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param priority The priority level we want to set."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public SetPriorityCommand(int taskNum, int priority) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Executes a command that adds the task into task list and outputs the result."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param ui To tell the user that it is added successfully."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Executes a command that adds the priority into priority list and outputs the result."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param priorityList List of priorities."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public void execute(TaskList items, PriorityList priorityList, Ui ui) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        priorityList.setPriority(taskNum, priority);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        ui.showSetPriority(items, taskNum, priority);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Executes a command that adds the task into task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param ui To tell the user that it is added successfully."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "Dou-Maokang": 71
    }
  },
  {
    "path": "src/main/java/duke/command/ShowNotesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "talesrune"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": " * Representing a command that adds or updates notes an existing task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": "public class ShowNotesCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Creates a command with the specified parameters to add or update notes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public ShowNotesCommand(int index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that adds or updates the notes of the task in task list and outputs the result."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is added or updated successfully."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        ui.showNotes(items, index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that adds or updates the notes of the task in task list and outputs the result (GUI)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is added or updated successfully."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String str \u003d ui.showNotesGui(items, index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "talesrune": 60
    }
  },
  {
    "path": "src/main/java/duke/command/UpdateCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "talesrune"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Repeat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.FixedDuration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": " * Represents a command that updates an existing task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected String taskDesc;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected String dateDesc;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected String typeDesc;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected int typeOfUpdate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Creates a command with the specified parameters to update."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param taskDesc The task description to be updated."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param dateDesc The date/time to be updated."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param typeDesc The type of task to be updated."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param typeOfUpdate The type of update."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param index The index to be updated."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public UpdateCommand(String taskDesc, String dateDesc, String typeDesc, int typeOfUpdate, int index) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.taskDesc \u003d taskDesc;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.dateDesc \u003d dateDesc;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.typeDesc \u003d typeDesc;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.typeOfUpdate \u003d typeOfUpdate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that updates the task in task list and outputs the result."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is updated successfully."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            if (typeOfUpdate \u003d\u003d 1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                items.get(index).setDescription(taskDesc);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else if (typeOfUpdate \u003d\u003d 2) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                items.get(index).setDateTime(dateDesc);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else if (typeOfUpdate \u003d\u003d 3) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                Task newtaskObj \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                if (typeDesc.equals(\"todo\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (items.get(index) instanceof Todo) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        throw new DukeException(\"     You are updating the same type of task! (Todo)\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        newtaskObj \u003d new Todo(items.get(index).getDescription());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else if (typeDesc.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (items.get(index) instanceof Repeat) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        newtaskObj \u003d new Deadline(items.get(index).getDescription(), items.get(index).getDateTime());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else if (items.get(index) instanceof Deadline) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        throw new DukeException(\"     You are updating the same type of task! (Deadline)\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        newtaskObj \u003d new Deadline(items.get(index).getDescription(), \"01/01/2001 0001\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else if (typeDesc.equals(\"fixedduration\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (items.get(index) instanceof FixedDuration) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        throw new DukeException(\"     You are updating the same type of task! (FixedDuration)\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        newtaskObj \u003d new FixedDuration(items.get(index).getDescription(), 0, \"min\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else if (typeDesc.equals(\"repeat\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (items.get(index) instanceof Deadline) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        newtaskObj \u003d new Repeat(items.get(index).getDescription(), items.get(index).getDateTime());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else if (items.get(index) instanceof Repeat) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        throw new DukeException(\"     You are updating the same type of task! (Repeat)\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        newtaskObj \u003d new Repeat(items.get(index).getDescription(), \"01/01/2001 0001\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                items.setTaskType(index, newtaskObj);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            ui.showUpdate(items, index);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            ui.showErrorMsg(e.getMessage());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that updates the task in task list and outputs the result."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is updated successfully."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            if (typeOfUpdate \u003d\u003d 1) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                items.get(index).setDescription(taskDesc);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else if (typeOfUpdate \u003d\u003d 2) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                items.get(index).setDateTime(dateDesc);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else if (typeOfUpdate \u003d\u003d 3) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                Task newtaskObj \u003d null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                if (typeDesc.equals(\"todo\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (items.get(index) instanceof Todo) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        return \"     (\u003e_\u003c) OOPS!!! You are updating the same type of task! (Todo)\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        newtaskObj \u003d new Todo(items.get(index).getDescription());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else if (typeDesc.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (items.get(index) instanceof Repeat) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        newtaskObj \u003d new Deadline(items.get(index).getDescription(), items.get(index).getDateTime());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else if (items.get(index) instanceof Deadline) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        return \"     (\u003e_\u003c) OOPS!!! You are updating the same type of task! (Deadline)\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        newtaskObj \u003d new Deadline(items.get(index).getDescription(), \"01/01/2001 0001\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else if (typeDesc.equals(\"fixedduration\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (items.get(index) instanceof FixedDuration) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        return \"     (\u003e_\u003c) OOPS!!! You are updating the same type of task! (FixedDuration)\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        newtaskObj \u003d new FixedDuration(items.get(index).getDescription(), 0, \"min\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else if (typeDesc.equals(\"repeat\")) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (items.get(index) instanceof Deadline) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        newtaskObj \u003d new Repeat(items.get(index).getDescription(), items.get(index).getDateTime());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else if (items.get(index) instanceof Repeat) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        return \"     (\u003e_\u003c) OOPS!!! You are updating the same type of task! (Repeat)\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        newtaskObj \u003d new Repeat(items.get(index).getDescription(), \"01/01/2001 0001\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                items.setTaskType(index, newtaskObj);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            ui.showErrorMsg(e.getMessage());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String str \u003d Ui.showUpdateGui(items, index);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * (Not in use)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param ui To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "talesrune": 165
    }
  },
  {
    "path": "src/main/java/duke/command/ViewBudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.BudgetList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "//@@author maxxyx96"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": " * Represents a command to show the budget."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "public class ViewBudgetCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    protected Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    protected BudgetList budgetList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Command that allows the user to view the budget that he/she currently has."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param budgetList The list of budget that is stored by Duke Manager."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public ViewBudgetCommand(BudgetList budgetList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        this.budgetList \u003d budgetList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Executes a command with task list and ui."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * (not used)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param ui    To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public void execute(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        ui.showBudget(budgetList.getBudget());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Executes a command with task list and ui (GUI)."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * (not used)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param ui    To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @return String to be outputted to the user."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public String executeGui(TaskList items, Ui ui) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        return ui.showBudgetGui(budgetList.getBudget()) + \"\\n\" + ui.showBudgetListGui(budgetList.getStringList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Executes a command that overwrites existing storage with the updated task list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * (not used)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param items   The task list that contains a list of tasks."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param ui      To tell the user that it is executed successfully."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param storage The storage to be overwritten."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @throws IOException If there is an error reading the file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public void executeStorage(TaskList items, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "e0318465": 1,
      "maxxyx96": 67
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.command.AddNotesCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.command.DeleteNotesCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.command.ShowNotesCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.command.FilterCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.FindTasksByPriorityCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.DuplicateFoundCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.UpdateCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.RemindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.BackupCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.ListPriorityCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.AddMultipleCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.SetPriorityCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.AddBudgetCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.DeleteContactCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.ListContactsCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.AddContactsCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.ResetBudgetCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.ViewBudgetCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.command.FindContactCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Repeat;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.FixedDuration;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.DetectDuplicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.Contacts;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.BudgetList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.ContactList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parser that breaks down user input into commands."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int ONE \u003d 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int MINUS_ONE \u003d -1;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int TWO \u003d 2;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int THREE \u003d 3;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int FOUR \u003d 4;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    private static final int SIX \u003d 6;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final Logger logr \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    //@@author maxxyx96"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Trims the whitespaces of an input."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param input input to be trimmed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @return Returns the trimmed input."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    private static String trim(String input) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        return input.trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Checks whether the string input can be split by a set string."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param input the input to test if it is splittable."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param splitWith the characters to detect splitting."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @return returns true if it can be split, false otherwise."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    private static boolean isSplittable(String input, String splitWith) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            input \u003d input.split(splitWith, 2)[1];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command based on the user input."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence User input."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param budgetList The list that contains a list of budget."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param contactList The list of Contacts."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Command to be executed afterwards."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception  If there is an error interpreting the user input."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public static Command parse(String sentence, TaskList items, BudgetList budgetList,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                                ContactList contactList) throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] arr \u003d sentence.split(\" \");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String taskDesc \u003d \"\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String dateDesc \u003d \"\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean getDate \u003d false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (sentence.equals(\"list\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        } else if (sentence.equals(\"priority\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            return new ListPriorityCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (arr.length \u003e ZERO \u0026\u0026 (arr[ZERO].equals(\"done\")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                || arr[ZERO].equals(\"delete\") || arr[ZERO].equals(\"del\"))) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            if (arr.length \u003d\u003d ONE) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The task number cannot be empty.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                int tasknum \u003d Integer.parseInt(arr[ONE]) - ONE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                if (tasknum \u003c ZERO || tasknum \u003e\u003d items.size()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"     (\u003e_\u003c) OOPS!!! Invalid task number.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (arr[ZERO].equals(\"done\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                        if (items.get(tasknum).toString().contains(\"[A]\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                            String tempString \u003d items.get(tasknum).toString();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                            tempString \u003d tempString.split(\": \", TWO)[ONE];"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                            tempString \u003d tempString.split(\"\\\\)\")[ZERO];"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                            if (!items.isTaskDone(tempString)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                                throw new DukeException(\"     (\u003e_\u003c) OOPS!! Task requirements has yet to be completed!\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                        + \" please complete task [\" + tempString + \"] before marking this as done!\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                        return new DoneCommand(tasknum);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else { //delete"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                        return new DeleteCommand(tasknum);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } //@@author talesrune"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (arr.length \u003e ZERO \u0026\u0026 arr[ZERO].equals(\"find\")) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            if (arr.length \u003d\u003d ONE) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The keyword cannot be empty.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                if (arr[ONE].trim().isEmpty()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The keyword cannot be empty.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    return new FindCommand(arr[ONE]);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (arr.length \u003e ZERO \u0026\u0026 arr[ZERO].equals(\"filter\")) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            if (arr.length \u003d\u003d ONE) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The task\u0027s type cannot be empty.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                if (arr[ONE].trim().isEmpty()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The task\u0027s type cannot be empty.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    return new FilterCommand(arr[ONE]);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (arr.length \u003e ZERO \u0026\u0026 arr[ZERO].equals(\"notes\")) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            if (arr.length \u003d\u003d ONE) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The task number cannot be empty.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                int tasknum \u003d Integer.parseInt(arr[ONE]) - ONE;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                if (tasknum \u003c ZERO || tasknum \u003e\u003d items.size()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    throw new DukeException(\"     (\u003e_\u003c) OOPS!!! Invalid task number.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else if (arr.length \u003c THREE) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    throw new DukeException(\"     (\u003e_\u003c) OOPS!!! Insufficient parameters. \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                            + \"Format: notes \u003ctasknum\u003e \u003ctype\u003e \u003cnotes description\u003e\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    int typeOfNotes \u003d MINUS_ONE;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    String notesDesc \u003d \"\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    for (int i \u003d TWO; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        if (i \u003d\u003d TWO) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                            if (arr[i].trim().isEmpty()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    || (!arr[i].equals(\"/add\") \u0026\u0026 !arr[i].equals(\"/delete\")"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    \u0026\u0026 !arr[i].equals(\"/show\"))) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! Unable to find either \""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                        + \"/add, /delete, or /show.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                if (arr[i].equals(\"/add\")) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    typeOfNotes \u003d ONE;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                } else if (arr[i].equals(\"/delete\")) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    typeOfNotes \u003d TWO;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    break;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                } else {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    typeOfNotes \u003d THREE;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    break;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                            notesDesc +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    notesDesc \u003d notesDesc.trim();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (typeOfNotes \u003d\u003d THREE) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        return new ShowNotesCommand(tasknum);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else if (typeOfNotes \u003d\u003d TWO) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        return new DeleteNotesCommand(tasknum);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else if (typeOfNotes \u003d\u003d ONE \u0026\u0026 notesDesc.isEmpty()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The notes description of a \""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                + arr[ZERO] + \" cannot be empty.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else if (typeOfNotes !\u003d MINUS_ONE) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        return new AddNotesCommand(notesDesc,tasknum);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        throw new DukeException(\"     (\u003e_\u003c) OOPS!!! There is something wrong \""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                + \" when trying to add notes\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            }   //@@author"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (arr.length \u003e ZERO \u0026\u0026 arr[ZERO].equals(\"todo\")) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            String[] getDescription \u003d sentence.split(\" \", TWO);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            DetectDuplicate detectDuplicate \u003d new DetectDuplicate(items);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            if (detectDuplicate.isDuplicate(getDescription[ZERO], getDescription[ONE])) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                return new DuplicateFoundCommand();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                for (int i \u003d ONE; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    taskDesc +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                taskDesc \u003d taskDesc.trim();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                if (taskDesc.isEmpty()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    Task taskObj \u003d new Todo(taskDesc);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    return new AddCommand(taskObj);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (arr.length \u003e ZERO \u0026\u0026 (arr[ZERO].equals(\"deadline\")"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                || arr[ZERO].equals(\"dl\"))) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            for (int i \u003d ONE; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                if ((arr[i].trim().isEmpty() || !arr[i].substring(ZERO, ONE).equals(\"/\")) \u0026\u0026 !getDate) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskDesc +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (!getDate) { //detect \"/\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                        getDate \u003d true;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                        dateDesc +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            taskDesc \u003d taskDesc.trim();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            dateDesc \u003d dateDesc.trim();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            if (taskDesc.isEmpty()) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The description of a \" + arr[ZERO] + \" cannot be empty.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (dateDesc.isEmpty()) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The description of date/time for \""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        + arr[ZERO] + \" cannot be empty.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "                Task taskObj;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                taskObj \u003d new Deadline(taskDesc, dateDesc);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                for (int i \u003d ZERO; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (taskObj.getDateTime().equals(items.get(i).getDateTime()) \u0026\u0026 !items.get(i).isDone()) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "                        throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The date/time for \""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                + arr[ZERO] + \" clashes with \" + items.get(i).toString()"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "                                + \"\\n     Please choose another date/time! Or mark the above task as Done first!\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "                return new AddCommand(taskObj);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (arr.length \u003e ZERO \u0026\u0026 (arr[ZERO].equals(\"repeat\") || arr[ZERO].equals(\"rep\"))) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            //repeat \u003ctask\u003e /from \u003cdate time\u003e /for 3 \u003cday/week/month\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            for (int i \u003d ONE; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                if ((arr[i].trim().isEmpty() || !arr[i].substring(ZERO, ONE).equals(\"/\")) \u0026\u0026 !getDate) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskDesc +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (!getDate) { //detect \"/\""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "                        getDate \u003d true;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "                        dateDesc +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            taskDesc \u003d taskDesc.trim();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            dateDesc \u003d dateDesc.trim();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            if (taskDesc.isEmpty()) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The description of a \" + arr[ZERO] + \" cannot be empty.\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (dateDesc.isEmpty()) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The description of date/time for \""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        + arr[ZERO] + \" cannot be empty.\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                String repeatSettings;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "                int repeatTimes;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "                String repeatPeriod;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    repeatSettings \u003d dateDesc.split(\"/for \")[ONE];"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "                    repeatTimes \u003d Integer.parseInt(repeatSettings.replaceAll(\"[\\\\D]\", \"\"));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    repeatPeriod \u003d repeatSettings.split(repeatTimes + \" \")[ONE];"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    logr.log(Level.WARNING,\"Format is in: repeat \u003ctask\u003e /from \u003cdate time\u003e \""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                            + \"/for \u003crepeat times\u003e \u003cdays/weeks\u003e\", e);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"Format is in: repeat \u003ctask\u003e /from \u003cdate time\u003e \""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"/for \u003crepeat times\u003e \u003cdays/weeks\u003e\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "                ArrayList\u003cTask\u003e repeatList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                String timeDesc \u003d dateDesc.split(\" \", THREE)[ONE];"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                for (int i \u003d ZERO; i \u003c repeatTimes; i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "                    Task taskObj;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskObj \u003d new Repeat(taskDesc, dateDesc);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "                    dateDesc \u003d DateParser.add(dateDesc, repeatPeriod) + \" \" + timeDesc;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "                    repeatList.add(taskObj);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    for (int j \u003d ZERO; j \u003c items.size(); j++) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        if (taskObj.getDateTime().equals(items.get(j).getDateTime()) \u0026\u0026 !items.get(j).isDone()) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "                            throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The date/time for \""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    + arr[ZERO] + \" clashes with \" + items.get(j).toString()"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "                                    + \"\\n     Please choose another date/time! Or mark the above task as Done first!\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "                return new AddMultipleCommand(repeatList);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (arr.length \u003e ZERO \u0026\u0026 (arr[ZERO].equals(\"fixedduration\") || arr[ZERO].equals(\"fd\"))) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "            //fixedduration \u003ctask\u003e /for \u003cduration\u003e \u003cunit\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "            String description \u003d \"\";"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "            String durDesc;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "            int duration;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            String unit;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            for (int i \u003d ONE; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "                description +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            taskDesc \u003d description.split(\" /for \")[ZERO].trim();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            durDesc \u003d description.split(\" /for \")[ONE].trim();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            DetectDuplicate detectDuplicate \u003d new DetectDuplicate(items);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "            if (taskDesc.isEmpty()) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The description of a \" + arr[ZERO] + \" cannot be empty.\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (durDesc.isEmpty()) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The description of duration for \""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        + arr[ZERO] + \" cannot be empty.\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else if (detectDuplicate.isDuplicate(arr[ZERO], taskDesc)) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                return new DuplicateFoundCommand();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    duration \u003d Integer.parseInt(durDesc.split(\" \")[ZERO].trim());"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    logr.log(Level.WARNING,\"Format is in: fixedduration \u003ctask\u003e /for \u003cduration\u003e \u003cunit\u003e\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"Format is in: fixedduration \u003ctask\u003e /for \u003cduration\u003e \u003cunit\u003e\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                unit \u003d durDesc.split(\" \")[ONE].trim();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                if (unit.isEmpty() || (!unit.toLowerCase().contains(\"min\") \u0026\u0026 ! unit.toLowerCase().contains(\"h\"))) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"Format is in: fixedduration \u003ctask\u003e /for \u003cduration\u003e \u003cunit\u003e\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    if (unit.contains(\"min\")) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                        unit \u003d (duration \u003e ONE) ? \"minutes\" : \"minute\";"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    } else if (unit.contains(\"h\")) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                        unit \u003d (duration \u003e ONE) ? \"hours\" : \"hour\";"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "                    FixedDuration fixedDuration \u003d new FixedDuration(taskDesc, duration, unit);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "                    return new AddCommand(fixedDuration);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        } else if (arr.length \u003e ZERO \u0026\u0026 (arr[ZERO].equals(\"setpriority\") || arr[ZERO].equals(\"sp\"))) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            //fixedduration \u003ctaskNum\u003e \u003cpriority\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            String description \u003d \"\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            int taskNum;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            int priority;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            for (int i \u003d ONE; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                description +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            String[] holder \u003d description.split(\" \");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            if (holder.length \u003c TWO) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! Format is in: setpriority \u003ctaskNum\u003e \u003cPriority\u003e\");"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    taskNum \u003d Integer.parseInt(holder[ZERO].trim());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    logr.log(Level.WARNING,\"The task number must be an integer\");"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    throw new DukeException(\"The task number must be an integer\");"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                if (taskNum \u003c\u003d ZERO || taskNum \u003e items.size()) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    throw new DukeException(\"     (\u003e_\u003c) OOPS!!! Invalid task number.\");"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    priority \u003d Integer.parseInt(holder[ONE].trim());"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    logr.log(Level.WARNING,\"The priority must be an integer\");"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    throw new DukeException(\"The priority must be an integer\");"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                if (!((priority \u003e ZERO) \u0026\u0026 (priority \u003c SIX))) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    throw new DukeException(\"     (\u003e_\u003c) OOPS!!! Invalid priority! (1 - High ~ 5 - Low).\");"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                return new SetPriorityCommand(taskNum, priority);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        } else if (arr.length \u003e ZERO \u0026\u0026 arr[ZERO].equals(\"findpriority\")) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            if (arr.length \u003d\u003d ONE) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The target priority cannot be empty.\");"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                int target;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                if (arr[ONE].trim().isEmpty()) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The target priority cannot be empty.\");"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                        target \u003d Integer.parseInt(arr[ONE]);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    } catch (Exception e) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        logr.log(Level.WARNING,\"The target priority must be an integer\");"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                        throw new DukeException(\"The target priority must be an integer\");"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                    if (!((target \u003e ZERO) \u0026\u0026 (target \u003c SIX))) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                        throw new DukeException(\"     (\u003e_\u003c) OOPS!!! Invalid target priority! (1 ~ 5).\");"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    return new FindTasksByPriorityCommand(target);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (arr.length \u003e ZERO \u0026\u0026 arr[ZERO].equals(\"remind\")) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            //remind \u003ctaskNumber\u003e /in \u003chowManyDays\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            String afterTaskDesc \u003d \"\";"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            boolean detectBackSlash \u003d false;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            int duration;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            for (int i \u003d ONE; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                if ((arr[i].trim().isEmpty() || !arr[i].substring(ZERO, ONE).equals(\"/\")) \u0026\u0026 !detectBackSlash) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                    taskDesc +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                    if (!detectBackSlash) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                        detectBackSlash \u003d true;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                        afterTaskDesc +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            taskDesc \u003d taskDesc.trim();"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            afterTaskDesc \u003d afterTaskDesc.trim();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            if (taskDesc.isEmpty()) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The description of a \" + arr[ZERO] + \" cannot be empty.\");"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            } else if (afterTaskDesc.isEmpty()) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The description for \""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                        + arr[ZERO] + \" cannot be empty.\");"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                duration \u003d Integer.parseInt(taskDesc.split(\"/in\", TWO)[ZERO].trim()) - ONE;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                int howManyDays \u003d Integer.parseInt(afterTaskDesc);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                return new RemindCommand(duration, howManyDays);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            }  //@@author talesrune"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (arr.length \u003e ZERO \u0026\u0026 (arr[ZERO].equals(\"update\"))) {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            if (arr.length \u003d\u003d ONE) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The task number cannot be empty.\");"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                int tasknum \u003d Integer.parseInt(arr[ONE]) - ONE;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                if (tasknum \u003c ZERO || tasknum \u003e\u003d items.size()) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    throw new DukeException(\"     (\u003e_\u003c) OOPS!!! Invalid task number.\");"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else if (arr.length \u003c FOUR) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    throw new DukeException(\"     (\u003e_\u003c) OOPS!!! Insufficient parameters. \""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                            + \"Format: update \u003ctasknum\u003e \u003ctype\u003e \u003cdesc or date\u003e\");"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    int typeOfUpdate \u003d MINUS_ONE;"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    String typeDesc \u003d \"\";"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    for (int i \u003d TWO; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        if (i \u003d\u003d TWO) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                            if (arr[i].trim().isEmpty()"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    || (!arr[i].equals(\"/desc\")"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    \u0026\u0026 !arr[i].equals(\"/date\")"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    \u0026\u0026 !arr[i].equals(\"/type\"))) {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! Unable to find either \""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                        + \"/date, /desc, or /type.\");"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                if (arr[i].equals(\"/desc\")) {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    typeOfUpdate \u003d ONE;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                } else if (arr[i].equals(\"/date\")) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    typeOfUpdate \u003d TWO;"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                } else { //equals /type"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    typeOfUpdate \u003d THREE;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                            if (typeOfUpdate \u003d\u003d ONE) {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                taskDesc +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                            } else if (typeOfUpdate \u003d\u003d TWO) {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                dateDesc +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                            } else { //type of update is number 3"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                typeDesc +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    taskDesc \u003d taskDesc.trim();"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    dateDesc \u003d dateDesc.trim();"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    typeDesc \u003d typeDesc.trim();"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (typeOfUpdate \u003d\u003d ONE \u0026\u0026 taskDesc.isEmpty()) {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The description of a \""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                + arr[ZERO] + \" cannot be empty.\");"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else if (typeOfUpdate \u003d\u003d TWO \u0026\u0026 dateDesc.isEmpty()) {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The description of date/time for \""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                + arr[ZERO] + \" cannot be empty.\");"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else if (typeOfUpdate \u003d\u003d THREE \u0026\u0026 typeDesc.isEmpty()) {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The description of type for \""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                + arr[ZERO] + \" cannot be empty.\");"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else if (typeOfUpdate !\u003d MINUS_ONE) {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        return new UpdateCommand(taskDesc, dateDesc, typeDesc, typeOfUpdate, tasknum);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        throw new DukeException(\"     (\u003e_\u003c) OOPS!!! There is something wrong \""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                + \" when trying to update\");"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                }"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            }   //@@author e0318465"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        } else if (arr.length \u003e ZERO \u0026\u0026 (arr[ZERO].equals(\"addcontact\") || arr[ZERO].equals(\"ac\"))) {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            String[] userInput \u003d sentence.split(\" \",TWO);"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            String[] contactDetails \u003d userInput[ONE].split(\",\");"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                Contacts contactObj \u003d new Contacts(contactDetails[ZERO], contactDetails[ONE],"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                                          contactDetails[TWO], contactDetails[THREE]);"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                return new AddContactsCommand(contactObj, contactList);"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                logr.log(Level.WARNING,\"Format is in: addcontact \u003cname\u003e, \u003ccontact\u003e, \u003cemail\u003e, \u003coffice\u003e\",e);"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                throw new DukeException(\"Format is in: addcontact \u003cname\u003e, \u003ccontact\u003e, \u003cemail\u003e, \u003coffice\u003e\");"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        } else if (sentence.equals(\"listcontacts\") || sentence.equals(\"lc\")) {"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            return new ListContactsCommand(contactList);"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        } else if (arr.length \u003e ZERO \u0026\u0026 (arr[ZERO].equals(\"deletecontact\") || arr[ZERO].equals(\"dc\"))) {"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            if (arr.length \u003d\u003d ONE) {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The contact index cannot be empty.\");"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                    Integer.parseInt(arr[ONE]); //Catches for non integer value"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                    return new DeleteContactCommand(Integer.parseInt(arr[ONE]) - ONE, contactList);"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                    throw new DukeException(\"     Input is not an integer value!\");"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            }"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        } else if (arr.length \u003e ZERO \u0026\u0026 arr[ZERO].equals(\"findcontact\") || arr[ZERO].equalsIgnoreCase(\"fc\")) {"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            String[] keyword \u003d sentence.split(\" \", TWO);"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            if (arr.length \u003d\u003d ONE || keyword[ONE].trim().isEmpty() || keyword[ONE].trim().equals(\",\")) {"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OOPS!!! The keyword cannot be empty.\");"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                return new FindContactCommand(keyword[ONE].toLowerCase(), contactList);"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            }"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            //@@author"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        } else if (arr.length \u003e ZERO \u0026\u0026 arr[ZERO].equals(\"budget\")) { //@@author maxxyx96"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                String budgetCommandString \u003d sentence.split(\" \", TWO)[ONE];"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                throw new DukeException(\"     (\u003e_\u003c) OoPS!!! Invalid Budget Command. \""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                                        + \"\\nIt should be: budget \u003cnew/add/minus/reset/view\u003e \u003camount\u003e \");"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            String budgetCommandString \u003d sentence.split(\" \", TWO)[ONE];"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            budgetCommandString \u003d trim(budgetCommandString);"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            String budgetCommand \u003d budgetCommandString.split(\" \", TWO)[ZERO];"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            budgetCommand \u003d trim(budgetCommand);"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            if (budgetCommand.equals(\"view\")) {"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                return new ViewBudgetCommand(budgetList);"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                    String budgetRemark \u003d EMPTY_STRING;"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                    String budgetAmount \u003d budgetCommandString.split(\" \", TWO)[ONE];"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                    if (isSplittable(budgetAmount, \" \")) {"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                        budgetRemark \u003d budgetAmount.split(\" \", TWO)[ONE];"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                        budgetAmount \u003d budgetAmount.split(\" \")[ZERO];"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                    if (budgetCommand.equals(\"new\") || budgetCommand.equals(\"reset\")) {"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                        return new ResetBudgetCommand(budgetList, Float.parseFloat(budgetAmount));"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                    } else if (budgetCommand.equals(\"add\") || budgetCommand.equals(\"+\")) {"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                        return new AddBudgetCommand(budgetList, Float.parseFloat(budgetAmount), budgetRemark);"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                    } else if (budgetCommand.equals(\"minus\") || budgetCommand.equals(\"-\")) {"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                        return new AddBudgetCommand(budgetList, -Float.parseFloat(budgetAmount), budgetRemark);"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                        throw new DukeException(\"     (\u003e_\u003c) OoPS!!! Invalid Budget Command. \""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                                                + \"\\n     It should be more like: \""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                                                + \"\\n     budget \u003c+/-/reset/view\u003e \u003camount\u003e \u003cdesc(Optional)\u003e\");"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                } catch (Exception p) {"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                    throw new DukeException(\"     (\u003e_\u003c) OoPS!!! Invalid Budget Command. \""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                            + \"\\n     It should be more like: \""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                            + \"\\n     budget \u003c+/-/reset/view\u003e \u003camount\u003e \u003cdesc(Optional)\u003e\");"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                }"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        } else if (sentence.equals(\"backup\")) {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            return new BackupCommand(); //@@author"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        } else if (sentence.equals(\"bye\") || sentence.equals(\"exit\")) {"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"     (\u003e_\u003c) OoPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gervaiseang": 25,
      "e0318465": 54,
      "Dou-Maokang": 71,
      "maxxyx96": 69,
      "-": 142,
      "talesrune": 215
    }
  },
  {
    "path": "src/main/java/duke/storage/BudgetStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.task.BudgetList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "//@@author maxxyx96"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "public class BudgetStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    //protected String filePath \u003d \"./\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    protected String filePath \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    String storageClassPath \u003d this.getClass().getProtectionDomain().getCodeSource().getLocation().getPath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Creates a storage with path pointing to the file in the system."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param filePathForBudget The location of the file in computer."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public BudgetStorage(String filePathForBudget) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        int numberofSlash;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        storageClassPath \u003d storageClassPath.replaceAll(\"%20\", \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        String[] pathSplitter \u003d storageClassPath.split(\"/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        numberofSlash \u003d pathSplitter.length - 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        for (String directory: pathSplitter) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            if (numberofSlash \u003d\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            } else if (!directory.isEmpty() \u0026\u0026 !directory.equals(\"build\") \u0026\u0026 !directory.equals(\"out\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                this.filePath +\u003d directory + \"/\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            } else if (directory.equals(\"build\") || directory.equals(\"out\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            numberofSlash--;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        this.filePath +\u003d filePathForBudget;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Checks if a variable is convertable to a float value."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param amount the string to be converted to a float value."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @return returns true if it can be converted to a float value, false otherwise."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public boolean isFloat(String amount) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            Float.parseFloat(amount.trim());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Checks if a variable is convertable to what we are reading in."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param line the string to be checked"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @return returns true if it is convertable, false otherwise."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public boolean isFormatCorrect(String line) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            String[] lineSplit \u003d line.split(\":\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            Float.parseFloat(lineSplit[0].trim());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Converts a string value to a float value.(unused)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param amount the string to be converted into a float value."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @return the float equivalence of the string."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public float convertToFloat(String amount) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        return Float.parseFloat(amount.trim());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Updates the task list from reading the contents of the text file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @return ArrayList to update the Expenses."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @throws IOException  If there is an error reading the text file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public ArrayList\u003cString\u003e read() throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        ArrayList\u003cString\u003e items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        BufferedReader bufferedReader \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        String budget \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            if (isFloat(budget)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                items.add(budget);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            items.add(\"0\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        while ((budget \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            if (isFormatCorrect(budget)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                items.add(budget);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        bufferedReader.close();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        return items;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Updates the text file with data that is utilised to calculate the budget."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param budgetList The list of budget-related tasks."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @throws IOException If there is an error writing to the text file."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public void write(BudgetList budgetList) throws IOException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        String fileContent \u003d \"\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        for (int i \u003d 0; i \u003c budgetList.getSize(); i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            fileContent +\u003d budgetList.getList().get(i) + \"\\n\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(filePath));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        writer.write(fileContent);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "maxxyx96": 126,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/storage/ContactStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0318465"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.ContactList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.Contacts;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0318465"
        },
        "content": "//@@author e0318465"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0318465"
        },
        "content": "public class ContactStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    //protected String filePathForContacts \u003d \"./\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    protected String filePathForContacts \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    String storageClassPath \u003d this.getClass().getProtectionDomain().getCodeSource().getLocation().getPath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    private static final int ONE \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    private static final int TWO \u003d 2;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    private static final int THREE \u003d 3;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    private static final int FOUR \u003d 4;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Creates a storage with a specified filePathForContacts."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param filePathForContacts The location of the contacts text file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public ContactStorage(String filePathForContacts) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        int numberOfSlash;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        storageClassPath \u003d storageClassPath.replaceAll(\"%20\", \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String[] pathSplitter \u003d storageClassPath.split(\"/\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        numberOfSlash \u003d pathSplitter.length - ONE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        for (String directory: pathSplitter) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            if (numberOfSlash \u003d\u003d ZERO) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            } else if (!directory.isEmpty() \u0026\u0026 !directory.equals(\"build\") \u0026\u0026 !directory.equals(\"out\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                this.filePathForContacts +\u003d directory + \"/\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            } else if (directory.equals(\"build\") || directory.equals(\"out\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            numberOfSlash--;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        this.filePathForContacts +\u003d filePathForContacts;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Updates the contact list from reading the contents of the contacts text file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return ArrayList to update the contactList."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @throws IOException  If there is an error reading the text file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public ArrayList\u003cContacts\u003e read() throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        ArrayList\u003cContacts\u003e contacts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        File file \u003d new File(filePathForContacts);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String st;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String contact;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String email;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String office;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        while ((st \u003d br.readLine()) !\u003d null) {  //name + \",\" + contact + \",\" + email + \",\" + office"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            String[] contactDetails \u003d st.split(\",\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            if (contactDetails.length !\u003d FOUR) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                ui.showErrorMsg(\"     Not all contact details entered, please leave a space for empty fields.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                name \u003d contactDetails[ZERO];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                contact \u003d contactDetails[ONE];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                email \u003d contactDetails[TWO];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                office \u003d contactDetails[THREE];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                Contacts contactObj \u003d new Contacts(name, contact, email, office);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                contacts.add(contactObj);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        br.close();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return contacts;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Updates the text file from interpreting the contacts in contactList."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param contacts The contact list that contains a list of contacts."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @throws IOException If there is an error writing the text file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void write(ContactList contacts) throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String fileContent \u003d \"\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        for (int i \u003d ZERO; i \u003c contacts.size(); i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            fileContent +\u003d contacts.get(i).toFile() + \"\\n\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(filePathForContacts));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        writer.write(fileContent);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0318465"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 100
    }
  },
  {
    "path": "src/main/java/duke/storage/PriorityStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.task.PriorityList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "//@@author Dou-Maokang"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": " * Representing a class to store the list of priorities."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "public class PriorityStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    //protected String filePath \u003d \"./\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    protected String filePath \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    String storageClassPath \u003d this.getClass().getProtectionDomain().getCodeSource().getLocation().getPath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Creates a storage with a specified filePath."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param filePath The location of the text file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public PriorityStorage(String filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        int numberofSlash;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        storageClassPath \u003d storageClassPath.replaceAll(\"%20\", \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        String[] pathSplitter \u003d storageClassPath.split(\"/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        numberofSlash \u003d pathSplitter.length - 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        for (String directory: pathSplitter) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            if (numberofSlash \u003d\u003d ZERO) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            } else if (!directory.isEmpty() \u0026\u0026 !directory.equals(\"build\") \u0026\u0026 !directory.equals(\"out\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                this.filePath +\u003d directory + \"/\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            } else if (directory.equals(\"build\") || directory.equals(\"out\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            numberofSlash--;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        this.filePath +\u003d filePath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Updates the task list from reading the contents of the text file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @return ArrayList to update the priorityList."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @throws IOException  If there is an error reading the text file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public ArrayList\u003cInteger\u003e read() throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        ArrayList\u003cInteger\u003e items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        String priority;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        while ((priority \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            items.add(Integer.parseInt(priority.trim()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        br.close();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        return items;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Updates the text file from interpreting the priorities of the priorityList."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param priorityList The list of priorities associated with each task."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @throws IOException  If there is an error writing the text file."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public void write(PriorityList priorityList) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        String fileContent \u003d \"\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        for (int i \u003d ZERO; i \u003c priorityList.getSize(); i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            fileContent +\u003d priorityList.getList().get(i) + \"\\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(filePath));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        writer.write(fileContent);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "e0318465": 6,
      "Dou-Maokang": 78
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Repeat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.FixedDuration;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": " * Represents a storage to store the task list into a text file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected String filePath \u003d \"\";   //27-28, 40-47"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    String storageClassPath \u003d this.getClass().getProtectionDomain().getCodeSource().getLocation().getPath();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int ONE \u003d 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int TWO \u003d 2;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int THREE \u003d 3;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int FOUR \u003d 4;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final Logger logr \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Creates a storage with a specified filePath."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param filePath The location of the text file for tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int numberofSlash;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        storageClassPath \u003d storageClassPath.replaceAll(\"%20\", \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String[] pathSplitter \u003d storageClassPath.split(\"/\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        numberofSlash \u003d pathSplitter.length - ONE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        for (String directory: pathSplitter) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            if (numberofSlash \u003d\u003d ZERO) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else if (!directory.isEmpty() \u0026\u0026 !directory.equals(\"build\") \u0026\u0026 !directory.equals(\"out\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                this.filePath +\u003d directory + \"/\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else if (directory.equals(\"build\") || directory.equals(\"out\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            numberofSlash--;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.filePath +\u003d filePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Updates the task list from reading the contents of the text file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return ArrayList to update the task list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @throws IOException  If there is an error reading the text file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public ArrayList\u003cTask\u003e read() throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        ArrayList\u003cTask\u003e items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String st;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String taskDesc;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String dateDesc;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String durDesc;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String notesDesc;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        while ((st \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            String[] commandList \u003d st.split(\"\\\\|\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                taskDesc \u003d \"\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                dateDesc \u003d \"\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                durDesc \u003d \"\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                notesDesc \u003d \"\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                for (int i \u003d ZERO; i \u003c commandList.length; i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (i \u003d\u003d TWO) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        taskDesc \u003d commandList[i];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else if (i \u003d\u003d THREE) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        notesDesc \u003d commandList[i];"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else if (i \u003d\u003d FOUR) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        if (commandList[ZERO].equals(\"F\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                            durDesc \u003d commandList[i];"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                            dateDesc \u003d commandList[i];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                boolean checked \u003d false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                if (commandList.length \u003e ONE) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (!(commandList[ONE].equals(\"1\") || commandList[ONE].equals(\"0\"))) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        throw new DukeException(\"Error reading 1 or 0, skipping to next line\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    checked \u003d commandList[ONE].equals(\"1\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                Task t;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                if (commandList[ZERO].equals(\"T\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (taskDesc.trim().isEmpty()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        throw new DukeException(\"Error reading description, skipping to next line\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        t \u003d new Todo(taskDesc);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        t.setStatusIcon(checked);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        t.setNotes(notesDesc);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        items.add(t);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else if (commandList[ZERO].equals(\"D\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (taskDesc.trim().isEmpty() || dateDesc.trim().isEmpty()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        throw new DukeException(\"Error reading description or date/time, skipping to next line\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        t \u003d new Deadline(taskDesc, dateDesc);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        t.setStatusIcon(checked);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        t.setNotes(notesDesc);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        items.add(t);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else if (commandList[ZERO].equals(\"R\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (taskDesc.isEmpty() || dateDesc.isEmpty()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        throw new DukeException(\"Error reading description or date/time, skipping to next line\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        t \u003d new Repeat(taskDesc, dateDesc);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        t.setStatusIcon(checked);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        t.setNotes(notesDesc);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        items.add(t);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else if (commandList[ZERO].equals(\"F\")) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    if (taskDesc.isEmpty() || durDesc.isEmpty()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        throw new DukeException(\"Error reading fixed duration description,\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                + \" skipping to next line\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        int duration \u003d Integer.parseInt(durDesc.split(\" \")[ZERO]);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        t \u003d new FixedDuration(taskDesc, duration, durDesc.split(\" \")[ONE]);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        t.setStatusIcon(checked);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        t.setNotes(notesDesc);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        items.add(t);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                } else if (!commandList[ZERO].isEmpty()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    throw new DukeException(\"Error reading whether if its T, D, R, or F skipping to next line\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                ui.showErrorMsg(\"     Error when reading current line, please fix the text file:\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                logr.log(Level.SEVERE,\"Error when reading current line, please fix the text file\", e);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                ui.showErrorMsg(\"     Duke will continue reading the rest of file\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        br.close();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return items;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Updates the text file from interpreting the tasks of the task list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @throws IOException  If there is an error writing the text file."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void write(TaskList items) throws IOException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String fileContent \u003d \"\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        for (int i \u003d ZERO; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            fileContent +\u003d items.get(i).toFile() + \"\\n\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(filePath));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        writer.write(fileContent);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 6,
      "-": 12,
      "talesrune": 157
    }
  },
  {
    "path": "src/main/java/duke/task/BudgetList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "//@@author maxxyx96"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "public class BudgetList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public static final String INITIAL_BUDGET \u003d \"0\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    private ArrayList\u003cString\u003e budgetList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Creates an empty budget list using an array list if there are no"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * list of budget found."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public BudgetList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        budgetList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        budgetList.add(INITIAL_BUDGET);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Creates an updated budget list with the specified array list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param list The budget array list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public BudgetList(ArrayList\u003cString\u003e list) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        budgetList \u003d list;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        if (getSize() \u003c 1) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            resetBudget(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Converts a String input from a string to a float."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param input the input to be converted."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @return the float equivalent of the string."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public float floatConverter(String input) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            return Float.parseFloat(input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Changes the budget by the amount stated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param amount the amount to be added into the budget."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param remark Some description."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public void addToBudget(String amount, String remark) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        float currentBudget \u003d floatConverter(budgetList.get(ZERO)) + floatConverter(amount);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        budgetList.add(amount + \" : \" + remark);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        budgetList.set(ZERO, Float.toString(currentBudget));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Gets the current total budget that is stored in budgetList."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @return returns the budget that is stored in budgetList."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public float getBudget() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        return floatConverter(budgetList.get(ZERO));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Resets the current budgetList with the amount stated."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param amount The budget amount that is to be reset to."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public void resetBudget(float amount) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        String stringAmount \u003d Float.toString(amount);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        budgetList.clear();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        budgetList.add(INITIAL_BUDGET);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        budgetList.set(ZERO, stringAmount);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Get the size of the budget list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @return The size of the budget list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        return budgetList.size();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Get the list of budgets."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @return The list of budget."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public ArrayList\u003cString\u003e getList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        return this.budgetList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Get the list of budgets."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @return The list of budget."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public String getStringList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        if (budgetList.size() \u003c 1) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            return \"     You have not made an entry yet.\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            String listString \u003d \"     Here are your current expenses: \\n\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            for (int i \u003d 1; i \u003c budgetList.size(); i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                listString +\u003d \"     \" + (i) + \") \" + budgetList.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            return listString;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "maxxyx96": 116
    }
  },
  {
    "path": "src/main/java/duke/task/ContactList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0318465"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0318465"
        },
        "content": " * Represents a list of contacts."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0318465"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0318465"
        },
        "content": "//@@author e0318465"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0318465"
        },
        "content": "public class ContactList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    protected ArrayList\u003cContacts\u003e contactList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    private static final int ONE \u003d 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Creates an empty contact list using an array list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public ContactList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        contactList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Creates an updated contact list with the specified array list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param contactList The updated array list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public ContactList(ArrayList\u003cContacts\u003e contactList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        this.contactList \u003d contactList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Adds a contact into the contact list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param contactObj A contact to be added."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void add(Contacts contactObj) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        contactList.add(contactObj);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Retrieves the contact from the contact list via index."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param index The index of contact."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return Contact which is retrieved from the index."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public Contacts get(int index) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return contactList.get(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Displays the selected contact detail."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param index The index of contact."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return Contact details in String format."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public String getAndDisplay(int index) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        Contacts contacts \u003d contactList.get(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return contacts.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Retrieves all contacts from the contact list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return String that contains the whole list of contacts."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public String getContactList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String fullContactList \u003d \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        for (int i \u003d ZERO; i \u003c contactList.size(); i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            fullContactList +\u003d \"     \" + (i + ONE) + \". \" + contactList.get(i).toStringGui() + \"\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return fullContactList;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Extracts only the details so that only relevant details are being searched."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param index The index of contact."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return Contact which is retrieved from contact list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public String getOnlyDetails(int index) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        Contacts details \u003d contactList.get(index);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return details.toFile();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Retrieves all contacts from the contact list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return String that contains the whole list of contacts."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public String getSpecificContactList(int index) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return contactList.get(index).toStringGui();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Retrieves size of the contact list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return int that represents the contact list size."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return contactList.size();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Removes a contact from the contact list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param indexOfContact The index of contact to be removed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void remove(int indexOfContact) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        contactList.remove(indexOfContact);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0318465"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 110
    }
  },
  {
    "path": "src/main/java/duke/task/Contacts.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0318465"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0318465"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0318465"
        },
        "content": " * Represents a contact that stores information of a person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0318465"
        },
        "content": "//@@author e0318465"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0318465"
        },
        "content": "public class Contacts {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    protected String contact;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    protected String email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    protected String office;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Creates a contact with the relevant details."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param name Name of contact."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param contact Number of contact."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param email Electronic mail of contact."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param office Office of contact."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public Contacts(String name, String contact, String email, String office) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        this.name \u003d name.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        this.contact \u003d contact.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        this.email \u003d email.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        this.office \u003d office.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Extracts a contact content into string that is suitable for text file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return String that contains the details of the contact."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return  name + \",\" + contact + \",\" + email + \",\" + office;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Extracts a contact content into readable string."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return String that contains the details of the contact in a reader friendly format."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return \"     Name: \" + name"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                + \"\\n     Number: \" + contact"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                + \"\\n     Email: \" + email"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                + \"\\n     Office: \" + office;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Extracting a contact content into readable string (GUI)."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return String that contains the details of the contact to look readable in the GUI."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public String toStringGui() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return \"Name: \" + name + \", \" + contact + \", \" + email + \", \" + office;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0318465"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 58
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": " * Represents a deadline that stores description and date/time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected Date by;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected String[] suf \u003d { \"st\", \"nd\", \"rd\", \"th\" };"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected SimpleDateFormat datetimeFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int ONE \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int MINUS_ONE \u003d -1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int TWO \u003d 2;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int THREE \u003d 3;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int TWENTY_ONE \u003d 21;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int TWENTY_TWO \u003d 22;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int TWENTY_THREE \u003d 23;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int THIRTY_ONE \u003d 31;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final Logger logr \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Creates a deadline with the specified description and date/time."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param by The date/time of the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @throws ParseException  If there is an error converting the date/time."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public Deadline(String description, String by) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Date dateTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            dateTime \u003d datetimeFormat.parse(by);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            this.by \u003d dateTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            logr.log(Level.WARNING,\"Error reading date/time, please use this format \\\"d/MM/yyyy HHmm\\\"\", e);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            System.out.println(\"Error reading date/time, please use this format \\\"d/MM/yyyy HHmm\\\"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Extracting a task content into readable string."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String to be displayed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        SimpleDateFormat datetimeFormat2 \u003d new SimpleDateFormat(\"MMMMM yyyy, h:mm a\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        SimpleDateFormat datetimeFormat3 \u003d new SimpleDateFormat(\"MMMMM yyyy, ha\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String displayDT \u003d \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int day \u003d Integer.parseInt(new SimpleDateFormat(\"d\").format(by));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int min \u003d Integer.parseInt(new SimpleDateFormat(\"m\").format(by));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        if (min \u003e ZERO) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            displayDT \u003d datetimeFormat2.format(by);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            displayDT \u003d datetimeFormat3.format(by);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int sufIndex \u003d MINUS_ONE;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        if (day \u003d\u003d ONE || day \u003d\u003d TWENTY_ONE || day \u003d\u003d THIRTY_ONE) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            sufIndex \u003d ZERO;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (day \u003d\u003d TWO || day \u003d\u003d TWENTY_TWO) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            sufIndex \u003d ONE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (day \u003d\u003d THREE || day \u003d\u003d TWENTY_THREE) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            sufIndex \u003d TWO;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (day \u003e THREE \u0026\u0026 day \u003c THIRTY_ONE) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            sufIndex \u003d THREE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String suffixStr \u003d day + suf[sufIndex];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        displayDT \u003d suffixStr + \" of \" + displayDT;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + displayDT + \")\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Extracting a task content into readable string (GUI)."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String to be displayed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String toStringGui() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        SimpleDateFormat datetimeFormat2 \u003d new SimpleDateFormat(\"MMMMM yyyy, h:mm a\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        SimpleDateFormat datetimeFormat3 \u003d new SimpleDateFormat(\"MMMMM yyyy, ha\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String displayDT \u003d \"\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int day \u003d Integer.parseInt(new SimpleDateFormat(\"d\").format(by));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int min \u003d Integer.parseInt(new SimpleDateFormat(\"m\").format(by));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        if (min \u003e ZERO) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            displayDT \u003d datetimeFormat2.format(by);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            displayDT \u003d datetimeFormat3.format(by);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int sufIndex \u003d MINUS_ONE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        if (day \u003d\u003d ONE || day \u003d\u003d TWENTY_ONE || day \u003d\u003d THIRTY_ONE) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            sufIndex \u003d ZERO;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (day \u003d\u003d TWO || day \u003d\u003d TWENTY_TWO) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            sufIndex \u003d ONE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (day \u003d\u003d THREE || day \u003d\u003d TWENTY_THREE) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            sufIndex \u003d TWO;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (day \u003e THREE \u0026\u0026 day \u003c THIRTY_ONE) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            sufIndex \u003d THREE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String suffixStr \u003d day + suf[sufIndex];"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        displayDT \u003d suffixStr + \" of \" + displayDT;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return \"[D]\" + super.toStringGui() + \" (by: \" + displayDT + \")\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Extracting a task content into string that is suitable for text file."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String to be written into text file."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String datetimeStr \u003d datetimeFormat.format(by);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return \"D|\" + super.toFile() + \"|\" + datetimeStr;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Retrieves the date of the task as a String format."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String of Date."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String datetimeStr \u003d datetimeFormat.format(by);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return datetimeStr;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Sets the date of the task."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void setDateTime(String by) throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Date dateTime;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            dateTime \u003d datetimeFormat.parse(by);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            this.by \u003d dateTime;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            logr.log(Level.WARNING,\"Error reading date/time, please use this format \\\"d/MM/yyyy HHmm\\\"\", e);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            System.out.println(\"Error reading date/time, please use this format \\\"d/MM/yyyy HHmm\\\"\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "talesrune": 147
    }
  },
  {
    "path": "src/main/java/duke/task/DetectDuplicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0318465"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0318465"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0318465"
        },
        "content": " * Finds duplicated tasks and alerts the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0318465"
        },
        "content": "//@@author e0318465"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0318465"
        },
        "content": "public class DetectDuplicate {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    protected TaskList items;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Creates a DetectDuplicate task with a list of TaskList available."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param items List of tasks already in the system."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public DetectDuplicate(TaskList items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        this.items \u003d items;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Checks if the input is already in the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param command Type of task keyed in."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param description The input keyed in by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return Boolean that states if the input is a duplicate."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public boolean isDuplicate(String command, String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        if (\"todo\".equals(command) || \"fixedduration\".equals(command)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            for (int i \u003d ZERO; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                if (items.get(i).isContain(description)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                    //contains, is implemented in Task.java"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0318465"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 40
    }
  },
  {
    "path": "src/main/java/duke/task/FilterList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "talesrune"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": " * Represents a filter list that stores a list of filtered tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": "public class FilterList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected ArrayList\u003cTask\u003e filterList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected int filterIndex \u003d -1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": "  "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Creates an empty task list using an array list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public FilterList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        filterList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Creates an updated task list with the specified array list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param filterList The updated array list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public FilterList(ArrayList\u003cTask\u003e filterList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.filterList \u003d filterList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Adds a task into the task list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param taskObj a task to be added."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void add(Task taskObj) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        filterList.add(taskObj);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Clears all tasks from the filter list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        filterList.clear();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Retrieves the task from the filter list via the task\u0027s index."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param index The index of task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return Task which is retrieved from the index."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return filterList.get(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Retrieves the task from the filter list via the task\u0027s index."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return int which is retrieve from the filter index."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public int getFilterIndex() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return filterIndex;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Set the filter index based on the type of task."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *  @param filterIndex The index of filtered task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void setFilterIndex(int filterIndex) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.filterIndex \u003d filterIndex;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Gets the size of the task list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return int that represents the task list size."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return filterList.size();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "talesrune": 83
    }
  },
  {
    "path": "src/main/java/duke/task/FixedDuration.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "//@@author Dou-Maokang"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": " * A class representing a task with not specific time but a fixed duration."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "public class FixedDuration extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    protected int duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    protected String unit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Creates a Fixed Duration Task with the specific description and fixed duration."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param description Description of the Task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param duration The duration needed to complete the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param unit The time unit."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public FixedDuration(String description, int duration, String unit) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        if (unit.contains(\"m\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            this.unit \u003d (duration \u003e 1) ? \"minutes\" : \"minute\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        } else if (unit.contains(\"h\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            this.unit \u003d (duration \u003e 1) ? \"hours\" : \"hour\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Extracting a task content into readable string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @return String to be displayed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        return \"[F]\" + super.toString() + \" (needs \" + duration + \" \" + unit + \")\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Extracting a task content into readable string (GUI)."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @return String to be displayed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public String toStringGui() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        return \"[F]\" + super.toStringGui() + \" (needs \" + duration + \" \" + unit + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Extracting a task content into string that is suitable for text file."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @return String to be written into text file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        return \"F|\" + super.toFile() + \"|\" + duration + \" \" + unit;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "Dou-Maokang": 59,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/task/PriorityList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "//@@author Dou-Maokang"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": " * Represents a priority list that stores a list of priorities associated with each task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "public class PriorityList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    private static final int ONE \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    private static final int FIVE \u003d 5;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    private ArrayList\u003cInteger\u003e priorityList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    private int defultPriority \u003d FIVE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Creates an empty priority list using an array list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public PriorityList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        priorityList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Creates an updated priority list with the specified array list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param list The array list of priorities."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public PriorityList(ArrayList\u003cInteger\u003e list) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        priorityList \u003d list;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Add a priority associated with a task into the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param taskNum The number of the task in the task list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param priority The priority we want to set."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @return The updated Priority List."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public PriorityList setPriority(int taskNum, int priority) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        priorityList.set(taskNum - ONE, priority);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        return new PriorityList(priorityList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Add a default priority associated with a task into the list when the task is generated."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param cmd The command used to generate a new task;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @return The updated Priority List."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public PriorityList addDefaultPriority(duke.command.Command cmd) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        if (cmd instanceof AddCommand) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            priorityList.add(defultPriority);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        return new PriorityList(priorityList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Add multiple default priority associated with a task into the list when these tasks are generated."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param numOfTimes The number of times that one task is repeated."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @return The updated Priority List."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public PriorityList addMultiDefaultPriority(int numOfTimes) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        for (int i \u003d ZERO; i \u003c numOfTimes; i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            priorityList.add(defultPriority);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        return new PriorityList(priorityList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Remove a priority when the associated task is removed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param index The index of the priority to be removed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        priorityList.remove(index);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Get user input for the priority of a task."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param num The index number of the target priority."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @return The priority for a task."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public int getPriority(int num) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        int priority \u003d priorityList.get(num - 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Get the length/size of the priority list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @return The size of the priority list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        return priorityList.size();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Get the list of priorities."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @return The list of priorities."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public ArrayList\u003cInteger\u003e getList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        return this.priorityList;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Make the priority list empty."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @return The empty priority list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    private PriorityList clearList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        return new PriorityList(new ArrayList\u003cInteger\u003e());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Sort tasks based on their priority."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param priorities The list of priorities."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @return The sorted list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public static ArrayList\u003cPair\u003e sortPriority(TaskList taskList, PriorityList priorities) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        ArrayList\u003cPair\u003e pairList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        for (int i \u003d ONE; i \u003c\u003d taskList.size(); i++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            Pair\u003cInteger, Task\u003e pair \u003d new Pair\u003c\u003e(priorities.getPriority(i), taskList.get(i - 1));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            pairList.add(pair);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        for (int i \u003d ONE; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            for (int j \u003d i; j \u003e ZERO; j--) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                if (((int) pairList.get(j).getKey()) \u003c (int) pairList.get(j).getKey()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    Pair\u003cInteger, String\u003e temp \u003d pairList.get(j);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    pairList.set(j, pairList.get(j));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    pairList.set(j, temp);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        return pairList;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        for (int i \u003d ZERO; i \u003c priorityList.size(); i++) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            output +\u003d priorityList.get(i) + \" \";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "gervaiseang": 3,
      "e0318465": 2,
      "Dou-Maokang": 163
    }
  },
  {
    "path": "src/main/java/duke/task/Repeat.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a recursive task that stores the same description and across the different dates."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Repeat extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int ONE \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int MINUS_ONE \u003d -1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int TWO \u003d 2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int THREE \u003d 3;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int TWENTY_ONE \u003d 21;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int TWENTY_TWO \u003d 22;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int TWENTY_THREE \u003d 23;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int THIRTY_ONE \u003d 31;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final Logger logr \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Date from;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String[] suf \u003d { \"st\", \"nd\", \"rd\", \"th\" };"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    protected SimpleDateFormat datetimeFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a repeated task with the description of task and date/time."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param from The date/time of the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If there is an error converting the date/time."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Repeat(String description, String from) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Date dateTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            dateTime \u003d datetimeFormat.parse(from);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            this.from \u003d dateTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            logr.log(Level.WARNING,\"Error reading date/time, please use this format \\\"d/MM/yyyy HHmm\\\"\", e);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Error reading date/time, please use this format \\\"d/MM/yyyy HHmm\\\"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracting a task content into readable string."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String to be displayed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat datetimeFormat2 \u003d new SimpleDateFormat(\"MMMMM yyyy, h:mm a\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat datetimeFormat3 \u003d new SimpleDateFormat(\"MMMMM yyyy, ha\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String displayDT \u003d \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int day \u003d Integer.parseInt(new SimpleDateFormat(\"d\").format(from));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        int min \u003d Integer.parseInt(new SimpleDateFormat(\"m\").format(from));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        if (min \u003e ZERO) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            displayDT \u003d datetimeFormat2.format(from);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            displayDT \u003d datetimeFormat3.format(from);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int sufIndex \u003d MINUS_ONE;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        if (day \u003d\u003d ONE || day \u003d\u003d TWENTY_ONE || day \u003d\u003d THIRTY_ONE) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            sufIndex \u003d ZERO;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (day \u003d\u003d TWO || day \u003d\u003d TWENTY_TWO) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            sufIndex \u003d ONE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (day \u003d\u003d THREE || day \u003d\u003d TWENTY_THREE) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            sufIndex \u003d TWO;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (day \u003e THREE \u0026\u0026 day \u003c THIRTY_ONE) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            sufIndex \u003d THREE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String suffixStr \u003d day + suf[sufIndex];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        displayDT \u003d suffixStr + \" of \" + displayDT;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[R]\" + super.toString() + \" (Last day of schedule: \" + displayDT + \")\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * Extracting a task content into readable string (GUI)."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String to be displayed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String toStringGui() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        SimpleDateFormat datetimeFormat2 \u003d new SimpleDateFormat(\"MMMMM yyyy, h:mm a\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        SimpleDateFormat datetimeFormat3 \u003d new SimpleDateFormat(\"MMMMM yyyy, ha\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String displayDT \u003d \"\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int day \u003d Integer.parseInt(new SimpleDateFormat(\"d\").format(from));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int min \u003d Integer.parseInt(new SimpleDateFormat(\"m\").format(from));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        if (min \u003e ZERO) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            displayDT \u003d datetimeFormat2.format(from);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            displayDT \u003d datetimeFormat3.format(from);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int sufIndex \u003d MINUS_ONE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        if (day \u003d\u003d ONE || day \u003d\u003d TWENTY_ONE || day \u003d\u003d THIRTY_ONE) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            sufIndex \u003d ZERO;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (day \u003d\u003d TWO || day \u003d\u003d TWENTY_TWO) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            sufIndex \u003d ONE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (day \u003d\u003d THREE || day \u003d\u003d TWENTY_THREE) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            sufIndex \u003d TWO;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (day \u003e THREE \u0026\u0026 day \u003c THIRTY_ONE) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            sufIndex \u003d THREE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String suffixStr \u003d day + suf[sufIndex];"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        displayDT \u003d suffixStr + \" of \" + displayDT;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return \"[R]\" + super.toStringGui() + \" (Last day of schedule: \" + displayDT + \")\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the date of the task as a String format."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String of Date."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String datetimeStr \u003d datetimeFormat.format(from);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return datetimeStr;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Sets the date of the task."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void setDateTime(String from) throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Date dateTime;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            dateTime \u003d datetimeFormat.parse(from);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            this.from \u003d dateTime;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            logr.log(Level.WARNING,\"Error reading date/time, please use this format \\\"d/MM/yyyy HHmm\\\"\", e);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            System.out.println(\"Error reading date/time, please use this format \\\"d/MM/yyyy HHmm\\\"\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracting a task content into string that is suitable for text file."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String to be written into text file."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        String datetimeStr \u003d datetimeFormat.format(from);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"R|\" + super.toFile() + \"|\" + datetimeStr;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gervaiseang": 1,
      "e0318465": 2,
      "-": 78,
      "talesrune": 72
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": " * Represents a task that stores description and boolean that indicates the task as completed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected String notesDesc \u003d \"empty\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public int numberOfDays \u003d ZERO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public LocalDateTime currentDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public LocalDateTime dueDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public int priority;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public int reminders;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Creates a task with the specified description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Returns the description of a task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String of the description."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Sets the description of a task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param description String of the description."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Sets the notes description of a task."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param notesDesc String of the description."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void setNotes(String notesDesc) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.notesDesc \u003d notesDesc;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Deletes the notes description of a task."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void deleteNotes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.notesDesc \u003d \"empty\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Sets the notes description of a task."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String of the notes description."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String getNotes() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return notesDesc;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Returns a boolean of the task being done or not."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return Boolean of isDone."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Returns the status icon of a task."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String of the status icon."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return (isDone ? \"[/]\" : \"[X]\"); //return [✓] : [✗] symbols; [/][X] for jar"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Sets the status icon of a task to true/false."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param setDone The boolean of the task."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void setStatusIcon(boolean setDone) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        isDone \u003d setDone;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Returns the status icon of a task (GUI)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String of the status icon."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String getStatusIconGui() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return (isDone ? \"[\\u2713]\" : \"[\\u2718]\"); //return [✓]\" : \"[✗] symbols"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Returns the status icon of a task (GUI)."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String of the status icon."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String getTasks() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return (isDone ? \"[\\u2713]\" : \"[\\u2718]\"); //return [✓]\" : \"[✗] symbols"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    //@@author gervaiseang"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * Returns the reminder of one task."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @return integer of the number of days to set the reminded task."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    public int getReminder() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        return this.numberOfDays;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    //@@author gervaiseang"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * Set the remaining days of reminder."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @param remainingDays The number of days left of the reminded task."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    public void setReminder(int remainingDays) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        this.numberOfDays \u003d remainingDays;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * Set the remaining days of reminder."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return boolean that triggers the reminder."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public boolean isTriggerReminder() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * Set the priority of one task."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param  priorityLevel The priority level of the task, 1 to 5, high to low."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public void setPriority(int priorityLevel) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        this.priority \u003d priorityLevel;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * Set the priority of one task."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @return the priority of the task."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public int getPriority() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        return this.priority;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    //@@author talesrune"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Extracting a task content into readable string."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String that contains the status and the description of the task."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return getStatusIcon() + \" \" + description;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Extracting a task content into readable string (GUI)."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String that contains the status and the description of the task."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String toStringGui() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return getStatusIconGui() + \" \" + description;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Extracting a task content into string that is suitable for text file."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String that contains the status and the description of the task."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String numStr \u003d \"\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            numStr \u003d \"1|\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            numStr \u003d \"0|\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return  numStr + description + \"|\" + notesDesc;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Retrieves the date of the task as a String format."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String of Date (Only in Deadline and Event)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Set the date of the task."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param dateTime String of the date/time."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @throws Exception  If there is an error interpreting the user input"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void setDateTime(String dateTime) throws Exception {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        throw new DukeException(\"     Error! This task does not have date/time.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Checks if the input and description matches."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param arr1 Input from user."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return Boolean that states if the input is a duplicate."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public boolean isContain(String arr1) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return arr1.equalsIgnoreCase(description);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gervaiseang": 26,
      "e0318465": 9,
      "Dou-Maokang": 16,
      "maxxyx96": 2,
      "-": 10,
      "talesrune": 175
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": " * Represents a task list that stores a list of tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    protected ArrayList\u003cTask\u003e items;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int MINUS_ONE \u003d -1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int ONE \u003d 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Creates an empty task list using an array list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Creates an updated task list with the specified array list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The updated array list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e items) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        this.items \u003d items;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * To add a task into the task list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param taskObj a task to be added."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void add(Task taskObj) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(taskObj);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * To remove a task from the task list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param index The index of task to be removed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.remove(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * To update a task with different type."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param index The index of task to be removed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param taskObj The index of task to be removed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void setTaskType(int index, Task taskObj) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.set(index, taskObj);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Get remaining tasks in the ArrayList."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return tasks that represents the items."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return items;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * The size of the task list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return int that represents the task list size."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return items.size();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Retrieves the task from the task list via the task\u0027s index."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param index The index of task."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return Task which is retrieved from the index."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return items.get(index);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Retrieves index of task in the task list (GUI)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param taskObj A task from the task list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return int that contains the index of task."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public int getIndex(Task taskObj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int index \u003d MINUS_ONE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        for (int i \u003d ZERO; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            if (taskObj.equals(items.get(i))) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                index \u003d i;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves all tasks from the task list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String that contains the whole list of tasks."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String listStr \u003d \"\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        for (int i \u003d ZERO; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            listStr +\u003d \"     \" + (i + ONE) + \".\" + items.get(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return listStr;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves all tasks from the task list (GUI)."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String that contains the whole list of tasks."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getListGui() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String listStr \u003d \"\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        for (int i \u003d ZERO; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            listStr +\u003d \"     \" + (i + ONE) + \".\" + items.get(i).toStringGui() + \"\\n\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return listStr;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if a task is marked as done."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyDesc description of the task"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return returns true if task is marked as done, false otherwise."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public boolean isTaskDone(String keyDesc) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList searchList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task searchTask : items) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            if (searchTask.toString().contains(keyDesc)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                if (searchTask.isDone()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyx96": 2,
      "-": 41,
      "talesrune": 105
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": " * Represents a to-do that stores description."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Creates an event with the specified description and date/time."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Extracting a task content into readable string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String to be displayed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Extracting a task content into readable string (GUI)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String to be displayed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String toStringGui() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return \"[T]\" + super.toStringGui();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Extracting a task content into string that is suitable for text file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String to be written into text file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return \"T|\" + super.toFile();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Sets the date of the task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void setDateTime(String dateTime) throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        throw new DukeException(\"     Error! Todo does not have date/time.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "talesrune": 55
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.ContactList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.FixedDuration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Repeat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.PriorityList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a ui that informs the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    protected static final String BACKUP_FILENAME \u003d \"duke.txt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    protected static final String LINE \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final Scanner in;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final PrintStream out;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int ONE \u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty ui using default scanner and print stream."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an ui using specified scanner and print stream."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param in The input stream."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param out The print stream."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Ui(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Outputs an horizontal line to the user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        out.println(LINE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Show the help page."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @return an event requesting to view the help page"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    public static String helpRequest(TaskList items) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        String str \u003d \"     Here are the commands available in Duke Manager:\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        return  str;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reads the user input, and converts it into string."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String of the user input."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    //@@author gervaiseang"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * Outputs all the reminders of the user."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @param tasks The task list that contains all reminders."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    public static void showReminder(TaskList tasks) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d tasks.getTasks();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        System.out.println(\"     You currently have these upcoming tasks:\\n\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        int currentIndex \u003d ONE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        for (Task remaining: taskList) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            remaining.isTriggerReminder();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            System.out.println(\"     \" + currentIndex + \".\" + remaining.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            currentIndex +\u003d ONE;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    //@@author gervaiseang"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * Outputs task that is successfully sets a reminder to the user (GUI)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @param index indicated number of days to set the reminder"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     * @return String of the task that is completed."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    public String showReminderGui(TaskList items, int index) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        String str \u003d \"     You have set a reminder for this task \\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                + items.get(index);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    //@@author Dou-Maokang"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Outputs all the tasks of the task list to the user."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param priorities The list of priorities associated with each task."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public void showTaskListWithPriority(TaskList items, PriorityList priorities) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        ArrayList\u003cPair\u003e pair \u003d PriorityList.sortPriority(items, priorities);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        out.println(\"     Here are the tasks in your list with priority shown:\\n\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        out.printf(\"     Priority |\\tTask\\n\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        for (int i \u003d ZERO; i \u003c items.size() || i \u003c priorities.getSize(); i++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            out.printf(\"        [%d]\\t  |\\t%s\\n\", pair.get(i).getKey(), pair.get(i).getValue());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    //@@author talesrune"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Outputs all the tasks of the task list to the user."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void showTaskList(TaskList items) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        out.println(\"     Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        out.print(items.getList());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Outputs all the tasks of the task list to the user (GUI)."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String of all tasks from the task list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public static String showTaskListGui(TaskList items) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String str \u003d \"     Here are the tasks in your list:\\n\" + items.getListGui();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Outputs task that is updated to the user."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void showUpdate(TaskList items, int index) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        out.println(\"     Nice! I\u0027ve updated this task ^^:\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        out.println(\"       \" + (index + ONE) + \".\" + items.get(index).toString());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Outputs notes of the task that is added or updated to the user."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void showAddNotes(TaskList items, int index) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        out.println(\"     Nice! Added/Updated notes of this task ^^:\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        out.println(\"       \" + (index + ONE) + \".\" + items.get(index).toString()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \" | Added Notes: \" + items.get(index).getNotes());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Outputs notes of the task that is added or updated to the user (GUI)."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String of the added notes."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String showAddNotesGui(TaskList items, int index) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String str \u003d \"     Nice! Added/Updated notes of this task ^^:\\n\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"       \" + (index + ONE) + \".\" + items.get(index).toString()"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"\\n      | Added Notes: \" + items.get(index).getNotes();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Outputs notes of the task that is added or updated to the user."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param deletedNotes The deleted notes of the task."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void showDeleteNotes(TaskList items, int index, String deletedNotes) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        out.println(\"     Deleted notes of this task ^^:\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        out.println(\"       \" + (index + ONE) + \".\" + items.get(index).toString()"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \" | Deleted notes: \" + deletedNotes);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Outputs notes of the task that is added or updated to the user (GUI)."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param deletedNotes The deleted notes of the task."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String of the deleted notes."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String showDeleteNotesGui(TaskList items, int index, String deletedNotes) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String str \u003d \"     Deleted notes of this task ^^:\\n\""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"       \" + (index + ONE) + \".\" + items.get(index).toString()"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"\\n      | Deleted notes: \" + deletedNotes;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Outputs notes of the task to the user."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void showNotes(TaskList items, int index) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        out.println(\"     Here is the task and its notes:\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        out.println(\"       \" + (index + ONE) + \".\" + items.get(index).toString()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \" | Notes: \" + items.get(index).getNotes());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Outputs notes of the task to the user (GUI)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String of showing notes to the user."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String showNotesGui(TaskList items, int index) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String str \u003d \"     Here is the task and its notes:\\n\""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"       \" + (index + ONE) + \".\" + items.get(index).toString()"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"\\n      | Notes: \" + items.get(index).getNotes();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Outputs task that is updated to the user (GUI)."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String of the task that is updated."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public static String showUpdateGui(TaskList items, int index) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String str \u003d \"     Nice! I\u0027ve updated this task ^^:\\n\""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"       \" + (index + ONE) + \".\" + items.get(index).toStringGui();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Outputs task that is completed to the user."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void showDone(TaskList items, int index) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        out.println(\"     Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        out.println(\"       \" + items.get(index).toString());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Outputs task that is completed to the user (GUI)."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String of the task that is completed."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public static String showDoneGui(TaskList items, int index) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String str \u003d \"     Nice! I\u0027ve marked this task as done:\\n       \" + items.get(index).toStringGui() + \"\\n\";"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Outputs task that is deleted to the user."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param deletedTask The task that is deleted."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void showDelete(TaskList items, String deletedTask) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        out.println(\"     Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        out.println(deletedTask);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        out.println(\"     Now you have \" + items.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Outputs task that is deleted to the user (GUI)."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param deletedTask The task that is deleted."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String of the task that is deleted."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public static String showDeleteGui(TaskList items, String deletedTask) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String str \u003d \"     Noted. I\u0027ve removed this task:\\n\" + deletedTask"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"\\n     Now you have \" + items.size() + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Outputs task that is added to the user."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void showAdd(TaskList items) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        out.println(\"     Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        out.println(\"       \" + items.get(items.size() - ONE).toString());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        out.println(\"     Now you have \" + items.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Outputs task that is added to the user (GUI)."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String of the task that is added."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public static String showAddGui(TaskList items) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String str \u003d \"     Got it. I\u0027ve added this task:\\n       \""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + items.get(items.size() - ONE).toStringGui() + \"\\n     Now you have \""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + items.size() + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Outputs a welcome message to the user."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        out.println(\"     Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        out.println(\"     What can I do for you?\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Outputs a welcome message to the user (GUI)."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String of the welcome message."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public static String showWelcomeGui() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String str \u003d LINE + \"\\n     Hello! I\u0027m Duke\\n     What can I do for you?\\n\" + LINE;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Outputs a bye message to the user."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void showBye() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        out.println(\"     Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Outputs a bye message to the user (GUI)."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String of the bye message."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public static String showByeGui() {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String str \u003d \"     Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Outputs the tasks that are matched from the keyword to the user."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param keyword The keyword to match the tasks."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void showFind(TaskList items, String keyword) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        out.println(\"     Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int numFound \u003d ZERO;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        for (int i \u003d ZERO; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            if (items.get(i).getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                out.println(\"     \" + (i + ONE) + \".\" + items.get(i).toString());"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                numFound++;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        if (numFound \u003d\u003d ZERO) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            out.println(\"     No matching tasks found.\");"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    //@@author Dou-Maokang"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Outputs the tasks with the target priority."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param priorities The list of priorities associated with the task list."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param targetPriority The target priority to search."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public void showFindTasksByPriority(TaskList items, PriorityList priorities, int targetPriority) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        out.println(\"     Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        int numFound \u003d ZERO;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        for (int i \u003d ZERO; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            if (priorities.getPriority(i + 1) \u003d\u003d targetPriority) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                out.println(\"     \" + (i + ONE) + \".\" + items.get(i).toString());"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "                numFound++;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        if (numFound \u003d\u003d ZERO) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "            out.println(\"     No matching tasks found.\");"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    //@@author talesrune"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Outputs the tasks that are matched from the keyword to the user (GUI)."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param keyword The keyword to match the tasks."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String of the matching tasks of the task list."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public static String showFindGui(TaskList items, String keyword) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String str \u003d \"     Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int numFound \u003d ZERO;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        for (int i \u003d ZERO; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            if (items.get(i).getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                str +\u003d \"     \" + (i + ONE) + \".\" + items.get(i).toStringGui() + \"\\n\";"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                numFound++;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        if (numFound \u003d\u003d ZERO) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            str +\u003d \"     No matching tasks found.\\n\";"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Outputs the tasks that are filtered to the user."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param taskType The type of task."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void showFilter(TaskList items, String taskType) {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        out.println(\"     Here are the filtered tasks in your list:\");"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int numFound \u003d ZERO;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        for (int i \u003d ZERO; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            if (taskType.equals(\"todo\") \u0026\u0026 items.get(i) instanceof Todo) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                out.println(\"     \" + (i + ONE) + \".\" + items.get(i).toString());"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                numFound++;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else if (taskType.equals(\"deadline\") \u0026\u0026 items.get(i) instanceof Deadline) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                out.println(\"     \" + (i + ONE) + \".\" + items.get(i).toString());"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                numFound++;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else if (taskType.equals(\"repeat\") \u0026\u0026 items.get(i) instanceof Repeat) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                out.println(\"     \" + (i + ONE) + \".\" + items.get(i).toString());"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                numFound++;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else if (taskType.equals(\"fixedduration\") \u0026\u0026 items.get(i) instanceof FixedDuration) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                out.println(\"     \" + (i + ONE) + \".\" + items.get(i).toString());"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                numFound++;"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        if (numFound \u003d\u003d ZERO) {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            out.println(\"     No matching tasks found.\");"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Outputs the tasks that are filtered to the user. (GUI)"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param items The task list that contains a list of tasks."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param taskType The type of task."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String of the matching tasks of the task list."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public static String showFilterGui(TaskList items, String taskType) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String str \u003d \"     Here are the filtered tasks in your list:\\n\";"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int numFound \u003d ZERO;"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        for (int i \u003d ZERO; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            if (taskType.equals(\"todo\") \u0026\u0026 items.get(i) instanceof Todo) {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                str +\u003d \"     \" + (i + ONE) + \".\" + items.get(i).toStringGui() + \"\\n\";"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                numFound++;"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else if (taskType.equals(\"deadline\") \u0026\u0026 items.get(i) instanceof Deadline) {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                str +\u003d \"     \" + (i + ONE) + \".\" + items.get(i).toStringGui() + \"\\n\";"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                numFound++;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else if (taskType.equals(\"repeat\") \u0026\u0026 items.get(i) instanceof Repeat) {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                str +\u003d \"     \" + (i + ONE) + \".\" + items.get(i).toStringGui() + \"\\n\";"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                numFound++;"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            } else if (taskType.equals(\"fixedduration\") \u0026\u0026 items.get(i) instanceof FixedDuration) {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                str +\u003d \"     \" + (i + ONE) + \".\" + items.get(i).toStringGui() + \"\\n\";"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                numFound++;"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        if (numFound \u003d\u003d ZERO) {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            str +\u003d \"     No matching tasks found.\" + \"\\n\";"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Outputs the error when loading the file to the user."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        out.println(\"File not found, creating an empty list\");"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Outputs the error message during operating actions to the user."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param message The error message to be outputted."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void showErrorMsg(String message) {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        out.println(message);"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Outputs the error message during operating actions to the user (GUI)."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     *"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @param message The error message to be outputted."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * @return String of the error message."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public static String showErrorMsgGui(String message) {"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        return message + \"\\n\";"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    //@@author maxxyx96"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Outputs a message to the user to let it know that it is updating."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public void showBackupMessage() {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        out.println(\"     Duke Manager has been backed up!\\n\""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                + \"     Duke has opened the backup file location in file explorer!\");"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public static String showBackupMessageGui() {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        return \"     Duke Manager has been backed up! \\n\""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                + \"     Duke has opened the backup file location in file explorer!\";"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    //@@author Dou-Maokang"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * Outputs a message to the user to let it know that it has changed the priority of a task."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param taskList The task list that contains a list of tasks."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param taskNum The index of the task in the task list."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     * @param priority The index of the priority."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    public void showSetPriority(TaskList taskList, int taskNum, int priority) {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        out.println(\"     Updated the priority of \\n\\t\\t\" + taskList.get(taskNum - ONE));"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        out.println(\"     Current priority: \" + priority);"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    //@@author e0318465"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Outputs all the contacts of the contact list to user through CLI."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param contactList The list of contacts."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void showContactList(ContactList contactList) {"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        out.println(\"     Here are all your contacts:\");"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        out.print(contactList.getContactList());"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Outputs all the contacts of the contact list to user through GUI."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param contactList The list of contacts."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return String of all contacts from contact list."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public static String showContactListGui(ContactList contactList) {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String str \u003d \"\";"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        str +\u003d \"Here are all your contacts:\\n\";"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        str +\u003d contactList.getContactList();"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Outputs an alert when a duplicated inout is detected."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void showDuplicateMsg() {"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        out.println(\"     The same task is already in the list!\");"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Outputs the contact details that are most recently added."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param contactList The list of contacts."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void showAddedContact(ContactList contactList) {"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        if (contactList.size() \u003d\u003d ZERO) {"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            out.println(\"     You have no contacts!\");"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            out.println(\"     Got it, now you have \" + contactList.size() + \" contacts. Contact added.\");"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            out.println(contactList.get(contactList.size() - ONE));"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        }"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    * Show the added contacts in GUI."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    *"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    * @param contactList The list of contacts."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    * @return String to output list of contacts to GUI."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public static String showAddedContactGui(ContactList contactList) {"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String str \u003d \"\";"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        if (contactList.size() \u003d\u003d ZERO) {"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            str +\u003d \"     You have no contacts!\";"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            str +\u003d \"\\n     Got it, now you have \" + contactList.size() + \" contacts. Contact added:\\n\";"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            str +\u003d contactList.get(contactList.size() - ONE);"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        }"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Outputs contact that is deleted, to the user through CLI."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param contactList The contact list that contains a list of contacts."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param deletedContact The contact that is deleted."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void showContactDeleted(ContactList contactList, String deletedContact) {"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        out.println(\"     Now you have \" + contactList.size() + \" contact(s). I\u0027ve removed this contact:\");"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        out.println(deletedContact);"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Outputs contact that is deleted to the user through GUI."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param contactList The contact list that contains a list of contacts."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param deletedContact The contact that is deleted."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return String of deleted contact to user."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public static String showContactDeletedGui(ContactList contactList, String deletedContact) {"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String str \u003d \"\";"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        str +\u003d \"Now you have \" + contactList.size() + \" contact(s). I\u0027ve removed this contact:\\n\";"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        str +\u003d deletedContact;"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Outputs the contacts that are matched from the keyword."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param contactList The contact list that contains a list of contacts."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param keyword The keyword to match the contacts."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public void showFoundContacts(ContactList contactList, String keyword) {"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        out.println(\"     Here are the matching contacts in your list:\");"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        int numFound \u003d ZERO;"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        for (int i \u003d ZERO; i \u003c contactList.size(); i++) {"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            String details \u003d contactList.getOnlyDetails(i);"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            details \u003d details.replaceAll(\",\", \" \");"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            details \u003d details.toLowerCase();"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            if (details.contains(keyword)) {"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                out.println(\"     \" + contactList.getSpecificContactList(i));"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                numFound++;"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            }"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        }"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        if (numFound \u003d\u003d ZERO) {"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            out.println(\"     No matching tasks found.\");"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        }"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * Outputs the tasks that are matched from the keyword to the user in GUI."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     *"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param contactList The contact list that contains a list of contacts."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @param keyword The keyword to match the contacts."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     * @return All contacts that matches with keyword."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "e0318465"
        },
        "content": "     */"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    public static String showFoundContactsGui(ContactList contactList, String keyword) {"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        String str \u003d \"\";"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        str +\u003d \"     Here are the matching contacts in your list:\\n\";"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        int numFound \u003d ZERO;"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        for (int i \u003d ZERO; i \u003c contactList.size(); i++) {"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            String details \u003d contactList.getOnlyDetails(i);"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            String replacedComma \u003d details.replaceAll(\",\", \" \");"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            String stringToFind \u003d replacedComma.toLowerCase();"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            if (stringToFind.contains(keyword)) {"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                str +\u003d \"     \" + contactList.getSpecificContactList(i) + \"\\n\";"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                numFound++;"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            }"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        }"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        if (numFound \u003d\u003d ZERO) {"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "e0318465"
        },
        "content": "            str +\u003d \"     No matching tasks found.\";"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        }"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    //@@author maxxyx96"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Shows the current budget of the user."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param amount the budget the user currently has."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public void showBudget(float amount) {"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        out.println(\"     Your budget is : $\" + amount);"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Shows the current budget of the user."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param amount the budget the user currently has."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @return the message to be shown to the user."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public String showBudgetGui(float amount) {"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        return \"     Your current Budget is : $\" + amount;"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Shows the user the amount that is added/subtracted to the existing budget."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param amount The amount that is to be added/subtracted."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param budget The existing budget of the user."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public void showAddBudget(float amount, float budget) {"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        if (amount \u003e 0) {"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            out.println(\"     You are adding $\" + amount + \" to your current budget of $\" + budget);"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            out.println(\"     You are subtracting $\" + -amount + \" from your current budget of $\" + budget);"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Shows the user the amount that is added/subtracted to the existing budget. (GUI)"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param amount The amount that is to be added/subtracted."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param budget The existing budget of the user."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @return String of the text to show user."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public String showAddBudgetGui(float amount, float budget) {"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        if (amount \u003e 0) {"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            return \"     You are adding $\" + amount + \" to your current budget of $\" + budget;"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "            return \"     You are subtracting $\" + -amount + \" from your current budget of $\" + budget;"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Shows the budget that the user has before the changes."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param budget The budget of the user."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public void showResetBudget(float budget) {"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        out.println(\"     Your previous budget of $\" + budget + \" has been reset.\");"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Shows the budget that the user has before the changes."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param budget The budget of the user."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @return String of the reset message."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public String showResetBudgetGui(float budget) {"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        return \"     Your previous budget of \" + budget + \" has been reset.\";"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Shows the remarks user input when adding the budget."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param remark the remarks user inputted while adding/subtracting budget."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @return String of the remark message."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public String showRemarkGui(String remark) {"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        return \"     Remarks entered: \" + remark;"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Shows the list of budget currently in Duke Manager."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @param list List of the budget stored."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @return the list of the budget."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public String showBudgetListGui(String list) {"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * Shows the user that the input limit has been exceeded."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     * @return String of the message to be shown."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    public String showBudgetExceededLimitMessageGui() {"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        return \"     The limits of budget has been exceeded (\u003e 999,999 or \u003c -999,999),\""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                + \"\\n     No action has been done. \";"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gervaiseang": 36,
      "e0318465": 142,
      "Dou-Maokang": 55,
      "maxxyx96": 115,
      "-": 52,
      "talesrune": 376
    }
  },
  {
    "path": "src/main/resources/view/AddNotesWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c!-- @@author talesrune --\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"300.0\" prefWidth\u003d\"300.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.AddNotesWindow\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "      \u003cHBox layoutX\u003d\"163.0\" layoutY\u003d\"64.0\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003cVBox alignment\u003d\"TOP_RIGHT\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cLabel alignment\u003d\"TOP_LEFT\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" text\u003d\"Description\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003cVBox alignment\u003d\"TOP_RIGHT\" layoutX\u003d\"30.0\" layoutY\u003d\"40.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"150.0\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cTextField fx:id\u003d\"tfNotesDesc\" prefHeight\u003d\"58.0\" prefWidth\u003d\"140.0\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/TextField\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cHBox alignment\u003d\"CENTER\" prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cButton fx:id\u003d\"btnAddNotes\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#onMouseClick_AddNotes\" text\u003d\"Add/Update\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003c/Button\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "talesrune"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "talesrune"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003cInsets left\u003d\"20.0\" top\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "talesrune"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "talesrune"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "talesrune"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "talesrune": 63
    }
  },
  {
    "path": "src/main/resources/view/AddWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.ComboBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c!-- @@author talesrune --\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"300.0\" prefWidth\u003d\"300.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.AddWindow\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "      \u003cHBox layoutX\u003d\"163.0\" layoutY\u003d\"64.0\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003cVBox alignment\u003d\"TOP_RIGHT\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cLabel alignment\u003d\"TOP_LEFT\" text\u003d\"Type\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cLabel alignment\u003d\"TOP_LEFT\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" text\u003d\"Description\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cLabel alignment\u003d\"TOP_LEFT\" layoutX\u003d\"10.0\" layoutY\u003d\"45.0\" text\u003d\"Date/Time\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cLabel alignment\u003d\"TOP_LEFT\" layoutX\u003d\"10.0\" layoutY\u003d\"80.0\" text\u003d\"Duration\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cLabel alignment\u003d\"TOP_LEFT\" layoutX\u003d\"10.0\" layoutY\u003d\"115.0\" text\u003d\"Unit\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cLabel alignment\u003d\"TOP_LEFT\" layoutX\u003d\"70.0\" layoutY\u003d\"150.0\" text\u003d\"Existing Task\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003cVBox alignment\u003d\"TOP_RIGHT\" layoutX\u003d\"30.0\" layoutY\u003d\"40.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"150.0\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cComboBox fx:id\u003d\"cbType\" prefWidth\u003d\"150.0\" promptText\u003d\"Select Type\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/ComboBox\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cTextField fx:id\u003d\"tfDesc\"\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/TextField\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cTextField fx:id\u003d\"tfDateTime\"\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/TextField\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cTextField fx:id\u003d\"tfDuration\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/TextField\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cTextField fx:id\u003d\"tfUnit\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/TextField\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cComboBox fx:id\u003d\"cbExistingTask\" prefWidth\u003d\"150.0\" promptText\u003d\"Select Task\"\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/ComboBox\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cHBox alignment\u003d\"CENTER\" prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cButton fx:id\u003d\"btnAdd\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#onMouseClickAdd\" text\u003d\"Add\"\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003c/Button\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cButton fx:id\u003d\"btnReset\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#onMouseClickReset\" text\u003d\"Reset\"\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003c/Button\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "talesrune"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "talesrune"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003cInsets left\u003d\"20.0\" top\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "talesrune"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "talesrune"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "talesrune"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "talesrune": 129
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- @@author talesrune-reused --\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "      \u003cScrollPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "          \u003cAnchorPane maxHeight\u003d\"350.0\" maxWidth\u003d\"440.0\" minHeight\u003d\"1.0\" minWidth\u003d\"300.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "talesrune": 13
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "\u003c?import javafx.scene.control.ComboBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"500.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.HelpWindow\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        \u003cHBox layoutX\u003d\"163.0\" layoutY\u003d\"64.0\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                \u003cVBox alignment\u003d\"TOP_RIGHT\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                            \u003cLabel alignment\u003d\"TOP_LEFT\" text\u003d\"Get Help\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                                \u003cfont\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                                    \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                                \u003c/font\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                                \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                                    \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                                \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                            \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                            \u003cLabel alignment\u003d\"TOP_LEFT\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" text\u003d\"Format:\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                                \u003cfont\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                                    \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                                \u003c/font\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                                \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                                    \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                                \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                            \u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                \u003cVBox alignment\u003d\"TOP_RIGHT\" layoutX\u003d\"170.0\" layoutY\u003d\"140.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"500.0\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                        \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                        \u003cComboBox fx:id\u003d\"cbCommands\" prefWidth\u003d\"300.0\" promptText\u003d\"Select Commands Available\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                                \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                        \u003c/ComboBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                        \u003cHBox alignment\u003d\"CENTER\" prefHeight\u003d\"30.0\" prefWidth\u003d\"500.0\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                            \u003cLabel fx:id\u003d\"getDescription\" alignment\u003d\"TOP_LEFT\" layoutX\u003d\"50.0\" layoutY\u003d\"30.0\" \u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                                \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                            \u003c/Label\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "                \u003cInsets left\u003d\"20.0\" top\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gervaiseang"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "gervaiseang": 62
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.ComboBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.ContextMenu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c!-- @@author talesrune --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"880.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "      \u003cMenuBar layoutX\u003d\"7.0\" layoutY\u003d\"2.0\" prefHeight\u003d\"25.0\" prefWidth\u003d\"364.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"516.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        \u003cmenus\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Add New\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003citems\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cMenuItem fx:id\u003d\"menuAdd\" mnemonicParsing\u003d\"false\" onAction\u003d\"#createAddWindow\" text\u003d\"New Task\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003c/items\u003e\u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Exit?\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003citems\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "              \u003cMenuItem fx:id\u003d\"exit\" mnemonicParsing\u003d\"false\" onAction\u003d\"#exitProgram\" text\u003d\"Close\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003c/items\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"View\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003citems\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "              \u003cMenuItem id\u003d\"budgetMenu\" mnemonicParsing\u003d\"false\" text\u003d\"Budget\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Blank\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003c/items\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003citems\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": "              \u003cMenuItem fx:id\u003d\"help\" mnemonicParsing\u003d\"false\" onAction\u003d\"#createHelpWindow\" text\u003d\"View Commands\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003c/items\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "talesrune"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        \u003c/menus\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "talesrune"
        },
        "content": "      \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "talesrune"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"364.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"364.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003cFont name\u003d\"System Bold Italic\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutY\u003d\"27.0\" prefHeight\u003d\"530.0\" prefWidth\u003d\"440.0\" vvalue\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"440.0\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "talesrune"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"513.0\" prefWidth\u003d\"428.0\" spacing\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003c/padding\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "talesrune"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "talesrune"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "talesrune"
        },
        "content": "      \u003cSplitPane dividerPositions\u003d\"0.64\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"600.0\" prefWidth\u003d\"440.0\" AnchorPane.bottomAnchor\u003d\"45.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"440.0\" AnchorPane.topAnchor\u003d\"28.0\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        \u003citems\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "talesrune"
        },
        "content": "          \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"160.0\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cTabPane fx:id\u003d\"tpTabs\" onMouseClicked\u003d\"#onMouseClickTabs\" prefHeight\u003d\"260.0\" prefWidth\u003d\"438.0\" side\u003d\"LEFT\" tabClosingPolicy\u003d\"UNAVAILABLE\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    \u003ctabs\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cTab text\u003d\"All\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                      \u003cTab text\u003d\"Todo\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                      \u003cTab text\u003d\"Deadline\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cTab text\u003d\"Repeat\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cTab text\u003d\"FixedDuration\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    \u003c/tabs\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cScrollPane prefHeight\u003d\"340.0\" prefWidth\u003d\"438.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"32.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    \u003ccontent\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                      \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"339.0\" prefWidth\u003d\"437.0\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cListView fx:id\u003d\"listT\" onMouseClicked\u003d\"#onMouseClick_ListView\" prefHeight\u003d\"340.0\" prefWidth\u003d\"438.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                 \u003ccontextMenu\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    \u003cContextMenu\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                      \u003citems\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                        \u003cMenuItem fx:id\u003d\"menuAddNotes\" mnemonicParsing\u003d\"false\" onAction\u003d\"#createAddNotesWindow\" text\u003d\"Add/Update Notes\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                          \u003cMenuItem fx:id\u003d\"menuDeleteNotes\" mnemonicParsing\u003d\"false\" onAction\u003d\"#onMouseClick_DeleteNotes\" text\u003d\"Delete Notes\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                      \u003c/items\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    \u003c/ContextMenu\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                 \u003c/contextMenu\u003e\u003c/ListView\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    \u003c/content\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "talesrune"
        },
        "content": "          \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"160.0\"\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003cBorderPane prefHeight\u003d\"186.0\" prefWidth\u003d\"438.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003ctop\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cLabel fx:id\u003d\"labelSelectedTask\" text\u003d\"Selected Task:\" BorderPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/top\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003cright\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cVBox fx:id\u003d\"vboxUpdate\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cLabel text\u003d\"Type of Update\" /\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cComboBox fx:id\u003d\"cbupdateType\" prefWidth\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cLabel layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" text\u003d\"New Description\" /\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cTextField fx:id\u003d\"tfnewDesc\" /\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cLabel layoutX\u003d\"10.0\" layoutY\u003d\"52.0\" text\u003d\"New Date/Time\" /\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cTextField fx:id\u003d\"tfnewDateTime\" layoutX\u003d\"10.0\" layoutY\u003d\"69.0\" /\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cLabel layoutX\u003d\"10.0\" layoutY\u003d\"94.0\" text\u003d\"New Task Type\" /\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cComboBox fx:id\u003d\"cbtaskType\" layoutX\u003d\"10.0\" layoutY\u003d\"111.0\" prefWidth\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003cpadding\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003c/padding\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/right\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003ccenter\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003cVBox alignment\u003d\"CENTER\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cHBox fx:id\u003d\"hboxButtons\" alignment\u003d\"CENTER\" prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    \u003cButton fx:id\u003d\"btnDone\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#onMouseClickDone\" text\u003d\"Done\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                          \u003cFont size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    \u003cButton fx:id\u003d\"btnDelete\" layoutX\u003d\"125.0\" layoutY\u003d\"69.0\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#onMouseClickDelete\" text\u003d\"Delete\"\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                          \u003cFont size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    \u003cButton fx:id\u003d\"btnUpdate\" layoutX\u003d\"73.0\" layoutY\u003d\"69.0\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#onMouseClickUpdate\" text\u003d\"Update\"\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                          \u003cFont size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003c/HBox\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003cHBox alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    \u003cButton fx:id\u003d\"btnOK\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#onMouseClickOK\" text\u003d\"OK\"\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                          \u003cFont size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    \u003cButton fx:id\u003d\"btnCancel\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#onMouseClickCancel\" text\u003d\"Cancel\"\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                          \u003cFont size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                              \u003c/HBox\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                     \u003c/center\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                  \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        \u003c/items\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "talesrune"
        },
        "content": "      \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "talesrune"
        },
        "content": "      \u003cButton disable\u003d\"true\" layoutX\u003d\"406.0\" mnemonicParsing\u003d\"false\" text\u003d\"--\u0026gt;\" /\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "talesrune"
        },
        "content": "      \u003cButton disable\u003d\"true\" layoutX\u003d\"364.0\" mnemonicParsing\u003d\"false\" text\u003d\"Save\" /\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "talesrune"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "talesrune"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "talesrune": 157
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "class DukeTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    void testMethod() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        System.out.println(\"Test from\\n\" + logo);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "talesrune": 13
    }
  },
  {
    "path": "src/test/java/duke/command/AddCommTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "class AddCommTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    void addTest() throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        TaskList items \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task \u003d new Todo(\"sleep\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Command cmd \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd.execute(items, ui);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(task, items.get(items.size() - 1));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        task \u003d new Deadline(\"sleep\", \"05/05/2015 1805\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd.execute(items, ui);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(task, items.get(items.size() - 1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        task \u003d new Deadline(\"sleep\", \"05/05/2015 1800\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd.execute(items, ui);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(task, items.get(items.size() - 1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "talesrune": 23
    }
  },
  {
    "path": "src/test/java/duke/command/AddNotesCommTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "talesrune"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "class AddNotesCommTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    void addNotesTest() throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        TaskList items \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task \u003d new Todo(\"walk\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        task \u003d new Deadline(\"homework\", \"07/07/2017 1707\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Command cmd \u003d new AddNotesCommand(\"5 km\",0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"     Nice! Added/Updated notes of this task ^^:\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"       1.[T][X] walk\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"      | Added Notes: 5 km\", cmd.executeGui(items,ui));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d new AddNotesCommand(\"cs2113 project\", 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"     Nice! Added/Updated notes of this task ^^:\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"       2.[D][X] homework (by: 7th of July 2017, 5:07 PM)\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"      | Added Notes: cs2113 project\", cmd.executeGui(items,ui));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "talesrune": 34
    }
  },
  {
    "path": "src/test/java/duke/command/ContactsCommTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0318465"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.ContactList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.Contacts;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0318465"
        },
        "content": "//@@author e0318465"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0318465"
        },
        "content": "public class ContactsCommTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    void contactsTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        TaskList items \u003d new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        ContactList contactList \u003d new ContactList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        Contacts contactObj1 \u003d new Contacts(\"Prof Tan\", \"91234567\",\" \", \"E1-08-11\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        Command cmd1 \u003d new AddContactsCommand(contactObj1, contactList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        assertEquals(\"\\n     Got it, now you have 1 contacts. Contact added:\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                + \"     Name: Prof Tan\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                + \"     Number: 91234567\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                + \"     Email: \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                + \"     Office: E1-08-11\", cmd1.executeGui(items, ui));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        Contacts contactObj2 \u003d new Contacts(\"Prof Tan\", \"91234567\",\"tancc@nus.edu.sg\", \"E1-08-11\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        Command cmd2 \u003d new AddContactsCommand(contactObj2, contactList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        assertEquals(\"\\n     Got it, now you have 2 contacts. Contact added:\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                + \"     Name: Prof Tan\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                + \"     Number: 91234567\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                + \"     Email: tancc@nus.edu.sg\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                + \"     Office: E1-08-11\", cmd2.executeGui(items, ui));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        Command cmd3 \u003d new DeleteContactCommand(1, contactList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        assertEquals(\"Now you have 1 contact(s). I\u0027ve removed this contact:\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                + \"     Name: Prof Tan\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                + \"     Number: 91234567\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                + \"     Email: tancc@nus.edu.sg\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                + \"     Office: E1-08-11\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                + \"     Now you have 1 contact(s) in the list.\", cmd3.executeGui(items, ui)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                + \"\\n     Now you have 1 contact(s) in the list.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        Command cmd4 \u003d new ListContactsCommand(contactList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        assertEquals(\"Here are all your contacts:\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                + \"     1. Name: Prof Tan, 91234567, , E1-08-11\\n\", cmd4.executeGui(items, ui));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        Command cmd5 \u003d new FindContactCommand(\"prof tan\", contactList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        assertEquals(\"     Here are the matching contacts in your list:\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0318465"
        },
        "content": "                + \"     Name: Prof Tan, 91234567, , E1-08-11\\n\", cmd5.executeGui(items, ui));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0318465"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 53
    }
  },
  {
    "path": "src/test/java/duke/command/DeleteCommTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "class DeleteCommTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    void deleteTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        TaskList items \u003d new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task \u003d new Todo(\"sleep\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task2 \u003d new Todo(\"wake up\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Command cmd \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd.execute(items, ui);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d new AddCommand(task2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd.execute(items, ui);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d new DeleteCommand(0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd.execute(items, ui);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            assertNotEquals(task,items.get(i));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "talesrune": 21
    }
  },
  {
    "path": "src/test/java/duke/command/DeleteNotesCommTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "talesrune"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "class DeleteNotesCommTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    void deleteNotesTest() throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        TaskList items \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task \u003d new Todo(\"walk\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        task.setNotes(\"5 km\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        task \u003d new Deadline(\"homework\", \"07/07/2017 1707\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        task.setNotes(\"cs2113 project\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Command cmd \u003d new DeleteNotesCommand(0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"     Deleted notes of this task ^^:\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"       1.[T][X] walk\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"      | Deleted notes: 5 km\", cmd.executeGui(items,ui));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d new DeleteNotesCommand(1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"     Deleted notes of this task ^^:\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"       2.[D][X] homework (by: 7th of July 2017, 5:07 PM)\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"      | Deleted notes: cs2113 project\", cmd.executeGui(items,ui));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "talesrune": 36
    }
  },
  {
    "path": "src/test/java/duke/command/DoneCommTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "class DoneCommTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    void doneTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        TaskList items \u003d new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task \u003d new Todo(\"walk\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Command cmd \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd.execute(items, ui);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"[X]\", items.get(items.size() - 1).getStatusIcon());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d new DoneCommand(0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd.execute(items,ui);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"[/]\", items.get(items.size() - 1).getStatusIcon());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "talesrune": 16
    }
  },
  {
    "path": "src/test/java/duke/command/FilterCommTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "talesrune"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "class FilterCommTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    void filterTest() throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        TaskList items \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task \u003d new Todo(\"walk\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        task \u003d new Deadline(\"homework\", \"07/07/2017 1707\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        task \u003d new Deadline(\"movie\", \"05/05/2015 1500\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Command cmd \u003d new FilterCommand(\"todo\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task taskdummy \u003d new Todo(\"dummy\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"     Here are the filtered tasks in your list:\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"     1.[T]\" + taskdummy.getStatusIconGui()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \" walk\\n\", cmd.executeGui(items,ui));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d new FilterCommand(\"deadline\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"     Here are the filtered tasks in your list:\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"     2.[D]\" + taskdummy.getStatusIconGui()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \" homework (by: 7th of July 2017, 5:07 PM)\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"     3.[D]\" + taskdummy.getStatusIconGui()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \" movie (by: 5th of May 2015, 3PM)\\n\", cmd.executeGui(items,ui));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "talesrune": 40
    }
  },
  {
    "path": "src/test/java/duke/command/FindCommTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "class FindCommTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    void findTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        TaskList items \u003d new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task \u003d new Todo(\"walk\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task2 \u003d new Todo(\"wale\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Command cmd \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd.execute(items, ui);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d new AddCommand(task2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd.execute(items, ui);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task3 \u003d new Todo(\"cake\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d new AddCommand(task3);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd.execute(items, ui);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task taskdummy \u003d new Todo(\"dummy\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d new FindCommand(\"wal\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd.execute(items,ui);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"     Here are the matching tasks in your list:\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"     1.[T]\" + taskdummy.getStatusIconGui() + \" walk\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"     2.[T]\" + taskdummy.getStatusIconGui() + \" wale\\n\", cmd.executeGui(items,ui));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d new FindCommand(\"a\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd.execute(items,ui);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"     Here are the matching tasks in your list:\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"     1.[T]\" + taskdummy.getStatusIconGui() + \" walk\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"     2.[T]\" + taskdummy.getStatusIconGui() + \" wale\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"     3.[T]\" + taskdummy.getStatusIconGui() + \" cake\\n\", cmd.executeGui(items,ui));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "talesrune": 34
    }
  },
  {
    "path": "src/test/java/duke/command/ListCommTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "class ListCommTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    void listTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        TaskList items \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task \u003d new Todo(\"Hello\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task2 \u003d new Todo(\"world\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Command cmd \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd.execute(items, ui);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d new AddCommand(task2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd.execute(items, ui);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task3 \u003d new Todo(\"!\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d new AddCommand(task3);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd.execute(items, ui);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d new ListCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd.execute(items, ui);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task taskdummy \u003d new Todo(\"dummy\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"     Here are the tasks in your list:\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"     1.[T]\" + taskdummy.getStatusIconGui() + \" Hello\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"     2.[T]\" + taskdummy.getStatusIconGui() + \" world\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"     3.[T]\" + taskdummy.getStatusIconGui() + \" !\\n\", cmd.executeGui(items, ui)); // \\u2718 or ✗"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "talesrune": 27
    }
  },
  {
    "path": "src/test/java/duke/command/ShowNotesCommTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "talesrune"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "class ShowNotesCommTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    void showNotesTest() throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        TaskList items \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task \u003d new Todo(\"walk\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        task.setNotes(\"5 km\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        task \u003d new Deadline(\"homework\", \"07/07/2017 1707\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        task.setNotes(\"cs2113 project\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Command cmd \u003d new ShowNotesCommand(0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"     Here is the task and its notes:\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"       1.[T][X] walk\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"      | Notes: 5 km\", cmd.executeGui(items,ui));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d new ShowNotesCommand(1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"     Here is the task and its notes:\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"       2.[D][X] homework (by: 7th of July 2017, 5:07 PM)\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"      | Notes: cs2113 project\", cmd.executeGui(items,ui));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "talesrune": 36
    }
  },
  {
    "path": "src/test/java/duke/command/UpdateCommTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "talesrune"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "class UpdateCommTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    void updateTest() throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        TaskList items \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task \u003d new Todo(\"walk\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        task \u003d new Deadline(\"homework\", \"07/07/2017 1707\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        task \u003d new Deadline(\"movie\", \"05/05/2015 1500\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String taskDesc \u003d \"run\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String dateDesc \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        String typeDesc \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int typeOfUpdate \u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int tasknum \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Command cmd \u003d new UpdateCommand(taskDesc,dateDesc,typeDesc,typeOfUpdate,tasknum);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task taskdummy \u003d new Todo(\"dummy\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"     Nice! I\u0027ve updated this task ^^:\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"       1.[T]\" + taskdummy.getStatusIconGui()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \" run\", cmd.executeGui(items,ui));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        dateDesc \u003d \"08/08/2018 1708\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        typeOfUpdate \u003d 2;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        tasknum \u003d 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d new UpdateCommand(taskDesc,dateDesc,typeDesc,typeOfUpdate,tasknum);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"     Nice! I\u0027ve updated this task ^^:\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"       2.[D]\" + taskdummy.getStatusIconGui()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \" homework (by: 8th of August 2018, 5:08 PM)\", cmd.executeGui(items,ui));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        taskDesc \u003d \"trampoline\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        typeOfUpdate \u003d 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        tasknum \u003d 2;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d new UpdateCommand(taskDesc,dateDesc,typeDesc,typeOfUpdate,tasknum);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"     Nice! I\u0027ve updated this task ^^:\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"       3.[D]\" + taskdummy.getStatusIconGui()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \" trampoline (by: 5th of May 2015, 3PM)\", cmd.executeGui(items,ui));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        typeDesc \u003d \"todo\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        typeOfUpdate \u003d 3;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        tasknum \u003d 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d new UpdateCommand(taskDesc,dateDesc,typeDesc,typeOfUpdate,tasknum);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"     Nice! I\u0027ve updated this task ^^:\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"       2.[T]\" + taskdummy.getStatusIconGui()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \" homework\", cmd.executeGui(items,ui));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        typeDesc \u003d \"todo\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        typeOfUpdate \u003d 3;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        tasknum \u003d 2;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d new UpdateCommand(taskDesc,dateDesc,typeDesc,typeOfUpdate,tasknum);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"     Nice! I\u0027ve updated this task ^^:\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"       3.[T]\" + taskdummy.getStatusIconGui() + \" trampoline\", cmd.executeGui(items,ui));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void updateTest_exceptionThrown() throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        TaskList items \u003d new TaskList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task \u003d new Todo(\"walk\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        task \u003d new Deadline(\"homework\", \"07/07/2017 1707\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            items.get(0).setDateTime(\"07/07/2017 1707\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            assertEquals(\"     Error! Todo does not have date/time.\", e.getMessage());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            items.get(1).setDateTime(\"08/08/2018\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            assertEquals(\"Unparseable date: \\\"08/08/2018\\\"\", e.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "talesrune": 93
    }
  },
  {
    "path": "src/test/java/duke/parser/ParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.AddMultipleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import duke.task.BudgetList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import duke.task.ContactList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    TaskList items \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    BudgetList budgetList \u003d new BudgetList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    ContactList contactList \u003d new ContactList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    void parserTest() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task \u003d new Todo(\"Hi\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task2 \u003d new Todo(\"there\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Command cmd \u003d Parser.parse(\"todo Work\", items, budgetList, contactList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertTrue(cmd instanceof AddCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d Parser.parse(\"deadline basketball /by 19/04/2019 1900\", items, budgetList, contactList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertTrue(cmd instanceof AddCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d Parser.parse(\"deadline watch movies /by 20/07/2018 1240\", items, budgetList, contactList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertTrue(cmd instanceof AddCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d Parser.parse(\"find word\", items, budgetList, contactList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertTrue(cmd instanceof FindCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d Parser.parse(\"done 1\", items, budgetList, contactList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertTrue(cmd instanceof DoneCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d Parser.parse(\"list\", items, budgetList, contactList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertTrue(cmd instanceof ListCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d Parser.parse(\"delete 1\", items, budgetList, contactList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertTrue(cmd instanceof DeleteCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d Parser.parse(\"repeat this /from 10/05/2019 1234 /for 3 days\", items, budgetList, contactList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertTrue(cmd instanceof AddMultipleCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void parserTest_exceptionThrown() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            Parser.parse(\"invalid\", items, budgetList, contactList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            assertEquals(\"     (\u003e_\u003c) OoPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    void parserTest_DetectAnomalies() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task \u003d new Deadline(\"basketball\", \"19/04/2019 1900\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Command cmd;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            Parser.parse(\"deadline soccer /by 19/04/2019 1900\", items, budgetList, contactList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            assertEquals(\"     (\u003e_\u003c) OOPS!!! The date/time for deadline clashes with \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    + \"[D][X] basketball (by: 19th of April 2019, 7PM)\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                    + \"     Please choose another date/time! Or mark the above task as Done first!\", e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d Parser.parse(\"deadline soccer /by 19/04/2019 2000\", items, budgetList, contactList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertTrue(cmd instanceof AddCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d Parser.parse(\"done 1\", items, budgetList, contactList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd.execute(items, ui);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        cmd \u003d Parser.parse(\"deadline party /by 19/04/2019 1900\", items, budgetList, contactList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertTrue(cmd instanceof AddCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 1,
      "maxxyx96": 1,
      "-": 19,
      "talesrune": 64
    }
  },
  {
    "path": "src/test/java/duke/storage/StorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "class StorageTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    void storageTest() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        TaskList items \u003d new TaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task \u003d new Todo(\"store items\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task2 \u003d new Deadline(\"assignment\", \"08/04/2019 1000\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task3 \u003d new Deadline(\"party\", \"02/12/2019 1430\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        TaskList items2 \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        storage \u003d new Storage(\"data/dukeTest.txt\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            items2 \u003d new TaskList(storage.read());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        for (int i \u003d 0; i \u003c items2.size(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            assertEquals(items.get(i).getDescription(),items2.get(i).getDescription());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            assertEquals(items.get(i).getStatusIcon(),items2.get(i).getStatusIcon());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "talesrune": 31
    }
  },
  {
    "path": "src/test/java/duke/task/BudgetListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "//@@author maxxyx96"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "public class BudgetListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    void newBudgetListTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        BudgetList budgetList \u003d new BudgetList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        assertEquals(0, budgetList.getBudget());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    void addBudgetTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        BudgetList budgetList \u003d new BudgetList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        budgetList.addToBudget(\"2113\", \"\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        assertEquals(2113, budgetList.getBudget());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    void subtractBudgetTest() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        BudgetList budgetList \u003d new BudgetList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        budgetList.addToBudget(\"-2113\", \"\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        assertEquals(-2113, budgetList.getBudget());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    void invalidBudgetAddTest() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        BudgetList budgetList \u003d new BudgetList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        budgetList.addToBudget(\"TwoOneOneThree\", \"\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        assertEquals(0, budgetList.getBudget());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    void resetBudgetTest() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        BudgetList budgetList \u003d new BudgetList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        budgetList.addToBudget(\"2113\", \"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        budgetList.resetBudget(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        assertEquals(0, budgetList.getBudget());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    void budgetStringListTest() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        BudgetList budgetList \u003d new BudgetList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        budgetList.addToBudget(\"2113\", \"SEEDU\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "        assertEquals(\"     Here are your current expenses: \\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "                    + \"     1) 2113 : SEEDU\\n\", budgetList.getStringList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maxxyx96"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "maxxyx96": 54,
      "-": 2
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    void deadlineTest() throws ParseException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task \u003d new Deadline(\"homework\", \"08/04/2019 1000\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"[D][X] homework (by: 8th of April 2019, 10AM)\", task.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "talesrune": 9
    }
  },
  {
    "path": "src/test/java/duke/task/DetectDuplicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0318465"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0318465"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0318465"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0318465"
        },
        "content": "public class DetectDuplicateTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    void detectDuplicateTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        TaskList items \u003d new TaskList();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        DetectDuplicate detectDuplicate \u003d new DetectDuplicate(items);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0318465"
        },
        "content": "        detectDuplicate.isDuplicate(\"todo\", \"something cool\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        //assertEquals(\"     The same task is already in the list!\", detectDuplicate.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        //your test is INVALID since you removed the toString()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0318465"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0318465"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0318465": 14,
      "talesrune": 2
    }
  },
  {
    "path": "src/test/java/duke/task/FixedDurationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "//@@author Dou-Maokang"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": " * A test class to test the correctness of FixedDuration class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "class FixedDurationTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    void fixeddurationTest() throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        Task task1 \u003d new FixedDuration(\"homework\", 200, \"minutes\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        assertEquals(\"[F][X] homework (needs 200 minutes)\", task1.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        Task task2 \u003d new FixedDuration(\"workout\", 20, \"min\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        assertEquals(\"[F][X] workout (needs 20 minutes)\", task2.toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        Task task3 \u003d new FixedDuration(\"read\", 2, \"hours\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        assertEquals(\"[F][X] read (needs 2 hours)\", task3.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        Task task4 \u003d new FixedDuration(\"sing\", 1, \"hr\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        assertEquals(\"[F][X] sing (needs 1 hour)\", task4.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "Dou-Maokang": 24,
      "-": 6
    }
  },
  {
    "path": "src/test/java/duke/task/PriorityListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "//@@author Dou-Maokang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": " * A test class to test the correctness of PriorityList class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "public class PriorityListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    void setPriorityTest() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        Integer[] array \u003d {5, 5, 5, 5, 5};"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        ArrayList\u003cInteger\u003e list \u003d new ArrayList\u003cInteger\u003e(Arrays.asList(array));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        PriorityList priorityList \u003d new PriorityList(list);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        assertEquals(\"5 5 5 5 5 \", priorityList.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        priorityList.setPriority(1, 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        assertEquals(\"1 5 5 5 5 \", priorityList.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        priorityList.setPriority(2, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        assertEquals(\"1 2 5 5 5 \", priorityList.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        priorityList.setPriority(1, 5);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        assertEquals(\"5 2 5 5 5 \", priorityList.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    void getPriorityTest() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        Integer[] array \u003d {1, 2, 3, 4, 5};"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        ArrayList\u003cInteger\u003e list \u003d new ArrayList\u003cInteger\u003e(Arrays.asList(array));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        PriorityList priorityList \u003d new PriorityList(list);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        assertEquals(\"1 2 3 4 5 \", priorityList.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "        assertEquals(\"2\", String.format(\"%d\", priorityList.getPriority(2)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dou-Maokang"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "Dou-Maokang": 45
    }
  },
  {
    "path": "src/test/java/duke/task/TaskListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    void taskListTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        TaskList items \u003d new TaskList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task \u003d new Todo(\"Hello\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task2 \u003d new Todo(\"world\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task3 \u003d new Todo(\"!\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task2);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        items.add(task3);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"     1.[T][X] Hello\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"     2.[T][X] world\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                + \"     3.[T][X] !\\n\", items.getList());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "talesrune": 17
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    void taskTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task \u003d new Todo(\"Hey\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"Hey\", task.getDescription());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"[X]\", task.getStatusIcon());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"[T][X] Hey\", task.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        task.setStatusIcon(true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"[T][/] Hey\", task.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "talesrune": 13
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "talesrune"
        },
        "content": "//@@author talesrune"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "talesrune"
        },
        "content": "class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    void todoTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Task task \u003d new Todo(\"store items\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        assertEquals(\"[T][X] store items\", task.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "talesrune": 9
    }
  },
  {
    "path": "unused/Event.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author talesrune-unused"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "talesrune"
        },
        "content": " * Code for event task will not be used as the final product as it is very similar to Deadline."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "talesrune"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an event that stores description and date/time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Date at;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String[] suf \u003d { \"st\", \"nd\", \"rd\", \"th\" };"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    protected SimpleDateFormat datetimeFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int ONE \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int MINUS_ONE \u003d -1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int TWO \u003d 2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int THREE \u003d 3;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int TWENTY_ONE \u003d 21;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int TWENTY_TWO \u003d 22;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int TWENTY_THREE \u003d 23;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    private static final int THIRTY_ONE \u003d 31;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an event with the specified description and date/time."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param at The date/time of the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException  If there is an error converting the date/time."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Event(String description, String at) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Date dateTime \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            dateTime \u003d datetimeFormat.parse(at);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            this.at \u003d dateTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Error reading date/time, please use this format \\\"d/MM/yyyy HHmm\\\"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracting a task content into readable string."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String to be displayed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat datetimeFormat2 \u003d new SimpleDateFormat(\"MMMMM yyyy, h:mm a\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat datetimeFormat3 \u003d new SimpleDateFormat(\"MMMMM yyyy, ha\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String displayDT \u003d \"\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        int day \u003d Integer.parseInt(new SimpleDateFormat(\"d\").format(at));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        int min \u003d Integer.parseInt(new SimpleDateFormat(\"m\").format(at));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        if (min \u003e ZERO) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            displayDT \u003d datetimeFormat2.format(at);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            displayDT \u003d datetimeFormat3.format(at);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int sufIndex \u003d MINUS_ONE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        if (day \u003d\u003d ONE || day \u003d\u003d TWENTY_ONE || day \u003d\u003d THIRTY_ONE) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            sufIndex \u003d ZERO;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (day \u003d\u003d TWO || day \u003d\u003d TWENTY_TWO) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            sufIndex \u003d ONE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (day \u003d\u003d THREE || day \u003d\u003d TWENTY_THREE) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            sufIndex \u003d TWO;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (day \u003e THREE \u0026\u0026 day \u003c THIRTY_ONE) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            sufIndex \u003d THREE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String suffixStr \u003d day + suf[sufIndex];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        displayDT \u003d suffixStr + \" of \" + displayDT;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + displayDT + \")\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracting a task content into readable string (GUI)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String to be displayed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toStringGui() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat datetimeFormat2 \u003d new SimpleDateFormat(\"MMMMM yyyy, h:mm a\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat datetimeFormat3 \u003d new SimpleDateFormat(\"MMMMM yyyy, ha\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String displayDT \u003d \"\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        int day \u003d Integer.parseInt(new SimpleDateFormat(\"d\").format(at));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        int min \u003d Integer.parseInt(new SimpleDateFormat(\"m\").format(at));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        if (min \u003e ZERO) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            displayDT \u003d datetimeFormat2.format(at);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            displayDT \u003d datetimeFormat3.format(at);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        int sufIndex \u003d MINUS_ONE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        if (day \u003d\u003d ONE || day \u003d\u003d TWENTY_ONE || day \u003d\u003d THIRTY_ONE) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            sufIndex \u003d ZERO;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (day \u003d\u003d TWO || day \u003d\u003d TWENTY_TWO) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            sufIndex \u003d ONE;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (day \u003d\u003d THREE || day \u003d\u003d TWENTY_THREE) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            sufIndex \u003d TWO;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } else if (day \u003e THREE \u0026\u0026 day \u003c THIRTY_ONE) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            sufIndex \u003d THREE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String suffixStr \u003d day + suf[sufIndex];"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        displayDT \u003d suffixStr + \" of \" + displayDT;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[E]\" + super.toStringGui() + \" (at: \" + displayDT + \")\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracting a task content into string that is suitable for text file."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String to be written into text file."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String datetimeStr \u003d datetimeFormat.format(at);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"E|\" + super.toFile() + \"|\" + datetimeStr;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the date of the task as a String format."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String of Date."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        String datetimeStr \u003d datetimeFormat.format(at);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return datetimeStr;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     * Sets the date of the task."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "talesrune"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    public void setDateTime(String at) throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        Date dateTime;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            dateTime \u003d datetimeFormat.parse(at);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            this.at \u003d dateTime;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            System.out.println(\"Error reading date/time, please use this format \\\"d/MM/yyyy HHmm\\\"\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "talesrune"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "talesrune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "talesrune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "talesrune"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "talesrune"
        },
        "content": "/**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "talesrune"
        },
        "content": " * Code snippet from executeGui function in UpdateCommand Class"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "talesrune"
        },
        "content": " */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "talesrune"
        },
        "content": "/*"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               else if (typeDesc.equals(\"event\")) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                   if (items.get(index) instanceof Deadline || items.get(index) instanceof Repeat) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                       newtaskObj \u003d new Event(items.get(index).getDescription(), items.get(index).getDateTime());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                   } else if (items.get(index) instanceof Event) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                       //throw new DukeException(\"     You are updating the same type of task! (Event)\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                       return \"     (\u003e_\u003c) OOPS!!! You are updating the same type of task! (Event)\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                   } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                       newtaskObj \u003d new Event(items.get(index).getDescription(), \"01/01/2001 0001\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                   }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "talesrune"
        },
        "content": "*/"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "talesrune"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "talesrune"
        },
        "content": "/**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "talesrune"
        },
        "content": " * Code snippet from read function in Storage Class"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "talesrune"
        },
        "content": " */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "talesrune"
        },
        "content": "/*"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               else if (commandList[ZERO].equals(\"E\")) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                   if (taskDesc.isEmpty() || dateDesc.isEmpty()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                       throw new DukeException(\"Error reading description or date/time, skipping to next line\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                   } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                       t \u003d new Event(taskDesc, dateDesc);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                       t.setStatusIcon(checked);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                       t.setNotes(notesDesc);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                       items.add(t);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "talesrune"
        },
        "content": "                   }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "talesrune"
        },
        "content": "               }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "talesrune"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "-": 102,
      "talesrune": 83
    }
  }
]
