[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    archiveBaseName \u003d \"rims\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    archiveVersion \u003d \"v1.3\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    mainClassName \u003d \"rims/core/Rims\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "sourceSets {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    main {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        java {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            srcDirs \u003d [\u0027src/main/java\u0027]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        resources {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            srcDirs \u003d [\u0027src/main/resources\u0027]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "rabhijit": 16,
      "-": 44
    }
  },
  {
    "path": "src/main/java/rims/command/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hin1"
        },
        "content": "package rims.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hin1"
        },
        "content": "import rims.core.ResourceList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hin1"
        },
        "content": "import rims.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hin1"
        },
        "content": "import rims.core.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hin1"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.Item;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.Room;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.ReservationList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.Resource;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hin1"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hin1"
        },
        "content": "//@@author hin1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hin1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hin1"
        },
        "content": " * Implements the addition of a new Resource to the ResourceList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hin1"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hin1"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hin1"
        },
        "content": "    protected String resourceName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hin1"
        },
        "content": "    protected String resourceType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hin1"
        },
        "content": "    protected int qty;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hin1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * Constructor of a new AddCommand for a new Room."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @param roomName the name of the new Room to be added to the ResourceList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hin1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hin1"
        },
        "content": "    public AddCommand(String roomName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hin1"
        },
        "content": "        resourceName \u003d roomName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hin1"
        },
        "content": "        resourceType \u003d \"room\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hin1"
        },
        "content": "        canModifyData \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hin1"
        },
        "content": "        commandUserInput \u003d \"add \" + roomName + \" (room)\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hin1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hin1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * Constructor of a new AddCommand for a new Item."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @param itemName the name of the new Item to be added to the ResourceList."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @param quantity the quantity of the new Item to be added."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hin1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hin1"
        },
        "content": "    public AddCommand(String itemName, int quantity) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hin1"
        },
        "content": "        resourceName \u003d itemName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hin1"
        },
        "content": "        resourceType \u003d \"item\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hin1"
        },
        "content": "        qty \u003d quantity;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hin1"
        },
        "content": "        canModifyData \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hin1"
        },
        "content": "        commandUserInput \u003d \"add \" + qty + \" \" + itemName + \" (item)\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hin1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hin1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * Creates the new Resource, adds it to the ResourceList, and prints a message to the CLI"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * that the Resource has been successfully added."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @param ui An instance of the user interface."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @param storage An instance of the Storage class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @param resources The ResourceList, containing all the created Resources thus far."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hin1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hin1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hin1"
        },
        "content": "    public void execute(Ui ui, Storage storage, ResourceList resources) throws RimsException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hin1"
        },
        "content": "        storage.saveToFile(resources.getResources());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hin1"
        },
        "content": "        if (resourceType.equals(\"room\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hin1"
        },
        "content": "            int resourceId \u003d resources.generateResourceId();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hin1"
        },
        "content": "            boolean resourceExists;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hin1"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hin1"
        },
        "content": "                resources.isRoom(resourceName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hin1"
        },
        "content": "                resourceExists \u003d true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hin1"
        },
        "content": "            } catch (RimsException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hin1"
        },
        "content": "                resourceExists \u003d false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hin1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hin1"
        },
        "content": "            if (resourceExists) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hin1"
        },
        "content": "                throw new RimsException(\"A room with the same name already exists in your inventory!\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hin1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hin1"
        },
        "content": "            Room newRoom \u003d new Room(resourceId, resourceName);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hin1"
        },
        "content": "            resources.add(newRoom);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hin1"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hin1"
        },
        "content": "            ui.print(\"The following room has been successfully added:\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hin1"
        },
        "content": "            ui.print(newRoom.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hin1"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hin1"
        },
        "content": "        } else if (resourceType.equals(\"item\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hin1"
        },
        "content": "            for (int i \u003d 0; i \u003c qty; i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hin1"
        },
        "content": "                int resourceId \u003d resources.generateResourceId();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hin1"
        },
        "content": "                Item newItem \u003d new Item(resourceId, resourceName);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hin1"
        },
        "content": "                resources.add(newItem);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hin1"
        },
        "content": "                if (i \u003d\u003d qty - 1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hin1"
        },
        "content": "                    ui.printLine();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hin1"
        },
        "content": "                    ui.print(\"The following item(s) have been successfully added:\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hin1"
        },
        "content": "                    ui.print(newItem.toString() + \" (qty: \" + qty + \")\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hin1"
        },
        "content": "                    ui.printLine();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hin1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hin1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hin1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hin1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hin1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hin1": 85,
      "isbobby": 3,
      "rabhijit": 3
    }
  },
  {
    "path": "src/main/java/rims/command/CalendarCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "package rims.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "import rims.core.ResourceList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "import rims.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.core.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import static rims.command.ListCommand.getListForSpecificDay;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import static rims.command.ListCommand.stringToDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "//@@author danielcyc"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "public class CalendarCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static int cellLength \u003d 15;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static int cellHeight \u003d 6;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static int calHeight \u003d 5;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static int calWidth \u003d 7;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static int minHeight \u003d 5;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private int daysInMonth \u003d getDaysInMonth(LocalDateTime.now());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private String vert \u003d \"|\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private String horz \u003d \"-\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private String topLeft \u003d \"+\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private String topRight \u003d \"+\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private String botRight \u003d \"+\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private String botLeft \u003d \"+\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private String centre \u003d \"+\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private String topCentre \u003d \"+\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private String botCentre \u003d \"+\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private String midRight \u003d \"+\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private String midLeft \u003d \"+\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private String[][] data;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    protected ResourceList resources;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    protected String operator;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    public CalendarCommand(ResourceList resources, Ui ui) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        this.resources \u003d resources;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        operator \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    public CalendarCommand(ResourceList resources, Ui ui, String operator) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        this.resources \u003d resources;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        this.operator \u003d operator;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    public void printCal() throws ParseException, RimsException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        getData();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        printTopCells();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        for (int row \u003d 2; row \u003c calHeight; row++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            printMidCells(row);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        printBotCells();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private void printTopCells() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        int cellRow \u003d 1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d (cellLength * calWidth); i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                System.out.print(topLeft);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            } else if (i \u003d\u003d (cellLength * calWidth)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                System.out.print(topRight);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            } else if ((i % cellLength) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                System.out.print(topCentre);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                System.out.print(horz);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        printCellRow(cellRow, daysInMonth);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private void printMidCells(int cellRow) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d (cellLength * calWidth); i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                System.out.print(midLeft);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            } else if (i \u003d\u003d (cellLength * calWidth)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                System.out.print(midRight);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            } else if ((i % cellLength) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                System.out.print(centre);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                System.out.print(horz);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        printCellRow(cellRow, daysInMonth);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private void printBotCells() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        int cellRow \u003d calHeight;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d (cellLength * calWidth); i++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                System.out.print(midLeft);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            } else if (i \u003d\u003d (cellLength * calWidth)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                System.out.print(midRight);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            } else if ((i % cellLength) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                System.out.print(centre);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                System.out.print(horz);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        printCellRow(cellRow, daysInMonth);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d (cellLength * calWidth); i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                System.out.print(botLeft);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            } else if (i \u003d\u003d (cellLength * calWidth)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                System.out.print(botRight);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            } else if ((i % cellLength) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                System.out.print(botCentre);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                System.out.print(horz);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private int getLength(String phrase) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        return phrase.length();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private void printCellRow(int cellRow, int daysInMonth) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        for (int row \u003d 2; row \u003c cellHeight; row++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            for (int i \u003d 0; i \u003c\u003d cellLength * calWidth; i++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                int day \u003d getDay(i, cellRow);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                String phraseToPrint;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                if ((i % cellLength) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    System.out.print(vert);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                } else if (day \u003e daysInMonth) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    phraseToPrint \u003d shortenPhrase(\"\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    System.out.print(phraseToPrint);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    System.out.print(vert);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    i +\u003d cellLength;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                } else if (i \u003d\u003d (cellLength * calWidth)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    System.out.print(vert);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                } else if (row \u003d\u003d 2) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    phraseToPrint \u003d shortenPhrase(day);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    System.out.print(phraseToPrint);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    System.out.print(vert);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    i +\u003d cellLength;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                } else if ((day - 1 \u003e\u003d data.length) || (row - 3 \u003e data[day - 1].length - 1)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    phraseToPrint \u003d shortenPhrase(\"\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    System.out.print(phraseToPrint);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    System.out.print(vert);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    i +\u003d cellLength;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                } else if ((row \u003d\u003d cellHeight - 1) \u0026\u0026 (data[day - 1].length \u003e cellHeight - 3)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    phraseToPrint \u003d shortenPhrase(\"more...\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    System.out.print(phraseToPrint);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    System.out.print(vert);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    i +\u003d cellLength;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    String phrase \u003d data[day - 1][row - 3];"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    phraseToPrint \u003d shortenPhrase(phrase);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    System.out.print(phraseToPrint);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    System.out.print(vert);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    i +\u003d cellLength;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private String shortenPhrase(String phrase) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        String result \u003d \" \";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        String padding \u003d \"\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        int length \u003d getLength(phrase);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        if (length \u003c\u003d cellLength - 2) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            result +\u003d phrase;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            for (int i \u003d 0; i \u003c cellLength - length - 3; i++) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                padding +\u003d \" \";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            result +\u003d padding;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        } else { // assert need to truncate phrase"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            result +\u003d phrase.substring(0, (cellLength - 6));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            result +\u003d \"...\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        result +\u003d \" \";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private String shortenPhrase(int day) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        String padding \u003d \"\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        if (day \u003c\u003d 9) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            for (int i \u003d 0; i \u003c cellLength - 3; i++) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                padding +\u003d \" \";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            result +\u003d padding + day;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        } else { // assert that day is double digit"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            for (int i \u003d 0; i \u003c cellLength - 4; i++) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                padding +\u003d \" \";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            result +\u003d padding + day;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        result +\u003d \" \";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private int getDay(int i, int cellRow) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        int result \u003d i / cellLength + 1 + ((cellRow - 1) * 7);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private void getData() throws ParseException, RimsException {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e tempData \u003d new ArrayList\u003cArrayList\u003cString\u003e\u003e();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        for (int day \u003d 1; day \u003c\u003d daysInMonth; day++) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            String now \u003d dtf.format(LocalDateTime.now());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            String strDate \u003d day + \"/\" + now;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            Date date \u003d stringToDate(strDate);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            tempData.add(getListForSpecificDay(date, resources, ui));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        String[][] array \u003d new String[tempData.size()][];"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        for (int i \u003d 0; i \u003c tempData.size(); i++) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            ArrayList\u003cString\u003e row \u003d tempData.get(i);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            array[i] \u003d row.toArray(new String[row.size()]);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        data \u003d array;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private int getDaysInMonth(LocalDateTime date) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        String strDate \u003d dtf.format(date);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        String[] ymd \u003d strDate.split(\"/\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        int year \u003d Integer.parseInt(ymd[2]);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        int month \u003d Integer.parseInt(ymd[1]);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        int day \u003d Integer.parseInt(ymd[0]);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        YearMonth yearMonthObject \u003d YearMonth.of(year, month);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        int daysInMonth \u003d yearMonthObject.lengthOfMonth();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        return daysInMonth;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    public void execute(Ui ui, Storage storage, ResourceList resources) throws RimsException {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        ui.formattedPrint(\"ITEMS LOANED OR RESERVED FOR THIS MONTH:\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            if (operator \u003d\u003d null) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                printCal();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            } else if (operator.equals(\"+\")) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                increaseSize();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            } else if (operator.equals(\"-\")) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                decreaseSize();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            throw new RimsException(\"Invalid calendar size!\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "           "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        public static void increaseSize(ResourceList resources, Ui ui) throws ParseException, RimsException {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            cellHeight ++;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            cellLength +\u003d 3;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            printCal();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        public static void decreaseSize(ResourceList resources, Ui ui) throws ParseException, RimsException {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        if (!(cellHeight \u003c\u003d minHeight)) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            cellHeight--;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            cellLength -\u003d 3;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            System.out.println(\"You have reached the minimum calendar size! \\n\" +"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    \"The calender will be printed at this minimum size.\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        printCal();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "danielcyc": 291,
      "rabhijit": 9
    }
  },
  {
    "path": "src/main/java/rims/command/CloseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "package rims.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.ResourceList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hin1"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "//@@author rabhijit"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * Carries out the necessary operations to close RIMS; saving all existing"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * Resources and Reservations to disk in text format, sending the farewell"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * message, and setting the exit code to terminate the program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "public class CloseCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Saves all existing Resources and Reservations to disk in a text format, sends"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * a farewell message, and sets the exit code to true to halt the RIMS program."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param ui        An instance of the user interface."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param storage   An instance of the Storage class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resources The ResourceList, containing all the created Resources thus"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *                  far."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws IOException if there is an error in saving Resources or Reservations"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *                     to disk"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void execute(Ui ui, Storage storage, ResourceList resources) throws RimsException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        storage.saveToFile(resources.getResources());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        ui.farewell();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        setExitCode();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hin1": 1,
      "isbobby": 3,
      "rabhijit": 30
    }
  },
  {
    "path": "src/main/java/rims/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "package rims.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.ResourceList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "//@@author rabhijit"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * The parent class of all possible Commands understood by RIMS. Sets the exit code"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * to false by default and lists methods common to all the commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected Boolean willExit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected boolean canModifyData;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected String commandUserInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Sets the exit code, which is checked after the handling and processing of every command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * and before the input of the next command, to false. When it is true, the RIMS program halts."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        willExit \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        canModifyData \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns the exit code of the command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the exit code"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Boolean getExitCode() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return willExit;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Sets the exit code of the command to true. When this happens, the RIMS"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * program will halt."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void setExitCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        willExit \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Checks whether the Command type could change ResourceList"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * or ReservationLists in Resources."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return true if type of Command may change data."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public boolean canModifyData() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return canModifyData;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns the command with its relevant arguments inputted by"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * the user as a string."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return The string with the command details and arguments"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public String getCommandUserInput() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return commandUserInput;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * In the Command child classes, this method will carry out the necessary operations"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * to execute its command."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param ui An instance of the user interface."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param storage An instance of the Storage class."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resources The ResourceList, containing all the created Resources thus far."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if any date is un-parsable, if there is an error in saving Resources to disk or"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *                       if there is a non-formatting-related issue in the input"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public abstract void execute(Ui ui, Storage storage, ResourceList resources)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        throws RimsException;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "isbobby": 3,
      "rabhijit": 76
    }
  },
  {
    "path": "src/main/java/rims/command/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hin1"
        },
        "content": "package rims.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hin1"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hin1"
        },
        "content": "import rims.core.ResourceList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.core.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.core.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.Resource;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.Room;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.ReservationList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hin1"
        },
        "content": "//@@author hin1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hin1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hin1"
        },
        "content": " * Implements the deletion of a Resource from the ResourceList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hin1"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hin1"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hin1"
        },
        "content": "    protected String resourceName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hin1"
        },
        "content": "    protected String resourceType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hin1"
        },
        "content": "    protected int qty;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hin1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * Constructor for a DeleteCommand, that takes in the name and type of the"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * Resource to be deleted."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hin1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @param resourceName the name of the Resource to be deleted."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @param resourceType the type (Item or Room) of the Resource to be deleted."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hin1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hin1"
        },
        "content": "    public DeleteCommand(String resourceName, String resourceType) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hin1"
        },
        "content": "        this.resourceName \u003d resourceName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hin1"
        },
        "content": "        this.resourceType \u003d resourceType;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hin1"
        },
        "content": "        this.canModifyData \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hin1"
        },
        "content": "        this.commandUserInput \u003d \"delete \" + resourceName + \" (\" + resourceType + \")\" + \"IDs: \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hin1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hin1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * Obtains the resource IDs of the Resources to be deleted from the user,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * removes them from the ResourceList, and prints a message to the CLI that the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * Resource objects have been successfully deleted."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hin1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @param ui        An instance of the user interface."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @param storage   An instance of the Storage class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @param resources The ResourceList, containing all the created Resources thus"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hin1"
        },
        "content": "     *                  far."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @throws RimsException if the resource IDs specified by the user are invalid"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hin1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hin1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hin1"
        },
        "content": "    public void execute(Ui ui, Storage storage, ResourceList resources) throws RimsException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hin1"
        },
        "content": "        storage.saveToFile(resources.getResources());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hin1"
        },
        "content": "        if (resourceType.equals(\"room\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hin1"
        },
        "content": "            Resource thisResource \u003d resources.getResourceByName(resourceName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hin1"
        },
        "content": "            resources.deleteResourceByName(resourceName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hin1"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hin1"
        },
        "content": "            ui.print(\"The following room has been successfully deleted:\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hin1"
        },
        "content": "            ui.print(thisResource.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hin1"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hin1"
        },
        "content": "        } else if (resourceType.equals(\"item\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hin1"
        },
        "content": "            ArrayList\u003cResource\u003e allOfItem \u003d resources.getAllOfResource(resourceName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hin1"
        },
        "content": "            if (allOfItem.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hin1"
        },
        "content": "                throw new RimsException(\"This resource does not exist in your inventory!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hin1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hin1"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hin1"
        },
        "content": "            for (int i \u003d 0; i \u003c allOfItem.size(); i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hin1"
        },
        "content": "                Resource thisResource \u003d allOfItem.get(i);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hin1"
        },
        "content": "                ReservationList thisResourceReservations \u003d thisResource.getReservations();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hin1"
        },
        "content": "                ui.printDash();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hin1"
        },
        "content": "                ui.print(thisResource.toString() + \" (resource ID: \" + thisResource.getResourceId() + \")\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hin1"
        },
        "content": "                if (!thisResourceReservations.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hin1"
        },
        "content": "                    for (int j \u003d 0; j \u003c thisResourceReservations.size(); j++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hin1"
        },
        "content": "                        ui.print(\"\\t\" + thisResourceReservations.getReservationByIndex(j).toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hin1"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hin1"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hin1"
        },
        "content": "                    ui.print(\"No bookings for this resource yet!\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hin1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hin1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            //@@author rabhijit"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.printDash();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            String idInput \u003d ui.getInput("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    \"Type in the resource ID(s) (separated by a space for multiple IDs)\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    + \"that you wish to delete:\").trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (idInput.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the IDs of the resources you wish to delete!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            String[] splitIdInput \u003d idInput.split(\" \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ArrayList\u003cInteger\u003e intIdInput \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            for (int i \u003d 0; i \u003c splitIdInput.length; i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                intIdInput.add(Integer.parseInt(splitIdInput[i]));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ArrayList\u003cResource\u003e deletedResources \u003d new ArrayList\u003cResource\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            for (int j \u003d 0; j \u003c intIdInput.size(); j++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                Resource thisResource \u003d resources.getResourceById(intIdInput.get(j));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                deletedResources.add(thisResource);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                resources.deleteResourceById(intIdInput.get(j));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            qty \u003d deletedResources.size();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.print(\"The following item(s) have been successfully deleted:\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            for (int k \u003d 0; k \u003c deletedResources.size(); k++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                Resource thisDeletedResource \u003d deletedResources.get(k);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                ui.print(thisDeletedResource.toString()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                        + \" (resource ID: \" + thisDeletedResource.getResourceId() + \")\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            addIdsToCommandUserInput(intIdInput); //Adds information of IDs deleted in commandUserInput"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hin1"
        },
        "content": "    //@@author hin1"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hin1"
        },
        "content": "    private void addIdsToCommandUserInput(ArrayList\u003cInteger\u003e idArray) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hin1"
        },
        "content": "        for (int i : idArray) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hin1"
        },
        "content": "            commandUserInput +\u003d (i + \", \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hin1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hin1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hin1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hin1": 75,
      "rabhijit": 46
    }
  },
  {
    "path": "src/main/java/rims/command/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "package rims.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.core.ResourceList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.core.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "//@@author rabhijit"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * Prints a list of all supported commands, and a description of those commands,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * for the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Prints the list of commands that is stored in the Ui instance."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param ui An instance of the user interface."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param storage An instance of the Storage class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resources The ResourceList, containing all the created Resources thus far."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void execute(Ui ui, Storage storage, ResourceList resources) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        ui.help();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rabhijit": 23
    }
  },
  {
    "path": "src/main/java/rims/command/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "package rims.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.ResourceList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.Resource;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.ReservationList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "//@@author rabhijit"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * Shows the TaskList of all the currently existing Tasks in String format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected String resourceDetail \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected String listType \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * The constructor for a ListCommand, for a generic list of all Resources in the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * ResourceList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * The constructor for a ListCommand, when a detailed list of a particular"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Resource is desired."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param paramType      the type of Resource desired (Item or Room)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceDetail the name of the Resource or the date for which a list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *                       is desired."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public ListCommand(String paramType, String resourceDetail) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        listType \u003d paramType;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.resourceDetail \u003d resourceDetail;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        canModifyData \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        commandUserInput \u003d \"list all \" + paramType + \"by \" + resourceDetail;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Converts a date and time inputted by the user in String format, into a Date"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param stringDate the date and time inputted by the user in String format."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a Date object representing the date and time inputted by the user."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public static Date stringToDate(String stringDate) throws RimsException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        Date dateValue;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            dateValue \u003d formatter.parse(stringDate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            throw new RimsException(\"Invalid format of date \" + stringDate + \"!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return dateValue;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    //@@author danielcyc"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    public static ArrayList\u003cString\u003e getListForSpecificDay(Date day, ResourceList resources, Ui ui)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            throws ParseException, RimsException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        ArrayList\u003cString\u003e coveredResources \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        String strDate \u003d dateFormat.format(day);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        for (int i \u003d 0; i \u003c resources.size(); i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            Resource thisResource \u003d resources.getResourceByIndex(i);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            int bookedNumberOfResource \u003d resources.getBookedNumberOfResourceForDate(thisResource.getName(), strDate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            if (!coveredResources.contains(bookedNumberOfResource + \"x \" + thisResource.getName())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    \u0026\u0026 bookedNumberOfResource \u003e 0) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                coveredResources.add(bookedNumberOfResource + \"x \" + thisResource.getName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        return coveredResources;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    //@@author rabhijit"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Depending on the type of list desired, either prints out a basic list of all"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Resources in the ResourceList, or a detailed list of an individual Resource"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * containing all of its current and future Reservations."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param ui        An instance of the user interface."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param storage   An instance of the Storage class."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resources The ResourceList, containing all the created Resources thus"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *                  far."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws ParseException if the resource name is invalid"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException  for any other unexpected error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void execute(Ui ui, Storage storage, ResourceList resources) throws RimsException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (listType \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ArrayList\u003cString\u003e coveredResources \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.print(\"CURRENTLY AVAILABLE:\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.printEmptyLine();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            for (int i \u003d 0; i \u003c resources.size(); i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                Resource thisResource \u003d resources.getResourceByIndex(i);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                int availableNumberOfResource \u003d resources.getAvailableNumberOfResource(thisResource.getName());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                if (!coveredResources.contains(thisResource.getName()) \u0026\u0026 availableNumberOfResource \u003e 0) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    coveredResources.add(thisResource.getName());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    if (thisResource.getType().equals(\"I\")) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                        ui.print(thisResource.toString() + \" (qty: \" + availableNumberOfResource + \")\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    } else if (thisResource.getType().equals(\"R\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                        ui.print(thisResource.toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.printDash();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.print(\"CURRENTLY BOOKED:\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.printEmptyLine();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            coveredResources \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            for (int i \u003d 0; i \u003c resources.size(); i++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                Resource thisResource \u003d resources.getResourceByIndex(i);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                int bookedNumberOfResource \u003d resources.getBookedNumberOfResource(thisResource.getName());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                if (!coveredResources.contains(thisResource.getName()) \u0026\u0026 bookedNumberOfResource \u003e 0) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    coveredResources.add(thisResource.getName());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    if (thisResource.getType().equals(\"I\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                        ui.print(thisResource.toString() + \" (qty: \" + bookedNumberOfResource + \")\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    } else if (thisResource.getType().equals(\"R\")) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                        ui.print(thisResource.toString());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    ArrayList\u003cResource\u003e allOfResource \u003d resources.getAllOfResource(thisResource.getName());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    for (int j \u003d 0; j \u003c allOfResource.size(); j++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                        if (!allOfResource.get(j).isCurrentlyAvailable()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                            ui.print(\"\\t\" + allOfResource.get(j).getReservations().getCurrentBooking().toString());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else if (listType.equals(\"item\")) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (!resources.isItem(resourceDetail)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"There is no such item!\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ArrayList\u003cResource\u003e allOfItem \u003d resources.getAllOfResource(resourceDetail);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            for (int i \u003d 0; i \u003c allOfItem.size(); i++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                Resource thisResource \u003d allOfItem.get(i);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                ReservationList thisResourceReservations \u003d thisResource.getReservations();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                ui.printDash();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                ui.print(thisResource.toString() + \" (resource ID: \" + thisResource.getResourceId() + \")\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                if (!thisResourceReservations.isEmpty()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    for (int j \u003d 0; j \u003c thisResourceReservations.size(); j++) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                        ui.print(\"\\t\" + thisResourceReservations.getReservationByIndex(j).toString());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    ui.print(\"No bookings for this resource yet!\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.printDash();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else if (listType.equals(\"room\")) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (!resources.isRoom(resourceDetail)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"There is no such room!\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            Resource thisResource \u003d resources.getResourceByName(resourceDetail);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ReservationList thisResourceReservations \u003d thisResource.getReservations();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.print(thisResource.toString() + \" (resource ID: \" + thisResource.getResourceId() + \")\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (!thisResourceReservations.isEmpty()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                for (int j \u003d 0; j \u003c thisResourceReservations.size(); j++) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    ui.print(\"\\t\" + thisResourceReservations.getReservationByIndex(j).toString());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                ui.print(\"No bookings for this resource yet!\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        // @@author aarushisingh1"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        } else if (listType.equals(\"date\")) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            ArrayList\u003cString\u003e coveredResources \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            ui.print(\"CURRENTLY AVAILABLE ON THIS DATE:\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            ui.printEmptyLine();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            String checkedDate \u003d resourceDetail;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            Date date \u003d resources.stringToDate(checkedDate);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            for (int i \u003d 0; i \u003c resources.size(); i++) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                Resource thisResource \u003d resources.getResourceByIndex(i);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                int availableNumberOfResource \u003d resources.getAvailableNumberOfResourceForDate(thisResource.getName(),"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                        checkedDate);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                if (!coveredResources.contains(thisResource.getName()) \u0026\u0026 availableNumberOfResource \u003e 0) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                    coveredResources.add(thisResource.getName());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                    ui.print(thisResource.toString() + \" (qty: \" + availableNumberOfResource + \")\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            ui.printDash();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            ui.print(\"CURRENTLY BOOKED ON THIS DATE:\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            ui.printEmptyLine();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            coveredResources \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            for (int i \u003d 0; i \u003c resources.size(); i++) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                Resource thisResource \u003d resources.getResourceByIndex(i);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                int bookedNumberOfResource \u003d resources.getBookedNumberOfResourceForDate(thisResource.getName(),"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                        checkedDate);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                if (!coveredResources.contains(thisResource.getName()) \u0026\u0026 bookedNumberOfResource \u003e 0) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                    coveredResources.add(thisResource.getName());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                    ui.print(thisResource.toString() + \" (qty: \" + bookedNumberOfResource + \")\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                    ArrayList\u003cResource\u003e allOfResource \u003d resources.getAllOfResource(thisResource.getName());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                    for (int j \u003d 0; j \u003c allOfResource.size(); j++) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                        if (!allOfResource.get(j).isAvailableOnDate(date)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                            ui.print(\"\\t\" + allOfResource.get(j).getReservations().getCurrentBooking().toString());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aarushisingh1": 45,
      "isbobby": 4,
      "danielcyc": 18,
      "rabhijit": 155
    }
  },
  {
    "path": "src/main/java/rims/command/ReserveCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "isbobby"
        },
        "content": "package rims.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hin1"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.ResourceList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.Reservation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.ReservationList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.Resource;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//@@author isbobby"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "isbobby"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "isbobby"
        },
        "content": " * Creates a Reservation for a Resource in the ResourceList, given the ID of the"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "isbobby"
        },
        "content": " * user, the name of the Resource and the dates between which the Reservation is"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "isbobby"
        },
        "content": " * valid."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "isbobby"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "isbobby"
        },
        "content": "public class ReserveCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    protected String resourceName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    protected int qty;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    protected Date dateFrom;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    protected Date dateTill;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    protected String stringDateFrom \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    protected String stringDateTill;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    protected int userId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    // @@author rabhijit"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Constructor for a ReserveCommand, for a Room which is to be loaned from"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * effective immediately till a certain future date."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param roomName       the name of the Room to be loaned out."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param stringDateTill the date by which the Room must be returned, in String"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *                       format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param userId         the ID of the user making the loan."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public ReserveCommand(String roomName, String stringDateTill, int userId) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        resourceName \u003d roomName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.qty \u003d 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.dateFrom \u003d new Date(System.currentTimeMillis());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.stringDateTill \u003d stringDateTill;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.userId \u003d userId;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        canModifyData \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        commandUserInput \u003d \"loan \" + roomName + \" (room) until \" + stringDateTill + \" by user \" + userId;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Constructor for a ReserveCommand, for an Item which is to be loaned from"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * effective immediately till a certain future date."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param itemName       the name of the Item to be loaned out."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param qty            the quantity of the Item to be loaned out."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param stringDateTill the date by which the Item(s) must be returned, in"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *                       String format."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param userId         the ID of the user making the loan."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public ReserveCommand(String itemName, int qty, String stringDateTill, int userId) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        resourceName \u003d itemName;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.qty \u003d qty;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.dateFrom \u003d new Date(System.currentTimeMillis());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.stringDateTill \u003d stringDateTill;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.userId \u003d userId;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        canModifyData \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        commandUserInput \u003d \"loan \" + qty + \" \" + itemName + \" (room) until \" + stringDateTill + \" by user \" + userId;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Constructor for a ReserveCommand, for a Room which is to be reserved from a"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * given date in the future till a further future date."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param roomName       the name of the Room to be reserved."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param stringDateFrom the date from which the Room is to be loaned out, in"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *                       String format."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param stringDateTill the date by which the Room must be returned, in String"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *                       format."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param userId         the ID of the user making the reservation."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public ReserveCommand(String roomName, String stringDateFrom, String stringDateTill, int userId) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        resourceName \u003d roomName;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.qty \u003d 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.stringDateFrom \u003d stringDateFrom;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.stringDateTill \u003d stringDateTill;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.userId \u003d userId;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Constructor for a ReserveCommand, for an Item which is to be reserved from a"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * given date in the future till a further future date."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param itemName       the name of the Item to be reserved."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param qty            the quantity of the Item to be reserved."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param stringDateFrom the date from which the Item is to be loaned out, in"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *                       String format."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param stringDateTill the date by which the Item must be returned, in String"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *                       format."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param userId         the ID of the user making the reservation."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public ReserveCommand(String itemName, int qty, String stringDateFrom, String stringDateTill, int userId) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        resourceName \u003d itemName;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.qty \u003d qty;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.stringDateFrom \u003d stringDateFrom;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.stringDateTill \u003d stringDateTill;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.userId \u003d userId;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Prints a list of all instances of a given resource to the Ui, for the user\u0027s information."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceName the name of the resource for which a list is to be printed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param ui an instance of the user interface."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resources an instance of the resource list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void printResources(String resourceName, Ui ui, ResourceList resources) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        ArrayList\u003cResource\u003e allOfResource \u003d resources.getAllOfResource(resourceName);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        for (int i \u003d 0; i \u003c allOfResource.size(); i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            Resource thisResource \u003d allOfResource.get(i);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ReservationList thisResourceReservations \u003d thisResource.getReservations();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.printDash();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.print(thisResource.toString() + \" (resource ID: \" + thisResource.getResourceId() + \")\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (!thisResourceReservations.isEmpty()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                for (int j \u003d 0; j \u003c thisResourceReservations.size(); j++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    ui.print(\"\\t\" + thisResourceReservations.getReservationByIndex(j).toString());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                ui.print(\"No bookings for this resource yet!\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        ui.printDash();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    // @@author isbobby"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Checks if the reservation is possible given the number of available Resources"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * and Reservations that are already in place, and if it is possible, creates a"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Reservation for the desired number of Resources between the given dates."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param ui        An instance of the user interface."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param storage   An instance of the Storage class."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param resources The ResourceList, containing all the created Resources thus"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     *                  far."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws RimsException  if there are not enough Resources available between"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     *                        the desired dates to make the Reservation possible"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws ParseException if the dates specified are invalid."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void execute(Ui ui, Storage storage, ResourceList resources) throws RimsException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        storage.saveToFile(resources.getResources());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        if (!(stringDateFrom \u003d\u003d null)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            dateFrom \u003d resources.stringToDate(stringDateFrom);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        if (qty \u003c\u003d 0){"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            throw new RimsException(\"Reservation is not made because the user has entered 0 or a negative quantity!\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        dateTill \u003d resources.stringToDate(stringDateTill);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        if (resources.getAvailableNumberOfResource(resourceName) \u003c qty) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            printResources(resourceName, ui, resources);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            if (qty \u003d\u003d 1) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                throw new RimsException(\"We don\u0027t have this resource currently available in our inventory!\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                throw new RimsException(\"We don\u0027t have that many of this resource currently available!\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ArrayList\u003cResource\u003e allOfResource \u003d resources.getAllOfResource(resourceName);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ArrayList\u003cResource\u003e bookedResources \u003d new ArrayList\u003cResource\u003e();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        int qtyBooked \u003d 0;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        for (int j \u003d 0; j \u003c allOfResource.size(); j++) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            Resource thisResource \u003d allOfResource.get(j);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            if (thisResource.isAvailableFrom(dateFrom, dateTill)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                thisResource.book(resources.generateReservationId(), userId, dateFrom, dateTill);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                bookedResources.add(thisResource);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                qtyBooked++;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            if (qtyBooked \u003d\u003d qty) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        if (qtyBooked !\u003d 0) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            printResources(resourceName, ui, resources);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            ui.print(\"Done! I\u0027ve booked these resources:\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            for (int i \u003d 0; i \u003c bookedResources.size(); i++) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                ui.print(\"\\t\" + bookedResources.get(i).toString() + \" (resource ID: \""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                        + bookedResources.get(i).getResourceId() + \")\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            ui.print(\"\\n\\t\" + \"from \" + resources.getDateToPrint(dateFrom) + \" till \""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                    + resources.getDateToPrint(dateTill));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            printResources(resourceName, ui, resources);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            throw new RimsException(\"This item is not available between the dates you\u0027ve selected!\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "isbobby"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hin1": 1,
      "isbobby": 90,
      "rabhijit": 117
    }
  },
  {
    "path": "src/main/java/rims/command/ReturnCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "package rims.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.Resource;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.Reservation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.ReservationList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.ResourceList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//@@author isbobby"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "isbobby"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "isbobby"
        },
        "content": " * Implements the returning of multiple Resources by removing the relevant Reservation objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "isbobby"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "isbobby"
        },
        "content": "public class ReturnCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    protected int userId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    protected ArrayList\u003cInteger\u003e resourceIds;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    protected ArrayList\u003cInteger\u003e reservationIds;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Constructor for a ReturnCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param userId the ID of the user whose Resources are being returned."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param resourceIds an array of resource IDs representing the Resources to be returned"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param reservationIds an array of reservation IDs representing the Reservations to be removed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public ReturnCommand(int userId, ArrayList\u003cInteger\u003e resourceIds, ArrayList\u003cInteger\u003e reservationIds) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.userId \u003d userId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.resourceIds \u003d resourceIds;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.reservationIds \u003d reservationIds;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Obtains the Resource objects that represents the Resources being returned, and removes the corresponding"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Reservation objects that represents the booking of the Resource."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param ui An instance of the user interface."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param storage An instance of the Storage class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param resources The ResourceList, containing all the created Resources thus far."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws RimsException if either the resource ID or reservation ID specified is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void execute(Ui ui, Storage storage, ResourceList resources) throws RimsException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        storage.saveToFile(resources.getResources());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ArrayList\u003cReservation\u003e cancelledReservations \u003d new ArrayList\u003cReservation\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        for (int i \u003d 0; i \u003c resourceIds.size(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            Resource thisResource \u003d resources.getResourceById(resourceIds.get(i));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            Reservation cancelledReservation \u003d thisResource.getReservations().getReservationById(reservationIds.get(i));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            thisResource.getReservations().cancelReservationById(reservationIds.get(i));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            cancelledReservations.add(cancelledReservation);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ui.print(\"Done! I\u0027ve removed the following reservation(s):\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        for (int j \u003d 0; j \u003c cancelledReservations.size(); j++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            ui.print(resources.getResourceById(cancelledReservations.get(j).getResourceId()).toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            ui.print(\"\\t\" + cancelledReservations.get(j).toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private String reservationsIdsToString(ArrayList\u003cInteger\u003e reservationIds) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        String reservationsIdsString \u003d \"\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        for (int i : reservationIds) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            reservationsIdsString +\u003d (i + \", \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return reservationsIdsString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "isbobby"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "isbobby": 61,
      "rabhijit": 12
    }
  },
  {
    "path": "src/main/java/rims/command/StatsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "isbobby"
        },
        "content": "package rims.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.ResourceList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//@@author isbobby"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "isbobby"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "isbobby"
        },
        "content": " * Stats Command requires the user to enter a pair of dates with interval less"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "isbobby"
        },
        "content": " * than 14 days. It will query for the following information and display them to"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "isbobby"
        },
        "content": " * the user: average resource borrowed per day number of resource in use per day."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "isbobby"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "isbobby"
        },
        "content": "public class StatsCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private Date dateFrom;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private Date dateTill;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private String dateFromString;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private String dateTillString;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Constructor of an StatsCommand, which takes in a pair of specified dates."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws RimsException catches parse exception when handling dates."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public StatsCommand(String dateFrom, String dateTill) throws RimsException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.dateFromString \u003d dateFrom;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.dateTillString \u003d dateTill;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.dateFrom \u003d stringToDate(dateFrom);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.dateTill \u003d stringToDate(dateTill);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * The stats command takes in two dates, and displays the number of resources"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * being booked in bar graph."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param ui        An instance of the user interface."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param storage   An instance of the Storage class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param resources The ResourceList, containing all the created Resources thus"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     *                  far."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws RimsException if there is an error in parsing data."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void execute(Ui ui, Storage storage, ResourceList resources)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            throws RimsException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        long interval \u003d TimeUnit.DAYS.convert((dateTill.getTime() - dateFrom.getTime()), TimeUnit.MILLISECONDS) + 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        if (interval \u003e\u003d 15) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            throw new RimsException(\"The date interval is too large (more than 14 days)\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ui.print(\"Here are the required stats:\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ui.printDash();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ui.print(\"Resource in use each day\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ui.printDash();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Date currentDate \u003d dateFrom;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        int totalCount \u003d 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        for (int i \u003d 0; i \u003c interval; i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            int count \u003d resources.getBookedNumberOfResourceForDate(currentDate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            totalCount +\u003d count;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            String bar \u003d \"\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            for (int j \u003d 0; j \u003c count; j++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                bar +\u003d \"\u003d\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            ui.print(dateToStringWithoutTime(currentDate) + \"|\" + bar);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            currentDate \u003d incrementDay(currentDate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        double average \u003d totalCount / (double) interval;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        average \u003d BigDecimal.valueOf(average).setScale(3, RoundingMode.HALF_UP).doubleValue();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ui.printDash();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ui.print(\"Average resource in use per day: \" + Double.toString(average));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ui.printDash();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Converts a date and time inputted by the user in String format, into a Date"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * object."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param stringDate the date and time inputted by the user in String format."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return a Date object representing the date and time inputted by the user."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws RimsException stringDate cannot be formatted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private Date stringToDate(String stringDate) throws RimsException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Date dateValue;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            dateValue \u003d formatter.parse(stringDate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            throw new RimsException(\"Invalid format of date \" + stringDate + \"!\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return dateValue;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Converts a Date object to a compact String, to be saved into a data file."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param thisDate the Date object to be converted into a String."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return a String representing the Date object."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private String dateToString(Date thisDate) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        DateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        String stringDate \u003d format.format(thisDate);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return stringDate;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Converts a Date object to a compact String without time field."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param thisDate the Date object to be converted into a String."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return a String representing the Date object."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private String dateToStringWithoutTime(Date thisDate) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        DateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        String stringDate \u003d format.format(thisDate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        String[] words \u003d stringDate.split(\" \");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return words[0];"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * This utility method takes in a date, increment it by 1 day, then return it."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param thisDate the date to be incremented."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the incremented date object."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws RimsException if newDate cannot be formatted into a Date from a String."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private Date incrementDay(Date thisDate) throws RimsException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        String newDate \u003d dateToString(thisDate);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            c.setTime(sdf.parse(newDate));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            throw new RimsException(\"Invalid format of date \" + newDate + \"!\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        c.add(Calendar.DATE, 1); // number of days to add"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        newDate \u003d sdf.format(c.getTime()); // dt is now the new date"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return stringToDate(newDate);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "isbobby"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "isbobby": 153,
      "rabhijit": 4
    }
  },
  {
    "path": "src/main/java/rims/command/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hin1"
        },
        "content": "package rims.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hin1"
        },
        "content": "import rims.core.ResourceList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hin1"
        },
        "content": "import rims.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hin1"
        },
        "content": "import rims.core.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hin1"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hin1"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hin1"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hin1"
        },
        "content": "//@@author hin1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hin1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hin1"
        },
        "content": " * Undoes the last command (e.g. AddCommand, LoanCommand) that was executed that"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hin1"
        },
        "content": " * made a change in Model component (ResourceList, ReservationList)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hin1"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hin1"
        },
        "content": " * \u003cp\u003eThis is done by reloading a screenshot of the previous state of Model from"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hin1"
        },
        "content": " * the external .txt files."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hin1"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hin1"
        },
        "content": " * \u003cp\u003eCurrent list of commands supported:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hin1"
        },
        "content": " * Add, Delete, Loan, Reserve, Return"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hin1"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hin1"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hin1"
        },
        "content": "    protected Command prevCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hin1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * Constructor of an UndoCommand, which takes in the parameter of a Command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * object, for the Ui to notify the user about the command that was undone."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hin1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @param previousCommand Command inputted by the user that last changed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hin1"
        },
        "content": "     *                        ResourceList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hin1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hin1"
        },
        "content": "    public UndoCommand(Command previousCommand) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hin1"
        },
        "content": "        prevCommand \u003d previousCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hin1"
        },
        "content": "        canModifyData \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hin1"
        },
        "content": "        commandUserInput \u003d \"undo\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hin1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hin1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * Undoes the previous Command by reloading the previous state captured in the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * external .txt files back into ResourceList resources by using storage. Not"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * required to amend if new commands are present."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hin1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @param ui        An instance of the user interface."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @param storage   An instance of the Storage class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @param resources The ResourceList, containing all the created Resources thus"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hin1"
        },
        "content": "     *                  far."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @throws RimsException for any data-related error in undoing the command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hin1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hin1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hin1"
        },
        "content": "    public void execute(Ui ui, Storage storage, ResourceList resources) throws RimsException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hin1"
        },
        "content": "        if (prevCommand \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hin1"
        },
        "content": "            ui.formattedPrint(\"No command has modified this inventory yet!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hin1"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hin1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hin1"
        },
        "content": "        storage.readResourceFile();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hin1"
        },
        "content": "        resources.setResources(storage.getResources());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hin1"
        },
        "content": "        ui.formattedPrint(\"The following command has been undone: \" + prevCommand.getCommandUserInput());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hin1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hin1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hin1": 60,
      "rabhijit": 1
    }
  },
  {
    "path": "src/main/java/rims/command/ViewDeadlinesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "package rims.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "import rims.core.ResourceList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "import rims.core.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "import rims.core.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "import rims.resource.Resource;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "// @@author aarushisingh1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": " * Shows a sorted list of all the upcoming/overdue deadlines."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "public class ViewDeadlinesCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * Prints out a sorted list of all the upcoming/overdue deadlines."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @param ui        An instance of the user interface."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @param storage   An instance of the Storage class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @param resources The ResourceList, containing all the created Resources thus"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     *                  far."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @throws ParseException if the resource name is invalid"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @throws RimsException  for any other unexpected error"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    public void execute(Ui ui, Storage storage, ResourceList resources) throws RimsException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        ArrayList\u003cString\u003e coveredResources \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        ArrayList\u003cResource\u003e sortedList \u003d new ArrayList\u003cResource\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        ui.print(\"CURRENTLY ACTIVE LOANS AND RESERVATIONS: (sorted by end-date)\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        ui.printEmptyLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        for (int i \u003d 0; i \u003c resources.size(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            Resource thisResource \u003d resources.getResourceByIndex(i);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            int bookedNumberOfResource \u003d resources.getBookedNumberOfResource(thisResource.getName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            if (!coveredResources.contains(thisResource.getName()) \u0026\u0026 bookedNumberOfResource \u003e 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                coveredResources.add(thisResource.getName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                ArrayList\u003cResource\u003e allOfResource \u003d resources.getAllOfResource(thisResource.getName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                for (int j \u003d 0; j \u003c allOfResource.size(); j++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                    if (!allOfResource.get(j).isCurrentlyAvailable()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                        sortedList.add(allOfResource.get(j));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        Collections.sort(sortedList, new Comparator\u003cResource\u003e() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            public int compare(Resource o1, Resource o2) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                    return o1.getReservations().getCurrentBooking().getEndDate()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                            .compareTo(o2.getReservations().getCurrentBooking().getEndDate());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                } catch (RimsException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        });"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        for (int j \u003d 0; j \u003c sortedList.size(); j++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            ui.print(sortedList.get(j).toString() + \":\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            ui.print(\"\\t\" + sortedList.get(j).getReservations().getCurrentBooking().toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aarushisingh1": 63,
      "isbobby": 3,
      "rabhijit": 4
    }
  },
  {
    "path": "src/main/java/rims/core/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "package rims.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.command.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.command.ReserveCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.command.CalendarCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.command.CloseCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.command.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.command.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.command.ReturnCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.command.StatsCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.command.UndoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.command.ViewDeadlinesCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.Resource;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.Reservation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.ReservationList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "//@@author rabhijit"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * This class takes in a String of input from the Ui, and depending on the"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * content of the input, parses it into a unique executable command that will"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * carry out the tasks required for that input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    Ui ui;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    ResourceList resources;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    Command prevCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Constructor for the Parser."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param ui        An instance of the user interface class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resources An instance of the resource list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Parser(Ui ui, ResourceList resources) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.resources \u003d resources;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hin1"
        },
        "content": "    //@@author hin1"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hin1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * Saves the last executed command that modified data"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * in Parser."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @param c Previous command that modified data in ResourceList."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hin1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hin1"
        },
        "content": "    public void setPrevCommand(Command c) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hin1"
        },
        "content": "        if (c.canModifyData()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hin1"
        },
        "content": "            prevCommand \u003d c; "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hin1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hin1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    //@@author rabhijit"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Converts a \u0027natural date\u0027 (just a day and date) into a String version of a"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * date, in the format DD/MM/YYYY HHmm by finding the next date of the requested"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * day."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param day  the day whose next date is to be obtained."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param time the time to be appended to the date obtained above."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a String version of the requested date, in DD/MM/YYYY HHmm format."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if the day requested is not one of the 7 days of the"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *                       week."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public String convertNaturalDate(String day, String time) throws RimsException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        Date todayDate \u003d new Date(System.currentTimeMillis());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        String stringDate \u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        boolean validDay \u003d false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        for (int i \u003d 0; i \u003c 8; i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (new SimpleDateFormat(\"EEEEE\").format(todayDate).equals(day)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                \u0026\u0026 !(i \u003d\u003d 0 \u0026\u0026 (new SimpleDateFormat(\"HHmm\").format(todayDate).compareTo(time) \u003e 0))) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                validDay \u003d true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                DateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                stringDate \u003d format.format(todayDate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                stringDate \u003d stringDate.substring(0, stringDate.length() - 4);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                stringDate +\u003d time;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                cal.setTime(todayDate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                cal.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                todayDate \u003d cal.getTime();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (!validDay || stringDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            throw new RimsException(\"Please enter a valid day / time.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            return stringDate;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Checks if an entered date is in the required format. Throws a DukeException otherwise."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param date the date entered by the user"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if the format of the entered date is invalid."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected void checkParsableDate(String date) throws RimsException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            formatter.setLenient(false);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            Date dateValue \u003d formatter.parse(date);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            throw new RimsException(\"Please specify a valid date using the following format: dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Checks if a date, in String format, entered by the user is parsable into a Date object."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param date the String inputted by the user."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the same String inputted by the user, if it is indeed parsable into a Date object."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if the String is not parsable into a Date object."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public String parseDate(String date) throws RimsException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (date.length() \u003c 15) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (!(date.contains(\" \"))) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please enter a valid day / time.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            String[] splitDate \u003d date.split(\" \"); // check for error"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            date \u003d convertNaturalDate(splitDate[0], splitDate[1]);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        checkParsableDate(date);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Checks if a String inputted by the user is a valid positive integer."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param input the String inputted by the user."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the integer conversion of the String, if it does represent a valid positive integer."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if the String does not represent a valid positive integer."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public int parseInt(String input) throws RimsException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int parsedInt \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (parsedInt \u003c 0) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify an integer value that is valid \u0026 non-negative!\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            return parsedInt;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            throw new RimsException(\"Please specify an integer value that is valid \u0026 non-negative!\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Parses the input obtained by the Ui from the user into an executable command."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param input the input obtained from the user by the Ui."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a Command that can be executed to carry out the necessary tasks"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if the input is in a wrong format or does not make"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *                       sense."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Command parseInput(String input) throws RimsException, ParseException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        input \u003d input.trim();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        String[] words \u003d input.split(\" \");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        Command c;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (input.equals(\"bye\") \u0026\u0026 words.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            c \u003d new CloseCommand();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else if (input.equals(\"list\") \u0026\u0026 words.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            c \u003d new ListCommand();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else if (words[0].equals(\"list\") \u0026\u0026 words.length \u003e 1) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            c \u003d listParser(input, words);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        //@@author aarushisingh1"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        } else if (input.equals(\"deadlines\") \u0026\u0026 words.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            c \u003d new ViewDeadlinesCommand();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        //@@author rabhijit"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else if (input.equals(\"help\") \u0026\u0026 words.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            c \u003d new HelpCommand();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else if (input.equals(\"calendar\")) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            c \u003d new CalendarCommand(resources, ui);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else if (input.equals(\"calendar+\")) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            c \u003d new CalendarCommand(resources, ui, \"+\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else if (input.equals(\"calendar-\")) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            c \u003d new CalendarCommand(resources, ui, \"-\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else if (words[0].equals(\"add\")) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            c \u003d addParser(input, words);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else if (words[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            c \u003d deleteParser(input, words);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else if (words[0].equals(\"loan\")) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            c \u003d loanParser(input, words);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else if (words[0].equals(\"reserve\")) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            c \u003d reserveParser(input, words);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else if (words[0].equals(\"return\") \u0026\u0026 input.contains(\" /id\")) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            c \u003d returnParser(input, words);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else if (input.equals(\"undo\")) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            c \u003d new UndoCommand(prevCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else if ((words[0].equals(\"stats\") \u0026\u0026 words.length \u003e 1)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            c \u003d statsParser(input, words);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            throw new RimsException(\"Please enter a recognizable command!\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return c;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Parses user input into the parameters for a ListCommand."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param input the input obtained from the user by the Ui."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param words the input from the user, delimited by spaces into an array of individual words."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a ListCommand, if the input can be parsed into the required parameters."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if the input cannot be parsed into the required parameters for a ListCommand."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected Command listParser(String input, String[] words) throws RimsException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        int paramTypeIndex \u003d input.indexOf(\"/\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        int paramIndex \u003d paramTypeIndex + 5;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (paramTypeIndex \u003d\u003d -1 || paramIndex \u003e input.length() || paramIndex + 1 \u003e input.length()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            throw new RimsException(\"Please specify the parameter you want to view a detailed list of.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        String paramType \u003d input.substring(paramTypeIndex + 1, paramIndex);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (!(paramType.equals(\"date\") || paramType.equals(\"room\") || paramType.equals(\"item\"))) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            throw new RimsException(\"Invalid list parameter! Please specify \u0027/date\u0027, \u0027/room\u0027 \""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    + \"or \u0027/item\u0027 to view a detailed list.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        String param \u003d input.substring(paramIndex + 1).trim();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (paramType.equals(\"date\")) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            parseDate(param);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return new ListCommand(paramType, param);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Parses user input into the parameters for an AddCommand."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param input the input obtained from the user by the Ui."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param words the input from the user, delimited by spaces into an array of individual words."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return an AddCommand, if the input can be parsed into the required parameters."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if the input cannot be parsed into the required parameters for an AddCommand."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected Command addParser(String input, String[] words) throws RimsException {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (!(words.length \u003e 1)) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            throw new RimsException(\"Please specify the resource to add to your inventory.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (words[1].equals(\"/item\")) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int itemIndex \u003d input.indexOf(\"/item\") + 6;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int qtyIndex \u003d input.indexOf(\" /qty\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (qtyIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the quantity of item to add to your inventory.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (itemIndex \u003e qtyIndex) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the item to add to your inventory.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            String item \u003d input.substring(itemIndex, qtyIndex);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (item.trim().isEmpty()) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the item to add to your inventory.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int qty \u003d parseInt(input.replaceFirst(\"add /item \" + item + \" /qty \", \"\").trim());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (qty \u003d\u003d 0) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please use a valid integer value above zero!\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (qty \u003e 100) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"You can only add up to 100 items at a time!\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            return new AddCommand(item.trim(), qty);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else if (words[1].equals(\"/room\")) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (input.contains(\"/qty\")) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Rooms do not require quantity!\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int roomIndex \u003d input.indexOf(\"/room\") + 6;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (roomIndex \u003e input.length()) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the room to add to your inventory.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            String room \u003d input.substring(roomIndex);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            return new AddCommand(room.trim());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            throw new RimsException(\"Please choose a room or item to add to your inventory.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Parses user input into the parameters for a DeleteCommand."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param input the input obtained from the user by the Ui."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param words the input from the user, delimited by spaces into an array of individual words."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a DeleteCommand, if the input can be parsed into the required parameters."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if the input cannot be parsed into the required parameters for a DeleteCommand."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected Command deleteParser(String input, String[] words) throws RimsException {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (!(words.length \u003e 1)) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            throw new RimsException(\"Please specify the resource to delete from your inventory.\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (words[1].equals(\"/item\")) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int itemIndex \u003d input.indexOf(\"/item\") + 6;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (itemIndex \u003e input.length()) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the item to delete from your inventory.\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            String itemName \u003d input.substring(itemIndex);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            return new DeleteCommand(itemName.trim(), \"item\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else if (words[1].equals(\"/room\")) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int roomIndex \u003d input.indexOf(\"/room\") + 6;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (roomIndex \u003e input.length()) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the room to delete from your inventory.\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            String roomName \u003d input.substring(roomIndex).trim();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            return new DeleteCommand(roomName, \"room\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            throw new RimsException(\"Please choose a room or item to delete from your inventory.\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Parses user input into the parameters for a LoanCommand."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param input the input obtained from the user by the Ui."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param words the input from the user, delimited by spaces into an array of individual words."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a LoanCommand, if the input can be parsed into the required parameters."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if the input cannot be parsed into the required parameters for a LoanCommand."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected Command loanParser(String input, String[] words) throws RimsException {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (!(words.length \u003e 1)) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            throw new RimsException(\"Please specify the resource to be loaned out.\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (words[1].equals(\"/item\")) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int itemIndex \u003d input.indexOf(\"/item\") + 6;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int qtyIndex \u003d input.indexOf(\" /qty\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (qtyIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the quantity of item to be loaned out.\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (itemIndex \u003e qtyIndex) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the name of the item to be loaned out.\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            String itemName \u003d input.substring(itemIndex, qtyIndex).trim();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (itemName.isEmpty()) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the name of the item to be loaned out.\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (!resources.isItem(itemName)) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"This item does not exist in your inventory!\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int idIndex \u003d input.indexOf(\" /id\");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (idIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the ID of the borrower of this item.\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (qtyIndex + 6 \u003e idIndex) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the quantity of this item to be loaned out.\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int qty \u003d parseInt(input.substring(qtyIndex + 6, idIndex).trim());"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (qty \u003d\u003d 0) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify a valid integer value above zero!\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int byIndex \u003d input.indexOf(\" /by\");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (byIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the date by which the item is to be returned.\");"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int userId \u003d parseInt(input.substring(idIndex + 5, byIndex).trim());"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            String dateTill \u003d parseDate(input.substring(byIndex + 5).trim());"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            return new ReserveCommand(itemName, qty, dateTill, userId);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else if (words[1].equals(\"/room\")) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int roomIndex \u003d input.indexOf(\"/room\") + 6;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int idIndex \u003d input.indexOf(\" /id\");"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (idIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the ID of the borrower of this room.\");"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (roomIndex \u003e idIndex) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the name of the room to be loaned out.\");"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            String roomName \u003d input.substring(roomIndex, idIndex).trim();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (roomName.isEmpty()) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the name of the room to be loaned out.\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (!resources.isRoom(roomName)) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"This room does not exist in your inventory!\");"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int byIndex \u003d input.indexOf(\" /by\");"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (byIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the date by which the room is to be returned.\");"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (idIndex + 5 \u003e byIndex) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the ID of the borrower of this room.\");"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int userId \u003d parseInt(input.substring(idIndex + 5, byIndex).trim());"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (byIndex + 5 \u003e input.length()) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the date by which the room is to be returned.\");"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            String dateTill \u003d parseDate(input.substring(byIndex + 5).trim());"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            return new ReserveCommand(roomName, dateTill, userId);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            throw new RimsException(\"Please choose an item or room to loan out.\");"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Parses user input into the parameters for a ReserveCommand."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param input the input obtained from the user by the Ui."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param words the input from the user, delimited by spaces into an array of individual words."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a ReserveCommand, if the input can be parsed into the required parameters."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if the input cannot be parsed into the required parameters for a ReserveCommand."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected Command reserveParser(String input, String[] words) throws RimsException {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (!(words.length \u003e 1)) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            throw new RimsException(\"Please specify the resource to be reserved.\");"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (words[1].equals(\"/item\")) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int itemIndex \u003d input.indexOf(\"/item\") + 6;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int qtyIndex \u003d input.indexOf(\" /qty\");"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (qtyIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the quantity of item to be reserved.\");"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (itemIndex \u003e qtyIndex) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the name of the item to be reserved.\");"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            String itemName \u003d input.substring(itemIndex, qtyIndex).trim();"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (itemName.isEmpty()) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the name of the item to be loaned out.\");"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (!resources.isItem(itemName)) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"This item does not exist in your inventory!\");"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int idIndex \u003d input.indexOf(\" /id\");"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (idIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the ID of the borrower of this item.\");"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (qtyIndex + 6 \u003e idIndex) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the quantity of this item to be loaned out.\");"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int qty \u003d parseInt(input.substring(qtyIndex + 6, idIndex).trim());"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (qty \u003c\u003d 0) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify a valid integer value above zero!\");"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int fromIndex \u003d input.indexOf(\" /from\");"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (fromIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the date from which the item is to be reserved.\");"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (idIndex + 5 \u003e fromIndex) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the ID of the borrower of this item.\");"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int userId \u003d parseInt(input.substring(idIndex + 5, fromIndex).trim());"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int byIndex \u003d input.indexOf(\" /by\");"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (byIndex \u003d\u003d -1 || byIndex + 5 \u003e input.length()) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the date by which the item is to be returned.\");"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            String dateFrom \u003d parseDate(input.substring(fromIndex + 7, byIndex).trim());"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            String dateTill \u003d parseDate(input.substring(byIndex + 5).trim());"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            return new ReserveCommand(itemName, qty, dateFrom, dateTill, userId);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else if (words[1].equals(\"/room\")) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int roomIndex \u003d input.indexOf(\"/room\") + 6;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int idIndex \u003d input.indexOf(\" /id\");"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (idIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the ID of the borrower of this room.\");"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (roomIndex \u003e idIndex) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the name of the room to be reserved.\");"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            String roomName \u003d input.substring(roomIndex, idIndex);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (roomName.isEmpty()) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the name of the room to be reserved.\");"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (!resources.isRoom(roomName)) {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"This room does not exist in your inventory!\");"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int fromIndex \u003d input.indexOf(\" /from\");"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (fromIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the date from which the room is to be reserved.\");"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (idIndex + 5 \u003e fromIndex) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the ID of the borrower of this room.\");"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int userId \u003d parseInt(input.substring(idIndex + 5, fromIndex));"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int byIndex \u003d input.indexOf(\" /by\");"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (byIndex \u003d\u003d -1 || byIndex + 5 \u003e input.length()) {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the date by which the room is to be returned.\");"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            String dateFrom \u003d parseDate(input.substring(fromIndex + 7, byIndex).trim());"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            String dateTill \u003d parseDate(input.substring(byIndex + 5).trim());"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            return new ReserveCommand(roomName, dateFrom, dateTill, userId);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            throw new RimsException(\"Please choose an item or room to reserve.\");"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Parses user input into the parameters for a ReturnCommand."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param input the input obtained from the user by the Ui."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param words the input from the user, delimited by spaces into an array of individual words."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a ReturnCommand, if the input can be parsed into the required parameters."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if the input cannot be parsed into the required parameters for a ReturnCommand."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected Command returnParser(String input, String[] words) throws RimsException {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (words[1].equals(\"/id\")) {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int idIndex \u003d input.indexOf(\" /id\") + 5;"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (idIndex \u003e input.length()) {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the borrower\u0027s user ID.\");"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int userId \u003d parseInt(input.substring(idIndex).trim());"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ReservationList userReservations \u003d resources.getUserBookings(userId);"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (userReservations.isEmpty()) {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"User \" + userId + \" has not made any bookings yet!\");"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            for (int i \u003d 0; i \u003c userReservations.size(); i++) {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                Reservation thisReservation \u003d userReservations.getReservationByIndex(i);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                Resource borrowedResource \u003d resources.getResourceById(thisReservation.getResourceId());"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                ui.print(borrowedResource.toString());"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                ui.print(\"\\t\" + userReservations.getReservationByIndex(i).toString());"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ArrayList\u003cInteger\u003e resourcesToReturn \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ArrayList\u003cInteger\u003e reservationsToCancel \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            String stringReservations \u003d ui.getInput("
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                \"Enter the reservation ID(s) (separated by a space for multiple IDs) \""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                + \"that you wish to return / cancel:\").trim();"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (stringReservations.isEmpty()) {"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please specify the IDs of the reservations you wish to end!\");"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            String[] splitStringReservations \u003d stringReservations.split(\" \");"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            for (int j \u003d 0; j \u003c splitStringReservations.length; j++) {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                int thisReservationId \u003d parseInt(splitStringReservations[j]);"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                resourcesToReturn.add(userReservations.getReservationById(thisReservationId).getResourceId());"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                reservationsToCancel.add(thisReservationId);"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            return new ReturnCommand(userId, resourcesToReturn, reservationsToCancel);"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            throw new RimsException(\"Please follow the correct format for the return command.\");"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Parses user input into the parameters for a StatsCommand."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param input the input obtained from the user by the Ui."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param words the input from the user, delimited by spaces into an array of individual words."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a StatsCommand, if the input can be parsed into the required parameters."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if the input cannot be parsed into the required parameters for a StatsCommand."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected Command statsParser(String input, String[] words) throws RimsException, ParseException {"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        int dateFromIndex \u003d input.indexOf(\" /from\");"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        int dateTillIndex \u003d input.indexOf(\" /till\");"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (dateFromIndex + 7 \u003e dateTillIndex) {"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            throw new RimsException(\"Please specify the date for which you want to view statistics.\");"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        String dateFrom \u003d parseDate(input.substring(dateFromIndex + 7, dateTillIndex).trim());"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        String dateTill \u003d parseDate(input.substring(dateTillIndex + 7).trim());"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return new StatsCommand(dateFrom, dateTill);"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hin1": 12,
      "aarushisingh1": 3,
      "isbobby": 13,
      "rabhijit": 514
    }
  },
  {
    "path": "src/main/java/rims/core/ResourceList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "package rims.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.core.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.Reservation;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.ReservationList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.Resource;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.Room;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "//@@author rabhijit"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * Stores an array of the Resources created thus far, as well as functions to"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * search, find for, create and delete Resources."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "public class ResourceList {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected ArrayList\u003cResource\u003e resources;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hin1"
        },
        "content": "    // @@author hin1"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hin1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * Constructor for the ResourceList. Takes in an array of Resources from the"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * Storage instance and saves it."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hin1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @param resources the array of Resources, as converted from text in the"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hin1"
        },
        "content": "     *                  save-file by the Storage instance"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hin1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hin1"
        },
        "content": "    public ResourceList(Ui ui, ArrayList\u003cResource\u003e resources) throws RimsException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hin1"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hin1"
        },
        "content": "        this.resources \u003d resources;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hin1"
        },
        "content": "        printResourcesDueSoon(3);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hin1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hin1"
        },
        "content": "    // @author hin1"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hin1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * This method prints all the resources that are due soon (deadline within 3 days)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hin1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hin1"
        },
        "content": "    public void printResourcesDueSoon(int daysDue) throws RimsException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hin1"
        },
        "content": "        ReservationList allDueReservations \u003d new ReservationList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hin1"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hin1"
        },
        "content": "            Resource thisResource \u003d getResourceByIndex(i);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hin1"
        },
        "content": "            ReservationList thisResourceDueReservations \u003d thisResource.getDueReservations(daysDue);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hin1"
        },
        "content": "            if (!thisResourceDueReservations.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hin1"
        },
        "content": "                // add only the earliest reservation that\u0027s still due"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hin1"
        },
        "content": "                allDueReservations.add(thisResourceDueReservations.getReservationByIndex(0));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hin1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hin1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hin1"
        },
        "content": "        Collections.sort(allDueReservations.getReservationList(), new Comparator\u003cReservation\u003e() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hin1"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hin1"
        },
        "content": "            public int compare(Reservation o1, Reservation o2) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hin1"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hin1"
        },
        "content": "                    return o1.getEndDate().compareTo(o2.getEndDate());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hin1"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hin1"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hin1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hin1"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hin1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hin1"
        },
        "content": "        });"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hin1"
        },
        "content": "        if (!allDueReservations.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hin1"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hin1"
        },
        "content": "            ui.print(\"REMINDER - The following loans are due soon (within \" + daysDue + \" days, or overdue):\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hin1"
        },
        "content": "            ui.printEmptyLine();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hin1"
        },
        "content": "            for (int i \u003d 0; i \u003c allDueReservations.size(); i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hin1"
        },
        "content": "                ui.print(getResourceById(allDueReservations.getReservationByIndex(i).getResourceId()).toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hin1"
        },
        "content": "                ui.print(\"\\t\" + allDueReservations.getReservationByIndex(i).toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hin1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hin1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hin1"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hin1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    //@@author rabhijit"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Adds a new Resource to the ResourceList."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param thisResource the newly created Resource."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void add(Resource thisResource) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        resources.add(thisResource);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Removes a Resource from the ResourceList, as specified by the resource\u0027s"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * name."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceName the name of the Resource"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if there is no such Resource of that name."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void deleteResourceByName(String resourceName) throws RimsException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        boolean deleted \u003d false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            Resource thisResource \u003d getResourceByIndex(i);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (thisResource.getName().equals(resourceName)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                resources.remove(i);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                deleted \u003d true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (!deleted) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            throw new RimsException(\"No such resource found!\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    // @@author isbobby"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Removes a Resource from the ResourceList, as specified by the ID of that"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * resource."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param resourceId the ID of the Resource"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws RimsException if there is no such resource with that ID."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void deleteResourceById(int resourceId) throws RimsException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        boolean deleted \u003d false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            Resource thisResource \u003d getResourceByIndex(i);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            if (thisResource.getResourceId() \u003d\u003d resourceId) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                resources.remove(i);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                deleted \u003d true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        if (!deleted) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            throw new RimsException(\"No such resource ID found!\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    // @@author rabhijit"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns the ResourceList itself."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the array of Resources."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public ArrayList\u003cResource\u003e getResources() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return resources;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Assigns a new ArrayList of Resources within ResourceList."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resources Takes in the resource list"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void setResources(ArrayList\u003cResource\u003e resources) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.resources \u003d resources;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns the number of items in the ResourceList."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the number of items in the ResourceList."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return resources.size();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Generates a resource ID for a newly created Resource."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a new resource ID."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public int generateResourceId() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                Resource thisResource \u003d getResourceById(i);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            } catch (RimsException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return size();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns a Resource in the Resource array by its index number in the array."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param indexNo the index number of the desired Resource."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the Resource itself."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Resource getResourceByIndex(int indexNo) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return resources.get(indexNo);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns the first Resource in the Resource array that matches a certain name."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceName the name of the desired Resource."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the Resource itself."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if no such resource has that name."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Resource getResourceByName(String resourceName) throws RimsException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            Resource thisResource \u003d getResourceByIndex(i);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (thisResource.getName().equals(resourceName)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                return thisResource;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        throw new RimsException(\"This resource does not exist in your inventory!\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns a Resource in the Resource array by its ID number."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceId the resource ID of the desired Resource."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the Resource itself."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if no such resource has that ID."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Resource getResourceById(int resourceId) throws RimsException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            Resource thisResource \u003d getResourceByIndex(i);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (thisResource.getResourceId() \u003d\u003d resourceId) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                return thisResource;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        throw new RimsException(\"No such resource ID!\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Checks if a Resource is an Item."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceName the name of the Resource to be checked."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a boolean: true if it is an item, false if it is a room."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if no such resource has that name."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public boolean isItem(String resourceName) throws RimsException {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        Resource thisResource \u003d getResourceByName(resourceName);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return (thisResource instanceof Item);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Checks if a Resource is a Room."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceName the name of the Resource to be checked."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a boolean: true if it is a room, false if it is an item."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if no such resource has that name."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public boolean isRoom(String resourceName) throws RimsException {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        Resource thisResource \u003d getResourceByName(resourceName);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return (thisResource instanceof Room);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns an array of all the resources of a certain name."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceName the name of the Resources to be obtained."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return an array of all the Resources with that name."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public ArrayList\u003cResource\u003e getAllOfResource(String resourceName) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        ArrayList\u003cResource\u003e allOfResource \u003d new ArrayList\u003cResource\u003e();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            Resource thisResource \u003d getResourceByIndex(i);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (thisResource.getName().equals(resourceName)) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                allOfResource.add(thisResource);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return allOfResource;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    // @@author isbobby"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Returns the number of resources of a certain name."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     *"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param resourceName the name of the Resources to be counted."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the number of Resources with that name."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public int getNumberOfResource(String resourceName) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        int number \u003d 0;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            Resource thisResource \u003d getResourceByIndex(i);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            if (thisResource.getName().equals(resourceName)) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                number++;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return number;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Returns the number of resources of a certain name that are currently"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * available to be booked."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     *"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param resourceName the name of the Resource in question."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the number of available Resources with that name."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public int getAvailableNumberOfResource(String resourceName) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ArrayList\u003cResource\u003e allOfResource \u003d getAllOfResource(resourceName);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        int number \u003d 0;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        for (int i \u003d 0; i \u003c allOfResource.size(); i++) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            if (allOfResource.get(i).isCurrentlyAvailable()) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                number++;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return number;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    // overloaded"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Returns the number of resources of a certain name that are available between"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * two given dates."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     *"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param resourceName the name of the Resource in question."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param dateFrom     the date from which the Resource should be available."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param dateTill     the date till which the Resource should be availble."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the number of available Resources with that name."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public int getAvailableNumberOfResource(String resourceName, Date dateFrom, Date dateTill) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ArrayList\u003cResource\u003e allOfResource \u003d getAllOfResource(resourceName);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        int number \u003d 0;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        for (int i \u003d 0; i \u003c allOfResource.size(); i++) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            if (allOfResource.get(i).isCurrentlyAvailable()) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                number++;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return number;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    // @@author aarushisingh1"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * Returns the number of resources of a certain name that are currently"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * available to be booked."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @param resourceName the name of the Resource in question."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @param date         the date that is being checked."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @return the number of available Resources with that name on that date."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    public int getAvailableNumberOfResourceForDate(String resourceName, String date) throws RimsException {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        ArrayList\u003cResource\u003e allOfResource \u003d getAllOfResource(resourceName);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        Date checkedDate \u003d stringToDate(date);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        int number \u003d 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        for (int i \u003d 0; i \u003c allOfResource.size(); i++) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            if (allOfResource.get(i).isAvailableOnDate(checkedDate)) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                number++;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        return number;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    //@@author rabhijit"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns the number of resources of a certain name that are currently booked."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceName the name of the Resource in question."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the number of booked Resources with that name."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public int getBookedNumberOfResource(String resourceName) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        ArrayList\u003cResource\u003e allOfResource \u003d getAllOfResource(resourceName);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        int number \u003d 0;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        for (int i \u003d 0; i \u003c allOfResource.size(); i++) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (!allOfResource.get(i).isCurrentlyAvailable()) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                number++;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return number;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    // @@author aarushisingh1"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * Returns the number of resources of a certain name that are currently booked."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @param resourceName the name of the Resource in question."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @param date         the date that that is being checked"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @return the number of booked Resources with that name on that date."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @throws ParseException if the date is in an invalid format."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    public int getBookedNumberOfResourceForDate(String resourceName, String date) throws RimsException {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        ArrayList\u003cResource\u003e allOfResource \u003d getAllOfResource(resourceName);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        Date checkedDate \u003d stringToDate(date);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        int number \u003d 0;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        for (int i \u003d 0; i \u003c allOfResource.size(); i++) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            if (!allOfResource.get(i).isAvailableOnDate(checkedDate)) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                number++;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        return number;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    /** Returns the number of resources that are currently booked on a certain date."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @param date the date for which the number resources are to be obtained."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @return the number of booked Resources on that date."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @throws ParseException if the date is in an invalid format."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    public int getBookedNumberOfResourceForDate(Date date) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        int number \u003d 0;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        for (int i \u003d 0; i \u003c resources.size(); i++) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            if (!resources.get(i).isAvailableOnDate(date)) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                number++;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        return number;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    //@@author rabhijit"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns the list of reservations made by a user, given the user\u0027s ID."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param userId the ID of the user whose reservations are to be obtained."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the list of reservations made by the aforementioned user."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public ReservationList getUserBookings(int userId) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        ReservationList userBookings \u003d new ReservationList();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ReservationList thisResourceUserReservations \u003d getResourceByIndex(i).getUserReservations(userId);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            for (int j \u003d 0; j \u003c thisResourceUserReservations.size(); j++) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                userBookings.add(thisResourceUserReservations.getReservationByIndex(j));"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return userBookings;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Generates a unique reservation ID for each new reservation made, regardless"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * of which resource that reservation is made for."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a unique reservation ID."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public int generateReservationId() {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        ArrayList\u003cInteger\u003e coveredIds \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            Resource thisResource \u003d resources.get(i);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ReservationList thisResourceReservations \u003d thisResource.getReservations();"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            for (int j \u003d 0; j \u003c thisResourceReservations.size(); j++) {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                if (!coveredIds.contains(thisResourceReservations.getReservationByIndex(j).getReservationId())) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    coveredIds.add(thisResourceReservations.getReservationByIndex(j).getReservationId());"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        for (int k \u003d 0; k \u003c coveredIds.size(); k++) {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (!coveredIds.contains(k)) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                return k;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return coveredIds.size();"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Converts a date and time inputted by the user in String format, into a Date"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * object."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param stringDate the date and time inputted by the user in String format."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a Date object representing the date and time inputted by the user."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if stringDate cannot be formatted into a date."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Date stringToDate(String stringDate) throws RimsException {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        Date dateValue;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            dateValue \u003d formatter.parse(stringDate);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            throw new RimsException(\"Invalid format of date \" + stringDate + \"!\");"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return dateValue;"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Converts a Date object to a compact String, to be saved into a data file."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param thisDate the Date object to be converted into a String."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a String representing the Date object."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public String dateToString(Date thisDate) {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        DateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        String stringDate \u003d format.format(thisDate);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return stringDate;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Converts a Date object into a human-readable String, for the user\u0027s reading."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param date the Date object to be converted into a String."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a human-readable String representing the Date object."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public String getDateToPrint(Date date) {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        DateFormat dayFormat \u003d new SimpleDateFormat(\"d\");"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        int actualDay \u003d Integer.parseInt(dayFormat.format(date));"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        int roundedDay \u003d actualDay % 10;"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        String suffix;"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (actualDay \u003c 20 \u0026\u0026 actualDay \u003e 9) {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            suffix \u003d \"th\";"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else if (roundedDay \u003d\u003d 1) {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            suffix \u003d \"st\";"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else if (roundedDay \u003d\u003d 2) {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            suffix \u003d \"nd\";"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else if (roundedDay \u003d\u003d 3) {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            suffix \u003d \"rd\";"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            suffix \u003d \"th\";"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        String stringDate \u003d (new SimpleDateFormat(\"EEEEE, \")).format(date) + actualDay + suffix + \" \""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                + (new SimpleDateFormat(\"MMMMM yyyy, hh:mm aaa\")).format(date);"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return stringDate;"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hin1": 51,
      "aarushisingh1": 58,
      "isbobby": 83,
      "rabhijit": 309
    }
  },
  {
    "path": "src/main/java/rims/core/Rims.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "package rims.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hin1"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hin1"
        },
        "content": "import java.io.FilenameFilter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "//@@author rabhijit"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * The main class that instantiates all the sub-classes that carry out"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * the relevant sub-tasks of RIMS."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "public class Rims {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    private ResourceList resources;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Constructor for RIMS that instantiates the necessary sub-classes for its"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * operation."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceFilePath the file path of the document where resource data is"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *                         stored."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param reserveFilePath  the file path of the document where reservation data"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *                         is stored."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws ParseException if data is stored in an invalid format and is thus"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *                        unable to be parsed"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws IOException  if there is an error related to user input or printing"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *                      output."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Rims(String resourceFilePath, String reserveFilePath) throws ParseException, RimsException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        storage \u003d new Storage(resourceFilePath, reserveFilePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        resources \u003d new ResourceList(ui, storage.getResources());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        parser \u003d new Parser(ui, resources);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * This method repeatedly runs the parser, which obtains and parses the input, and"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * depending to the parsed input, creates an executable command, which then carries out"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * the necessary tasks. Will halt when a command issues an exit code of true."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws ParseException if input is un-parsable"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws IOException if there is an error in reading input or printing output"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void run() throws ParseException, IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        Boolean toExit \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        while (!toExit) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                Command c \u003d parser.parseInput(ui.getInput());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                c.execute(ui, storage, resources);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                parser.setPrevCommand(c);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                toExit \u003d c.getExitCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            } catch (RimsException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                e.displayError();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    //@@author rabhijit"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * The main method that calls the RIMS constructor and sets the ball rolling."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws FileNotFoundException if file path does not exist"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws ParseException if any input is un-parsable"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws IOException if there is an error in reading input or printing output"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if the input has no meaning or does not follow our format"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public static void main(String[] args) throws FileNotFoundException, ParseException, IOException, RimsException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        new Rims(\"data/resources.txt\", \"data/reserves.txt\").run();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hin1": 2,
      "isbobby": 3,
      "rabhijit": 74
    }
  },
  {
    "path": "src/main/java/rims/core/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "package rims.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.Room;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.Reservation;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.ReservationList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.Resource;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "//@@author rabhijit"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * Converts data files containing a text version of the stored resources and reservations into an"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * array of Resource instances, containing their respective Reservations."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * \u003cp\u003eFormat of data files:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * Resource.txt: [ resource id ] [ type ] [ name ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * Reserve.txt: [ reservation id ] [ resource id ] [ user id ] [ date from ] [ date until ]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected ArrayList\u003cResource\u003e resources \u003d new ArrayList\u003cResource\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected File resourceFile;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected File reservationFile;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Constructor for the Storage class. Accesses the resource file path"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * and reserve file path and runs the method readResourceFile() to convert the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * text representation of Resources and Reservations into an actual array of Resources."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceFile the file path where the text version of Resources are stored."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param reserveFile the file path where the text version of Reservations are stored."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException when a new file cannot be created with the given path for resource and reservations."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Storage(String resourceFile, String reserveFile) throws RimsException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.resourceFile \u003d new File(resourceFile);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.reservationFile \u003d new File(reserveFile);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            this.resourceFile.getParentFile().mkdir();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            this.resourceFile.createNewFile();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            this.reservationFile.getParentFile().mkdir();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            this.reservationFile.createNewFile();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            throw new RimsException(\"Cannot create a new file!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        readResourceFile();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Obtains the contents of a ResourceList line by line from a text file in a"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * specified file path."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * \u003cp\u003eData retrieval:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * 1. Open the resource file"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * 2. Loop through each single entry to fetch [ resource id ] [ type ] [ name ]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * 3. For each entry, open reservation file and fetch any reservations under"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *    this resource_id"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * 4. Create a new resource object using the above data"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * 5. Add this object to ResourceList object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException when Scanner cannot detect a valid file or when Resource is missing arguments."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void readResourceFile() throws RimsException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        resources.clear();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        Scanner fileScanner;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            fileScanner \u003d new Scanner(resourceFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } catch (FileNotFoundException e1) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            throw new RimsException(\"File \" + resourceFile.toString()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    + \" not found, is a directory or cannot be opened!\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        while (fileScanner.hasNextLine()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            String inputString \u003d fileScanner.nextLine();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            String[] input \u003d inputString.split(\",\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (input.length \u003c 3) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"\\nResource entry has insufficient information: \" + inputString"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                        + \"\\nEither delete the invalid entry or fill in the missing details!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ReservationList reservations \u003d readReserveFile(input[0]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (input[1].equals(\"I\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                Item newItem \u003d new Item(Integer.parseInt(input[0]), input[2], reservations);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                resources.add(newItem);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            } else if (input[1].equals(\"R\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                Room newRoom \u003d new Room(Integer.parseInt(input[0]), input[2], reservations);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                resources.add(newRoom);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    //@@author isbobby"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Obtains the contents of a ResourceList line by line from a text file in a"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * specified file path."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws RimsException when specified file path does not lead to a valid file type,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     *                       and when unable to parse an integer for ID, "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     *                       or checking if a resource is booked."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public ReservationList readReserveFile(String resourceId) throws RimsException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Scanner fileScanner;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            fileScanner \u003d new Scanner(reservationFile);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        } catch (FileNotFoundException e1) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            if (resourceFile.isDirectory()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                throw new RimsException(\"File is a directory!\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            } else if (!resourceFile.exists()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                throw new RimsException(\"File does not exist!\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                throw new RimsException(\"File cannot be opened for some reason!\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ReservationList resourceReservations \u003d new ReservationList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        while (fileScanner.hasNextLine()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            String inputString \u003d fileScanner.nextLine();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            String[] line \u003d inputString.split(\",\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            if (line.length \u003c 5) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                throw new RimsException(\"\\nReservation/loan entry has insufficient information: \" + inputString"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                        + \"\\nEither delete the invalid entry or fill in the missing details!\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            if (line[1].equals(resourceId)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                Reservation newReservation \u003d new Reservation(Integer.parseInt(line[0]),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                    Integer.parseInt(line[1]), Integer.parseInt(line[2]), line[3], line[4]);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                resourceReservations.add(newReservation);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return resourceReservations;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    //@@author rabhijit"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Put contents of a ResourceList into a text file for future reference."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resources ResourceList to put contents into text file."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException when file given is directory, or file does not exist and"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *                     cannot be created."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void saveToFile(ArrayList\u003cResource\u003e resources) throws RimsException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        BufferedWriter resourceFileWriter;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        BufferedWriter reservationFileWriter;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            resourceFileWriter \u003d new BufferedWriter(new FileWriter(resourceFile, false));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            reservationFileWriter \u003d new BufferedWriter(new FileWriter(reservationFile, false));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            String reservationLine;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            for (int i \u003d 0; i \u003c resources.size(); i++) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                Resource thisResource \u003d resources.get(i);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                resourceFileWriter.write(thisResource.toDataFormat());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                resourceFileWriter.newLine();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                ReservationList thisReservationList \u003d thisResource.getReservations();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                for (int j \u003d 0; j \u003c thisReservationList.size(); j++) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    reservationLine \u003d thisReservationList.getReservationByIndex(j).toDataFormat();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    reservationFileWriter.write(reservationLine);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    reservationFileWriter.newLine();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            resourceFileWriter.close();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            reservationFileWriter.close();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (resourceFile.isDirectory()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"File is a directory!\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            } else if (!resourceFile.exists()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"File does not exist!\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"File cannot be opened for some reason!\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns array of Resources that was created from text format."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the aforementioned array."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public ArrayList\u003cResource\u003e getResources() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return resources;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "isbobby": 47,
      "rabhijit": 139
    }
  },
  {
    "path": "src/main/java/rims/core/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "package rims.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.Reservation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.ReservationList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.Resource;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "//@@author rabhijit"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * Handles the taking in of input from the user and passes it to the Parser to"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * translate it into usable commands. Also handles printing of messages for the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * user\u0027s reading."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected Scanner inputScanner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected String input;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected int intInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected String arrow \u003d \"\u003e\u003e \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected String line \u003d \"______________________________________________\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            + \"______________________________________________________________________________________________\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected String dash \u003d \"- - - - - - - - - - - - - - - - - - - - - - - - - \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            + \"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected String hash \u003d \"***************************************************************\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            + \"*****************************************************************************\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected String tab \u003d \"\\t\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected ArrayList\u003cString\u003e welcomeMsg \u003d new ArrayList\u003cString\u003e(Arrays.asList(\"Welcome to RIMS, your Resource\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        + \" \u0026 Inventory Management System.\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        \"How can I help you?\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        \"\\n\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        \"Type \u0027help\u0027 to display a list of all commands supported by RIMS.\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected ArrayList\u003cString\u003e commands \u003d new ArrayList\u003cString\u003e("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            Arrays.asList(\"COMMANDS CURRENTLY SUPPORTED BY RIMS:\\n\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            \"add - add a new resource to inventory\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            \"delete - delete an existing resource from inventory\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            \"loan - loan out an item from now till your desired future date\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            \"reserve - reserve an item between two future dates\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            \"return - return a loan or reservation\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            \"list - see all resources and current reservations\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            \"\\t\" + \"list /item - see all loans and future reservations of a particular item\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            \"\\t\" + \"list /room - see all loans and future reservations of a particular room\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            \"\\t\" + \"list /date - see all resources available on a particular date\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            \"deadlines - view all currently active loans and reservations\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            \"stats - view loan and reservation statistics\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            \"calendar - view a monthly calendar showing all booked resources\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            \"\\t\" + \"calendar+ - enlarge the cell size of the calendar\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            \"\\t\" + \"calendar- - reduce the cell size of the calendar\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            \"undo - undo the last command that modified inventory data\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        inputScanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        welcome();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Obtains a new String input from the user."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the new input typed by the user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        input \u003d inputScanner.nextLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        System.out.println(arrow + input);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    // @@author isbobby"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Prints a question for the user, before obtaining a new String input in"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * response from the user."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the new input typed by the user."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public String getInput(String question) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        formattedPrint(question);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        input \u003d inputScanner.nextLine();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        System.out.println(arrow + input);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Obtains a new integer input from the user, without requiring conversion from"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * String to integer format."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the new integer input typed by the user."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public int getIntegerInput() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        intInput \u003d inputScanner.nextInt();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        System.out.println(arrow + intInput);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return intInput;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Prints a question for the user, before obtaining a new integer input in"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * response from the user."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the new integer input typed by the user."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public int getIntegerInput(String question) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        formattedPrint(question);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        intInput \u003d inputScanner.nextInt();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        System.out.println(arrow + intInput);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return intInput;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    // @@author rabhijit"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Prints a line of underscores."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        System.out.println(tab + line);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    // @@author isbobby"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Prints a line of dashes."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void printDash() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        System.out.println(tab + dash);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    // @@author rabhijit"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Prints a desired line for the user to read."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void print(String input) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        System.out.println(tab + input);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Prints an array of lines."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void printArray(ArrayList\u003cString\u003e inputs) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        for (int i \u003d 0; i \u003c inputs.size(); i++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            System.out.println(\"\\t\" + inputs.get(i));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Prints an empty line."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void printEmptyLine() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Prints an array of lines in the standard RIMS format, bordered by lines."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void formattedPrintArray(ArrayList\u003cString\u003e inputs) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        printArray(inputs);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Prints a line in the standard RIMS format, bordered by lines."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void formattedPrint(String input) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        print(input);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Prints the farewell message when RIMS is closed."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void farewell() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        formattedPrint(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Prints a welcome message when RIMS is started up."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void welcome() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        printLogo();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        formattedPrintArray(welcomeMsg);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Prints a list of all valid RIMS commands."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void help() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        formattedPrintArray(commands);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    // @@author danielcyc"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "     * Prints the RIMS logo, as part of the RIMS welcome message."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    public void printLogo() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        String logo \u003d \"\\n\" "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"          _____                    _____\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"                    _____                    _____          \\n\""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"         /\\\\    \\\\                  /\\\\    \\\\\""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"                  /\\\\    \\\\                  /\\\\    \\\\         \\n\""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"        /::\\\\    \\\\                /::\\\\    \\\\\""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"                /::\\\\____\\\\                /::\\\\    \\\\        \\n\""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"       /::::\\\\    \\\\               \\\\:::\\\\    \""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"\\\\              /::::|   |               /::::\\\\    \\\\       \\n\""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"      /::::::\\\\    \\\\               \\\\:::\\\\    \\\\        \""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"    /:::::|   |              /::::::\\\\    \\\\      \\n\""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"     /:::/\\\\:::\\\\    \\\\               \\\\:::\\\\    \""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"\\\\          /::::::|   |             /:::/\\\\:::\\\\    \\\\     \\n\""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"    /:::/__\\\\:::\\\\    \\\\               \\\\:::\\\\    \""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"\\\\        /:::/|::|   |            /:::/__\\\\:::\\\\    \\\\    \\n\""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"   /::::\\\\   \\\\:::\\\\    \\\\              /::::\\\\    \""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"\\\\      /:::/ |::|   |            \\\\:::\\\\   \\\\:::\\\\    \\\\   \\n\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"  /::::::\\\\   \\\\:::\\\\    \\\\    ____    /::::::\\\\    \""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"\\\\    /:::/  |::|___|______    ___\\\\:::\\\\   \\\\:::\\\\    \\\\  \\n\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \" /:::/\\\\:::\\\\   \\\\:::\\\\____\\\\  /\\\\   \\\\  /:::/\\\\:::\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"\\\\    \\\\  /:::/   |::::::::\\\\    \\\\  /\\\\   \\\\:::\\\\   \\\\:::\\\\    \\\\ \\n\""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"/:::/  \\\\:::\\\\   \\\\:::|    |/::\\\\   \\\\/:::/  \""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"\\\\:::\\\\____\\\\/:::/    |:::::::::\\\\____\\\\/::\\\\   \\\\:::\\\\   \\\\:::\\\\____\\\\\\n\""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"\\\\::/   |::::\\\\  /:::|____|\\\\:::\\\\  /:::/    \""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"\\\\::/    /\\\\::/    / ~~~~~/:::/    /\\\\:::\\\\   \\\\:::\\\\   \\\\::/    /\\n\""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \" \\\\/____|:::::\\\\/:::/    /  \\\\:::\\\\/:::/    \""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"/ \\\\/____/  \\\\/____/      /:::/    /  \\\\:::\\\\   \\\\:::\\\\\""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"   \\\\/____/ \\n\""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"       |:::::::::/    /    \\\\::::::/    \""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"/                       /:::/    /    \\\\:::\\\\   \\\\:::\\\\    \\\\     \\n\""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"       |::|\\\\::::/    /      \\\\::::/____/\""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"                       /:::/    /      \\\\:::\\\\   \\\\:::\\\\____\\\\    \\n\""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"       |::| \\\\::/____/        \\\\:::\\\\    \\\\\""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"                      /:::/    /        \\\\:::\\\\  /:::/    /    \\n\""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"       |::|  ~|               \\\\:::\\\\    \\\\\""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"                    /:::/    /          \\\\:::\\\\/:::/    /     \\n\""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"       |::|   |                \\\\:::\\\\    \\\\\""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"                  /:::/    /            \\\\::::::/    /      \\n\""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"       \\\\::|   |                 \\\\:::\\\\____\\\\\""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"                /:::/    /              \\\\::::/    /       \\n\""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"        \\\\:|   |                  \\\\::/    /   \""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"             \\\\::/    /                \\\\::/    /        \\n\""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"         \\\\|___|                   \\\\/____/\""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"                  \\\\/____/                  \\\\/____/         \\n\""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"                                                         \""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"                                           \\n\";"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aarushisingh1": 4,
      "isbobby": 50,
      "danielcyc": 77,
      "rabhijit": 136
    }
  },
  {
    "path": "src/main/java/rims/exception/RimsException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "package rims.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "//@@author rabhijit"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * A custom exception for RIMS, when inputs don\u0027t fit the desired format or have"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * no meaning."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "public class RimsException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected String tab \u003d \"\\t\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected String line \u003d \"______________________________________________\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            + \"______________________________________________________________________________________________\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected String hash \u003d \"******************************************************\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            + \"**************************************************************************************\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected String error;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Constructor for a RimsException. Every RimsException contains an error"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param error the error message of this RimsException."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public RimsException(String error) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.error \u003d error;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Prints the error message in the standard RIMS format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void displayError() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        System.out.println(tab + hash);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        System.out.println(tab + \"ERROR: \" + error);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        System.out.println(tab + line + \"\\n\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        System.out.println(tab + \"Please re-type the command with the necessary changes, \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                + \"or type in any other command.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        System.out.println(tab + hash);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns the error message."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return this.error;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rabhijit": 45
    }
  },
  {
    "path": "src/main/java/rims/resource/Item.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "package rims.resource;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "//@@author rabhijit"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * This class represents an instance of an Item. Contains the name of the Item, its resource ID, type,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * and a list of Reservation objects representing the reservations made for the Item."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "public class Item extends Resource {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Constructor for a newly created Item, with no Reservations made yet."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceId the resourceId generated for the new Item."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param name the name of the new Item."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Item(int resourceId, String name) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        super(resourceId, name);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Constructor for an existing Item that has been loaded from the data file,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * with existing Reservations in a ReservationList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceId the resourceId of the Item."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param name the name of the Item."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param reservations the list of Reservations made for the existing Item."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Item(int resourceId, String name, ReservationList reservations) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        super(resourceId, name, reservations);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aarushisingh1": 2,
      "rabhijit": 29
    }
  },
  {
    "path": "src/main/java/rims/resource/Reservation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "isbobby"
        },
        "content": "package rims.resource;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hin1"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//@@author isbobby"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "isbobby"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "isbobby"
        },
        "content": " * This class represents an instance of a Reservation. Contains the reservation ID, the resource ID of the Resource"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "isbobby"
        },
        "content": " * that it represents a booking of, and the dates between which this Resource has been booked."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "isbobby"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "isbobby"
        },
        "content": "public class Reservation {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private int reservationId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private int userId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private int resourceId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private Date dateFrom;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private Date dateTill;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Constructor for a newly created Reservation."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param reservationId the generated reservation ID of this new Reservation"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param resourceId the ID of the resource for which this Reservation has been made."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param userId the ID of the user who made this Reservation."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param dateFrom the Date from which this Reservation has been made."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param dateTill the Date till which this Reservation has been made."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public Reservation(int reservationId, int resourceId, int userId,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Date dateFrom, Date dateTill) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.reservationId \u003d reservationId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.resourceId \u003d resourceId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.userId \u003d userId;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.dateFrom \u003d dateFrom;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.dateTill \u003d dateTill;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Constructor for an existing Reservation loaded from storage."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param reservationId the reservation ID of this Reservation"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param resourceId the ID of the resource for which this Reservation has been made."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param userId the ID of the user who made this Reservation."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param dateFrom the string representation of the date from which this Reservation has been made."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param dateTill the string representation of the date till which this Reservation has been made."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws ParseException if the dates given are in an invalid format."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public Reservation(int reservationId, int resourceId, int userId,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        String dateFrom, String dateTill) throws RimsException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.reservationId \u003d reservationId;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.resourceId \u003d resourceId;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.userId \u003d userId;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.dateFrom \u003d stringToDate(dateFrom);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.dateTill \u003d stringToDate(dateTill);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Returns the reservation ID of this Reservation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the reservation ID of this Reservation."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public int getReservationId() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return reservationId;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Returns the resource ID for which this Reservation has been made."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the resource ID for which this Reservation has been made."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public int getResourceId() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return resourceId;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Returns the ID of the user who made this Reservation."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the ID of the user who made this Reservation."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public int getUserId() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return userId;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Returns the starting date of this Reservation."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the Date object representing the starting date of this Reservation."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public Date getStartDate() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return dateFrom;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Returns the ending date of this Reservation."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the Date object representing the ending date of this Reservation."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public Date getEndDate() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return dateTill;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    //@@author rabhijit"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Checks if this Reservation has expired (the current date is past the ending date of this Reservation)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a boolean: true if this Reservation has not expired yet, false otherwise."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public boolean isStillValid() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        Date currentDate \u003d new Date(System.currentTimeMillis());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (currentDate.after(dateFrom) \u0026\u0026 currentDate.after(dateTill)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Converts the stored Reservation to a readable String for output to the CLI."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a String version of the attributes of the Reservation."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        String output \u003d \"[\" + reservationId + \"]\" + \" borrowed by user: \" + userId + \" from \""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                + getDateToPrint(dateFrom) + \" till \" + getDateToPrint(dateTill);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (isOverdue()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            return output + \" [OVERDUE]\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Converts the stored Reservation into a compact String to be stored in a data file."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a compact String version of the attributes of the Reservation."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public String toDataFormat() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return reservationId + \",\" + resourceId + \",\" + userId + \",\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                + dateToString(dateFrom) + \",\" + dateToString(dateTill);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Converts a date and time inputted by the user in String format, into a Date object."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param stringDate the date and time inputted by the user in String format."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a Date object representing the date and time inputted by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Date stringToDate(String stringDate) throws RimsException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        Date dateValue;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            dateValue \u003d formatter.parse(stringDate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            throw new RimsException(\"Invalid format of date \" + stringDate + \"!\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return dateValue;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Converts a Date object to a compact String."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param thisDate the Date object to be converted into a String."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a String representing the Date object."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public String dateToString(Date thisDate) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        DateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        String stringDate \u003d format.format(thisDate);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return stringDate;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Converts a Date object into a human-readable String, for the user\u0027s reading."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param date the Date object to be converted into a String."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a human-readable String representing the Date object."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public String getDateToPrint(Date date) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        DateFormat dayFormat \u003d new SimpleDateFormat(\"d\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        int actualDay \u003d Integer.parseInt(dayFormat.format(date));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        int roundedDay \u003d actualDay % 10;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        String suffix;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (actualDay \u003c 20 \u0026\u0026 actualDay \u003e 9) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            suffix \u003d \"th\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else if (roundedDay \u003d\u003d 1) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            suffix \u003d \"st\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else if (roundedDay \u003d\u003d 2) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            suffix \u003d \"nd\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else if (roundedDay \u003d\u003d 3) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            suffix \u003d \"rd\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            suffix \u003d \"th\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        String stringDate \u003d (new SimpleDateFormat(\"EEEEE, \")).format(date) + actualDay + suffix"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                + \" \" + (new SimpleDateFormat(\"MMMMM yyyy, hh:mm aaa\")).format(date);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return stringDate;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns the number of days within which this Reservation expires."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the number of days within which this Reservation expires."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public int getDaysDueIn() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        Date currentDate \u003d new Date(System.currentTimeMillis());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        int daysLeftToDue \u003d (int) (TimeUnit.DAYS.convert((getEndDate().getTime()"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                - currentDate.getTime()), TimeUnit.MILLISECONDS));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return daysLeftToDue;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Checks if this Reservation is expiring within a given number of days."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param daysDue the number of days within which this Reservation is checked for expiry"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a boolean: true if it is expiring within the given number of days, false otherwise"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public boolean isDueInDays(int daysDue) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return getDaysDueIn() \u003c\u003d daysDue;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    //@author hin1"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Checks if this Reservation has already expired."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a boolean: true if it has already expired, false otherwise."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public boolean isOverdue() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        Date currentDate \u003d new Date(System.currentTimeMillis());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        int daysLeftToDue \u003d (int) (TimeUnit.DAYS.convert((getEndDate().getTime()"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                - currentDate.getTime()), TimeUnit.MILLISECONDS));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        boolean wasDuePast \u003d daysLeftToDue \u003c 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        boolean wasDueEarlierToday \u003d (daysLeftToDue \u003d\u003d 0 \u0026\u0026 (getEndDate().getTime() - currentDate.getTime() \u003c 0));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (wasDuePast || wasDueEarlierToday) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hin1": 2,
      "isbobby": 91,
      "rabhijit": 134
    }
  },
  {
    "path": "src/main/java/rims/resource/ReservationList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "isbobby"
        },
        "content": "package rims.resource;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//@@author isbobby"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "isbobby"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "isbobby"
        },
        "content": " * This class contains all the Reservations made for a particular Resource. This"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "isbobby"
        },
        "content": " * ReservationList is stored as an attribute in its corresponding Resource, for"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "isbobby"
        },
        "content": " * which it stores its reservations. Contains functions to create, delete, get"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "isbobby"
        },
        "content": " * Reservations and to check the availability of its Resource."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "isbobby"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "isbobby"
        },
        "content": "public class ReservationList {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    protected ArrayList\u003cReservation\u003e reservations;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Constructor for a ReservationList."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public ReservationList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.reservations \u003d new ArrayList\u003cReservation\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Returns the ReservationList itself."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the array of Reservations."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public ArrayList\u003cReservation\u003e getReservationList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return this.reservations;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Returns a Reservation in the Reservation array by its index number in the"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * array."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param indexNo the index number of the desired Reservation."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the Reservation itself."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public Reservation getReservationByIndex(int indexNo) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return reservations.get(indexNo);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Returns a Reservation in the Reservation array by its reservation ID."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param reservationId the reservation ID of the desired Reservation."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the Reservation itself."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws RimsException if no reservation has such an ID."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public Reservation getReservationById(int reservationId) throws RimsException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            Reservation thisReservation \u003d getReservationByIndex(i);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            if (thisReservation.getReservationId() \u003d\u003d reservationId) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                return thisReservation;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        throw new RimsException(\"Reservation not found for given reservation ID!\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Adds a new Reservation to the ReservationList."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param newReservation the newly created Reservation."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void add(Reservation newReservation) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        reservations.add(newReservation);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Creates a new Reservation object and adds it to the ReservationList, given"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * the parameters of the new Reservation."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param reservationId the newly generated reservation ID of the Reservation to"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     *                      be created."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param resourceId    the ID of the Resource for which this Reservation is"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     *                      being created."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param userId        the ID of the user creating this Reservation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param startDate     the date from which this Reservation takes effect."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param endDate       the date till which this Reservation will be in effect."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws RimsException  if date is invalid, or if the date of return is before the date of borrowing."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void createReservation(int reservationId, int resourceId, int userId, Date startDate, Date endDate)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            throws RimsException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Date currentDate \u003d new Date(System.currentTimeMillis());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        if (startDate.after(endDate)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            throw new RimsException(\"Your date of return must be after your date of borrowing!\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        if (currentDate.after(endDate)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            throw new RimsException(\"Your date of return must be a date in the future!\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Reservation newReservation \u003d new Reservation(reservationId, resourceId, userId, startDate, endDate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        add(newReservation);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Deletes a Reservation object, making that reservation cancelled and no longer"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * valid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param reservationId the reservation ID of the reservation to be cancelled."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws RimsException if no such reservation has that ID."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void cancelReservationById(int reservationId) throws RimsException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        boolean deleted \u003d false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        for (int i \u003d 0; i \u003c reservations.size(); i++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            if (reservations.get(i).getReservationId() \u003d\u003d reservationId) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                reservations.remove(i);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                deleted \u003d true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        if (!deleted) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            throw new RimsException(\"Reservation not found for given reservation ID!\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    // @@author rabhijit"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns the number of Reservations made for this particular Resource."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the size of the ReservationList."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return reservations.size();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Checks if the ReservationList is empty."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a boolean: true if no Reservations have been made, false otherwise."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return reservations.isEmpty();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Checks if this Resource is currently booked under a Reservation, or is"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * overdue from a previous Reservation."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a boolean indicating whether this Resource is currently not booked."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public boolean isCurrentlyAvailable() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        Date currentDate \u003d new Date(System.currentTimeMillis());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            Reservation thisReservation \u003d getReservationByIndex(i);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            boolean isCurrentlyBooked \u003d (currentDate.after(thisReservation.getStartDate())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    \u0026\u0026 currentDate.before(thisReservation.getEndDate()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            boolean isOverdue \u003d thisReservation.isOverdue();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (isCurrentlyBooked || isOverdue) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    // @@author aarushisingh1"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * Checks if this Resource is currently booked under a Reservation, or is"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * overdue from a previous Reservation on the date entered by the user."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @param checkedDate The date entered by the user that is being checked"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @return a boolean indicating whether this Resource is currently not booked on"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     *         that date."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    public boolean isAvailableOnDate(Date checkedDate) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            Reservation thisReservation \u003d getReservationByIndex(i);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            boolean isUnavailable \u003d (checkedDate.after(thisReservation.getStartDate())"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                    \u0026\u0026 checkedDate.before(thisReservation.getEndDate()));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            boolean isOverdue \u003d thisReservation.isOverdue();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            if (isUnavailable || isOverdue) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    //@@author rabhijit"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Checks if this Resource is booked between two given dates, or currently"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * overdue from a previous Reservation."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param startDate the date from which this Resource is being queried."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param endDate   the date till which this Resource is being queried."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a boolean indicating whether this Resource has been booked at any"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *         point between those two dates."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public boolean isAvailableFrom(Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (reservations.isEmpty()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            Reservation thisReservation \u003d getReservationByIndex(i);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            boolean startDateIsBetween \u003d (startDate.after(thisReservation.getStartDate())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    \u0026\u0026 startDate.before(thisReservation.getEndDate()));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            boolean endDateIsBetween \u003d (endDate.after(thisReservation.getStartDate())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    \u0026\u0026 endDate.before(thisReservation.getEndDate()));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            boolean isBetweenDates \u003d (startDateIsBetween || endDateIsBetween);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            boolean isOverdue \u003d thisReservation.isOverdue();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            boolean startDatesAlign \u003d startDate.equals(thisReservation.getStartDate());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            boolean endDatesAlign \u003d endDate.equals(thisReservation.getEndDate());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (isBetweenDates || isOverdue || startDatesAlign || endDatesAlign) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Gets the current Reservation object under which this Resource is currently"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * loaned out, or still overdue."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the Reservation object under which this Resource is currently booked."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if this Resource is not currently booked."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Reservation getCurrentBooking() throws RimsException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        Date currentDate \u003d new Date(System.currentTimeMillis());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            Reservation thisReservation \u003d getReservationByIndex(i);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            boolean isCurrentlyBooked \u003d (currentDate.after(thisReservation.getStartDate())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    \u0026\u0026 currentDate.before(thisReservation.getEndDate()));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            boolean isOverdue \u003d thisReservation.isOverdue();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (isCurrentlyBooked || isOverdue) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                return thisReservation;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        throw new RimsException(\"Item is not currently booked!\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    // @@author isbobby"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Gets the list of Reservations that a certain user has made for this"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * particular Resource."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param userId the ID of the user whose Reservations for this Resource are"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     *               being obtained."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return a list containing the Reservations made by the user for this object."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public ReservationList getUserReservations(int userId) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ReservationList userReservations \u003d new ReservationList();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            Reservation thisReservation \u003d getReservationByIndex(i);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            if (thisReservation.getUserId() \u003d\u003d userId) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                userReservations.add(thisReservation);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return userReservations;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    // @@author rabhijit"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns the list of currently active Reservations, including overdue"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Reservations, which are expiring in a given number of days."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param daysDue the number of days within which Reservations which are"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *                expiring should be returned."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a list of all Reservations that have expired, or are expiring within"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *         the given number of days."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public ReservationList getDueReservations(int daysDue) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        ReservationList reservationsDueSoon \u003d new ReservationList();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        Date currentDate \u003d new Date(System.currentTimeMillis());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            Reservation thisReservation \u003d getReservationByIndex(i);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (thisReservation.isDueInDays(daysDue) \u0026\u0026 currentDate.after(thisReservation.getStartDate())) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                reservationsDueSoon.add(thisReservation);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return reservationsDueSoon;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aarushisingh1": 22,
      "isbobby": 133,
      "rabhijit": 125
    }
  },
  {
    "path": "src/main/java/rims/resource/Resource.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "package rims.resource;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "//@@author rabhijit"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * This class represents an instance of a Resource. Contains the name of the Resource, its resource ID, type,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * and a list of Reservation objects representing the reservations made for the Resource."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "public abstract class Resource {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected int resourceId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected ReservationList reservations;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Constructor for a newly created Resource, with no Reservations made yet."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceId the resourceId generated for the new Resource."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param name the name of the new Resource."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Resource(int resourceId, String name) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.resourceId \u003d resourceId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.reservations \u003d new ReservationList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Constructor for an existing Resource that has been loaded from the data file,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * with existing Reservations in a ReservationList."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceId the resourceId of the Resource."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param name the name of the Resource."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param reservations the list of Reservations made for the existing Resource."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Resource(int resourceId, String name, ReservationList reservations) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.resourceId \u003d resourceId;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.reservations \u003d reservations;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Converts the stored Resource to a readable String for output to the CLI."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a String version of the attributes of the Resource."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return \"[\" + getType() + \"] \" + getName();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Converts the stored Resource into a compact String to be stored in a data file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a compact String version of the attributes of the Resource."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public String toDataFormat() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return resourceId + \",\" + getType() + \",\" + name;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns the name of the Resource."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the name of the Resource."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns the resource ID of the Resource."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the resource ID of the Resource."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public int getResourceId() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return resourceId;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns the type (Item or Room) of the Resource."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the type (Item or Room) of the Resource."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (getClass().getSimpleName().equals(\"Item\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            return \"I\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return \"R\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns the list of Reservations made for this Resource."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the list of Reservations made for this Resource."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public ReservationList getReservations() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return reservations;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Checks if this Resource is currently available for booking."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a boolean indicating whether this Resource is currently not booked."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public boolean isCurrentlyAvailable() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return reservations.isCurrentlyAvailable();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    //@@author aarushisingh1"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * Checks if this Resource is currently available for booking on a certain date."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @return a boolean indicating whether this Resource is currently not booked."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    public boolean isAvailableOnDate(Date checkedDate) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        return reservations.isAvailableOnDate(checkedDate);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * Checks if this Resource is free to be booked between two dates."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @param dateFrom the date from which this Resource is to be booked."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @param dateTill the date till which this Resource is to be booked."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @return a boolean indicating whether this Resource is free to be booked between the two given dates."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    public boolean isAvailableFrom(Date dateFrom, Date dateTill) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        return reservations.isAvailableFrom(dateFrom, dateTill);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * Creates a new Reservation object for this Resource between two given dates, indicating"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * that this Resource has been booked between those two dates."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @param reservationId the newly generated reservation ID for the new Reservation object."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @param userId the ID of the user who made the reservation."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @param startDate the date from which this Resource has been booked."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @param endDate the date till which this Resource has been booked."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @throws ParseException if the dates are in an invalid format."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @throws RimsException if the date of return is before the date of borrowing."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    public void book(int reservationId, int userId, Date startDate, Date endDate) throws RimsException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        reservations.createReservation(reservationId, resourceId, userId, startDate, endDate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * Gets the list of Reservations that a certain user has made for this particular Resource."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @param userId the ID of the user whose Reservations for this Resource are being obtained."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @return a list containing the Reservations made by the user for this object."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    public ReservationList getUserReservations(int userId) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        return reservations.getUserReservations(userId);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * Returns the list of currently active Reservations, including overdue Reservations, which are expiring"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * in a given number of days."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @param daysDue the number of days within which Reservations which are expiring should be returned."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     * @return a list of all Reservations that have expired, or are expiring within the given number of days."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    public ReservationList getDueReservations(int daysDue) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        return reservations.getDueReservations(daysDue);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aarushisingh1": 54,
      "rabhijit": 108
    }
  },
  {
    "path": "src/main/java/rims/resource/Room.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "package rims.resource;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "//@@author rabhijit"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * This class represents an instance of a Room. Contains the name of the Room, its resource ID, type,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * and a list of Reservation objects representing the reservations made for the Room."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "public class Room extends Resource {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Constructor for a newly created Room, with no Reservations made yet."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceId the resourceId generated for the new Room."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param name the name of the new Room."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Room(int resourceId, String name) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        super(resourceId, name);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Constructor for an existing Room that has been loaded from the data file,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * with existing Reservations in a ReservationList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceId the resourceId of the Room."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param name the name of the Room."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param reservations the list of Reservations made for the existing Room."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Room(int resourceId, String name, ReservationList reservations) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        super(resourceId, name, reservations);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aarushisingh1": 2,
      "rabhijit": 30
    }
  },
  {
    "path": "src/test/java/CommandTests/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// package CommandTests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import rims.command.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import rims.core.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import rims.exception.RimsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hin1"
        },
        "content": "// //@@author hin1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hin1"
        },
        "content": "// /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hin1"
        },
        "content": "//  * Test class that tests the addition of a new resource"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hin1"
        },
        "content": "//  * to ResourceList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hin1"
        },
        "content": "//  */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hin1"
        },
        "content": "// public class AddCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     private static final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     private static final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     private static final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     private static final PrintStream originalErr \u003d System.err;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     private static Ui tempUi;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     private static Storage tempStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     private static ResourceList tempResources;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     private AddCommand commandUnderTest;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     @TempDir"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     public static File tempDir;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     @BeforeAll"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     public static void setStreams() throws RimsException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hin1"
        },
        "content": "//         System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hin1"
        },
        "content": "//         System.setErr(new PrintStream(errContent));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hin1"
        },
        "content": "//         File testResourceFile \u003d new File(tempDir.getName() + \"tempResources.txt\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hin1"
        },
        "content": "//         File testReservationsFile \u003d new File(tempDir.getName() + \"tempReservations.txt\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hin1"
        },
        "content": "//         tempUi \u003d new Ui();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hin1"
        },
        "content": "//         tempStorage \u003d new Storage(testResourceFile.getName(),testReservationsFile.getName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hin1"
        },
        "content": "//         tempResources \u003d new ResourceList(tempUi,tempStorage.getResources());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     @BeforeEach"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     public void init() throws RimsException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hin1"
        },
        "content": "//         commandUnderTest \u003d new AddCommand(\"seminar room 1\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     public void testAddCommand() throws RimsException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hin1"
        },
        "content": "//         commandUnderTest.execute(tempUi,tempStorage,tempResources);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hin1"
        },
        "content": "// }"
      }
    ],
    "authorContributionMap": {
      "hin1": 44,
      "isbobby": 15
    }
  },
  {
    "path": "src/test/java/CommandTests/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// package CommandTests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import rims.command.HelpCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import rims.command.ReserveCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import rims.core.ResourceList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import rims.core.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import rims.core.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import rims.exception.RimsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import rims.resource.Resource;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// public class HelpCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//     private HelpCommand commandUnderTest;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//     private static Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//     private static Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//     private static ResourceList listUnderTest;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//     @BeforeAll"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//     private static void init() throws RimsException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//         ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//         ArrayList\u003cResource\u003e emptyList \u003d new ArrayList\u003cResource\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//         listUnderTest \u003d new ResourceList(ui, emptyList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//     public void HelpTest() throws RimsException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//         commandUnderTest \u003d new HelpCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//         Exception e \u003d assertThrows(RimsException.class, () -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//             commandUnderTest.execute(ui, storage, listUnderTest);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//         });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//         assertEquals(\"COMMANDS CURRENTLY SUPPORTED BY RIMS:\\n\"+"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//                 \"add - add a new resource to inventory\"+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//                 \"delete - delete an existing resource from inventory\"+"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//                 \"loan - loan out an item from now till your desired future date\"+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//                 \"reserve - reserve an item between two future dates\"+"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//                 \"return - return a loan or reservation\"+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//                 \"list - see all resources and current reservations\"+"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//                 \"\\t\" + \"list /item - see all loans and future reservations of a particular item\"+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//                 \"\\t\" + \"list /room - see all loans and future reservations of a particular room\"+"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//                 \"\\t\" + \"list /date - see all future reservations on a particular date\"+"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//                 \"deadlines - view all currently active loans and reservations\"+"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//                 \"stats - view loan and reservation statistics\"+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//                 \"undo - undo the last command that modified inventory data\", e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//         System.out.print(\"Test 1: passed\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// }"
      }
    ],
    "authorContributionMap": {
      "isbobby": 54
    }
  },
  {
    "path": "src/test/java/CommandTests/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "isbobby"
        },
        "content": "package CommandTests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.command.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.ResourceList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "isbobby"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private ListCommand commandUnderTest;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static ResourceList listUnderTest;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static void init() throws RimsException, ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ArrayList\u003cResource\u003e newList \u003d new ArrayList\u003cResource\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ReservationList reserveList \u003d new ReservationList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Reservation itemReservation \u003d new Reservation(1, 1, 5, \"20/12/2019 0900\", \"21/12/2019 1000\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        reserveList.add(itemReservation);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Item newItem \u003d new Item(1, \"ball\", reserveList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Reservation roomReservation \u003d new Reservation(2, 2, 5, \"20/12/2019 0800\", \"20/12/2019 0830\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        reserveList.add(roomReservation);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Room newRoom \u003d new Room(2, \"mpsh\", reserveList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        newList.add(newItem);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        newList.add(newRoom);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        listUnderTest \u003d new ResourceList(ui, newList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * This test creates a resource list, and tries to list resources by item ,which"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * should not invoke a RimsException."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws RimsException"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    void PrintByItemTest() throws RimsException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        commandUnderTest \u003d new ListCommand(\"item\", \"ball\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        commandUnderTest.execute(ui, storage, listUnderTest);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        System.out.print(\"Test: Valid input test (item) \\nStatus: passed\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * This test creates a resource list, and tries to list resources by room"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * ,which should not invoke a RimsException."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws RimsException"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    void PrintByRoomTest() throws RimsException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        commandUnderTest \u003d new ListCommand(\"room\", \"mpsh\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        commandUnderTest.execute(ui, storage, listUnderTest);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        System.out.print(\"Test: Valid input test (room) \\nStatus: passed\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "isbobby"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "isbobby": 62
    }
  },
  {
    "path": "src/test/java/CommandTests/ReserveCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "isbobby"
        },
        "content": "package CommandTests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.ResourceList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.command.ReserveCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.exception.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "isbobby"
        },
        "content": "public class ReserveCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private ReserveCommand commandUnderTest;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static ResourceList listUnderTest;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static Resource ResourceUnderTest;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static void init() throws RimsException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ArrayList\u003cResource\u003e emptyList \u003d new ArrayList\u003cResource\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        listUnderTest \u003d new ResourceList(ui, emptyList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        storage \u003d new Storage(\"unitTestData/resources.txt\",\"unitTestData/reserves.txt\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * This test creates an empty resource list, and tries to reserve an item with 1"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * qty, which should invoke a RimsException of item not found exception."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void IndexOutOfBoundExceptionTest() throws RimsException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        commandUnderTest \u003d new ReserveCommand(\"item\", 1, \"11/11/2020 1800\", \"12/11/2020 1800\", 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Exception e \u003d assertThrows(RimsException.class, () -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            commandUnderTest.execute(ui, storage, listUnderTest);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        assertEquals(\"We don\u0027t have this resource currently available in our inventory!\", e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        System.out.print(\"Test: Reserving a non-existing item\\nStatus: Passed\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * This test creates a test list with one item. It tries to reserve an item with"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * a return date before the date of borrowing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void InvalidReturnDateTest() throws ParseException, RimsException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ResourceUnderTest \u003d new Item(1, \"TestObject\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        listUnderTest.add(ResourceUnderTest);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        // Date from is later than date till"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        commandUnderTest \u003d new ReserveCommand(\"TestObject\", 1, \"13/11/2020 1800\", \"12/11/2020 1800\", 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Exception e \u003d assertThrows(RimsException.class, () -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            commandUnderTest.execute(ui, storage, listUnderTest);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        assertEquals(\"Your date of return must be after your date of borrowing!\", e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        System.out.print(\"Test: A return date before borrow date\\nStatus: Passed\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        listUnderTest.deleteResourceByName(\"TestObject\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * This test creates a test list with one item. It tries to reserve an item with"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * a return date and a date of borrowing that are in the past."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws RimsException"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void PastDateTest() throws ParseException, RimsException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ResourceUnderTest \u003d new Item(1, \"TestObject\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        listUnderTest.add(ResourceUnderTest);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        // Date from is later than date till"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        commandUnderTest \u003d new ReserveCommand(\"TestObject\", 1, \"10/11/2000 1800\", \"12/11/2000 1800\", 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Exception e \u003d assertThrows(RimsException.class, () -\u003e {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            commandUnderTest.execute(ui, storage, listUnderTest);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        });"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        assertEquals(\"Your date of return must be a date in the future!\", e.getMessage());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        System.out.print(\"Test: A pair of dates in the past\\nStatus: Passed\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        listUnderTest.deleteResourceByName(\"TestObject\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * This test creates a reservation with a negative quantity."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void InvalidQuantityTest() throws ParseException, RimsException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ResourceUnderTest \u003d new Item(1, \"TestObject\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        listUnderTest.add(ResourceUnderTest);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        // Date from is later than date till"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        commandUnderTest \u003d new ReserveCommand(\"TestObject\", -1, \"10/11/2020 1800\", \"12/11/2020 1800\", 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Exception e \u003d assertThrows(RimsException.class, () -\u003e {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            commandUnderTest.execute(ui, storage, listUnderTest);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        });"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        assertEquals(\"Reservation is not made because the user has entered 0 or a negative quantity!\", e.getMessage());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        System.out.print(\"Test: A negative quantity is parsed\\nStatus: Passed\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        listUnderTest.deleteResourceByName(\"TestObject\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * This test attempts to reserve an item with insufficient quantity."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void InsufficientQuantityTest() throws ParseException, RimsException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ResourceUnderTest \u003d new Item(1, \"TestObject\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        listUnderTest.add(ResourceUnderTest);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        commandUnderTest \u003d new ReserveCommand(\"TestObject\", listUnderTest.getAvailableNumberOfResource(\"TestObject\")+1, \"10/11/2022 1800\", \"12/11/2022 1800\", 1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Exception e \u003d assertThrows(RimsException.class, () -\u003e {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            commandUnderTest.execute(ui, storage, listUnderTest);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        });"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        assertEquals(\"We don\u0027t have that many of this resource currently available!\", e.getMessage());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        System.out.print(\"Test: Resource list has insufficient quantity for requested resource\\nStatus: Passed\\n\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        listUnderTest.deleteResourceByName(\"TestObject\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * A valid input is used here to test for success cases."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void validResultTest() throws RimsException, ParseException, IOException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ResourceUnderTest \u003d new Item(1, \"TestObject\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        listUnderTest.add(ResourceUnderTest);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        commandUnderTest \u003d new ReserveCommand(\"TestObject\", 1, \"10/11/2022 1800\", \"12/11/2022 1800\", 1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        commandUnderTest.execute(ui, storage, listUnderTest);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        System.out.print(\"Test: Valid input test\\nStatus: Passed\\n\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        listUnderTest.deleteResourceByName(\"TestObject\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "isbobby"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "isbobby": 137
    }
  },
  {
    "path": "src/test/java/CommandTests/ReturnCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "isbobby"
        },
        "content": "package CommandTests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.ResourceList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.command.ReturnCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.exception.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "isbobby"
        },
        "content": "public class ReturnCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private ReturnCommand commandUnderTest;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static ResourceList listUnderTest;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static Resource ResourceUnderTest;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static Reservation ReservationUnderTest;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * This before all method creates list, storage, reservations for later tests."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws RimsException"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws FileNotFoundException"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private void init() throws RimsException, ParseException, FileNotFoundException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ArrayList\u003cResource\u003e emptyList \u003d new ArrayList\u003cResource\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        listUnderTest \u003d new ResourceList(ui, emptyList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ResourceUnderTest \u003d new Item(1, \"testitem\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ReservationUnderTest \u003d new Reservation(1,1,1,\"10/10/2021 1000\",\"11/10/2021 1000\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Date datefrom \u003d ReservationUnderTest.stringToDate(\"10/10/2021 1000\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Date datetill \u003d ReservationUnderTest.stringToDate(\"11/10/2021 1000\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ResourceUnderTest.book(1, 1, datefrom, datetill);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        listUnderTest.add(ResourceUnderTest);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        storage \u003d new Storage(\"unitTestData/resources.txt\", \"unitTestData/reserves.txt\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * This test creates an empty resource list, and tries to reserve an item with 1"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * qty, which should invoke a RimsException of item not found exception."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void InvalidReservationIdTest() throws RimsException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ArrayList\u003cInteger\u003e ResourceIds \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ArrayList\u003cInteger\u003e ReservationIds \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ResourceIds.add(1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ReservationIds.add(2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        commandUnderTest \u003d new ReturnCommand(1, ResourceIds, ReservationIds);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Exception e \u003d assertThrows(RimsException.class, () -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            commandUnderTest.execute(ui, storage, listUnderTest);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        assertEquals(\"Reservation not found for given reservation ID!\", e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        System.out.print(\"Test: Trying to return a non-existing reservation\\nStatus: Passed\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * This test aims to test for the execption handling when a user id of an user"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * who has not made any reservation is parsed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void validInputTest() throws RimsException, IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ArrayList\u003cInteger\u003e ResourceIds \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ArrayList\u003cInteger\u003e ReservationIds \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ResourceIds.add(1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ReservationIds.add(1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        commandUnderTest \u003d new ReturnCommand(1, ResourceIds, ReservationIds);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        commandUnderTest.execute(ui, storage, listUnderTest);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        System.out.print(\"Test: Trying to return a non-existing reservation\\nStatus: Passed\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "isbobby"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "isbobby": 86,
      "rabhijit": 1
    }
  },
  {
    "path": "src/test/java/CommandTests/StatsCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "isbobby"
        },
        "content": "package CommandTests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.ResourceList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.command.StatsCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.exception.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "isbobby"
        },
        "content": "public class StatsCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private StatsCommand commandUnderTest;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static ResourceList listUnderTest;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static Resource ResourceUnderTest;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * This before all method creates list, storage, reservations for later tests."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws RimsException"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws FileNotFoundException"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static void init() throws RimsException, ParseException, FileNotFoundException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ArrayList\u003cResource\u003e emptyList \u003d new ArrayList\u003cResource\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        listUnderTest \u003d new ResourceList(ui, emptyList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ResourceUnderTest \u003d new Item(1, \"testitem\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        listUnderTest.add(ResourceUnderTest);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        storage \u003d new Storage(\"unitTestData/resources.txt\", \"unitTestData/reserves.txt\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void DateIntervalTooBigTest() throws RimsException, ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        commandUnderTest \u003d new StatsCommand(\"10/10/2021 1000\", \"11/11/2021 1000\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Exception e \u003d assertThrows(RimsException.class, () -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            commandUnderTest.execute(ui, storage, listUnderTest);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        assertEquals(\"The date interval is too large (more than 14 days)\", e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        System.out.print(\"Test: Trying to return a non-existing reservation\\nStatus: Passed\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "isbobby"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "isbobby": 57
    }
  },
  {
    "path": "src/test/java/CommandTests/UndoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// package CommandTests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import rims.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import rims.core.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import rims.exception.RimsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import java.io.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import java.io.File;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "isbobby"
        },
        "content": "// import java.text.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hin1"
        },
        "content": "// //@@author hin1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hin1"
        },
        "content": "// /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hin1"
        },
        "content": "//  * Check if each modifiable command can run undo properly,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hin1"
        },
        "content": "//  * and checks for every command undone, they output the proper arguments."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hin1"
        },
        "content": "//  *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hin1"
        },
        "content": "//  * Current list of supported commands:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hin1"
        },
        "content": "//  * Add"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hin1"
        },
        "content": "//  * Delete"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hin1"
        },
        "content": "//  * Loan"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hin1"
        },
        "content": "//  * Return"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hin1"
        },
        "content": "//  * Reserve"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hin1"
        },
        "content": "//  */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hin1"
        },
        "content": "// public class UndoCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     private static final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     private static final PrintStream originalErr \u003d System.err;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     private UndoCommand commandUnderTest;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     private Command commandToUndo;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     private Ui tempUi;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     private ResourceList tempResources;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     private Storage storageUnderTest;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     @TempDir"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     static File tempDir;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     @BeforeAll"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     public void init() throws IOException, ParseException, RimsException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hin1"
        },
        "content": "//         System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hin1"
        },
        "content": "//         System.setErr(new PrintStream(errContent));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hin1"
        },
        "content": "//         File testResourceFile \u003d new File(tempDir.getName() + \"tempResources.txt\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hin1"
        },
        "content": "//         File testReservationsFile \u003d new File(tempDir.getName() + \"tempReservations.txt\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hin1"
        },
        "content": "//         this.tempUi \u003d new Ui();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hin1"
        },
        "content": "//         this.storageUnderTest \u003d new Storage(testResourceFile.getName(),testReservationsFile.getName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hin1"
        },
        "content": "//         this.tempResources \u003d new ResourceList(tempUi,storageUnderTest.getResources());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hin1"
        },
        "content": "//         this.commandToUndo \u003d new AddCommand(\"item1\",1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hin1"
        },
        "content": "//         this.commandUnderTest \u003d new UndoCommand(commandToUndo);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     @BeforeEach"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     public void executeUndo() throws ParseException, IOException, RimsException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hin1"
        },
        "content": "//         commandToUndo.execute(tempUi,storageUnderTest,tempResources);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hin1"
        },
        "content": "//         commandUnderTest.execute(tempUi,storageUnderTest,tempResources);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     public void previousCommandsAndArgumentsTest() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hin1"
        },
        "content": "//         assertEquals(\"add 1 item1 (item)\",this.commandUnderTest.getCommandUserInput());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     public void restoreStateTest() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hin1"
        },
        "content": "//         assertEquals(storageUnderTest.getResources(),tempResources.getResources());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     @AfterAll"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     static void restoreStreams() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hin1"
        },
        "content": "//         System.setOut(originalOut);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hin1"
        },
        "content": "//         System.setErr(originalErr);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hin1"
        },
        "content": "//     }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hin1"
        },
        "content": "// }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hin1": 70,
      "isbobby": 18
    }
  },
  {
    "path": "src/test/java/CommandTests/ViewDeadlinesCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "isbobby"
        },
        "content": "package CommandTests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.command.ViewDeadlinesCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.ResourceList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "isbobby"
        },
        "content": "public class ViewDeadlinesCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private ViewDeadlinesCommand commandUnderTest;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static ResourceList listUnderTest;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static void init() throws RimsException, ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ArrayList\u003cResource\u003e newList \u003d new ArrayList\u003cResource\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        //ArrayList\u003cReservation\u003e reserveListItem \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ReservationList reserveList \u003d new ReservationList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Reservation itemReservation \u003d new Reservation(1, 1, 5, \"20/12/2019 0900\", \"21/12/2019 1000\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        reserveList.add(itemReservation);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Item newItem \u003d new Item(1, \"ball\", reserveList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        //ReservationList reserveListRoom \u003d new ReservationList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Reservation roomReservation \u003d new Reservation(2, 2, 5, \"20/12/2019 0900\", \"20/12/2019 0930\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        reserveList.add(roomReservation);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Room newRoom \u003d new Room(2, \"mpsh\", reserveList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        newList.add(newItem);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        newList.add(newRoom);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        listUnderTest \u003d new ResourceList(ui, newList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * This test creates a resource list, and tries to list resources by date ,which"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * should not invoke a RimsException."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws RimsException"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    void PrintByDateTest() throws RimsException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        commandUnderTest \u003d new ViewDeadlinesCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        commandUnderTest.execute(ui, storage, listUnderTest);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        System.out.print(\"Test: valid list command \\nStatus: passed\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "isbobby"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "isbobby": 53
    }
  },
  {
    "path": "src/test/java/CoreTests/ParserReserveTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "isbobby"
        },
        "content": "package CoreTests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.ResourceList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.exception.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.Resource;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "isbobby"
        },
        "content": "public class ParserReserveTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static Parser parserUnderTest;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static ResourceList listUnderTest;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static Resource resourceUnderTest;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static void init() throws RimsException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ArrayList\u003cResource\u003e emptyList \u003d new ArrayList\u003cResource\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        listUnderTest \u003d new ResourceList(ui, emptyList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        resourceUnderTest \u003d new Item(1, \"testobject\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        listUnderTest.add(resourceUnderTest);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        parserUnderTest \u003d new Parser(ui, listUnderTest);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private void setup() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private void cleanup() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * User enters a valid input"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void validInputTest() throws RimsException, IOException, ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        String input \u003d \"reserve /item testobject /qty 1 /id 1 /from 15/11/2020 1000 /by 15/11/2020 1200\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        parserUnderTest.parseInput(input);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ui.formattedPrint(\"Test: valid input\\n\\tStatus: passed\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * User enters invalid datatype when they are supposed to enter integer."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void invalidIntegerInputTest() throws RimsException, IOException, ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        String input \u003d \"reserve /item testobject /qty a /id a /from 15/11/2020 1000 /by 15/11/2020 1200\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Exception e \u003d assertThrows(RimsException.class, () -\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            parserUnderTest.parseInput(input);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        assertEquals(\"Please specify an integer value that is valid \u0026 non-negative!\", e.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ui.formattedPrint(\"Test: Invalid type in input\\n\\tStatus: Passed\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * User enters invalid date format."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void invalidDateFormatTest() throws RimsException, IOException, ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        String input \u003d \"reserve /item testobject /qty 1 /id 1 /from 15/11/2020 /by 15/11/2020 1200\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Exception e \u003d assertThrows(RimsException.class, () -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            parserUnderTest.parseInput(input);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        });"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        assertEquals(\"Please enter a valid day / time.\", e.getMessage());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ui.formattedPrint(\"Test: Invalid date format in input\\n\\tStatus: Passed\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * User tries to reserve a non-existing item"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void itemDoesNotExistTest() throws RimsException, IOException, ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        String input \u003d \"reserve /item what /qty 1 /id 1 /from 15/11/2020 /by 15/11/2020 1200\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Exception e \u003d assertThrows(RimsException.class, () -\u003e {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            parserUnderTest.parseInput(input);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        });"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        assertEquals(\"This resource does not exist in your inventory!\", e.getMessage());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ui.formattedPrint(\"Test: Invalid date format in input\\n\\tStatus: Passed\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "isbobby"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "isbobby": 106
    }
  },
  {
    "path": "src/test/java/CoreTests/ParserReturnTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "isbobby"
        },
        "content": "package CoreTests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.ResourceList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.exception.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.Resource;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "isbobby"
        },
        "content": "public class ParserReturnTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static Parser parserUnderTest;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static ResourceList listUnderTest;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static void init() throws RimsException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ArrayList\u003cResource\u003e emptyList \u003d new ArrayList\u003cResource\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        listUnderTest \u003d new ResourceList(ui, emptyList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        parserUnderTest \u003d new Parser(ui, listUnderTest);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private void setup() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private void cleanup() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * This test tests for the exception handling when user enters \"return /id\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * without specifying user id."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void missingIDTest() throws RimsException, IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        String input \u003d \"return /id     \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Exception e \u003d assertThrows(RimsException.class, () -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            parserUnderTest.parseInput(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        assertEquals(\"Please specify the borrower\u0027s user ID.\", e.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        System.out.print(\"Test: Input has missing ID\\nStatus: Passed\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * This test tests for the exception handling when user enters \"return /id A\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * with an invalid user id that is not a positive integer."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void invalidUserIdTest() throws RimsException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        String input \u003d \"return /id A\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Exception e \u003d assertThrows(RimsException.class, () -\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            parserUnderTest.parseInput(input);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        assertEquals(\"Please specify an integer value that is valid \u0026 non-negative!\", e.getMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        String input2 \u003d \"return /id -1\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Exception e2 \u003d assertThrows(RimsException.class, () -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            parserUnderTest.parseInput(input2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        assertEquals(\"Please specify an integer value that is valid \u0026 non-negative!\", e2.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        System.out.print(\"Test: Input has an invalid user id\\nStatus: Passed\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * This test tests for the exception handling when user enters \"return /id 1\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * and user with id 1 has no reservations."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void userHasNoBookingTest() throws RimsException, IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        String input_1 \u003d \"return /id 5\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Exception e \u003d assertThrows(RimsException.class, () -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            parserUnderTest.parseInput(input_1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        assertEquals(\"User 5 has not made any bookings yet!\", e.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        System.out.print(\"Test: Input User has no reservations\\nStatus: Passed\\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    // /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    //  * This test tests for the exception handling when user enters \"return /id 1\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    //  * and user with id 1 has no reservations."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    //  * "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    //  * @throws ParseException"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    //  */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    // public void invalidReservationIDTest() throws RimsException, IOException, ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    //     Resource testitem \u003d new Item(1,\"testitem\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    //     Date datefrom \u003d stringToDate(\"10/10/2021 1000\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    //     Date datetill \u003d stringToDate(\"11/10/2021 1000\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    //     testitem.book(1, 1, datefrom, datetill);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    //     listUnderTest.add(testitem);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    //     String input_1 \u003d \"return /id 1\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    //     parserUnderTest.parseInput(input_1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    //     //assertEquals(\"User 1 has not made any bookings yet!\", e.getMessage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    //     System.out.print(\"Test: Trying to return a non-existing reservation\\nStatus: Passed\\n\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Converts a date and time inputted by the user in String format, into a Date object."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param stringDate the date and time inputted by the user in String format."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return a Date object representing the date and time inputted by the user."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public Date stringToDate(String stringDate) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Date dateValue \u003d formatter.parse(stringDate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return dateValue;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "isbobby"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "isbobby": 127
    }
  },
  {
    "path": "src/test/java/CoreTests/ParserStatsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "isbobby"
        },
        "content": "package CoreTests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.ResourceList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.exception.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.Resource;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "isbobby"
        },
        "content": "public class ParserStatsTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static Parser parserUnderTest;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static ResourceList listUnderTest;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @BeforeAll "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private static void init () throws RimsException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ArrayList\u003cResource\u003e emptyList \u003d new ArrayList\u003cResource\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        listUnderTest \u003d new ResourceList(ui, emptyList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        parserUnderTest \u003d new Parser(ui, listUnderTest);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private void setup (){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private void cleanup (){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void missingTillDateTest() throws RimsException, IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        String input \u003d \"stats /from\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Exception e \u003d assertThrows(RimsException.class, () -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            parserUnderTest.parseInput(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        assertEquals(\"Please specify the date for which you want to view statistics.\", e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        System.out.print(\"Test: Missing parameters in input\\nStatus: Passed\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void invalidDateFormatTest() throws RimsException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        String input \u003d \"stats /from 11/11/2020 2300 /till 14/11/2020\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Exception e \u003d assertThrows(RimsException.class, () -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            parserUnderTest.parseInput(input);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        assertEquals(\"Please enter a valid day / time.\", e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        System.out.print(\"Test: Invalid Dates passed as arguments\\nStatus: Passed\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void validInputTest() throws RimsException, IOException, ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        String input \u003d \"stats /from 11/11/2020 2300 /till 14/11/2020 2300\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        parserUnderTest.parseInput(input);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        System.out.print(\"Test: Valid input\\nStatus: Passed\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "isbobby"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "isbobby": 73
    }
  }
]
