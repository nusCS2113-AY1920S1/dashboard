[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    archiveBaseName \u003d \"rims\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    archiveVersion \u003d \"v1.2\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    mainClassName \u003d \"rims/core/Rims\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rabhijit": 3,
      "-": 44
    }
  },
  {
    "path": "src/main/java/rims/command/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hin1"
        },
        "content": "package rims.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hin1"
        },
        "content": "import rims.core.ResourceList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hin1"
        },
        "content": "import rims.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hin1"
        },
        "content": "import rims.core.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.Item;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.Room;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.ReservationList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.Resource;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hin1"
        },
        "content": "//@@author hin1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hin1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hin1"
        },
        "content": " * Implements the addition of a new Resource to the ResourceList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hin1"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hin1"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hin1"
        },
        "content": "    protected String resourceName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hin1"
        },
        "content": "    protected String resourceType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hin1"
        },
        "content": "    protected int qty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hin1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * Constructor of a new AddCommand for a new Room."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @param roomName the name of the new Room to be added to the ResourceList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hin1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hin1"
        },
        "content": "    public AddCommand(String roomName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hin1"
        },
        "content": "        this.resourceName \u003d roomName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hin1"
        },
        "content": "        this.resourceType \u003d \"room\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hin1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hin1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * Constructor of a new AddCommand for a new Item."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @param itemName the name of the new Item to be added to the ResourceList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @param qty the quantity of the new Item to be added."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hin1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hin1"
        },
        "content": "    public AddCommand(String itemName, int qty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hin1"
        },
        "content": "        this.resourceName \u003d itemName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hin1"
        },
        "content": "        this.resourceType \u003d \"item\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hin1"
        },
        "content": "        this.qty \u003d qty;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hin1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hin1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * Creates the new Resource, adds it to the ResourceList, and prints a message to the CLI"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * that the Resource has been successfully added."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @param ui An instance of the user interface."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @param storage An instance of the Storage class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @param resources The ResourceList, containing all the created Resources thus far."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hin1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hin1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hin1"
        },
        "content": "    public void execute(Ui ui, Storage storage, ResourceList resources) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hin1"
        },
        "content": "        if (resourceType.equals(\"room\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hin1"
        },
        "content": "            int resourceId \u003d resources.generateResourceId();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hin1"
        },
        "content": "            Room newRoom \u003d new Room(resourceId, resourceName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hin1"
        },
        "content": "            resources.add(newRoom);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hin1"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hin1"
        },
        "content": "            ui.print(\"The following room has been successfully added:\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hin1"
        },
        "content": "            ui.print(newRoom.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hin1"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hin1"
        },
        "content": "        } else if (resourceType.equals(\"item\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hin1"
        },
        "content": "            for (int i \u003d 0; i \u003c qty; i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hin1"
        },
        "content": "                int resourceId \u003d resources.generateResourceId();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hin1"
        },
        "content": "                Item newItem \u003d new Item(resourceId, resourceName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hin1"
        },
        "content": "                resources.add(newItem);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hin1"
        },
        "content": "                if (i \u003d\u003d qty - 1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hin1"
        },
        "content": "                    ui.printLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hin1"
        },
        "content": "                    ui.print(\"The following item(s) have been successfully added:\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hin1"
        },
        "content": "                    ui.print(newItem.toString() + \" (qty: \" + qty + \")\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hin1"
        },
        "content": "                    ui.printLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hin1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hin1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hin1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hin1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hin1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hin1": 67,
      "isbobby": 3,
      "rabhijit": 1
    }
  },
  {
    "path": "src/main/java/rims/command/CalendarCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "package rims.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "//@@author danielcyc"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "public abstract class CalendarCommand extends Command{"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static int cellLength \u003d 15;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static int cellHeight \u003d 6;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static int CalHeight \u003d 5;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static int CalWidth \u003d 7;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static int DaysInMonth \u003d 31;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    public CalendarCommand(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        getData();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        printCal();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "  // @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    //public void execute(Ui ui, Storage storage, ResourceList resources) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static String Vert \u003d \"║\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static String Horz \u003d \"═\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static String TopLeft \u003d \"╔\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static String TopRight \u003d \"╗\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static String BotRight \u003d \"╝\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static String BotLeft \u003d \"╚\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static String Centre \u003d \"╬\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static String TopCentre \u003d \"╦\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static String BotCentre \u003d \"╩\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static String MidRight \u003d \"╣\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static String MidLeft \u003d \"╠\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static String[][] array \u003d {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            {\"mon12345678910111213\", \"a\", \"h\"},"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            {\"tue\", \"b\" , \"i\"},"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            {\"wed\", \"c\" , \"j\", \"fl;kj\", \";idfolhf\"},"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            {\"thur\", \"k\"},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            {\"fri\", \"e\", \"l\"},"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            {\"sat\"},"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            {\"sun\", \"g\", \"n\"},"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            {\"hello\", \"this\", \"is\"},"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            {\"\", \"\", \"\"},"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            {\"all\", \"\"},"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            {\"fridfhfghtrwst432q53425435\", \"fasfae\", \"l\"},"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            {\"distinct\", \"afae\", \"l\"},"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            {\"frhfdghfdhfdghfdhfghi\", \"e\", \"ldfaest3iotu3q8905t\"},"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            {},"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            {\" \"},"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            {\"\"},"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            {\" \", \"\",\"dasdas\", \"Dada\"},"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            {},"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            {},"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            {\"items\"},"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            {},"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            {},"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            {},"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            {},"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            {\"gfasdfaf\",\"adfasfaefa\",\"fgadfgafaf\",\"fafafafaf\",\"fasfasfas\"}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    };"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    // todo: check and align days of the week / offset from first box (mon)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    // todo: add in items and reservation status"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    // todo: add \"...\" for when cell cannot display all rows"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    // todo: highlight box of today\u0027s date"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    // todo: make calendar size dynamic - dependant on size of window"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    // todo: make dates overflow from previous months"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    // todo: make headings - month and year as well as days of the week as the axis"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    public static void printCal() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        printTopCells();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        for (int row \u003d 2; row \u003c CalHeight; row++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "           printMidCells(row);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        printBotCells();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static void printTopCells() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        int cellRow \u003d 1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d (cellLength * CalWidth); i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                System.out.print(TopLeft);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            } else if (i \u003d\u003d (cellLength * CalWidth)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                System.out.print(TopRight);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            } else if ((i % cellLength) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                System.out.print(TopCentre);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                //System.out.print(Horz)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                ;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                  printCellRow(cellRow, DaysInMonth);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static void printMidCells(int CellRow){"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d (cellLength * CalWidth); i++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            if (i \u003d\u003d 0){"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                System.out.print(MidLeft);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            else if (i \u003d\u003d (cellLength * CalWidth)){"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                System.out.print(MidRight);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            else if((i % cellLength) \u003d\u003d 0){"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                System.out.print(Centre);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                //System.out.print(Horz)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                ;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        printCellRow(CellRow, DaysInMonth);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static void printBotCells(){"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        int CellRow \u003d CalHeight;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d (cellLength * CalWidth); i++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            if (i \u003d\u003d 0){"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                System.out.print(MidLeft);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            else if (i \u003d\u003d (cellLength * CalWidth)){"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                System.out.print(MidRight);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            else if((i % cellLength) \u003d\u003d 0){"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                System.out.print(Centre);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                //System.out.print(Horz)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                ;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        printCellRow(CellRow, DaysInMonth);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d (cellLength * CalWidth); i++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            if (i \u003d\u003d 0){"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                System.out.print(BotLeft);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            else if (i \u003d\u003d (cellLength * CalWidth)){"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                //System.out.print(BotRight)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                ;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            else if((i % cellLength) \u003d\u003d 0){"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                System.out.print(BotCentre);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                //System.out.print(Horz)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                ;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static int getLength(String phrase){"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        return phrase.length();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static void printCellRow(int cellRow, int DaysInMonth) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        for (int row \u003d 2; row \u003c cellHeight; row++) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                for (int i \u003d 0; i \u003c\u003d cellLength * CalWidth; i++) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    int day \u003d getDay(i, cellRow);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    String phraseToPrint;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    if ((i % cellLength) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                        System.out.print(Vert);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    else if (day \u003e DaysInMonth){"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                        phraseToPrint \u003d shortenPhrase(\"\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                        System.out.print(phraseToPrint);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                        System.out.print(Vert);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                        i +\u003d cellLength;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    else if (i \u003d\u003d (cellLength * CalWidth)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                        System.out.print(Vert);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    else if (row \u003d\u003d 2){"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                        phraseToPrint \u003d shortenPhrase(day);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                        System.out.print(phraseToPrint);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                        System.out.print(Vert);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                        i +\u003d cellLength;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    else if ( (day-1 \u003e\u003d array.length )|| (row-3 \u003e array[day-1].length-1) ) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                        phraseToPrint \u003d shortenPhrase(\"\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                        System.out.print(phraseToPrint);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                        System.out.print(Vert);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                        i +\u003d cellLength;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    else {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                        String phrase \u003d array[day-1][row-3];"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                        phraseToPrint \u003d shortenPhrase(phrase);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                        System.out.print(phraseToPrint);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                        System.out.print(Vert);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                        i +\u003d cellLength;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static String shortenPhrase(String Phrase){"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        String result \u003d \" \";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        String padding \u003d \"\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        int length \u003d getLength(Phrase);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        if (length \u003c\u003d cellLength - 2){"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            result +\u003d Phrase;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            for (int i \u003d 0; i \u003c cellLength - length - 3; i ++){"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                padding +\u003d \" \";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            result +\u003d padding;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        else{ //assert need to truncate phrase"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            result +\u003d Phrase.substring(0, (cellLength-6) );"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            result +\u003d \"...\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        result +\u003d \" \";"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static String shortenPhrase(int day){"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        String padding \u003d \"\";"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        if (day \u003c\u003d 9){"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            for(int i \u003d 0; i \u003c cellLength - 3; i++){"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                padding +\u003d \" \";"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            result +\u003d padding + day;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        else { // assert that day is double digit"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            for(int i \u003d 0; i \u003c cellLength - 4; i++){"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                padding +\u003d \" \";"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            result +\u003d padding + day;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        result +\u003d \" \";"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static int getDay(int i, int cellRow){"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        int result \u003d i/cellLength + 1 + ((cellRow-1)*7);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    private static void getData(){"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        for(int day \u003d 1; day \u003c DaysInMonth; day ++){"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            String [] list;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            list[1];"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            iterate all days"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            make a list for per day"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            list for that day and get the first item"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            append item to list"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            do the same for the rest of the items on that same day"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            append list to data"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "            return data"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "danielcyc": 265
    }
  },
  {
    "path": "src/main/java/rims/command/CloseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "package rims.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.ResourceList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "//@@author rabhijit"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * Carries out the necessary operations to close RIMS; saving all existing Resources and Reservations to disk"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * in text format, sending the farewell message, and setting the exit code to terminate the program."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "public class CloseCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Saves all existing Resources and Reservations to disk in a text format, sends a farewell"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * message, and sets the exit code to true to halt the RIMS program."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param ui An instance of the user interface."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param storage An instance of the Storage class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resources The ResourceList, containing all the created Resources thus far."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws IOException if there is an error in saving Resources or Reservations to disk"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void execute(Ui ui, Storage storage, ResourceList resources) throws IOException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        storage.saveToFile(resources.getResources());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        ui.farewell();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        setExitCode();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "isbobby": 3,
      "rabhijit": 25
    }
  },
  {
    "path": "src/main/java/rims/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "package rims.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.ResourceList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "//@@author rabhijit"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * The parent class of all possible Commands understood by RIMS. Sets the exit code"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * to false by default and lists methods common to all the commands."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected Boolean exitCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Sets the exit code, which is checked after the handling and processing of every command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * and before the input of the next command, to false. When it is true, the RIMS program halts."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        exitCode \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns the exit code of the command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the exit code"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Boolean getExitCode() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return exitCode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Sets the exit code of the command to true. When this happens, the RIMS"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * program will halt."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void setExitCode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        exitCode \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * In the Command child classes, this method will carry out the necessary operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * to execute its command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param ui An instance of the user interface."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param storage An instance of the Storage class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resources The ResourceList, containing all the created Resources thus far."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws ParseException if any date is un-parsable"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws IOException if there is an error in saving Resources to disk"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if there is a non-formatting-related issue in the input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public abstract void execute(Ui ui, Storage storage, ResourceList resources)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        throws ParseException, IOException, RimsException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "isbobby": 3,
      "rabhijit": 49,
      "-": 3
    }
  },
  {
    "path": "src/main/java/rims/command/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hin1"
        },
        "content": "package rims.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hin1"
        },
        "content": "import rims.core.ResourceList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.core.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.core.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.Resource;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.Item;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.Room;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.ReservationList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hin1"
        },
        "content": "//@@author hin1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hin1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hin1"
        },
        "content": " * Implements the deletion of a Resource from the ResourceList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hin1"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hin1"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hin1"
        },
        "content": "    protected String resourceName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hin1"
        },
        "content": "    protected String resourceType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hin1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * Constructor for a DeleteCommand, that takes in the name and type of the Resource to be deleted."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @param resourceName the name of the Resource to be deleted."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @param resourceType the type (Item or Room) of the Resource to be deleted."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hin1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hin1"
        },
        "content": "    public DeleteCommand(String resourceName, String resourceType) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hin1"
        },
        "content": "        this.resourceName \u003d resourceName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hin1"
        },
        "content": "        this.resourceType \u003d resourceType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hin1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hin1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * Obtains the resource IDs of the Resources to be deleted from the user, removes them from the ResourceList,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * and prints a message to the CLI that the Resource objects have been succesfully deleted."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @param ui An instance of the user interface."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @param storage An instance of the Storage class."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @param resources The ResourceList, containing all the created Resources thus far."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @throws RimsException if the resource IDs specified by the user are invalid"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hin1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hin1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hin1"
        },
        "content": "    public void execute(Ui ui, Storage storage, ResourceList resources) throws RimsException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hin1"
        },
        "content": "        if (resourceType.equals(\"room\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hin1"
        },
        "content": "            Resource thisResource \u003d resources.getResourceByName(resourceName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hin1"
        },
        "content": "            resources.deleteResourceByName(resourceName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hin1"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hin1"
        },
        "content": "            ui.print(\"The following room has been successfully deleted:\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hin1"
        },
        "content": "            ui.print(thisResource.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hin1"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hin1"
        },
        "content": "        } else if (resourceType.equals(\"item\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hin1"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hin1"
        },
        "content": "            ArrayList\u003cResource\u003e allOfItem \u003d resources.getAllOfResource(resourceName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hin1"
        },
        "content": "            for (int i \u003d 0; i \u003c allOfItem.size(); i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hin1"
        },
        "content": "                Resource thisResource \u003d allOfItem.get(i);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hin1"
        },
        "content": "                ReservationList thisResourceReservations \u003d thisResource.getReservations();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hin1"
        },
        "content": "                ui.printDash();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hin1"
        },
        "content": "                ui.print(thisResource.toString() + \" (ID: \" + thisResource.getResourceId() + \")\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hin1"
        },
        "content": "                if (!thisResourceReservations.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hin1"
        },
        "content": "                    for (int j \u003d 0; j \u003c thisResourceReservations.size(); j++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hin1"
        },
        "content": "                        ui.print(\"\\t\" + thisResourceReservations.getReservationByIndex(j).toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hin1"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hin1"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hin1"
        },
        "content": "                    ui.print(\"No bookings for this resource yet!\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hin1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hin1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            //@@author rabhijit"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.printDash();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            String idInput \u003d ui.getInput("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                \"Type in the resource ID(s) (separated by a space for multiple IDs) that you wish to delete:\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            String[] splitIdInput \u003d idInput.split(\" \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ArrayList\u003cInteger\u003e intIdInput \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            for (int i \u003d 0; i \u003c splitIdInput.length; i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                intIdInput.add(Integer.parseInt(splitIdInput[i]));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ArrayList\u003cResource\u003e deletedResources \u003d new ArrayList\u003cResource\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            for (int j \u003d 0; j \u003c intIdInput.size(); j++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                Resource thisResource \u003d resources.getResourceById(intIdInput.get(j));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                deletedResources.add(thisResource);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                resources.deleteResourceById(intIdInput.get(j));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.print(\"The following item(s) have been successfully deleted:\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            for (int k \u003d 0; k \u003c deletedResources.size(); k++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                Resource thisDeletedResource \u003d deletedResources.get(k);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                ui.print(thisDeletedResource.toString() + \" (ID: \" + thisDeletedResource.getResourceId() + \")\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hin1": 55,
      "rabhijit": 35
    }
  },
  {
    "path": "src/main/java/rims/command/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "package rims.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.ResourceList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.Resource;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.Reservation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.ReservationList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "//@@author rabhijit"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * Shows the TaskList of all the currently existing Tasks in String format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected String resourceName \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected String listType \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * The constructor for a ListCommand, for a generic list of all Resources in the ResourceList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * The constructor for a ListCommand, when a detailed list of a particular Resource"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * is desired."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param paramType the type of Resource desired (Item or Room)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceName the name of the Resource for which a list is desired."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public ListCommand(String paramType, String resourceName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        listType \u003d paramType;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.resourceName \u003d resourceName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Depending on the type of list desired, either prints out a basic list of all Resources in the ResourceList,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * or a detailed list of an individual Resource containing all of its current and future Reservations."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param ui An instance of the user interface."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param storage An instance of the Storage class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resources The ResourceList, containing all the created Resources thus far."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws ParseException if the resource name is invalid"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException for any other unexpected error"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void execute(Ui ui, Storage storage, ResourceList resources) throws ParseException, RimsException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (listType \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ArrayList\u003cString\u003e coveredResources \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.print(\"CURRENTLY AVAILABLE:\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.printEmptyLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            for (int i \u003d 0; i \u003c resources.size(); i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                Resource thisResource \u003d resources.getResourceByIndex(i);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                int availableNumberOfResource \u003d resources.getAvailableNumberOfResource(thisResource.getName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                if (!coveredResources.contains(thisResource.getName()) \u0026\u0026 availableNumberOfResource \u003e 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    coveredResources.add(thisResource.getName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    ui.print(thisResource.toString() + \" (qty: \" + availableNumberOfResource + \")\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.printDash();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.print(\"CURRENTLY BOOKED:\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.printEmptyLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            coveredResources \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            for (int i \u003d 0; i \u003c resources.size(); i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                Resource thisResource \u003d resources.getResourceByIndex(i);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                int bookedNumberOfResource \u003d resources.getBookedNumberOfResource(thisResource.getName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                if (!coveredResources.contains(thisResource.getName()) \u0026\u0026 bookedNumberOfResource \u003e 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    coveredResources.add(thisResource.getName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    ui.print(thisResource.toString() + \" (qty: \" + bookedNumberOfResource + \")\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    ArrayList\u003cResource\u003e allOfResource \u003d resources.getAllOfResource(thisResource.getName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    for (int j \u003d 0; j \u003c allOfResource.size(); j++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                        if (!allOfResource.get(j).isCurrentlyAvailable()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                            ui.print(\"\\t\" + allOfResource.get(j).getReservations().getCurrentBooking().toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        //@@author aarushisingh1"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        } else if (listType.equals(\"item\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            if (!resources.isItem(resourceName)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                throw new RimsException(\"There is no such item!\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            ArrayList\u003cResource\u003e allOfItem \u003d resources.getAllOfResource(resourceName);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            for (int i \u003d 0; i \u003c allOfItem.size(); i++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                Resource thisResource \u003d allOfItem.get(i);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                ReservationList thisResourceReservations \u003d thisResource.getReservations();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                ui.printDash();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                ui.print(thisResource.toString() + \" (ID: \" + thisResource.getResourceId() + \")\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                if (!thisResourceReservations.isEmpty()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                    for (int j \u003d 0; j \u003c thisResourceReservations.size(); j++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                        ui.print(\"\\t\" + thisResourceReservations.getReservationByIndex(j).toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                    ui.print(\"No bookings for this resource yet!\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            ui.printDash();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        } else if (listType.equals(\"room\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            if (!resources.isRoom(resourceName)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                throw new RimsException(\"There is no such room!\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            Resource thisResource \u003d resources.getResourceByName(resourceName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            ReservationList thisResourceReservations \u003d thisResource.getReservations();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            ui.print(thisResource.toString() + \" (ID: \" + thisResource.getResourceId() + \")\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            if (!thisResourceReservations.isEmpty()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                for (int j \u003d 0; j \u003c thisResourceReservations.size(); j++) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                    ui.print(\"\\t\" + thisResourceReservations.getReservationByIndex(j).toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                ui.print(\"No bookings for this resource yet!\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        else if (listType.equals(\"date\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aarushisingh1": 44,
      "isbobby": 4,
      "rabhijit": 78
    }
  },
  {
    "path": "src/main/java/rims/command/ReserveCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "isbobby"
        },
        "content": "package rims.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.ResourceList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.Reservation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.ReservationList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.Resource;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//@@author isbobby"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "isbobby"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "isbobby"
        },
        "content": " * Creates a Reservation for a Resource in the ResourceList, given the ID of the user,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "isbobby"
        },
        "content": " * the name of the Resource and the dates between which the Reservation is valid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "isbobby"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "isbobby"
        },
        "content": "public class ReserveCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    protected String resourceName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    protected int qty;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    protected Date dateFrom;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    protected Date dateTill;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    protected String stringDateFrom \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    protected String stringDateTill;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    protected int userId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    //@@author rabhijit"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Constructor for a ReserveCommand, for a Room which is to be loaned from effective immediately"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * till a certain future date."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param roomName the name of the Room to be loaned out."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param stringDateTill the date by which the Room must be returned, in String format."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param userId the ID of the user making the loan."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public ReserveCommand(String roomName, String stringDateTill, int userId) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        resourceName \u003d roomName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.qty \u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.dateFrom \u003d new Date(System.currentTimeMillis());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.stringDateTill \u003d stringDateTill;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.userId \u003d userId;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Constructor for a ReserveCommand, for an Item which is to be loaned from effective immediately"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * till a certain future date."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param itemName the name of the Item to be loaned out."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param qty the quantity of the Item to be loaned out."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param stringDateTill the date by which the Item(s) must be returned, in String format."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param userId the ID of the user making the loan."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public ReserveCommand(String itemName, int qty, String stringDateTill, int userId) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        resourceName \u003d itemName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.qty \u003d qty;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.dateFrom \u003d new Date(System.currentTimeMillis());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.stringDateTill \u003d stringDateTill;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.userId \u003d userId;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Constructor for a ReserveCommand, for a Room which is to be reserved from a given date in the future"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * till a further future date."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param roomName the name of the Room to be reserved."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param stringDateFrom the date from which the Room is to be loaned out, in String format."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param stringDateTill the date by which the Room must be returned, in String format."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param userId the ID of the user making the reservation."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public ReserveCommand(String roomName, String stringDateFrom, String stringDateTill, int userId) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        resourceName \u003d roomName;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.qty \u003d 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.stringDateFrom \u003d stringDateFrom;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.stringDateTill \u003d stringDateTill;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.userId \u003d userId;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Constructor for a ReserveCommand, for an Item which is to be reserved from a given date in the future"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * till a further future date."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param itemName the name of the Item to be reserved."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param qty the quantity of the Item to be reserved."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param stringDateFrom the date from which the Item is to be loaned out, in String format."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param stringDateTill the date by which the Item must be returned, in String format."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param userId the ID of the user making the reservation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public ReserveCommand(String itemName, int qty, String stringDateFrom, String stringDateTill, int userId) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        resourceName \u003d itemName;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.qty \u003d qty;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.stringDateFrom \u003d stringDateFrom;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.stringDateTill \u003d stringDateTill;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.userId \u003d userId;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    //@@author isbobby"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Checks if the reservation is possible given the number of available Resources and Reservations"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * that are already in place, and if it is possible, creates a Reservation for the desired number of "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Resources between the given dates."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param ui An instance of the user interface."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param storage An instance of the Storage class."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param resources The ResourceList, containing all the created Resources thus far."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws RimsException if there are not enough Resources available between the desired dates"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     *                       to make the Reservation possible"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws ParseException if the dates specified are invalid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void execute(Ui ui, Storage storage, ResourceList resources) throws RimsException, ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        if (!(stringDateFrom \u003d\u003d null)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            dateFrom \u003d resources.stringToDate(stringDateFrom);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        dateTill \u003d resources.stringToDate(stringDateTill);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        if (resources.getAvailableNumberOfResource(resourceName) \u003c qty) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            throw new RimsException(\"We don\u0027t have that many of this resource currently available!\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ArrayList\u003cResource\u003e allOfResource \u003d resources.getAllOfResource(resourceName);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ArrayList\u003cResource\u003e bookedResources \u003d new ArrayList\u003cResource\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        int qtyBooked \u003d 0;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        for (int j \u003d 0; j \u003c allOfResource.size(); j++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            Resource thisResource \u003d allOfResource.get(j);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            if (thisResource.isAvailableFrom(dateFrom, dateTill)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                thisResource.book(resources.generateReservationId(), userId, dateFrom, dateTill);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                bookedResources.add(thisResource);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                qtyBooked++;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            if (qtyBooked \u003d\u003d qty) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        if (qtyBooked !\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            ui.print(\"Done! I\u0027ve marked these resources as loaned:\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            for (int i \u003d 0; i \u003c bookedResources.size(); i++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                ui.print(bookedResources.get(i).toString() + \" (ID: \" + bookedResources.get(i).getResourceId() + \")\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            throw new RimsException(\"This item is not available between the dates you\u0027ve selected!\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "isbobby"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "isbobby": 70,
      "rabhijit": 72
    }
  },
  {
    "path": "src/main/java/rims/command/ReturnCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "package rims.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.Resource;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.Reservation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.ReservationList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.ResourceList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.core.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//@@author isbobby"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "isbobby"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "isbobby"
        },
        "content": " * Implements the returning of multiple Resources by removing the relevant Reservation objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "isbobby"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "isbobby"
        },
        "content": "public class ReturnCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    protected int userId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    protected ArrayList\u003cInteger\u003e resourceIds;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    protected ArrayList\u003cInteger\u003e reservationIds;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Constructor for a ReturnCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param userId the ID of the user whose Resources are being returned."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param resourceIds an array of resource IDs representing the Resources to be returned"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param reservationIds an array of reservation IDs representing the Reservations to be removed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public ReturnCommand(int userId, ArrayList\u003cInteger\u003e resourceIds, ArrayList\u003cInteger\u003e reservationIds) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.userId \u003d userId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.resourceIds \u003d resourceIds;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.reservationIds \u003d reservationIds;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Obtains the Resource objects that represents the Resources being returned, and removes the corresponding"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Reservation objects that represents the booking of the Resource."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param ui An instance of the user interface."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param storage An instance of the Storage class."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param resources The ResourceList, containing all the created Resources thus far."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws RimsException if either the resource ID or reservation ID specified is invalid."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void execute(Ui ui, Storage storage, ResourceList resources) throws RimsException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ArrayList\u003cReservation\u003e cancelledReservations \u003d new ArrayList\u003cReservation\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        for (int i \u003d 0; i \u003c resourceIds.size(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            Resource thisResource \u003d resources.getResourceById(resourceIds.get(i));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            Reservation cancelledReservation \u003d thisResource.getReservations().getReservationById(reservationIds.get(i));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            thisResource.getReservations().cancelReservationById(reservationIds.get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            cancelledReservations.add(cancelledReservation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ui.print(\"Done! I\u0027ve removed the following reservation:\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        for (int j \u003d 0; j \u003c cancelledReservations.size(); j++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            ui.print(cancelledReservations.get(j).toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "isbobby"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "isbobby": 50,
      "rabhijit": 9
    }
  },
  {
    "path": "src/main/java/rims/core/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "package rims.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.command.CloseCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.command.ListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.command.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.command.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.command.ReserveCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.command.ReturnCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.command.CalendarCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.core.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.core.ResourceList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.Resource;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.Reservation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.ReservationList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "//@@author rabhijit"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * This class takes in a String of input from the Ui, and depending on the content of"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * the input, parses it into a unique executable command that will carry out the tasks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * required for that input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    Ui ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    ResourceList resources;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Parser(Ui ui, ResourceList resources) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.resources \u003d resources;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Parses the input obtained by the Ui from the user into an executable command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param input the input obtained from the user by the Ui."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a Command that can be executed to carry out the necessary tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if the input is in a wrong format or does not make sense."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Command parseInput(String input) throws RimsException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        Command c;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        String[] words \u003d input.split(\" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (input.equals(\"bye\") \u0026\u0026 words.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            c \u003d new CloseCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else if (input.equals(\"list\") \u0026\u0026 words.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            c \u003d new ListCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else if (words[0].equals(\"cal\") \u0026\u0026 words.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            CalendarCommand.printCal();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            c \u003d new ListCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        //@@author aarushisingh1"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "        } else if (words[0].equals(\"list\") \u0026\u0026 words.length \u003e 1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            String paramType \u003d words[1].substring(1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            if (paramType.equals(\"date\") || paramType.equals(\"room\") || paramType.equals(\"item\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                String param \u003d ui.getInput(\"Enter the name of the resource you\u0027d like to view a detailed list of:\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                c \u003d new ListCommand(paramType, param);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                throw new RimsException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "                    \"Invalid list parameter! Please specify \u0027/list\u0027 or \u0027/item\u0027 to view a detailed list of a resource.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aarushisingh1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hin1"
        },
        "content": "        //@@author hin1"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hin1"
        },
        "content": "        } else if (words[0].equals(\"add\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hin1"
        },
        "content": "            String roomOrItem \u003d ui.getInput(\"Would you like to add an item or a room to the inventory?\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hin1"
        },
        "content": "            if (roomOrItem.equals(\"room\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hin1"
        },
        "content": "                String roomName \u003d ui.getInput(\"Enter the name of the room you wish to add:\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hin1"
        },
        "content": "                c \u003d new AddCommand(roomName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hin1"
        },
        "content": "            } else if (roomOrItem.equals(\"item\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hin1"
        },
        "content": "                String itemName \u003d ui.getInput(\"Enter the name of the item you wish to add:\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hin1"
        },
        "content": "                int qty \u003d Integer.parseInt(ui.getInput(\"How many of this item do you wish to add?\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hin1"
        },
        "content": "                c \u003d new AddCommand(itemName, qty);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hin1"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hin1"
        },
        "content": "                throw new RimsException(\"Please choose a room or item to add to your inventory.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hin1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hin1"
        },
        "content": "        } else if (words[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hin1"
        },
        "content": "            String roomOrItem \u003d ui.getInput(\"Would you like to delete an item or room from the inventory?\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hin1"
        },
        "content": "            if (roomOrItem.equals(\"room\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hin1"
        },
        "content": "                String roomName \u003d ui.getInput(\"Enter the name of the room you wish to delete:\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hin1"
        },
        "content": "                c \u003d new DeleteCommand(roomName, \"room\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hin1"
        },
        "content": "            } else if (roomOrItem.equals(\"item\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hin1"
        },
        "content": "                String itemName \u003d ui.getInput(\"Enter the name of the item you wish to delete:\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hin1"
        },
        "content": "                c \u003d new DeleteCommand(itemName, \"item\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hin1"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hin1"
        },
        "content": "                throw new RimsException(\"Please choose a room or item to delete from your inventory.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hin1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        //@@author rabhijit"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else if (words[0].equals(\"loan\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            String roomOrItem \u003d ui.getInput(\"Would you like to loan an item or room from the inventory?\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (roomOrItem.equals(\"room\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                String roomName \u003d ui.getInput(\"Enter the name of the room you wish to loan:\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                // printing out existing room bookings"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                if (!resources.isRoom(roomName)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    throw new RimsException(\"There is no such room!\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                Resource thisResource \u003d resources.getResourceByName(roomName);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                ReservationList thisResourceReservations \u003d thisResource.getReservations();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                ui.print(thisResource.toString() + \" (ID: \" + thisResource.getResourceId() + \")\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                if (!thisResourceReservations.isEmpty()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    for (int j \u003d 0; j \u003c thisResourceReservations.size(); j++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                        ui.print(\"\\t\" + thisResourceReservations.getReservationByIndex(j).toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    ui.print(\"No bookings for this resource yet!\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                String dateTill \u003d ui.getInput("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    \"Enter the date you wish to return this room, in the format: DD/MM/YYYY HHmm\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                int userId \u003d Integer.parseInt(ui.getInput(\"Enter your user ID:\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                c \u003d new ReserveCommand(roomName, dateTill, userId);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            } else if (roomOrItem.equals(\"item\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                String itemName \u003d ui.getInput(\"Enter the name of the item you wish to loan:\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                if (!resources.isItem(itemName)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    throw new RimsException(\"There is no such item!\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                ArrayList\u003cResource\u003e allOfItem \u003d resources.getAllOfResource(itemName);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                for (int i \u003d 0; i \u003c allOfItem.size(); i++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    Resource thisResource \u003d allOfItem.get(i);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    ReservationList thisResourceReservations \u003d thisResource.getReservations();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    ui.printDash();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    ui.print(thisResource.toString() + \" (ID: \" + thisResource.getResourceId() + \")\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    if (!thisResourceReservations.isEmpty()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                        for (int j \u003d 0; j \u003c thisResourceReservations.size(); j++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                            ui.print(\"\\t\" + thisResourceReservations.getReservationByIndex(j).toString());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                        ui.print(\"No bookings for this resource yet!\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                ui.printDash();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                int qty \u003d Integer.parseInt(ui.getInput("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    \"Enter the quantity of this item that you wish to borrow:\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                String dateTill \u003d ui.getInput("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    \"Enter the date you wish to return this item, in the format: DD/MM/YYYY HHmm\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                int userId \u003d Integer.parseInt(ui.getInput(\"Enter your user ID:\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                c \u003d new ReserveCommand(itemName, qty, dateTill, userId);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please choose a room or item to loan from your inventory.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else if (words[0].equals(\"reserve\")) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            String roomOrItem \u003d ui.getInput(\"Would you like to reserve an item or room from the inventory?\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (roomOrItem.equals(\"room\")) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                String roomName \u003d ui.getInput(\"Enter the name of the room you wish to reserve:\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                // printing out existing room bookings"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                if (!resources.isRoom(roomName)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    throw new RimsException(\"There is no such room!\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                Resource thisResource \u003d resources.getResourceByName(roomName);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                ReservationList thisResourceReservations \u003d thisResource.getReservations();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                ui.print(thisResource.toString() + \" (ID: \" + thisResource.getResourceId() + \")\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                if (!thisResourceReservations.isEmpty()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    for (int j \u003d 0; j \u003c thisResourceReservations.size(); j++) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                        ui.print(\"\\t\" + thisResourceReservations.getReservationByIndex(j).toString());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    ui.print(\"No bookings for this resource yet!\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                String dateFrom \u003d ui.getInput("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    \"Enter the date from which you wish to reserve this room, in the format: DD/MM/YYYY HHmm\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                String dateTill \u003d ui.getInput("
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    \"Enter the date you wish to return this room, in the format: DD/MM/YYYY HHmm\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                int userId \u003d Integer.parseInt(ui.getInput(\"Enter your user ID:\"));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                c \u003d new ReserveCommand(roomName, dateFrom, dateTill, userId);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            } else if (roomOrItem.equals(\"item\")) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                String itemName \u003d ui.getInput(\"Enter the name of the item you wish to reserve:\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                if (!resources.isItem(itemName)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    throw new RimsException(\"There is no such item!\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                ArrayList\u003cResource\u003e allOfItem \u003d resources.getAllOfResource(itemName);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                for (int i \u003d 0; i \u003c allOfItem.size(); i++) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    Resource thisResource \u003d allOfItem.get(i);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    ReservationList thisResourceReservations \u003d thisResource.getReservations();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    ui.printDash();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    ui.print(thisResource.toString() + \" (ID: \" + thisResource.getResourceId() + \")\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    if (!thisResourceReservations.isEmpty()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                        for (int j \u003d 0; j \u003c thisResourceReservations.size(); j++) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                            ui.print(\"\\t\" + thisResourceReservations.getReservationByIndex(j).toString());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                        ui.print(\"No bookings for this resource yet!\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                ui.printDash();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                int qty \u003d Integer.parseInt(ui.getInput("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    \"Enter the quantity of this item that you wish to reserve:\"));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                String dateFrom \u003d ui.getInput("
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    \"Enter the date from which you wish to reserve this room, in the format: DD/MM/YYYY HHmm\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                String dateTill \u003d ui.getInput("
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                    \"Enter the date you wish to return this item, in the format: DD/MM/YYYY HHmm\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                int userId \u003d Integer.parseInt(ui.getInput(\"Enter your user ID:\"));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                c \u003d new ReserveCommand(itemName, qty, dateFrom, dateTill, userId);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                throw new RimsException(\"Please choose a room or item to loan from your inventory.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else if (words[0].equals(\"return\")) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            int userId \u003d Integer.parseInt(ui.getInput(\"Enter your user ID:\"));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ReservationList userReservations \u003d resources.getUserBookings(userId);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            for (int i \u003d 0; i \u003c userReservations.size(); i++) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                Reservation thisReservation \u003d userReservations.getReservationByIndex(i);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                Resource borrowedResource \u003d resources.getResourceById(thisReservation.getResourceId());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                ui.print(borrowedResource.toString());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                ui.print(\"\\t\" + userReservations.getReservationByIndex(i).toString());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ArrayList\u003cInteger\u003e resourcesToReturn \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ArrayList\u003cInteger\u003e reservationsToCancel \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            String stringReservations \u003d ui.getInput("
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                \"Enter the reservation ID(s) (separated by a space for multiple IDs) \""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                + \"that you wish to return / cancel:\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            String[] splitStringReservations \u003d stringReservations.split(\" \");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            for (int j \u003d 0; j \u003c splitStringReservations.length; j++) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                int thisReservationId \u003d Integer.parseInt(splitStringReservations[j]);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                resourcesToReturn.add(userReservations.getReservationById(thisReservationId).getResourceId());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                reservationsToCancel.add(thisReservationId);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            c \u003d new ReturnCommand(userId, resourcesToReturn, reservationsToCancel);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            throw new RimsException(\"Please enter a recognizable command!\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return c;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hin1": 24,
      "aarushisingh1": 10,
      "isbobby": 2,
      "danielcyc": 1,
      "rabhijit": 191
    }
  },
  {
    "path": "src/main/java/rims/core/ResourceList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "package rims.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.core.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.Reservation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.ReservationList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.Resource;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.Item;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.Room;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "//@@author rabhijit"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * Stores an array of the Resources created thus far, as well as functions to"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * search, find for, create and delete Resources."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "public class ResourceList {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected ArrayList\u003cResource\u003e resources;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hin1"
        },
        "content": "    //@@author hin1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hin1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * Constructor for the ResourceList. Takes in an array of Resources from the Storage instance"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * and saves it."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hin1"
        },
        "content": "     * @param resources the array of Resources, as converted from text in the save-file by the Storage instance"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hin1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hin1"
        },
        "content": "    public ResourceList(Ui ui, ArrayList\u003cResource\u003e resources) throws RimsException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hin1"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hin1"
        },
        "content": "        this.resources \u003d resources;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hin1"
        },
        "content": "        int daysDue \u003d 3;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hin1"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hin1"
        },
        "content": "        ui.print(\"REMINDER - The following loans are due soon (within \" + daysDue + \" days, or overdue):\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hin1"
        },
        "content": "        ui.printEmptyLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hin1"
        },
        "content": "        boolean dueSoon \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hin1"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hin1"
        },
        "content": "            Resource thisResource \u003d getResourceByIndex(i);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hin1"
        },
        "content": "            ReservationList thisResourceDueReservations \u003d thisResource.getDueReservations(daysDue);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hin1"
        },
        "content": "            if (!thisResourceDueReservations.isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hin1"
        },
        "content": "                dueSoon \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hin1"
        },
        "content": "                ui.print(thisResource.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hin1"
        },
        "content": "                for (int j \u003d 0; j \u003c thisResourceDueReservations.size(); j++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hin1"
        },
        "content": "                    ui.print(\"\\t\" + thisResourceDueReservations.getReservationByIndex(j));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hin1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hin1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hin1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hin1"
        },
        "content": "        if (!dueSoon) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hin1"
        },
        "content": "            ui.print(\"No resources due soon!\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hin1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hin1"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hin1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hin1"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    //@@author rabhijit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Adds a new Resource to the ResourceList."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param thisResource the newly created Resource."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void add(Resource thisResource) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        resources.add(thisResource);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Removes a Resource from the ResourceList, as specified by the resource\u0027s name."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceName the name of the Resource"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if there is no such Resource of that name."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void deleteResourceByName(String resourceName) throws RimsException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        boolean deleted \u003d false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            Resource thisResource \u003d getResourceByIndex(i);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (thisResource.getName().equals(resourceName)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                resources.remove(i);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                deleted \u003d true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (!deleted) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            throw new RimsException(\"No such resource found!\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    //@@author isbobby"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Removes a Resource from the ResourceList, as specified by the ID of that resource."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param resourceId the ID of the Resource"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws RimsException if there is no such resource with that ID."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void deleteResourceById(int resourceId) throws RimsException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        boolean deleted \u003d false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            Resource thisResource \u003d getResourceByIndex(i);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            if (thisResource.getResourceId() \u003d\u003d resourceId) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                resources.remove(i);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                deleted \u003d true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        if (!deleted) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            throw new RimsException(\"No such resource ID found!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    //@@author rabhijit"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns the ResourceList itself."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the array of Resources."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public ArrayList\u003cResource\u003e getResources() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return resources;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns the number of items in the ResourceList."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the number of items in the ResourceList."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return resources.size();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Generates a resource ID for a newly created Resource."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a new resource ID."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public int generateResourceId() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                Resource thisResource \u003d getResourceById(i);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            } catch (RimsException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return size();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns a Resource in the Resource array by its index number in the array."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param indexNo the index number of the desired Resource."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the Resource itself."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Resource getResourceByIndex(int indexNo) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return resources.get(indexNo);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns the first Resource in the Resource array that matches a certain name."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceName the name of the desired Resource."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the Resource itself."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if no such resource has that name."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Resource getResourceByName(String resourceName) throws RimsException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            Resource thisResource \u003d getResourceByIndex(i);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (thisResource.getName().equals(resourceName)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                return thisResource;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        throw new RimsException(\"No such resource!\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns a Resource in the Resource array by its ID number."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceId the resource ID of the desired Resource."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the Resource itself."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if no such resource has that ID."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Resource getResourceById(int resourceId) throws RimsException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            Resource thisResource \u003d getResourceByIndex(i);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (thisResource.getResourceId() \u003d\u003d resourceId) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                return thisResource;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        throw new RimsException(\"No such resource ID!\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Checks if a Resource is an Item."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceName the name of the Resource to be checked."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a boolean: true if it is an item, false if it is a room."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if no such resource has that name."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public boolean isItem(String resourceName) throws RimsException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        Resource thisResource \u003d getResourceByName(resourceName);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return (thisResource instanceof Item);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Checks if a Resource is an Room."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceName the name of the Resource to be checked."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a boolean: true if it is a room, false if it is an item."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if no such resource has that name."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public boolean isRoom(String resourceName) throws RimsException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        Resource thisResource \u003d getResourceByName(resourceName);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return (thisResource instanceof Room);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns an array of all the resources of a certain name."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceName the name of the Resources to be obtained."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return an array of all the Resources with that name."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public ArrayList\u003cResource\u003e getAllOfResource(String resourceName) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        ArrayList\u003cResource\u003e allOfResource \u003d new ArrayList\u003cResource\u003e();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            Resource thisResource \u003d getResourceByIndex(i);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (thisResource.getName().equals(resourceName)) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                allOfResource.add(thisResource);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return allOfResource;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    //@@author isbobby"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Returns the number of resources of a certain name."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param resourceName the name of the Resources to be counted."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the number of Resources with that name."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public int getNumberOfResource(String resourceName) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        int number \u003d 0;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            Resource thisResource \u003d getResourceByIndex(i);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            if (thisResource.getName().equals(resourceName)) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                number++;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return number;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Returns the number of resources of a certain name that are currently available to be booked."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param resourceName the name of the Resource in question."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the number of available Resources with that name."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public int getAvailableNumberOfResource(String resourceName) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ArrayList\u003cResource\u003e allOfResource \u003d getAllOfResource(resourceName);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        int number \u003d 0;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        for (int i \u003d 0; i \u003c allOfResource.size(); i++) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            if (allOfResource.get(i).isCurrentlyAvailable()) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                number++;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return number;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    // overloaded"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Returns the number of resources of a certain name that are available between two given dates."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param resourceName the name of the Resource in question."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param dateFrom the date from which the Resource should be available."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param dateTill the date till which the Resource should be availble."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the number of available Resources with that name."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public int getAvailableNumberOfResource(String resourceName, Date dateFrom, Date dateTill) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ArrayList\u003cResource\u003e allOfResource \u003d getAllOfResource(resourceName);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        int number \u003d 0;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        for (int i \u003d 0; i \u003c allOfResource.size(); i++) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            if (allOfResource.get(i).isCurrentlyAvailable()) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                number++;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return number;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Returns the number of resources of a certain name that are currently booked."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param resourceName the name of the Resource in question."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the number of booked Resources with that name."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public int getBookedNumberOfResource(String resourceName) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ArrayList\u003cResource\u003e allOfResource \u003d getAllOfResource(resourceName);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        int number \u003d 0;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        for (int i \u003d 0; i \u003c allOfResource.size(); i++) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            if (!allOfResource.get(i).isCurrentlyAvailable()) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                number++;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return number;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Returns the list of reservations made by a user, given the user\u0027s ID."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param userId the ID of the user whose reservations are to be obtained."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the list of reservations made by the aforementioned user."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public ReservationList getUserBookings(int userId) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ReservationList userBookings \u003d new ReservationList();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            ReservationList thisResourceUserReservations \u003d getResourceByIndex(i).getUserReservations(userId);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            for (int j \u003d 0; j \u003c thisResourceUserReservations.size(); j++) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                userBookings.add(thisResourceUserReservations.getReservationByIndex(j));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return userBookings;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Generates a unique reservation ID for each new reservation made, regardless of which resource"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * that reservation is made for."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return a unique reservation ID."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public int generateReservationId() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ArrayList\u003cInteger\u003e coveredIds \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            Resource thisResource \u003d resources.get(i);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            ReservationList thisResourceReservations \u003d thisResource.getReservations();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            for (int j \u003d 0; j \u003c thisResourceReservations.size(); j++) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                if (!coveredIds.contains(thisResourceReservations.getReservationByIndex(j).getReservationId())) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                    coveredIds.add(thisResourceReservations.getReservationByIndex(j).getReservationId());"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        for (int k \u003d 0; k \u003c coveredIds.size(); k++) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            if (!coveredIds.contains(k)) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                return k;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return coveredIds.size();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Converts a date and time inputted by the user in String format, into a Date object."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param stringDate the date and time inputted by the user in String format."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return a Date object representing the date and time inputted by the user."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public Date stringToDate(String stringDate) throws ParseException {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Date dateValue \u003d formatter.parse(stringDate);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return dateValue;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Converts a Date object to a compact String, to be saved into a data file."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param thisDate the Date object to be converted into a String."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return a String representing the Date object."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public String dateToString(Date thisDate) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        DateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        String stringDate \u003d format.format(thisDate);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return stringDate;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Converts a Date object into a human-readable String, for the user\u0027s reading."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param date the Date object to be converted into a String."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return a human-readable String representing the Date object."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public String getDateToPrint(Date date) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        DateFormat dayFormat \u003d new SimpleDateFormat(\"d\");"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        int day \u003d Integer.parseInt(dayFormat.format(date)) % 10;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        String suffix \u003d day \u003d\u003d 1 ? \"st\" : (day \u003d\u003d 2 ? \"nd\" : (day \u003d\u003d 3 ? \"rd\" : \"th\"));"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        String stringDate \u003d (new SimpleDateFormat(\"EEEEE, \")).format(date) + (dayFormat.format(date))"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            + suffix + \" of \" + (new SimpleDateFormat(\"MMMMM yyyy, hh:mm aaa\")).format(date);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return stringDate;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "isbobby"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hin1": 31,
      "isbobby": 171,
      "rabhijit": 160
    }
  },
  {
    "path": "src/main/java/rims/core/Rims.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "package rims.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "//@@author rabhijit"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * The main class that instantiates all the sub-classes that carry out"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * the relevant sub-tasks of RIMS."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "public class Rims {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    private ResourceList resources;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Constructor for RIMS that instantiates the necessary sub-classes for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * its operation."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceFilePath the file path of the document where resource data is stored."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param reserveFilePath the file path of the document where reservation data is stored."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws FileNotFoundException if any file path is invalid"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws ParseException if data is stored in an invalid format and is thus unable to be parsed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Rims(String resourceFilePath, String reserveFilePath)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        throws FileNotFoundException, ParseException, RimsException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        storage \u003d new Storage(resourceFilePath, reserveFilePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        resources \u003d new ResourceList(ui, storage.getResources());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        parser \u003d new Parser(ui, resources);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * This method repeatedly runs the parser, which obtains and parses the input, and"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * depending to the parsed input, creates an executable command, which then carries out"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * the necessary tasks. Will halt when a command issues an exit code of true."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws ParseException if input is un-parsable"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws IOException if there is an error in reading input or printing output"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void run() throws ParseException, IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        Boolean toExit \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        while (!toExit) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                Command c \u003d parser.parseInput(ui.getInput());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                c.execute(ui, storage, resources);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                toExit \u003d c.getExitCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            } catch (RimsException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                e.displayError();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * The main method that calls the RIMS constructor and sets the ball rolling."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws FileNotFoundException if file path does not exist"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws ParseException if any input is un-parsable"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws IOException if there is an error in reading input or printing output"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if the input has no meaning or does not follow our format"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public static void main(String[] args) throws FileNotFoundException, ParseException, IOException, RimsException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        new Rims(\"data/resources.txt\", \"data/reserves.txt\").run();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "isbobby": 4,
      "rabhijit": 63
    }
  },
  {
    "path": "src/main/java/rims/core/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "package rims.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.resource.Room;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.Reservation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.ReservationList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.Resource;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "//@@author rabhijit"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * Converts data files containing a text version of the stored resources and reservations into an"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * array of Resource instances, containing their respective Reservations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * \u003cp\u003eFormat of data files:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * Resource.txt: [ resource id ] [ type ] [ name ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * Reserve.txt: [ reservation id ] [ resource id ] [ user id ] [ date from ] [ date until ]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected ArrayList\u003cResource\u003e resources \u003d new ArrayList\u003cResource\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected File resourceFile;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected File reservationFile;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Constructor for the Storage class. Accesses the resource file path"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * and reserve file path and runs the method readResourceFile() to convert the"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * text representation of Resources and Reservations into an actual array of Resources."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceFile the file path where the text version of Resources are stored."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param reserveFile the file path where the text version of Reservations are stored."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Storage(String resourceFile, String reserveFile) throws FileNotFoundException, ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.resourceFile \u003d new File(resourceFile);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.reservationFile \u003d new File(reserveFile);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        readResourceFile();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Obtains the contents of a ResourceList line by line from a text file in a"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * specified file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * \u003cp\u003eData retrieval:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * 1. Open the resource file"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * 2. Loop through each single entry to fetch [ resource id ] [ type ] [ name"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * ]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * 3. For each entry, open reservation file and fetch any reservations under"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * this resource_id"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * 4. Create a new resource object using the above data"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * 5. Add this object to ResourceList object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws FileNotFoundException when specified file path does not lead to a valid file type."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws ParseException        when unable to parse an integer for ID or checking if a resource is booked."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void readResourceFile() throws FileNotFoundException, ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        Scanner fileScanner \u003d new Scanner(resourceFile);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        while (fileScanner.hasNextLine()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            String[] input \u003d fileScanner.nextLine().split(\",\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ReservationList reservations \u003d readReserveFile(input[0]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (input[1].equals(\"I\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                Item newItem \u003d new Item(Integer.parseInt(input[0]), input[2], reservations);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                resources.add(newItem);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            } else if (input[1].equals(\"R\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                Room newRoom \u003d new Room(Integer.parseInt(input[0]), input[2], reservations);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                resources.add(newRoom);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    //@@author isbobby"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Obtains the contents of a ResourceList line by line from a text file in a"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * specified file path."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws FileNotFoundException when specified file path does not lead to a valid file type."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws ParseException        when unable to parse an integer for ID or checking if a resource is booked."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public ReservationList readReserveFile(String resourceId) throws FileNotFoundException, ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Scanner fileScanner \u003d new Scanner(reservationFile);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ReservationList resourceReservations \u003d new ReservationList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        while (fileScanner.hasNextLine()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            String[] line \u003d fileScanner.nextLine().split(\",\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            if (line[1].equals(resourceId)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                Reservation newReservation \u003d new Reservation(Integer.parseInt(line[0]),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                    Integer.parseInt(line[1]), Integer.parseInt(line[2]), line[3], line[4]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                resourceReservations.add(newReservation);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return resourceReservations;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    //@@author rabhijit"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Put contents of a ResourceList into a text file for future reference."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resources ResourceList to put contents into text file."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws IOException when file given is directory, or file does not exist and"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     *                     cannot be created."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void saveToFile(ArrayList\u003cResource\u003e resources) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        BufferedWriter resourceFileWriter \u003d new BufferedWriter(new FileWriter(resourceFile, false));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        BufferedWriter reservationFileWriter \u003d new BufferedWriter(new FileWriter(reservationFile, false));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        String resourceLine;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        String reservationLine;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        for (int i \u003d 0; i \u003c resources.size(); i++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            Resource thisResource \u003d resources.get(i);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            resourceFileWriter.write(thisResource.toDataFormat());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            resourceFileWriter.newLine();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            ReservationList thisReservationList \u003d thisResource.getReservations();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            for (int j \u003d 0; j \u003c thisReservationList.size(); j++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                reservationLine \u003d thisReservationList.getReservationByIndex(j).toDataFormat();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                reservationFileWriter.write(reservationLine);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                reservationFileWriter.newLine();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        resourceFileWriter.close();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        reservationFileWriter.close();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns array of Resources that was created from text format."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the aforementioned array."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public ArrayList\u003cResource\u003e getResources() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return resources;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "isbobby": 34,
      "rabhijit": 100
    }
  },
  {
    "path": "src/main/java/rims/core/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "package rims.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.Reservation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.ReservationList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import rims.resource.Resource;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "//@@author rabhijit"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * Handles the taking in of input from the user and passes it to the Parser to translate it into usable commands."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * Also handles printing of messages for the user\u0027s reading."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected Scanner inputScanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected String input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected int intInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected String line \u003d \"______________________________________________\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        + \"______________________________________________________________________________________________\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected String dash \u003d \"- - - - - - - - - - - - - - - - - - - - - - - - - \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        + \"- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected String hash \u003d \"***************************************************************\" "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        + \"*****************************************************************************\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected String tab \u003d \"\\t\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected ArrayList\u003cString\u003e welcomeMsg \u003d new ArrayList\u003cString\u003e(Arrays.asList(\"Welcome to RIMS, your Resource\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        + \"\u0026 Inventory Management System.\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        \"How can I help you?\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected ArrayList\u003cString\u003e commands \u003d new ArrayList\u003cString\u003e(Arrays.asList(\"add - add a new resource to inventory\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        \"delete - delete an existing resource from inventory\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        \"loan - loan out an item from now till your desired future date\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        \"reserve - reserve an item between two future dates\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        \"return - return a loan or reservation\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        \"list - see all resources and current reservations\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        \"\\t\" + \"list /item - see all loans and future reservations of a particular item\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        \"\\t\" + \"list /room - see all loans and future reservations of a particular room\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Constructor of the Ui. Initializes the scanner to take in user input,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * and prints the RIMS welcome message."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        inputScanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        welcome();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Obtains a new String input from the user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the new input typed by the user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        input \u003d inputScanner.nextLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    //@@author isbobby"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Prints a question for the user, before obtaining a new String input in response from the user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the new input typed by the user."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public String getInput(String question) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        formattedPrint(question);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        input \u003d inputScanner.nextLine();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Obtains a new integer input from the user, without requiring conversion from String to integer format."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the new integer input typed by the user."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public int getIntegerInput() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        intInput \u003d inputScanner.nextInt();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return intInput;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Prints a question for the user, before obtaining a new integer input in response from the user."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the new integer input typed by the user."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public int getIntegerInput(String question) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        formattedPrint(question);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        intInput \u003d inputScanner.nextInt();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return intInput;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    //@@author rabhijit"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Prints a line of underscores."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        System.out.println(tab + line);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    //@@author isbobby"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Prints a line of dashes."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void printDash() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        System.out.println(tab + dash);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    //@@author rabhijit"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Prints a desired line for the user to read."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void print(String input) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        System.out.println(tab + input);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Prints an array of lines."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void printArray(ArrayList\u003cString\u003e inputs) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        for (int i \u003d 0; i \u003c inputs.size(); i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            System.out.println(\"\\t\" + inputs.get(i));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Prints an empty line."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void printEmptyLine() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Prints an array of lines in the standard RIMS format, bordered by lines."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void formattedPrintArray(ArrayList\u003cString\u003e inputs) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        printArray(inputs);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Prints a line in the standard RIMS format, bordered by lines."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void formattedPrint(String input) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        print(input);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Prints the farewell message when RIMS is closed."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void farewell() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        formattedPrint(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Prints a welcome message when RIMS is started up."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void welcome() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        printLogo();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        formattedPrintArray(welcomeMsg);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        formattedPrintArray(commands);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    //@@author danielcyc"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "     * Prints the RIMS logo, as part of the RIMS welcome message."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    public void printLogo() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        String logo \u003d \"\\n\" "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"          _____                    _____\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"_____                    _____          \\n\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"         /\\\\    \\\\                  /\\\\    \\\\\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"                  /\\\\    \\\\                  /\\\\    \\\\         \\n\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"        /::\\\\    \\\\                /::\\\\    \\\\\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"                /::\\\\____\\\\                /::\\\\    \\\\        \\n\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"       /::::\\\\    \\\\               \\\\:::\\\\    \""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"\\\\              /::::|   |               /::::\\\\    \\\\       \\n\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"      /::::::\\\\    \\\\               \\\\:::\\\\    \\\\        \""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"    /:::::|   |              /::::::\\\\    \\\\      \\n\""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"     /:::/\\\\:::\\\\    \\\\               \\\\:::\\\\    \""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"\\\\          /::::::|   |             /:::/\\\\:::\\\\    \\\\     \\n\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"    /:::/__\\\\:::\\\\    \\\\               \\\\:::\\\\    \""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"\\\\        /:::/|::|   |            /:::/__\\\\:::\\\\    \\\\    \\n\""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"   /::::\\\\   \\\\:::\\\\    \\\\              /::::\\\\    \""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"\\\\      /:::/ |::|   |            \\\\:::\\\\   \\\\:::\\\\    \\\\   \\n\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"  /::::::\\\\   \\\\:::\\\\    \\\\    ____    /::::::\\\\    \""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"\\\\    /:::/  |::|___|______    ___\\\\:::\\\\   \\\\:::\\\\    \\\\  \\n\""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \" /:::/\\\\:::\\\\   \\\\:::\\\\____\\\\  /\\\\   \\\\  /:::/\\\\:::\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"\\\\    \\\\  /:::/   |::::::::\\\\    \\\\  /\\\\   \\\\:::\\\\   \\\\:::\\\\    \\\\ \\n\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"/:::/  \\\\:::\\\\   \\\\:::|    |/::\\\\   \\\\/:::/  \""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"\\\\:::\\\\____\\\\/:::/    |:::::::::\\\\____\\\\/::\\\\   \\\\:::\\\\   \\\\:::\\\\____\\\\\\n\""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"\\\\::/   |::::\\\\  /:::|____|\\\\:::\\\\  /:::/    \""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"\\\\::/    /\\\\::/    / ~~~~~/:::/    /\\\\:::\\\\   \\\\:::\\\\   \\\\::/    /\\n\""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \" \\\\/____|:::::\\\\/:::/    /  \\\\:::\\\\/:::/    \""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"/ \\\\/____/  \\\\/____/      /:::/    /  \\\\:::\\\\   \\\\:::\\\\\""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"   \\\\/____/ \\n\""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"       |:::::::::/    /    \\\\::::::/    \""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"/                       /:::/    /    \\\\:::\\\\   \\\\:::\\\\    \\\\     \\n\""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"       |::|\\\\::::/    /      \\\\::::/____/\""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"                       /:::/    /      \\\\:::\\\\   \\\\:::\\\\____\\\\    \\n\""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"       |::| \\\\::/____/        \\\\:::\\\\    \\\\\""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"                      /:::/    /        \\\\:::\\\\  /:::/    /    \\n\""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"       |::|  ~|               \\\\:::\\\\    \\\\\""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"                    /:::/    /          \\\\:::\\\\/:::/    /     \\n\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"       |::|   |                \\\\:::\\\\    \\\\\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"                  /:::/    /            \\\\::::::/    /      \\n\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"       \\\\::|   |                 \\\\:::\\\\____\\\\\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"                /:::/    /              \\\\::::/    /       \\n\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"        \\\\:|   |                  \\\\::/    /   \""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"             \\\\::/    /                \\\\::/    /        \\n\""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"         \\\\|___|                   \\\\/____/\""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"                  \\\\/____/                  \\\\/____/         \\n\""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                tab + \"                                                         \""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "                + \"                                           \\n\";"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "danielcyc"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "danielcyc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "isbobby": 44,
      "danielcyc": 77,
      "rabhijit": 116
    }
  },
  {
    "path": "src/main/java/rims/exception/RimsException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "package rims.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "//@@author rabhijit"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * A custom exception for RIMS, when inputs don\u0027t fit the desired format or"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * have no meaning."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "public class RimsException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected String tab \u003d \"\\t\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected String hash \u003d \"******************************************************\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        + \"**************************************************************************************\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected String error;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Constructor for a RimsException. Every RimsException contains an error message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param error the error message of this RimsException."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public RimsException(String error) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.error \u003d error;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Prints the error message in the standard RIMS format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void displayError() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        System.out.println(tab + hash);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        System.out.println(tab + \"ERROR: \" + error);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        System.out.println(tab + hash);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rabhijit": 30
    }
  },
  {
    "path": "src/main/java/rims/resource/Item.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "package rims.resource;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "//@@author rabhijit"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * This class represents an instance of an Item. Contains the name of the Item, its resource ID, type,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * and a list of Reservation objects representing the reservations made for the Item."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "public class Item extends Resource {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Constructor for a newly created Item, with no Reservations made yet."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceId the resourceId generated for the new Item."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param name the name of the new Item."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Item(int resourceId, String name) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        super(resourceId, name);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Constructor for an existing Item that has been loaded from the data file,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * with existing Reservations in a ReservationList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceId the resourceId of the Item."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param name the name of the Item."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param reservations the list of Reservations made for the existing Item."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Item(int resourceId, String name, ReservationList reservations) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        super(resourceId, name, reservations);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rabhijit": 29
    }
  },
  {
    "path": "src/main/java/rims/resource/Reservation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "isbobby"
        },
        "content": "package rims.resource;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//@@author isbobby"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "isbobby"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "isbobby"
        },
        "content": " * This class represents an instance of a Reservation. Contains the reservation ID, the resource ID of the Resource"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "isbobby"
        },
        "content": " * that it represents a booking of, and the dates between which this Resource has been booked."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "isbobby"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "isbobby"
        },
        "content": "public class Reservation {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private int reservationId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private int userId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private int resourceId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private Date dateFrom;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    private Date dateTill;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Constructor for a newly created Reservation."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param reservationId the generated reservation ID of this new Reservation"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param resourceId the ID of the resource for which this Reservation has been made."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param userId the ID of the user who made this Reservation."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param dateFrom the Date from which this Reservation has been made."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param dateTill the Date till which this Reservation has been made."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws ParseException if the dates given are in an invalid format."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public Reservation(int reservationId, int resourceId, int userId,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Date dateFrom, Date dateTill) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.reservationId \u003d reservationId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.resourceId \u003d resourceId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.userId \u003d userId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.dateFrom \u003d dateFrom;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.dateTill \u003d dateTill;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Constructor for an existing Reservation loaded from storage."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param reservationId the reservation ID of this Reservation"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param resourceId the ID of the resource for which this Reservation has been made."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param userId the ID of the user who made this Reservation."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param dateFrom the string representation of the date from which this Reservation has been made."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param dateTill the string representation of the date till which this Reservation has been made."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws ParseException if the dates given are in an invalid format."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public Reservation(int reservationId, int resourceId, int userId,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        String dateFrom, String dateTill) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.reservationId \u003d reservationId;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.resourceId \u003d resourceId;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.userId \u003d userId;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.dateFrom \u003d stringToDate(dateFrom);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.dateTill \u003d stringToDate(dateTill);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Returns the reservation ID of this Reservation."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the reservation ID of this Reservation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public int getReservationId() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return reservationId;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Returns the resource ID for which this Reservation has been made."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the resource ID for which this Reservation has been made."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public int getResourceId() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return resourceId;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Returns the ID of the user who made this Reservation."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the ID of the user who made this Reservation."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public int getUserId() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return userId;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Returns the starting date of this Reservation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the Date object representing the starting date of this Reservation."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public Date getStartDate() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return dateFrom;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Returns the ending date of this Reservation."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the Date object representing the ending date of this Reservation."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public Date getEndDate() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return dateTill;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    //@@author rabhijit"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Checks if this Reservation has expired (the current date is past the ending date of this Reservation)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a boolean: true if this Reservation has not expired yet, false otherwise."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public boolean isStillValid() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        Date currentDate \u003d new Date(System.currentTimeMillis());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (currentDate.after(dateFrom) \u0026\u0026 currentDate.after(dateTill)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Converts the stored Reservation to a readable String for output to the CLI."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a String version of the attributes of the Reservation."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        String output \u003d \"[\" + reservationId + \"]\" + \" borrowed by user: \" + userId + \" from \" "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            + getDateToPrint(dateFrom) + \" till \" + getDateToPrint(dateTill);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (isOverdue()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            return output + \" [OVERDUE]\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Converts the stored Reservation into a compact String to be stored in a data file."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a compact String version of the attributes of the Reservation."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public String toDataFormat() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return reservationId + \",\" + resourceId + \",\" + userId + \",\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            + dateToString(dateFrom) + \",\" + dateToString(dateTill);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Converts a date and time inputted by the user in String format, into a Date object."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param stringDate the date and time inputted by the user in String format."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a Date object representing the date and time inputted by the user."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Date stringToDate(String stringDate) throws ParseException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        Date dateValue \u003d formatter.parse(stringDate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return dateValue;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Converts a Date object to a compact String."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param thisDate the Date object to be converted into a String."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a String representing the Date object."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public String dateToString(Date thisDate) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        DateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        String stringDate \u003d format.format(thisDate);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return stringDate;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Converts a Date object into a human-readable String, for the user\u0027s reading."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param date the Date object to be converted into a String."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a human-readable String representing the Date object."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public String getDateToPrint(Date date) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        DateFormat dayFormat \u003d new SimpleDateFormat(\"d\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        int day \u003d Integer.parseInt(dayFormat.format(date)) % 10;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        String suffix \u003d day \u003d\u003d 1 ? \"st\" : (day \u003d\u003d 2 ? \"nd\" : (day \u003d\u003d 3 ? \"rd\" : \"th\"));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        String stringDate \u003d (new SimpleDateFormat(\"EEEEE, \")).format(date) + (dayFormat.format(date)) + suffix"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            + \" \" + (new SimpleDateFormat(\"MMMMM yyyy, hh:mm aaa\")).format(date);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return stringDate;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns the number of days within which this Reservation expires."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the number of days within which this Reservation expires."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public int getDaysDueIn() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        Date currentDate \u003d new Date(System.currentTimeMillis());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        int daysLeftToDue \u003d (int) (TimeUnit.DAYS.convert((getEndDate().getTime()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            - currentDate.getTime()), TimeUnit.MILLISECONDS));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return daysLeftToDue;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Checks if this Reservation is expiring within a given number of days."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param daysDue the number of days within which this Reservation is checked for expiry"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a boolean: true if it is expiring within the given number of days, false otherwise"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public boolean isDueInDays(int daysDue) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return getDaysDueIn() \u003c\u003d daysDue;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Checks if this Reservation has already expired."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a boolean: true if it has already expired, false otherwise."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public boolean isOverdue() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        Date currentDate \u003d new Date(System.currentTimeMillis());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        int daysLeftToDue \u003d (int) (TimeUnit.DAYS.convert((getEndDate().getTime()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            - currentDate.getTime()), TimeUnit.MILLISECONDS));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if ((daysLeftToDue \u003c 0) || (daysLeftToDue \u003d\u003d 0 \u0026\u0026 (getEndDate().getTime() - currentDate.getTime() \u003c 0))) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "isbobby": 95,
      "rabhijit": 111
    }
  },
  {
    "path": "src/main/java/rims/resource/ReservationList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "isbobby"
        },
        "content": "package rims.resource;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "isbobby"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "isbobby"
        },
        "content": "//@@author isbobby"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "isbobby"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "isbobby"
        },
        "content": " * This class contains all the Reservations made for a particular Resource."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "isbobby"
        },
        "content": " * This ReservationList is stored as an attribute in its corresponding Resource, for which it stores its reservations."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "isbobby"
        },
        "content": " * Contains functions to create, delete, get Reservations and to check the availability of its Resource."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "isbobby"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "isbobby"
        },
        "content": "public class ReservationList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    protected ArrayList\u003cReservation\u003e reservations;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Constructor for a ReservationList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public ReservationList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        this.reservations \u003d new ArrayList\u003cReservation\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Returns the ReservationList itself."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the array of Reservations."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public ArrayList\u003cReservation\u003e getReservationList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return this.reservations;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Returns a Reservation in the Reservation array by its index number in the array."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param indexNo the index number of the desired Reservation."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the Reservation itself."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public Reservation getReservationByIndex(int indexNo) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return reservations.get(indexNo);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Returns a Reservation in the Reservation array by its reservation ID."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param reservationId the reservation ID of the desired Reservation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return the Reservation itself."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws RimsException if no reservation has such an ID."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public Reservation getReservationById(int reservationId) throws RimsException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            Reservation thisReservation \u003d getReservationByIndex(i);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            if (thisReservation.getReservationId() \u003d\u003d reservationId) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                return thisReservation;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        throw new RimsException(\"No such reservation ID!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Adds a new Reservation to the ReservationList."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param newReservation the newly created Reservation."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void add(Reservation newReservation) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        reservations.add(newReservation);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Creates a new Reservation object and adds it to the ReservationList, given"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * the parameters of the new Reservation."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param reservationId the newly generated reservation ID of the Reservation to be created."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param resourceId the ID of the Resource for which this Reservation is being created."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param userId the ID of the user creating this Reservation."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param startDate the date from which this Reservation takes effect."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param endDate the date till which this Reservation will be in effect."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws ParseException if the dates given are in an invalid format."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws RimsException if the date of return is before the date of borrowing."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void createReservation(int reservationId, int resourceId, int userId, "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Date startDate, Date endDate) throws ParseException, RimsException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Date currentDate \u003d new Date(System.currentTimeMillis());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        if (startDate.after(endDate)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            throw new RimsException(\"Your date of return must be after your date of borrowing!\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        if (currentDate.after(endDate)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            throw new RimsException(\"Your date of return must be a date in the future!\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        Reservation newReservation \u003d new Reservation(reservationId, resourceId, userId, startDate, endDate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        add(newReservation);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Deletes a Reservation object, making that reservation cancelled and no longer valid."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param reservationId the reservation ID of the reservation to be cancelled."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @throws RimsException if no such reservation has that ID."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public void cancelReservationById(int reservationId) throws RimsException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        boolean deleted \u003d false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            if (reservations.get(i).getReservationId() \u003d\u003d reservationId) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                reservations.remove(i);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                deleted \u003d true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        if (!deleted) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            throw new RimsException(\"No such reservation ID!\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    //@@author rabhijit"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns the number of Reservations made for this particular Resource."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the size of the ReservationList."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return reservations.size();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Checks if the ReservationList is empty."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a boolean: true if no Reservations have been made, false otherwise."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return reservations.isEmpty();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Checks if this Resource is currently booked under a Reservation, or is overdue from a previous Reservation."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a boolean indicating whether this Resource is currently not booked."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public boolean isCurrentlyAvailable() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        Date currentDate \u003d new Date(System.currentTimeMillis());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            Reservation thisReservation \u003d getReservationByIndex(i);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if ((currentDate.after(thisReservation.getStartDate()) \u0026\u0026 currentDate.before(thisReservation.getEndDate())) "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                || thisReservation.isOverdue()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Checks if this Resource is booked between two given dates, or currently overdue from a previous Reservation."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param startDate the date from which this Resource is being queried."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param endDate the date till which this Resource is being queried."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a boolean indicating whether this Resource has been booked at any point between those two dates."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public boolean isAvailableFrom(Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (reservations.isEmpty()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            Reservation thisReservation \u003d getReservationByIndex(i);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (((startDate.after(thisReservation.getStartDate()) \u0026\u0026 startDate.before(thisReservation.getEndDate()))"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                || (endDate.after(thisReservation.getStartDate()) \u0026\u0026 endDate.before(thisReservation.getEndDate()))) "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                || thisReservation.isOverdue()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Gets the current Reservation object under which this Resource is currently loaned out, or still overdue."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the Reservation object under which this Resource is currently booked."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if this Resource is not currently booked."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Reservation getCurrentBooking() throws RimsException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        Date currentDate \u003d new Date(System.currentTimeMillis());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            Reservation thisReservation \u003d getReservationByIndex(i);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if ((currentDate.after(thisReservation.getStartDate()) \u0026\u0026 currentDate.before(thisReservation.getEndDate())) "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                || thisReservation.isOverdue()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                return thisReservation;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        throw new RimsException(\"Item is not currently booked!\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    //@@author isbobby"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * Gets the list of Reservations that a certain user has made for this particular Resource."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @param userId the ID of the user whose Reservations for this Resource are being obtained."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     * @return a list containing the Reservations made by the user for this object."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "isbobby"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    public ReservationList getUserReservations(int userId) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        ReservationList userReservations \u003d new ReservationList();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            Reservation thisReservation \u003d getReservationByIndex(i);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            if (thisReservation.getUserId() \u003d\u003d userId) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "isbobby"
        },
        "content": "                userReservations.add(thisReservation);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "isbobby"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "isbobby"
        },
        "content": "        return userReservations;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "isbobby"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "isbobby"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    //@@author rabhijit"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns the list of currently active Reservations, including overdue Reservations, which are expiring"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * in a given number of days."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param daysDue the number of days within which Reservations which are expiring should be returned."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a list of all Reservations that have expired, or are expiring within the given number of days."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public ReservationList getDueReservations(int daysDue) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        ReservationList reservationsDueSoon \u003d new ReservationList();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        Date currentDate \u003d new Date(System.currentTimeMillis());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            Reservation thisReservation \u003d getReservationByIndex(i);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            if (thisReservation.isDueInDays(daysDue) \u0026\u0026 currentDate.after(thisReservation.getStartDate())) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "                reservationsDueSoon.add(thisReservation);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return reservationsDueSoon;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "isbobby": 121,
      "rabhijit": 100
    }
  },
  {
    "path": "src/main/java/rims/resource/Resource.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "package rims.resource;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "import rims.exception.RimsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "//@@author rabhijit"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * This class represents an instance of a Resource. Contains the name of the Resource, its resource ID, type,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * and a list of Reservation objects representing the reservations made for the Resource."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "public abstract class Resource {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected int resourceId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    protected ReservationList reservations;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Constructor for a newly created Resource, with no Reservations made yet."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceId the resourceId generated for the new Resource."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param name the name of the new Resource."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Resource(int resourceId, String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.resourceId \u003d resourceId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.reservations \u003d new ReservationList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Constructor for an existing Resource that has been loaded from the data file,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * with existing Reservations in a ReservationList."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceId the resourceId of the Resource."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param name the name of the Resource."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param reservations the list of Reservations made for the existing Resource."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Resource(int resourceId, String name, ReservationList reservations) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.resourceId \u003d resourceId;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        this.reservations \u003d reservations;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Converts the stored Resource to a readable String for output to the CLI."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a String version of the attributes of the Resource."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return \"[\" + getType() + \"] \" + getName();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Converts the stored Resource into a compact String to be stored in a data file."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a compact String version of the attributes of the Resource."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public String toDataFormat() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return resourceId + \",\" + getType() + \",\" + name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns the name of the Resource."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the name of the Resource."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns the resource ID of the Resource."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the resource ID of the Resource."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public int getResourceId() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return resourceId;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns the type (Item or Room) of the Resource."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the type (Item or Room) of the Resource."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        if (getClass().getSimpleName().equals(\"Item\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "            return \"I\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return \"R\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns the list of Reservations made for this Resource."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return the list of Reservations made for this Resource."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public ReservationList getReservations() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return reservations;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Checks if this Resource is currently available for booking."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a boolean indicating whether this Resource is currently not booked."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public boolean isCurrentlyAvailable() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return reservations.isCurrentlyAvailable();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Checks if this Resource is free to be booked between two dates."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param dateFrom the date from which this Resource is to be booked."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param dateTill the date till which this Resource is to be booked."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a boolean indicating whether this Resource is free to be booked between the two given dates."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public boolean isAvailableFrom(Date dateFrom, Date dateTill) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return reservations.isAvailableFrom(dateFrom, dateTill);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Creates a new Reservation object for this Resource between two given dates, indicating"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * that this Resource has been booked between those two dates."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param reservationId the newly generated reservation ID for the new Reservation object."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param userId the ID of the user who made the reservation."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param startDate the date from which this Resource has been booked."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param endDate the date till which this Resource has been booked."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws ParseException if the dates are in an invalid format."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @throws RimsException if the date of return is before the date of borrowing."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public void book(int reservationId, int userId, Date startDate, Date endDate) throws ParseException, RimsException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        reservations.createReservation(reservationId, resourceId, userId, startDate, endDate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Gets the list of Reservations that a certain user has made for this particular Resource."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param userId the ID of the user whose Reservations for this Resource are being obtained."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a list containing the Reservations made by the user for this object."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public ReservationList getUserReservations(int userId) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return reservations.getUserReservations(userId);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Returns the list of currently active Reservations, including overdue Reservations, which are expiring"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * in a given number of days."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param daysDue the number of days within which Reservations which are expiring should be returned."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @return a list of all Reservations that have expired, or are expiring within the given number of days."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public ReservationList getDueReservations(int daysDue) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        return reservations.getDueReservations(daysDue);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rabhijit": 150
    }
  },
  {
    "path": "src/main/java/rims/resource/Room.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "package rims.resource;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "//@@author rabhijit"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * This class represents an instance of a Room. Contains the name of the Room, its resource ID, type,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " * and a list of Reservation objects representing the reservations made for the Room."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rabhijit"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "public class Room extends Resource {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Constructor for a newly created Room, with no Reservations made yet."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceId the resourceId generated for the new Room."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param name the name of the new Room."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Room(int resourceId, String name) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        super(resourceId, name);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rabhijit"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * Constructor for an existing Room that has been loaded from the data file,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * with existing Reservations in a ReservationList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param resourceId the resourceId of the Room."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param name the name of the Room."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     * @param reservations the list of Reservations made for the existing Room."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    public Room(int resourceId, String name, ReservationList reservations) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "        super(resourceId, name, reservations);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rabhijit"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rabhijit": 29
    }
  }
]
