[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "group \u0027seedu.hustler\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    mainClassName \u003d \"seedu.hustler.Main\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  standardInput \u003d System.in"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  useJUnitPlatform()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    archiveBaseName \u003d \"hustler\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"mid-v1.1\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 1,
      "ngjiewu": 8,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/hustler/Hustler.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.data.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.data.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.game.achievement.AchievementList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.game.achievement.ConsecutiveLogin;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.game.avatar.Avatar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.command.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.data.AvatarStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.data.CommandLog;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.data.MemoryManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.Reminders;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.TaskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.parser.CommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.ui.timer.*;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import static seedu.hustler.game.achievement.AchievementList.achievementList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import static seedu.hustler.game.achievement.ConsecutiveLogin.updateAchievementLevel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * A personal assitant that takes in user input and gives and performs"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * an operation that can help the user"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * in his day to day needs. Has a tasklist with multiple features."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "public class Hustler extends Application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * TaskList instance that  stores all the tasks added by the"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * user and from storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static TaskList list;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Storage instance that stores and loads tasks to and from"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * disk."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private static Storage storage \u003d new Storage(\"data/hustler.txt\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * UI instance that is used to take input from console"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * and display errors and responses. Handles user interaction."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Parser instance that makes sense of user input and"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * performs some operation on list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private static CommandParser parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Avatar instance that keeps track of the User\u0027s progress."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static Avatar avatar;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * TimerManager instance that starts the timer."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static timerManager timermanager \u003d new timerManager();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * MemoryManager instance that starts the timer."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static MemoryManager memorymanager \u003d new MemoryManager();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * CommandLog instance that records user tasks."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static CommandLog commandlog \u003d new CommandLog();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Initializes the essential components needed to run Hustler."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Loads existing task list and avatar."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Displays reminders at the start of Hustler."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public static void initialize() throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        ui.show_opening_string();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nystera"
        },
        "content": "        Folder.checkDirectory();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        loadStorage();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        memorymanager.createBackup();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Reminders.runAll(list);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Reminders.displayReminders();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nystera"
        },
        "content": "        avatar \u003d AvatarStorage.load();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nystera"
        },
        "content": "        AvatarStorage.save(avatar);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Runs Hustler until the users enters \"bye\"."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Performs operations like list, find, delete and add on the task list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Saves the list to disk for next Hustler session inside data/hustler.txt."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param rawInput full user\u0027s input inside text area of GUI."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public static void run(String rawInput) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        if (rawInput.equals(\"bye\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            ui.show_bye_message();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nystera"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            Command command \u003d parser.parse(rawInput);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nystera"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            saveStorage();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } catch (CommandLineException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nystera"
        },
        "content": "            e.getErrorMsg();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } catch (IOException ignore) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static void loadStorage() throws IOException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        list \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        avatar \u003d AvatarStorage.load();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        //Check if it\u0027s the first time the user logs in."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        AchievementList.firstStart(AchievementStorage.logon());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        //Loads information such as number of tasks done, added, points, etc."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        AchievementStorage.loadStatus();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        //Loads achievements into achievement list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        AchievementStorage.loadAchievements();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        //Counts number of consecutive login and updates accordingly."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        ConsecutiveLogin.updateCount();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        ConsecutiveLogin.updatePoints();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        AchievementList.updateConsecutiveLogin(updateAchievementLevel());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static void reloadBackup() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        list \u003d new TaskList(storage.reloadBackup());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        avatar \u003d AvatarStorage.reloadBackup();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Saves the task list to storage area."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static void saveStorage() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            storage.save(list.return_list());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            AvatarStorage.save(avatar);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            AchievementStorage.saveAchievements(achievementList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            AchievementStorage.saveStatus();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            ui.show_save_error();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 39,
      "yzia2000": 45,
      "nystera": 30,
      "jingkang97": 20,
      "ngjiewu": 25
    }
  },
  {
    "path": "src/main/java/seedu/hustler/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "package seedu.hustler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngjiewu": 12
    }
  },
  {
    "path": "src/main/java/seedu/hustler/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "package seedu.hustler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " * A GUI for Hustler using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private Hustler hustler \u003d new Hustler();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setHustler(hustler);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngjiewu": 31
    }
  },
  {
    "path": "src/main/java/seedu/hustler/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "package seedu.hustler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.awt.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import java.io.OutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private TextArea console;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private PrintStream ps;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private Hustler hustler;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Initializes essential components to run Hustler."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @throws IOException if text area could not be found."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void initialize() throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        ps \u003d new PrintStream(new Console(console));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.setOut(ps);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.setErr(ps);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        Hustler.initialize();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void setHustler(Hustler h) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        hustler \u003d h;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Changes printing stream to text area in GUI."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public class Console extends OutputStream {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        private TextArea console;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        public Console(TextArea console) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            this.console \u003d console;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        public void appendText(String valueOf) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            Platform.runLater(() -\u003e console.appendText(valueOf));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        public void write(int b) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            appendText(String.valueOf((char)b));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Handles operations after each user\u0027s input."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void handleUserInput() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        Hustler.run(input);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 1,
      "ngjiewu": 77
    }
  },
  {
    "path": "src/main/java/seedu/hustler/command/AchievementCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "package seedu.hustler.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.game.achievement.AchievementList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * Command to see all achievements."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public class AchievementCommand extends Command{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Adds task of type and description inside taskInfo."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        AchievementList.showList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingkang97": 17
    }
  },
  {
    "path": "src/main/java/seedu/hustler/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": " * Template for duke commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Execute the command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public abstract void execute() throws IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 15
    }
  },
  {
    "path": "src/main/java/seedu/hustler/command/avatarCommand/CheckAvatarCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.command.avatarCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": " * Command that checks the avatar\u0027s current status."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class CheckAvatarCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public CheckAvatarCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(Hustler.avatar.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 21
    }
  },
  {
    "path": "src/main/java/seedu/hustler/command/avatarCommand/SetNameCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.command.avatarCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.data.AvatarStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.game.avatar.Avatar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class SetNameCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public SetNameCommand(String[] userInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.name \u003d userInput[1].split(\" \", 2)[1];"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void execute() throws IOException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "        Hustler.avatar.setName(name);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "        AvatarStorage.save(Hustler.avatar);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 22
    }
  },
  {
    "path": "src/main/java/seedu/hustler/command/taskCommand/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.command.taskCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Command that adds task to list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Contains task type and description."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private String[] taskInfo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Initializes taskInfo."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param taskInfo the info of the task to add."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public AddCommand(String[] taskInfo) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.taskInfo \u003d taskInfo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Adds task of type and description inside taskInfo."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (this.taskInfo.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            ui.empty_description_error();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nystera"
        },
        "content": "        String[] taskDescription \u003d this.taskInfo[1].split(\"/\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (taskDescription.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nystera"
        },
        "content": "            Hustler.list.add(\"todo\", taskDescription[0]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nystera"
        },
        "content": "        String taskType \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nystera"
        },
        "content": "        "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nystera"
        },
        "content": "        String timeCommand \u003d taskDescription[1].split(\" \")[0];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nystera"
        },
        "content": "        switch (timeCommand) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nystera"
        },
        "content": "        case \"by\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nystera"
        },
        "content": "            taskType \u003d \"deadline\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nystera"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nystera"
        },
        "content": "        case \"at\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nystera"
        },
        "content": "            taskType \u003d \"event\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nystera"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nystera"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nystera"
        },
        "content": "            ui.show_message(\"/\" + timeCommand + \" is an invalid addition to /add\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nystera"
        },
        "content": "        Hustler.list.add(taskType, this.taskInfo[1]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 31,
      "nystera": 29
    }
  },
  {
    "path": "src/main/java/seedu/hustler/command/taskCommand/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.command.taskCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.parser.ParserForCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Command that deletes task in list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * User input that contains index of task to delete."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private String[] userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "   "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    * Initializes userInput."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    * @param userInput array that contains task id to delete."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public DeleteCommand(String[] userInput) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Deletes task at index taskIndex inside."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (this.userInput.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            ui.empty_description_error();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        ParserForCommand doneParser \u003d new ParserForCommand(\"delete\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        int taskIndex \u003d doneParser.parseIndex(this.userInput[1]).intValue();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nystera"
        },
        "content": "        Hustler.list.removeTask(taskIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 34,
      "nystera": 7
    }
  },
  {
    "path": "src/main/java/seedu/hustler/command/taskCommand/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.command.taskCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.parser.ParserForCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Command to do task in list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * User input that contains index of task to do."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private String[] userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "   "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    * Initializes userInput."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    * @param userInput input that contains task id to do."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public DoneCommand(String[] userInput) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Does task at index taskIndex inside."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (this.userInput.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            ui.empty_description_error();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        ParserForCommand doneParser \u003d new ParserForCommand(\"done\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        int taskIndex \u003d doneParser.parseIndex(this.userInput[1]).intValue();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nystera"
        },
        "content": "        Hustler.list.doTask(taskIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 34,
      "nystera": 7
    }
  },
  {
    "path": "src/main/java/seedu/hustler/command/taskCommand/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.command.taskCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Command that lists tasks in TaskList instance."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * User input that contains keyword to search for in list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private String[] userInput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Initializes userInput."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param userInput the array of users inputs to initialize with."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public FindCommand(String[] userInput) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Lists commands which contain keyword."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (this.userInput.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            ui.empty_description_error();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "        Hustler.list.findTask(this.userInput[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 31,
      "nystera": 6
    }
  },
  {
    "path": "src/main/java/seedu/hustler/command/taskCommand/InvalidCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.command.taskCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Represents invalid command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class InvalidCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Print error for InvalidCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        ui.correct_command_error();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 14,
      "nystera": 4
    }
  },
  {
    "path": "src/main/java/seedu/hustler/command/taskCommand/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.command.taskCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Command that lists tasks in TaskList instance."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Lists commands in TaskList instance."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "        Hustler.list.displayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 16,
      "nystera": 5
    }
  },
  {
    "path": "src/main/java/seedu/hustler/command/taskCommand/RemindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.command.taskCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.Reminders;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": " * Command that executes reminders."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class RemindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Executes remind pipeline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "        Reminders.runAll(Hustler.list);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "        Reminders.displayReminders();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "    } "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 20
    }
  },
  {
    "path": "src/main/java/seedu/hustler/command/taskCommand/ScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.command.taskCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.data.Schedule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Command that lists tasks in TaskList instance."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class ScheduleCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * A schedule instance that shows schedules."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private Schedule schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * User input that contains the date."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private String[] userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Initializes userInput."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param userInput the array of users inputs that contains date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public ScheduleCommand(String[] userInput) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Lists commands which have the date specified in"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * userInput."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (this.userInput.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            ui.empty_description_error();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        Date date \u003d schedule.convertStringToDate(this.userInput[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (date !\u003d (null)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            schedule.printSchedule(date);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 42,
      "nystera": 5
    }
  },
  {
    "path": "src/main/java/seedu/hustler/command/taskCommand/ShowTimerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.command.taskCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.ui.timer.timerManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "public class ShowTimerCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        Hustler.timermanager.printTimeLeft();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 10,
      "nystera": 2
    }
  },
  {
    "path": "src/main/java/seedu/hustler/command/taskCommand/SnoozeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.command.taskCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.parser.ParserForCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Command that snoozes tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class SnoozeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * User input that contains index of task to snooze."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private String[] userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "   "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    * Initializes userInput."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    * @param rawInput array that contains task id to delete."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public SnoozeCommand(String rawInput) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.userInput \u003d rawInput.split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Deletes task at index inside userInput."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (this.userInput.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            ui.empty_description_error();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        ParserForCommand doneParser \u003d new ParserForCommand(\"snooze\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        int taskIndex \u003d doneParser.parseIndex(this.userInput[1]).intValue();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        Hustler.list.snoozeTask(taskIndex, userInput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 31,
      "nystera": 6,
      "ngjiewu": 4
    }
  },
  {
    "path": "src/main/java/seedu/hustler/command/taskCommand/StopTimerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.command.taskCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.ui.timer.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "public class StopTimerCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        timerManager.stopTimer();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 11,
      "nystera": 2
    }
  },
  {
    "path": "src/main/java/seedu/hustler/command/taskCommand/TimerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.command.taskCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.ui.timer.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "public class TimerCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Contains task type and description."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    private String[] taskInfo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Initializes taskInfo."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @param taskInfo the info of the task to add."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public TimerCommand(String[] taskInfo) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        this.taskInfo \u003d taskInfo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (this.taskInfo.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            ui.empty_description_error();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        timerManager timermanager \u003d new timerManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        timermanager.setTimer(taskInfo[1]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        timermanager.startTimer();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 32,
      "nystera": 2
    }
  },
  {
    "path": "src/main/java/seedu/hustler/command/taskCommand/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.command.taskCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.data.MemoryManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Contains task type and description."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    private String[] taskInfo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Contains the number of commands to undo.."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    private int numberOfCommandsToUndo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Initializes taskInfo."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @param taskInfo the number of user commands to undo."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public UndoCommand(String[] taskInfo) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        this.taskInfo \u003d taskInfo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Undoes a set number of user commands.."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (this.taskInfo.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            ui.empty_description_error();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        this.numberOfCommandsToUndo \u003d Integer.parseInt(taskInfo[1]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        MemoryManager memorymanager \u003d new MemoryManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        memorymanager.reloadBackup(numberOfCommandsToUndo);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 41,
      "nystera": 2
    }
  },
  {
    "path": "src/main/java/seedu/hustler/data/AchievementStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "package seedu.hustler.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.game.achievement.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.parser.DateTimeParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.util.Formatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import static seedu.hustler.game.achievement.AchievementList.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import static seedu.hustler.game.achievement.Achievements.totalPoints;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import static seedu.hustler.game.achievement.AddTask.numberOfTasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import static seedu.hustler.game.achievement.ConsecutiveLogin.*;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import static seedu.hustler.game.achievement.DoneTask.numberOfDone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * A class that stores User\u0027s achievements and loads it on request from disc."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public class AchievementStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static final String ACHIEVEMENT_FILEPATH \u003d \"data/achievement.txt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static final String LOGIN_FILEPATH \u003d \"data/login.txt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static final String STATUS_FILEPATH \u003d \"data/status.txt\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static Formatter formatter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static int loginCount \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Keeps track of login count."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return login count."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @throws IOException if file is not found."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static int logon() throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            File file \u003d new File(LOGIN_FILEPATH);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            Scanner loginCounter \u003d new Scanner(new File(LOGIN_FILEPATH));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            if (loginCounter.hasNextLine()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                String[] txt \u003d loginCounter.nextLine().split(\" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                int temp \u003d Integer.parseInt(txt[1]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                BufferedWriter writer \u003d new BufferedWriter(new FileWriter(file));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                writer.write(\"logon: \" + (temp +\u003d 1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                writer.close();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                loginCount \u003d (temp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                return loginCount;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                BufferedWriter writer \u003d new BufferedWriter(new FileWriter(file));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                writer.write(\"logon: 1\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                writer.close();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                return loginCount \u003d 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            formatter \u003d new Formatter(LOGIN_FILEPATH);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(new File(LOGIN_FILEPATH)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.write(\"logon: 1\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return loginCount \u003d 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Keeps track of login count."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return login count."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @throws IOException if file is not found."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static int loadStatus() throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            Scanner scanner \u003d new Scanner(new File(STATUS_FILEPATH));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                String[] txt \u003d scanner.nextLine().split(\" \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                if(txt[0].equals(\"Add:\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    numberOfTasks \u003d Integer.parseInt(txt[1]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                } else if(txt[0].equals(\"Done:\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    numberOfDone \u003d Integer.parseInt(txt[1]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                } else if(txt[0].equals(\"TotalPoints:\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    totalPoints \u003d Integer.parseInt(txt[1]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                } else if(txt[0].equals(\"LastLogin:\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    storedDateTime \u003d DateTimeParser.getDateTime(txt[1] + \" \" + txt[2]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                } else if(txt[0].equals(\"ConsecutiveCount:\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    consecutiveCount \u003d Integer.parseInt(txt[1]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return numberOfTasks;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            formatter \u003d new Formatter(STATUS_FILEPATH);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(new File(STATUS_FILEPATH)));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.write(\"Add: 0\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.write(\"Done: 0\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.write(\"TotalPoints: 0\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.write(\"LastLogin: 0\\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.write(\"ConsecutiveCount: 0\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return numberOfTasks;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Save all current achievement progress."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @throws IOException when writing of file has errors."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static void saveStatus() throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(new File(STATUS_FILEPATH)));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        writer.write(\"Add: \" + numberOfTasks);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        writer.write(\"\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        writer.write(\"Done: \" + numberOfDone);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        writer.write(\"\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        writer.write(\"TotalPoints: \" + totalPoints);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if(reset() || checkLogin()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.write(\"\\n\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.write(\"LastLogin: \" + DateTimeParser.convertDateTime(LocalDateTime.now()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.write(\"\\n\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.write(\"\\n\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.write(\"LastLogin: \" + DateTimeParser.convertDateTime(storedDateTime));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.write(\"\\n\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        writer.write(\"ConsecutiveCount: \" + consecutiveCount);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Loads achievement from text file and add them into achievement list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return list of achievement."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @throws FileNotFoundException when file is not found, will create a"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * new txtfile to start data storage."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static ArrayList\u003cAchievements\u003e loadAchievements() throws FileNotFoundException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            Scanner scanner \u003d new Scanner(new File(ACHIEVEMENT_FILEPATH));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                String[] txt \u003d scanner.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    if(txt[3].equals(\"Busybee\")) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                        AddTask addTask \u003d new AddTask(txt[2]);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                        addTask.setPoints(Integer.parseInt(txt[1]));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                        if(txt[0].equals(\"true\")) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                            addTask.setLock(true);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                        } else if(txt[0].equals(\"false\")) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                            addTask.setLock(false);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                        achievementList.add(addTask);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    } else if(txt[3].equals(\"Completionist\")) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                        DoneTask doneTask \u003d new DoneTask(txt[2]);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                        doneTask.setPoints(Integer.parseInt(txt[1]));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                        if(txt[0].equals(\"true\")) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                            doneTask.setLock(true);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                        } else if(txt[0].equals(\"false\")) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                            doneTask.setLock(false);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                        achievementList.add(doneTask);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    } else if(txt[3].equals(\"Dedicated to the art\")) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                        ConsecutiveLogin consecutiveLogin \u003d new ConsecutiveLogin(txt[2]);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                        consecutiveLogin.setPoints(Integer.parseInt(txt[1]));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                        if(txt[0].equals(\"true\")) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                            consecutiveLogin.setLock(true);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                        } else if(txt[0].equals(\"false\")) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                            consecutiveLogin.setLock(false);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                        achievementList.add(consecutiveLogin);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    } else if(txt[3].equals(\"Fresh off the boat\")) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                        FirstLogin firstLogin \u003d new FirstLogin();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                        achievementList.add(firstLogin);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                return achievementList;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            } catch(FileNotFoundException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return achievementList;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Updates and saves the current achievements onto the txtfile."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param achievementsList updated list of achievements to be saved."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return list of updated achievements."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @throws IOException when writing of file has errors."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static ArrayList\u003cAchievements\u003e saveAchievements(ArrayList\u003cAchievements\u003e achievementsList) throws IOException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(new File(ACHIEVEMENT_FILEPATH)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        for(int i \u003d 0; i \u003c achievementsList.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.write(achievementsList.get(i).toTxt());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.write(\"\\n\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return achievementsList;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingkang97": 187
    }
  },
  {
    "path": "src/main/java/seedu/hustler/data/AvatarStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.game.avatar.Avatar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.game.avatar.Level;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.game.avatar.Stats;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.util.Formatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": " * A class that stores User\u0027s avatar and loads it on request from disc."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class AvatarStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static final String FILEPATH \u003d \"data/avatar.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static final String FILEPATHBACKUP \u003d FILEPATH.split(\"avatar.txt\")[0] + \"backup/avatarBackup.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static Formatter formatter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Loads up the current avatar on the destination of this"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Hustler app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the Avatar that is currently loaded."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws FileNotFoundException when file is not found, will create a"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *     new txtfile to start data storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static Avatar load() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        Avatar avatar \u003d new Avatar();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "            Scanner avatarTxt \u003d new Scanner(new File(FILEPATH));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "            String name \u003d new String();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "            Level level \u003d new Level();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": "            Stats stats \u003d new Stats();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nystera"
        },
        "content": "            while (avatarTxt.hasNextLine()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nystera"
        },
        "content": "                String[] txt \u003d avatarTxt.nextLine().split(\" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nystera"
        },
        "content": "                if (txt[0].equals(\"Name\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    name \u003d txt[1];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nystera"
        },
        "content": "                } else if (txt[0].equals(\"Level\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    level \u003d new Level(Integer.parseInt(txt[1]), Integer.parseInt(txt[2]));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nystera"
        },
        "content": "                } else if (txt[0].equals(\"Stats\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    stats \u003d new Stats(Integer.parseInt(txt[1]), Integer.parseInt(txt[2]),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nystera"
        },
        "content": "                            Integer.parseInt(txt[3]), Integer.parseInt(txt[4]));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nystera"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nystera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            avatarTxt.close();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            avatar \u003d new Avatar(name, level, stats);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            System.out.println(\"\\tNo Avatar saved in database, creating a new Avatar now.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            System.out.println(\"\\t_____________________________________\\n\\n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        return avatar;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Reloads the avatar based on a copy of the initial avatar.txt of this"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Hustler app."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @return the Avatar that is being reloaded."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @throws FileNotFoundException as this reload happens in the background,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *     no message is shown."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static Avatar reloadBackup() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        Avatar avatar \u003d new Avatar();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            Scanner avatarBackupTxt \u003d new Scanner(new File(FILEPATHBACKUP));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            String name \u003d new String();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            Level level \u003d new Level();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            Stats stats \u003d new Stats();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            while (avatarBackupTxt.hasNextLine()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                String[] backupTxt \u003d avatarBackupTxt.nextLine().split(\" \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                if (backupTxt[0].equals(\"Name\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    name \u003d backupTxt[1];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                } else if (backupTxt[0].equals(\"Level\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    level \u003d new Level(Integer.parseInt(backupTxt[1]), Integer.parseInt(backupTxt[2]));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                } else if (backupTxt[0].equals(\"Stats\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    stats \u003d new Stats(Integer.parseInt(backupTxt[1]), Integer.parseInt(backupTxt[2]),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                            Integer.parseInt(backupTxt[3]), Integer.parseInt(backupTxt[4]));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            avatarBackupTxt.close();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            avatar \u003d new Avatar(name, level, stats);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        return avatar;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Updates and saves the current avatar onto the txtfile."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param avatar the updated avatar to be saved."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the updated avatar."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws IOException when writing of file has errors."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static Avatar save(Avatar avatar) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nystera"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(new File(FILEPATH)));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nystera"
        },
        "content": "        writer.write(avatar.toTxt());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nystera"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return avatar;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Creates and saves the a backup of the current avatar when the user first starts this app.."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @param avatar the updated avatar to be saved."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @return the updated avatar."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @throws IOException when writing of file has errors."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static Avatar createBackup(Avatar avatar) throws IOException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(new File(FILEPATHBACKUP)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        writer.write(avatar.toTxt());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        return avatar;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 54,
      "yzia2000": 8,
      "nystera": 53,
      "ngjiewu": 1
    }
  },
  {
    "path": "src/main/java/seedu/hustler/data/CommandLog.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.parser.CommandParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "public class CommandLog {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    private static ArrayList\u003cString\u003e commandlog;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    private static boolean isRestoring \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public CommandLog() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        commandlog \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static void recordCommand(String command) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        commandlog.add(command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static void restoreData(int numberOfCommandsToUndo) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        isRestoring \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        int restoreDataUntil \u003d commandlog.size() - numberOfCommandsToUndo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        for (int i \u003d 0; i \u003c restoreDataUntil; i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                CommandParser parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                Command command \u003d parser.parse(commandlog.get(i));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                command.execute();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                Hustler.saveStorage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "            } catch (CommandLineException | IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        while  (commandlog.size() \u003e restoreDataUntil) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            commandlog.remove(restoreDataUntil);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        isRestoring \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static boolean isRestoring() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        return isRestoring;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 46,
      "nystera": 2,
      "ngjiewu": 1
    }
  },
  {
    "path": "src/main/java/seedu/hustler/data/Folder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": " * Class to create directories in Hustler."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class Folder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private static final String DIRPATH \u003d \"data\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Checks directory to see if file exists. If it"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * doesn\u0027t exist, creates one."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return directory"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static File checkDirectory() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "        File directory \u003d new File(DIRPATH);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "            directory.mkdir();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return directory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 7,
      "nystera": 18
    }
  },
  {
    "path": "src/main/java/seedu/hustler/data/MemoryManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "public class MemoryManager {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public MemoryManager() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void createBackup() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            storage.createBackup(Hustler.list.return_list());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            AvatarStorage.createBackup(Hustler.avatar);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void reloadBackup(int numberOfCommandsToUndo) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        Hustler.reloadBackup();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        CommandLog.restoreData(numberOfCommandsToUndo);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 29,
      "ngjiewu": 1
    }
  },
  {
    "path": "src/main/java/seedu/hustler/data/Schedule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * This class stores the Scheduling of Tasks such that it will be easier for Duke to retrieve Tasks based"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * off the Date given."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Schedule {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This formatter allows only the storage of the Date. Excludes Time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DATE_FORMATTER_NO_TIME \u003d \"dd/MM/yyyy\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tree map stores the Dates in ascending order which allows easier finding of Task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static TreeMap\u003cDate, ArrayList\u003cTask\u003e\u003e schedulesInOrder \u003d new TreeMap\u003cDate, ArrayList\u003cTask\u003e\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Schedule() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the Task into the TreeMap with proper Date storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task the task given"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date the date of the task given (excludes time)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the ArrayList that contains the task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if user inputs the wrong format of Date."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e addToSchedule(Task task, Date date) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!schedulesInOrder.containsKey(date)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            schedulesInOrder.put(date, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        schedulesInOrder.get(date).add(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return schedulesInOrder.get(date);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints all Tasks in the given Date."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date the date (excludes Time)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void printSchedule(Date date) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String strDate \u003d convertDateToString(date);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (schedulesInOrder.containsKey(date)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"\\tHere are the tasks on this date: (\" + strDate + \")\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Task task : schedulesInOrder.get(date)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"\\t\" + i + \". \" + task.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"\\tThere are no tasks in the given date: (\" + strDate + \")\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts String to Date. Catches exception if String cannot be convert to the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * date in the given format."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateStr the String of the date to be parsed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the date if String is valid, and null if String is not valid."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date convertStringToDate(String dateStr) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            Date date \u003d new SimpleDateFormat(DATE_FORMATTER_NO_TIME).parse(dateStr);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.dateFormatError();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts the Date to String."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date the Date in DD/MM/uuuu format."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the String in \"DD/MM/uuu\"."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public String convertDateToString(Date date) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        DateFormat dateFormat \u003d new SimpleDateFormat(DATE_FORMATTER_NO_TIME);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return dateFormat.format(date);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if the String can be convert to a Date format."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateStr String of the date."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if String can be parsed as a valid Date type."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidDate(String dateStr) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            Date date \u003d new SimpleDateFormat(DATE_FORMATTER_NO_TIME).parse(dateStr);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the ArrayList from the MapTree with the key of Date."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date the Date value that is the key of the TreeMap."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the ArrayList of the key date."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e getDatedList(Date date) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return schedulesInOrder.get(date);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 3,
      "-": 113
    }
  },
  {
    "path": "src/main/java/seedu/hustler/data/Settings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.util.Formatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": " * A class that stores User\u0027s customized settings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class Settings {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static final String FILEPATH \u003d \"data/settings.txt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The Date Format that Hustler allows."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private SimpleDateFormat dateFormat1 \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private SimpleDateFormat dateFormat2 \u003d new SimpleDateFormat(\"yyyy/MM/dd HHmm\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private SimpleDateFormat dateFormat3 \u003d new SimpleDateFormat(\"MM/dd/yyyy HHmm\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static Formatter formatter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private ArrayList\u003cString\u003e quotesOfTheDay;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private SimpleDateFormat preferredDateFormat;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Default constructor of settings which initializes the default"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * settings."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Settings() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.quotesOfTheDay \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.preferredDateFormat \u003d dateFormat1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Loads up the current avatar on the destination of this"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Hustler app."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the Avatar that is currently loaded."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws FileNotFoundException when file is not found, will create a"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * new txtfile to start data storage."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Settings load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(\"hello\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nystera"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nystera"
        },
        "content": "            Scanner settingsTxt \u003d new Scanner(new File(FILEPATH));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nystera"
        },
        "content": "            formatter \u003d new Formatter(FILEPATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nystera"
        },
        "content": "            Settings newSettings \u003d new Settings();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return newSettings;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nystera"
        },
        "content": "            System.out.println(\"hello\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return new Settings();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Updates and saves the new avatar\u0027s name onto the txtfile."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param preferredName the updated avatar name to be saved."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the updated Settings."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws IOException when writing of file has errors."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Settings save(String preferredName) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nystera"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(new File(FILEPATH)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nystera"
        },
        "content": "        writer.write(this.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nystera"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 73
    }
  },
  {
    "path": "src/main/java/seedu/hustler/data/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.ToDo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "import static seedu.hustler.parser.DateTimeParser.getDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * A class that stores current task list and loads it on request from disc."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Path to the file where tasks are stored and retrieved."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * from."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    private static String filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    private static String filePathBackup;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private Schedule schedule;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Empty constructor."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Initializes filePath."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.filePathBackup \u003d filePath.split(\"hustler.txt\")[0] + \"backup/hustlerBackup.txt\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Loads list of tasks from disc from a csv style file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return an array list loaded from the disc."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public ArrayList\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            Scanner hustlerTxt \u003d new Scanner(new File(this.filePath));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            while (hustlerTxt.hasNextLine()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                // splits line input based on |"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                String[] taskString \u003d hustlerTxt.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                // instantiate classes"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                if (taskString[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    list.add(new ToDo(taskString[4], taskString[2], taskString[3]));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                } else if (taskString[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    LocalDateTime by \u003d getDateTime(taskString[5]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    list.add(new Deadline(taskString[4], by, taskString[2], taskString[3]));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nystera"
        },
        "content": "                        String dateOnly \u003d taskString[5].split(\" \")[0];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nystera"
        },
        "content": "                        Date date \u003d schedule.convertStringToDate(dateOnly);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nystera"
        },
        "content": "                        Task lastTask \u003d list.get(list.size() - 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nystera"
        },
        "content": "                        schedule.addToSchedule(lastTask, date);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    } catch (ParseException ignored) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nystera"
        },
        "content": "                        return null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    LocalDateTime at \u003d getDateTime(taskString[5]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    list.add(new Event(taskString[4], at, taskString[2], taskString[3]));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nystera"
        },
        "content": "                        String dateOnly \u003d taskString[5].split(\" \")[0];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nystera"
        },
        "content": "                        Date date \u003d schedule.convertStringToDate(dateOnly);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nystera"
        },
        "content": "                        Task lastTask \u003d list.get(list.size() - 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nystera"
        },
        "content": "                        schedule.addToSchedule(lastTask, date);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    } catch (ParseException ignored) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nystera"
        },
        "content": "                        return null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                if (taskString[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                    list.get(list.size() - 1).markAsDone();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            hustlerTxt.close();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            System.out.println(\"\\tNo list saved in database. Please \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                + \"create a list now.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            System.out.println(\"\\t_____________________________________\\n\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Reloads list of tasks from a backup of the original hustler.txt file."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @return an array list loaded from the backup disc."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public ArrayList\u003cTask\u003e reloadBackup() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            Scanner hustlerBackupTxt \u003d new Scanner(new File(this.filePathBackup));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            while (hustlerBackupTxt.hasNextLine()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                // splits line input based on |"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                String[] taskString \u003d hustlerBackupTxt.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                // instantiate classes"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                if (taskString[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    list.add(new ToDo(taskString[4], taskString[2], taskString[3]));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                } else if (taskString[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    LocalDateTime by \u003d getDateTime(taskString[4]);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    list.add(new Deadline(taskString[4], by, taskString[2], taskString[3]));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                        String dateOnly \u003d taskString[4].split(\" \")[0];"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                        Date date \u003d schedule.convertStringToDate(dateOnly);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                        Task lastTask \u003d list.get(list.size() - 1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                        schedule.addToSchedule(lastTask, date);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    } catch (ParseException ignored) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                        return null;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    LocalDateTime at \u003d getDateTime(taskString[4]);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    list.add(new Event(taskString[4], at, taskString[2], taskString[3]));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                        String dateOnly \u003d taskString[4].split(\" \")[0];"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                        Date date \u003d schedule.convertStringToDate(dateOnly);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                        Task lastTask \u003d list.get(list.size() - 1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                        schedule.addToSchedule(lastTask, date);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    } catch (ParseException ignored) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                        return null;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                if (taskString[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    list.get(list.size() - 1).markAsDone();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            hustlerBackupTxt.close();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Saves the input task list to disc."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param inputList the list of tasks to saveAchievements to disc."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @throws IOException if file could not be saved"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void save(ArrayList\u003cTask\u003e inputList) throws IOException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        // if list has nothing just quit"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (inputList.isEmpty()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            (new File(this.filePath)).delete();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        //if data folder doesnt exist create it"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        File directory \u003d new File(this.filePath.split(\"/\")[0]);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            directory.mkdir();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        // saveAchievements inputs"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        String savedLine \u003d inputList.get(0).toSaveFormat();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        for (int i \u003d 1; i \u003c inputList.size(); i++) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            savedLine \u003d savedLine + \"\\n\" + inputList.get(i).toSaveFormat();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter("
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            new FileWriter(new File(this.filePath))"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            );"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        writer.write(savedLine);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Creates a backup copy of hustler.txt each time the user uses this app; used for UndoCommand."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @param inputList the list of tasks to save to disc."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @throws IOException if file could not be saved"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void createBackup(ArrayList\u003cTask\u003e inputList) throws IOException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        // if list has nothing just quit"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (inputList.isEmpty()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            (new File(this.filePathBackup)).delete();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        //if data folder doesnt exist create it"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        File directory \u003d new File(this.filePathBackup.split(\"/hustlerBackup.txt\")[0]);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            directory.mkdir();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        // save inputs"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        String savedLine \u003d inputList.get(0).toSaveFormat();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        for (int i \u003d 1; i \u003c inputList.size(); i++) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            savedLine \u003d savedLine + \"\\n\" + inputList.get(i).toSaveFormat();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter("
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            new FileWriter(new File(this.filePathBackup))"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            );"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        writer.write(savedLine);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 79,
      "yzia2000": 81,
      "nystera": 34,
      "jingkang97": 5,
      "ngjiewu": 13
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/achievement/AchievementList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "package seedu.hustler.game.achievement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import static seedu.hustler.game.achievement.AddTask.addPoints;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import static seedu.hustler.game.achievement.ConsecutiveLogin.loginPoints;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import static seedu.hustler.game.achievement.ConsecutiveLogin.storedDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import static seedu.hustler.game.achievement.DoneTask.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * Deals with addition of achievements and unlocking of achievements."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * Also prints out achievement list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public class AchievementList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * List of all unlocked and locked achievements."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static ArrayList\u003cAchievements\u003e achievementList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * When user first starts Hustler, Hustler will create a list of locked achievements."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * It will then store achievements inside achievements.txt."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return list of locked achievements."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static ArrayList\u003cAchievements\u003e firstStart(int loginCount) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if(loginCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            achievementList.add(new DoneTask(\"\\uD83E\\uDD49 Bronze\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            achievementList.add(new DoneTask(\"\\uD83E\\uDD48 Silver\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            achievementList.add(new DoneTask(\"\\uD83E\\uDD47 Gold\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            achievementList.add(new AddTask(\"\\uD83E\\uDD49 Bronze\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            achievementList.add(new AddTask(\"\\uD83E\\uDD48 Silver\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            achievementList.add(new AddTask(\"\\uD83E\\uDD47 Gold\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            achievementList.add(new ConsecutiveLogin(\"\\uD83E\\uDD49 Bronze\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            achievementList.add(new ConsecutiveLogin(\"\\uD83E\\uDD48 Silver\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            achievementList.add(new ConsecutiveLogin(\"\\uD83E\\uDD47 Gold\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            achievementList.add(new FirstLogin());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            System.out.println(\"You have unlocked this achievement!\\n\" + new FirstLogin());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            FirstLogin.updatePoints();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            storedDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return achievementList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Checks if user meets any condition of achievement for Busybee."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Unlocks Busybee achievements accordingly."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param achievementLevel achievement level of the achievement."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return returns list of achievement."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static ArrayList\u003cAchievements\u003e updateAddTask (String achievementLevel) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        for(int i \u003d 0; i \u003c achievementList.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            if(achievementList.get(i).getDescription().equals(\"Busybee\") \u0026\u0026 achievementList.get(i).getAchievementLevel().equals(achievementLevel) \u0026\u0026 achievementList.get(i).checkLock()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                achievementList.get(i).setLock(false);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                achievementList.get(i).setPoints(addPoints);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                System.out.println(\"You have unlocked this achievement!\\n\" + achievementList.get(i));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return achievementList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Checks if user meets any condition of achievement for Completionist."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Unlocks Completionist achievements accordingly."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param achievementLevel achievement level of the achievement."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return returns list of achievement."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static ArrayList\u003cAchievements\u003e updateDoneTask (String achievementLevel) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        for(int i \u003d 0; i \u003c achievementList.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            if(achievementList.get(i).getDescription().equals(\"Completionist\") \u0026\u0026 achievementList.get(i).getAchievementLevel().equals(achievementLevel) \u0026\u0026 achievementList.get(i).checkLock()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                achievementList.get(i).setLock(false);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                achievementList.get(i).setPoints(donePoints);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                System.out.println(\"You have unlocked this achievement!\\n\" + achievementList.get(i));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return achievementList;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Checks if user meets any condition of achievement for Dedicated to the art."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Unlocks Dedicated to the art achievements accordingly."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param achievementLevel achievement level of the achievement."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return returns list of achievement."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static ArrayList\u003cAchievements\u003e updateConsecutiveLogin (String achievementLevel) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        for(int i \u003d 0; i \u003c achievementList.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            if(achievementList.get(i).getDescription().equals(\"Dedicated to the art\") \u0026\u0026 achievementList.get(i).getAchievementLevel().equals(achievementLevel) \u0026\u0026 achievementList.get(i).checkLock()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                achievementList.get(i).setLock(false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                achievementList.get(i).setPoints(loginPoints);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                System.out.println(\"You have unlocked this achievement!\\n\" + achievementList.get(i));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return achievementList;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Shows achievement list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static void showList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        System.out.println(\"\\uD83D\\uDD13 ACHIEVEMENTS UNLOCKED \\uD83D\\uDD13\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if(!achievementList.isEmpty()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            int l \u003d 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            for(int i \u003d 0; i \u003c achievementList.size(); i ++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                if(!achievementList.get(i).checkLock()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    l ++;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    System.out.print(l + \". \");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    System.out.println(achievementList.get(i));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            System.out.println(\"\\uD83D\\uDD12 LOCKED ACHIEVEMENTS \\uD83D\\uDD12\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            int j \u003d 0;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            for(int i \u003d 0; i \u003c achievementList.size(); i ++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                if(achievementList.get(i).checkLock()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    j ++;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    System.out.print(j + \". \");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    System.out.println(achievementList.get(i));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            System.out.println(\"Total Points \u003d \" + totalPoints + \" \\uD83D\\uDCB0\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingkang97": 128
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/achievement/Achievements.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.achievement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * Achievements that the user can achieve in Hustler."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public abstract class Achievements implements Write{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Total points the user has."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static int totalPoints;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve achievement level of a particular achievement."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public abstract String getAchievementLevel();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve description of an achievement."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public abstract String getDescription();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve information regarding an achievement."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public abstract String getInformation();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve points attainable from an achievement."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public abstract int getPoints();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Update how much point is gained from unlocking an achievement."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param points"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public abstract int setPoints(int points);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Check whether achievement is locked."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public abstract Boolean checkLock();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Unlock an achievement."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param lock"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public abstract Boolean setLock(Boolean lock);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Format which the achievement will be printed out."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return \"Gained:\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 1,
      "jingkang97": 64
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/achievement/AddTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.achievement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * Achievement which can be attained after certain number of tasks are added."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * There is 3 achievement level which depends on the number of tasks added."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public class AddTask extends Achievements {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Number of tasks added."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static int numberOfTasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Keeps track of final points which is dependent"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * on number of tasks completed and stores it."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static int addPoints;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Achievement level - Bronze, Silver, Gold."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static String addAchievementLevel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Description of achievement."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Information regarding how to attain achievement."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private String information;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Achievement level - Bronze, Silver, Gold."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private String achievementLevel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Points earned."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private int points;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Achievement status."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private Boolean locked;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Points earn from bronze level of achievement."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static final int BRONZE_POINT \u003d 5;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Points earn from silver level achievement."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static final int SILVER_POINT \u003d 10;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Points from gold level achievement."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static final int GOLD_POINT \u003d 15;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Initialise this achievement."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param achievementLevel Achievement level of the achievement."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public AddTask(String achievementLevel) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.description \u003d \"Busybee\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.information \u003d \"Added 10 tasks, 100 tasks, and 1000 tasks for Bronze, Silver and Gold consecutively.\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.achievementLevel \u003d achievementLevel;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.points \u003d 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.locked \u003d true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Increase the number of tasks added."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return number of tasks added."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static int increment() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        numberOfTasks++;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return numberOfTasks;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Update the achievement level if user meets the condition."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Condition base on number of tasks added."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return Achievement level."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static String updateAchievementLevel() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if(numberOfTasks \u003d\u003d 5) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            addAchievementLevel \u003d \"\\uD83E\\uDD49 Bronze\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else if(numberOfTasks \u003d\u003d 10) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            addAchievementLevel \u003d \"\\uD83E\\uDD48 Silver\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else if (numberOfTasks \u003d\u003d 15) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            addAchievementLevel \u003d \"\\uD83E\\uDD47 Gold\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return addAchievementLevel;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Update points accordingly."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return points attained from number of tasks done."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static int updatePoints() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if(numberOfTasks \u003d\u003d 5) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            addPoints \u003d BRONZE_POINT;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            totalPoints +\u003d addPoints;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else if(numberOfTasks \u003d\u003d 10) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            addPoints \u003d SILVER_POINT;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            totalPoints +\u003d addPoints;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else if (numberOfTasks \u003d\u003d 15) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "           addPoints \u003d GOLD_POINT;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "           totalPoints +\u003d addPoints;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return addPoints;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Gets achievement level of the achievement."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return achievement level."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String getAchievementLevel() { return this.achievementLevel; }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve description of achievement."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return description."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String getDescription() { return description; }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve information regarding the achievement."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return information."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String getInformation() { return this.information; }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve current points from achievement."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return points."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public int getPoints() { return points; }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Update points gained from unlocking achievement."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param points updated points."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return points."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public int setPoints(int points) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.points \u003d points;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return points;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Checks whether achievement have been unlocked."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return true or false."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public Boolean checkLock() { return locked; }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Unlocks achievement."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param lock Lock condition."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return true or false."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public Boolean setLock(Boolean lock) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        locked \u003d lock;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return locked;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * The format in which the achievement will be printed out."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return string format of the achievement."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return super.toString() + \" \" + points + \" \" + description + \" \" + achievementLevel;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Format in which achievement will be stored."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return string format of achievement."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String toTxt() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return locked + \"|\" + points + \"|\" + achievementLevel + \"|\" + description + \"|\" + information;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 1,
      "jingkang97": 192
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/achievement/ConsecutiveLogin.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.achievement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * Achievement which can be attained after user logs in consecutively."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * There is 3 achievement level which depending on the number of consecutive login."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public class ConsecutiveLogin extends Achievements {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Checks if user logs in consecutively."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static Boolean consecutiveCheck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Keeps track of how many times user logs in consecutively."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static int consecutiveCount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Points earned from logging in consecutively."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static int loginPoints;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Date and time stored every time user logs in."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static LocalDateTime storedDateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Achievement level - Bronze, Silver, Gold."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static String loginAchievementLevel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Description of achievement."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Information regarding how to attain achievement."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private String information;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Achievement level - Bronze, Silver, Gold."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private String achievementLevel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Points earned."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private int points;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Achievement status."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private Boolean locked;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Points earn from bronze level of achievement."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static final int BRONZE_POINT \u003d 5;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Points earn from silver level achievement."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static final int SILVER_POINT \u003d 10;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Points from gold level achievement."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static final int GOLD_POINT \u003d 15;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Initialise this achievement."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param achievementLevel Achievement level of the achievement."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public ConsecutiveLogin(String achievementLevel) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.description \u003d \"Dedicated to the art\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.information \u003d \"Logs in for 5, 10 and 15 days for Bronze, Silver and Gold consecutively.\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.achievementLevel \u003d achievementLevel;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.points \u003d 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.locked \u003d true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Checks if user logs in consecutively day after day."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return true if user logs in consecutively."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static Boolean checkLogin() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        LocalDateTime currentTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        long duration \u003d Duration.between(storedDateTime,currentTime).toDays();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if(duration \u003d\u003d 1) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            consecutiveCheck \u003d true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            consecutiveCheck \u003d false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return consecutiveCheck;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Resets consecutive count if user do not log in consecutively."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return false if user did not log in consecutively."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static Boolean reset() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        LocalDateTime currentTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        long duration \u003d Duration.between(storedDateTime,currentTime).toMinutes();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if(duration \u003e 1) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Update number of consecutive counts depending on how the user logs in."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return consecutive counts."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static int updateCount() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if(!checkLogin() \u0026\u0026 reset()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            consecutiveCount \u003d 0;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else if(checkLogin()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            consecutiveCount ++;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return consecutiveCount;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Update the achievement level if user meets the condition."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Condition base on number of consecutive login."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return Achievement level."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static String updateAchievementLevel() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if(consecutiveCount \u003d\u003d 5) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            loginAchievementLevel \u003d \"\\uD83E\\uDD49 Bronze\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else if(consecutiveCount \u003d\u003d 10) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            loginAchievementLevel \u003d \"\\uD83E\\uDD48 Silver\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else if (consecutiveCount \u003d\u003d 15) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            loginAchievementLevel \u003d \"\\uD83E\\uDD47 Gold\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return loginAchievementLevel;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Update points accordingly."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return points attained from consecutive login."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static int updatePoints() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if(consecutiveCount \u003d\u003d 5) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            loginPoints \u003d BRONZE_POINT;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            totalPoints +\u003d loginPoints;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else if(consecutiveCount \u003d\u003d 10) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            totalPoints +\u003d loginPoints;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            loginPoints +\u003d SILVER_POINT;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else if(consecutiveCount \u003d\u003d 15) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            totalPoints +\u003d loginPoints;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            loginPoints +\u003d GOLD_POINT;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return loginPoints;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Gets achievement level of the achievement."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return achievement level."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String getAchievementLevel() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return this.achievementLevel;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve description of achievement."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return description."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String getDescription() { return this.description; }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve information regarding the achievement."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return information."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String getInformation() { return this.information; }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve current points from achievement."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return points."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public int getPoints() { return points; }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Update points gained from unlocking achievement."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param points updated points."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return points."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public int setPoints(int points) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.points \u003d points;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return points;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Checks whether achievement have been unlocked."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return true or false."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public Boolean checkLock() { return locked; }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Unlocks achievement."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param lock Lock condition."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return true or false."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public Boolean setLock(Boolean lock) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        locked \u003d lock;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return locked;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * The format in which the achievement will be printed out."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return string format of the achievement."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return super.toString() + \" \" + points + \" \" + description + \" \" + achievementLevel;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Format in which achievement will be stored."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return string format of achievement."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String toTxt() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return locked + \"|\" + points + \"|\" + achievementLevel + \"|\" + description + \"|\" + information;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 1,
      "jingkang97": 240
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/achievement/DoneTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.achievement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * Achievement which can be attained after certain number of tasks are completed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * There is 3 achievement level which depends on the number of tasks completed."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class DoneTask extends Achievements {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Number of tasks done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static int numberOfDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Keeps track of final points which is dependent"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * on number of tasks completed and stores it."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static int donePoints;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Achievement level - Bronze, Silver, Gold."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static String doneAchievementLevel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Description of achievement."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Information regarding how to attain achievement."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private String information;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Achievement level - Bronze, Silver, Gold."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private String achievementLevel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Points earned."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private int points;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Achievement status."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private Boolean locked;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Points earn from bronze level of achievement."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static final int BRONZE_POINT \u003d 5;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Points earn from silver level achievement."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static final int SILVER_POINT \u003d 10;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Points from gold level achievement."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static final int GOLD_POINT \u003d 15;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Initialise this achievement."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param achievementLevel Achievement level of the achievement."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public DoneTask(String achievementLevel) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.description \u003d \"Completionist\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.information \u003d \"Completed 5 tasks, 25 tasks and 125 tasks for Bronze, Silver and Gold consecutively.\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.achievementLevel \u003d achievementLevel;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.points \u003d 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.locked \u003d true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Increase number of tasks done when user mark task as done."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return number of tasks done."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static int increment() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        numberOfDone ++;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return numberOfDone;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Update the achievement level if user meets the condition."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Condition base on number of tasks done."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return Achievement level."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static String updateAchievementLevel() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if(numberOfDone \u003d\u003d 5) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            doneAchievementLevel \u003d \"\\uD83E\\uDD49 Bronze\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else if(numberOfDone \u003d\u003d 10) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            doneAchievementLevel \u003d \"\\uD83E\\uDD48 Silver\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else if (numberOfDone \u003d\u003d 15) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            doneAchievementLevel \u003d \"\\uD83E\\uDD47 Gold\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return doneAchievementLevel;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Update points accordingly."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return points attained from number of tasks done."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static int updatePoints() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if(numberOfDone \u003d\u003d 5) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            donePoints \u003d BRONZE_POINT;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            totalPoints +\u003d donePoints;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else if(numberOfDone \u003d\u003d 10) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            donePoints \u003d SILVER_POINT;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            totalPoints +\u003d donePoints;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else if (numberOfDone \u003d\u003d 15) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            totalPoints +\u003d donePoints;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            donePoints \u003d GOLD_POINT;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return donePoints;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Gets achievement level of the achievement."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return achievement level."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String getAchievementLevel() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return this.achievementLevel;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve description of achievement."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return description."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String getDescription() { return description; }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve information regarding the achievement."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return information."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String getInformation() { return this.information; }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve current points from achievement."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return points."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public int getPoints() { return points; }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Update points gained from unlocking achievement."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param points updated points."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return points."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public int setPoints(int points) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.points \u003d points;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return points;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Checks whether achievement have been unlocked."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return true or false."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public Boolean checkLock() { return this.locked; }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Unlocks achievement."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param lock Lock condition."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return true or false."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public Boolean setLock(Boolean lock) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        locked \u003d lock;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return locked;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * The format in which the achievement will be printed out."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return string format of the achievement."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return super.toString() + \" \" + points + \" \" + description + \" \" + achievementLevel;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Format in which achievement will be stored."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return string format of achievement."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String toTxt() { return locked + \"|\" + points + \"|\" + achievementLevel + \"|\" + description + \"|\" + information; }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 4,
      "jingkang97": 192
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/achievement/FirstLogin.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "package seedu.hustler.game.achievement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * Achievement which can be attained after user first logs in."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public class FirstLogin extends Achievements{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Description of achievement."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Information regarding how to attain achievement."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private String information;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Achievement level of achievement - Bronze, Silver, Gold."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private String achievementLevel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Points earned."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private int points;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Achievement status."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private Boolean locked;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Initialise this achievement."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public FirstLogin() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.description \u003d \"Fresh off the boat\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.information \u003d \"Use Hustler for the first time.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.achievementLevel \u003d \"\\uD83E\\uDD47 Gold\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.points \u003d 15;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        locked \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Update total points when user attains this achievement."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return total points."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static int updatePoints() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        totalPoints +\u003d 15;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return totalPoints;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Gets achievement level of the achievement."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return achievement level."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String getAchievementLevel() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return achievementLevel;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve description of achievement."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return description."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve information regarding the achievement."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return information."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String getInformation() { return information; }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve current points from achievement."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return points."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public int getPoints() { return points; }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Update points gained from unlocking achievement."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param points updated points."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return points."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public int setPoints(int points) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.points \u003d points;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return points;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Checks whether achievement have been unlocked."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return true or false."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public Boolean checkLock() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return locked;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Unlocks achievement."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param lock Lock condition."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return true or false."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public Boolean setLock(Boolean lock) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        locked \u003d lock;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return locked;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * The format in which the achievement will be printed out."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return string format of the achievement."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return super.toString() + \" \" + points + \" \" + this.description + \" \" + achievementLevel;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Format in which achievement will be stored."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return string format of achievement."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String toTxt() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return locked + \"|\" + points + \"|\" + achievementLevel + \"|\" + description + \"|\" + information;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingkang97": 134
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/achievement/Write.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "package seedu.hustler.game.achievement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * The interface that all classes in achievement must inherit to"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * convert them to proper format before storing them in a txtfile."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public interface Write {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Convert object to text format to be written into achievement.txt."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return String format of achievement."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String toTxt();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingkang97": 15
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/avatar/Avatar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.avatar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.data.AvatarStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * A class for the avatar in Hustler."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class Avatar implements Convertible {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The name of the avatar."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Level of the avatar."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private Level level;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Stats of the avatar."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private Stats stats;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Default initialization of the level and stat."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public Avatar() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.name \u003d \"Avatar\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.level \u003d new Level();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.stats \u003d new Stats();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Initializing name, level and stat with specific"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * values."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param level object to initialize level with"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param stats object to initialize stats with"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Avatar(String name, Level level, Stats stats) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.level \u003d level;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.stats \u003d stats;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Sets the name for the avatar."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param preferredName the new name to update to the avatar."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the avatar with the updated name."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Avatar setName(String preferredName) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.name \u003d preferredName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Increases avatar xp by 1. Avatar levels up and increases"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * its stats if the xp gained levels it up."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the level of the avatar."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Level gainXp() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.level.increaseXp();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (this.level.canLevel()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nystera"
        },
        "content": "            this.level.levelUp();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nystera"
        },
        "content": "            this.stats.upStats(this.level.getLevel());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nystera"
        },
        "content": "            showCongrats();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this.level;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Displays on the screen the congratulatory message to indicate that the User"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * has leveled up."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private void showCongrats() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(\"\\tCongratulations, you\u0027ve leveled up! Your avatar has gotten stronger:\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(this.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(\"\\t_____________________________________\\n\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this.name + \", \" + this.level.toString() + \"\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nystera"
        },
        "content": "            + this.stats.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String toTxt() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return \"Name \" + this.name + \"\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nystera"
        },
        "content": "            + \"Level \" + this.level.toTxt() + \"\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nystera"
        },
        "content": "            + \"Stats \" + this.stats.toTxt();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 32,
      "nystera": 66
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/avatar/Convertible.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.avatar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": " * The interface that all classes in avatar must inherit to"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * convert them to saveAchievements in a txtfile."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "public interface Convertible {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Converts avatar into a parsable text format to saveAchievements in a txt file."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the String to add into a txt file."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String toTxt();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 11,
      "jingkang97": 2
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/avatar/Level.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.avatar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Class representing the level of the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": " * avatar. Also contains the current xp."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class Level implements Convertible {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Integer level of avatar."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private int level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Integer value of XP. Avatar has to hit this threshold"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * to level up."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private int xp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Constructs a default Level."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public Level() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.level \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.xp \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Constructs Level with the given level and xp."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param level the current level of the avatar."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param xp the current xp of the avatar."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Level(int level, int xp) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.level \u003d level;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.xp \u003d xp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Gets the current level of the avatar."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the current level of the avatar."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public int getLevel() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this.level;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Gets the current xp of the avatar."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the current xp of the avatar."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public int getXp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this.xp;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Increment xp by 1."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the current Level."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Level increaseXp() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.xp++;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Levels up by 1."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the current level."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Level levelUp() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return new Level(this.level++, this.xp);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Checks if avatar can reach the next level."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return true if avatar can gain a level; false if otherwise."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public boolean canLevel() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (this.xp \u003e\u003d xpNeeded(this.level)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The simple algorithm to calculate the xp needed for the"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * next level."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param level the level of the avatar."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the xp needed to hit the next level."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private int xpNeeded(int level) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (level \u003c\u003d 3) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return 5 * level;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return (3 * (level * level)) - ((level - 3) * 15);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return \"Level: \" + this.level + \" | XP: \" + this.xp;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String toTxt() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this.level + \" \" + this.xp;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 20,
      "nystera": 90
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/avatar/Stats.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.avatar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Class that deals with the stats of avatar."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class Stats implements Convertible {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Stat that deals damage."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private int damage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Stat that blocks damage."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private int defence;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Stat that represents stamina."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private int stamina;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Stat that represents speed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private int speed;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Constructs the default Stats values."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public Stats() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.damage \u003d 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.defence \u003d 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.stamina \u003d 3;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.speed \u003d 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Construct Stats with the given damage, defence, stamina"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * and speed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param damage the damage of the avatar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param defence the defence of the avatar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param stamina the stamina of the avatar."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param speed the speed of the avatar."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Stats(int damage, int defence, int stamina, int speed) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.damage \u003d damage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.defence \u003d defence;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.stamina \u003d stamina;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.speed \u003d speed;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Increases the stats based on the current level."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param level the current level of the avatar."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the updated stats after increment."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Stats upStats(int level) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.damage +\u003d (level % 2 \u003d\u003d 0) ? 2 : 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.defence +\u003d (level % 3 \u003d\u003d 0) ? 2 : 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.stamina +\u003d 2;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.speed +\u003d (level % 3 \u003d\u003d 0) ? 1 : 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return \"Damage: \"  + this.damage + \"\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nystera"
        },
        "content": "            + \"Defence: \" + this.defence + \"\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nystera"
        },
        "content": "            + \"Stamina: \" + this.stamina + \"\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nystera"
        },
        "content": "            + \"Speed: \" + this.speed;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String toTxt() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this.damage + \" \" + this.defence + \" \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nystera"
        },
        "content": "            + this.stamina + \" \" + this.speed;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 31,
      "nystera": 49
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/CommandLineException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": " * Helps print out errors to prompt the user of the proper input."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class CommandLineException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public CommandLineException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Prints out the error message in the command prompt."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void getErrorMsg() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(Ui.LINE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(this.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(Ui.LINE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 23
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/CommandLogic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.parser.DateTimeParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": " * Checks if the user input are desired by Duke by checking if the format of the String input is valid based off"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": " * the command type."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class CommandLogic {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Types of prompts to alert the users of their errors in the input."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final String WRONG_FORMAT_NO_DESCRIPTION \u003d \"Adding command description cannot be empty!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final String WRONG_FORMAT_LENGTH \u003d \"Please only type \\\"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final String WRONG_FORMAT_NO_TIME \u003d \"Todo does not need to have a time inputted!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final String WRONG_FORMAT_BY \u003d \"Deadline needs to have /\\\"by\\\" before inputting time!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final String WRONG_FORMAT_AT \u003d \"Event needs to have /\\\"at\\\" before inputting time!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final String WRONG_FORMAT_IN \u003d \"Ranged Event needs to have /\\\"in\\\" before inputting the times!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final String WRONG_FORMAT_AFTER \u003d \"Adding an after ToDo needs to have /\\\"after\\\" before inputting the index of linked task!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    private static final String WRONG_FORMAT_NEEDS \u003d \"FixedDurationTasks need to have/\\\"needs\\\" before inputting duration!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final String INVALID_NUMBER \u003d \"Please enter a valid number!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final String INVALID_SNOOZE \u003d \"Please only snooze either a specific DD/MM/YYYY or \\\"\u003cnumber\u003e \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "        + \"\u003ctime to delay\u003e\\\"\\n etc: 3 days\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Tries to check for errors for a deadline input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param rawInput user\u0027s single line input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param userInput user\u0027s input split by spacing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return boolean expression depends on if the input is valid."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws CommandLineException for the Main class to catch."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static boolean validateDeadline(String rawInput, String[] userInput) throws CommandLineException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (isOneWord(rawInput)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_NO_DESCRIPTION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else if (!rawInput.contains(\"/by\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_BY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nystera"
        },
        "content": "            String date \u003d rawInput.split(\"/by \")[1];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Validates event to check for format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param rawInput raw user input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param userInput split user input"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return true if event is validated"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws CommandLineException Exception for format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static boolean validateEvent(String rawInput, String[] userInput) throws CommandLineException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (isOneWord(rawInput)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_NO_DESCRIPTION);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else if (!rawInput.contains(\"/at\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_AT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Validates todo to check for format."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param rawInput raw user input"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param userInput split user input"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return true if validated"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws CommandLineException Exception for format"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static boolean validateToDo(String rawInput, String[] userInput) throws CommandLineException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (isOneWord(rawInput)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_NO_DESCRIPTION);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else if (rawInput.contains(\"/\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_NO_TIME);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Validates Range to check for format."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param rawInput raw user input"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param userInput split user input"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return true if validated"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws CommandLineException Exception for format"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static boolean validateRange(String rawInput, String[] userInput) throws CommandLineException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (isOneWord(rawInput)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_NO_DESCRIPTION);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else if (!rawInput.contains(\"/in\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_IN);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nystera"
        },
        "content": "        String dates \u003d rawInput.split(\"/in \")[1];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nystera"
        },
        "content": "        String[] datesStr \u003d dates.split(\" and \", 2);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nystera"
        },
        "content": "        DateTimeParser.getDateTime(datesStr[0]);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nystera"
        },
        "content": "        DateTimeParser.getDateTime(datesStr[1]);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Validates DoAfter to check for format."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param rawInput raw user input"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param userInput split user input"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return true if validated"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws CommandLineException Exception for format"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static boolean validateDoAfter(String rawInput, String[] userInput) throws CommandLineException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (isOneWord(rawInput)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_NO_DESCRIPTION);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else if (!rawInput.contains(\"/after\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_AFTER);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nystera"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nystera"
        },
        "content": "            int number \u003d Integer.parseInt(rawInput.split(\"/after \", 2)[1]);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(INVALID_NUMBER);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static boolean validateFixedDurationTask(String rawInput) throws CommandLineException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (isOneWord(rawInput)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_NO_DESCRIPTION);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else if (!rawInput.contains(\"/needs\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_NEEDS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Validates number command to check for format."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param rawInput raw user input"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return true if validated"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws CommandLineException Exception for format"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Validates number command to check for format."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param rawInput raw user input"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return true if validated"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws CommandLineException Exception for format"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static boolean validateNumberCommand(String rawInput) throws CommandLineException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (!isTwoWord(rawInput)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_LENGTH + rawInput.split(\" \")[0] + \" \u003cnumber ID of task\u003e\\\"\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nystera"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nystera"
        },
        "content": "            int number \u003d Integer.parseInt(rawInput.split(\" \")[1]);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(INVALID_NUMBER);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Validates snooze command to check for format."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param command raw user input"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return true if validated"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws CommandLineException Exception for format"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static boolean validateSnooze(String command) throws CommandLineException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nystera"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nystera"
        },
        "content": "         * Checks if user is inputting snooze in form of (number of times) (delay) or a specific date."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nystera"
        },
        "content": "         */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (isTwoWord(command)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nystera"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nystera"
        },
        "content": "                int number \u003d Integer.parseInt(command.split(\" \")[0]);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nystera"
        },
        "content": "                switch (command.split(\" \")[1]) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nystera"
        },
        "content": "                case \"minutes\":"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nystera"
        },
        "content": "                case \"hours\":"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nystera"
        },
        "content": "                case \"days\":"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nystera"
        },
        "content": "                case \"weeks\":"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nystera"
        },
        "content": "                case \"months\":"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nystera"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    throw new CommandLineException(INVALID_SNOOZE);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nystera"
        },
        "content": "                }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nystera"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nystera"
        },
        "content": "                throw new CommandLineException(INVALID_SNOOZE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nystera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else if (isOneWord(command)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nystera"
        },
        "content": "            DateTimeParser.getDateTime(command.split(\" \")[0]);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(INVALID_SNOOZE);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Validates find command to check for format."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param rawInput raw user input"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return true if validated"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws CommandLineException Exception for format"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static boolean validateFind(String rawInput) throws CommandLineException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (!isTwoWord(rawInput)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_LENGTH + rawInput.split(\" \")[0] + \" \u003ckeyword\u003e\\\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Validates show command to check for format."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param rawInput raw user input"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return true if validated"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws CommandLineException Exception for format"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static boolean validateShow(String rawInput) throws CommandLineException {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (!isTwoWord(rawInput)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_LENGTH + rawInput.split(\" \")[0] + \" \u003cDD/MM/YYYY\u003e\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nystera"
        },
        "content": "            DateTimeParser.getDateTime(rawInput.split(\" \")[1]);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Validates one word command to check for format."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param rawInput raw user input"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return true if validated"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws CommandLineException Exception for format"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static boolean validateOneWord(String rawInput) throws CommandLineException {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (!isOneWord(rawInput)) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_LENGTH + rawInput.split(\" \")[0] + \"\\\"\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Checks one word."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param rawInput raw user input"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return true or false to check"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static boolean isOneWord(String rawInput) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return rawInput.split(\" \").length \u003d\u003d 1;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Checks two words."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param rawInput raw user input"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return true or false to check"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static boolean isTwoWord(String rawInput) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return rawInput.split(\" \").length \u003d\u003d 2;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 10,
      "nystera": 256
    }
  },
  {
    "path": "src/main/java/seedu/hustler/parser/CommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.command.avatarCommand.CheckAvatarCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.command.avatarCommand.SetNameCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.command.taskCommand.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.data.CommandLog;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.command.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.data.CommandLog;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": " * Takes raw user input as string, makes sense out of the input using"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": " * regex and then performs operations based on the input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class CommandParser extends Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Takes raw input and splits it into task type (eg. todo) and task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * description (eg. finish work). In cases like task type: list, bye,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * the output array only contains task type."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @param rawInput users single line string input"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @return an array split into task type and task description"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public String[] split(String rawInput) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        String[] userInput \u003d rawInput.split(\" \", 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * This method takes the raw user input and attempts to decipher"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * the user\u0027s intentions (whether the user wants to find a task, add"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * a task, etc.), thereafter returning the corresponding command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @param rawInput user\u0027s single line string input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @return an instruction, of type Command, to be executed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Command parse(String rawInput) throws CommandLineException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        String[] userInput \u003d this.split(rawInput);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        String[] taskCommands \u003d {\"todo\", \"deadline\", \"event\"};"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        Arrays.sort(taskCommands);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (userInput[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return new FindCommand(userInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else if (userInput[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            CommandLog.recordCommand(rawInput);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return new DeleteCommand(userInput);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else if (userInput[0].equals(\"list\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else if (userInput[0].equals(\"remind\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return new RemindCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else if (userInput[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            CommandLog.recordCommand(rawInput);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return new DoneCommand(userInput);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else if (userInput[0].equals(\"show\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return new ScheduleCommand(userInput);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else if (userInput[0].equals(\"snooze\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            return new SnoozeCommand(rawInput);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else if (userInput[0].equals(\"/avatar\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nystera"
        },
        "content": "            if (userInput[1].equals(\"stats\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nystera"
        },
        "content": "                return new CheckAvatarCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nystera"
        },
        "content": "            } else if(userInput[1].contains(\"setname\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nystera"
        },
        "content": "                return new SetNameCommand(userInput);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nystera"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nystera"
        },
        "content": "                return new InvalidCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nystera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else if (userInput[0].equals(\"achievement\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return new AchievementCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else if (userInput[0].equals(\"/add\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            CommandLog.recordCommand(rawInput);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return new AddCommand(userInput);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else if (userInput[0].equals(\"timer\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            return new TimerCommand(userInput);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else if (userInput[0].equals(\"undo\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            return new UndoCommand(userInput);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else if (userInput[0].equals(\"stoptimer\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            return new StopTimerCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else if (userInput[0].equals(\"showtimer\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            return new ShowTimerCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return new InvalidCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 54,
      "yzia2000": 11,
      "nystera": 20,
      "jingkang97": 3,
      "ngjiewu": 2
    }
  },
  {
    "path": "src/main/java/seedu/hustler/parser/DateTimeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * Handles LocalDateTime conversion to String and vice versa for each add command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Date and time with format d/M/uuuu HHmm."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static final String DATE_TIME_FORMATTER \u003d \"d/M/uuuu HHmm\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Date with format d/M/uuuu HHmm."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static final String DATE_FORMATTER \u003d \"d/M/uuuu\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Convert type String to type LocalDateTime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param dateTime date and time of type String."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return date and time of type LocalDateTime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static LocalDateTime getDateTime(String dateTime) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            localDateTime \u003d LocalDateTime.parse(dateTime,formatter);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return localDateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            System.out.println(\"Wrong date time format!!!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Convert type String to type LocalDateTime."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param date date of type String."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return date of type LocalDateTime."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static LocalDateTime getDate(String date) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        LocalDateTime localDate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_FORMATTER);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            localDate \u003d LocalDateTime.parse(date,formatter);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return localDate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            System.out.println(\"Wrong date format!!!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Convert type LocalDateTime to String."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param localDateTime date and time of type LocalDateTime."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return date and time of type String."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static String convertDateTime(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        String dateTime;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            dateTime \u003d localDateTime.format(formatter);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return dateTime;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            System.out.println(\"Wrong date and time format!!!\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Convert type LocalDate to String."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param localDate date of type LocalDateTime."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return date of type String."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static String convertDate(LocalDateTime localDate) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        String date;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_FORMATTER);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            date \u003d localDate.format(formatter);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            System.out.println(\"Wrong date format!!!\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Makes use of the DateTimeFormatter and LocalDateTime class"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * to parse the user input date time and initializes the"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * dateBy member variable."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static String toDateTimeString(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        String suffix;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        switch (dateTime.getDayOfMonth() % 10) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            suffix \u003d \"st\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            suffix \u003d \"nd\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            suffix \u003d \"rd\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            suffix \u003d \"th\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if (dateTime.getDayOfMonth() \u003e 3 \u0026\u0026 dateTime.getDayOfMonth() \u003c 21) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            suffix \u003d \"th\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        DateTimeFormatter printFormat \u003d DateTimeFormatter.ofPattern(\"d\u0027\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                + suffix + \"\u0027 \u0027of\u0027 MMMM uuuu\u0027,\u0027 h:mma\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return dateTime.format(printFormat);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 1,
      "jingkang97": 129
    }
  },
  {
    "path": "src/main/java/seedu/hustler/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Abstract class for parsing."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public abstract class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Abstract method that parses string description to another object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public abstract Object parse(String description) throws CommandLineException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 2,
      "yzia2000": 7,
      "nystera": 4
    }
  },
  {
    "path": "src/main/java/seedu/hustler/parser/ParserForCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class ParserForCommand {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * The name of the command to parse for."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Initializes command variable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param command name of command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public ParserForCommand(String command) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.command \u003d command; "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    } "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * A method that parses a user input string of index"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * to integer index."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param description description that contains string integer"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return Integer object that is the parsed integer index"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public Integer parseIndex(String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        switch (this.command) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        case \"snooze\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return Integer.valueOf(Integer.parseInt(description) - 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 34,
      "nystera": 1
    }
  },
  {
    "path": "src/main/java/seedu/hustler/task/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import static seedu.hustler.parser.DateTimeParser.convertDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "import static seedu.hustler.parser.DateTimeParser.toDateTimeString;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": " * A class that inherits from the abstract class Task. This task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": " * type is a Deadline which specifies the date and time before"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": " * which the Task should be completed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * LocalDateTime to store the deadline\u0027s date and time."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Initializes description, default difficulty and by."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public Deadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Initializes description, user input difficulty and by."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Deadline(String description,  LocalDateTime by, String difficulty, String tag) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": "        super(description, difficulty, tag);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Overrides the toString method in Task to display task type and date time."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return a string with the target info."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + toDateTimeString(getDateTime()) + \")\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Overrides the toSaveFormat function to include task type and date time."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return a string with pipe separated info."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public String toSaveFormat() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return \"D|\" + super.toSaveFormat() + \"|\" + convertDateTime(by);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Checks equality with another Deadline instance."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param temp the instance to compare against."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return true or false to the comparison."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public boolean equals(Deadline temp) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (this.description.equals(temp.description) \u0026\u0026 this.by \u003d\u003d temp.by) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void setDateTime(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.by \u003d localDateTime;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 39,
      "nystera": 16,
      "jingkang97": 8,
      "ngjiewu": 12
    }
  },
  {
    "path": "src/main/java/seedu/hustler/task/DetectAnomalies.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * Detect any clash of date and time between tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * It also detects if tasks with same description has been added multiple times."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public class DetectAnomalies {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Test if there is any clashes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return true or false."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static Boolean test(Task task, ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        String[] descriptionToken \u003d task.getDescription().split(\"/by|/at\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        boolean check \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            boolean descriptionMatch \u003d list.get(i).getDescription().trim().equals(descriptionToken[0].trim());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            if (task.getDateTime() \u003d\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                if (descriptionMatch) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    check \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            } else if (list.get(i).getDateTime() !\u003d null \u0026\u0026 task.getDateTime().isEqual(list.get(i).getDateTime()) || descriptionMatch) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                check \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            else if (list.get(i).getDateTime() \u003d\u003d null \u0026\u0026 descriptionMatch) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                check \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return check;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nystera": 1,
      "jingkang97": 38,
      "ngjiewu": 1
    }
  },
  {
    "path": "src/main/java/seedu/hustler/task/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import static seedu.hustler.parser.DateTimeParser.convertDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "import static seedu.hustler.parser.DateTimeParser.toDateTimeString;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": " * A class that inherits from the abstract class Task. This task type"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": " * is an Event which specifies a Task at a specific date and time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * LocalDateTime to store the event\u0027s date and time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Initializes description, default difficulty and at."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Event(String description, LocalDateTime at) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Initializes description, user input difficulty and by."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Event(String description,  LocalDateTime at, String difficulty, String tag) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "        super(description, difficulty, tag);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Overrides the toString method in Task to display task type and date time."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return a string with the target info."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + toDateTimeString(this.at) + \")\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Overrides the toSaveFormat function to include task type and date time."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return a string with pipe separated info."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public String toSaveFormat() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return \"E|\" + super.toSaveFormat() + \"|\" + convertDateTime(at);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Checks equality with another Event instance."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param temp the instance to compare against."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return true or false to the comparison."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public boolean equals(Event temp) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (this.description.equals(temp.description) \u0026\u0026 this.at \u003d\u003d temp.at) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void setDateTime(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.at \u003d localDateTime;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 45,
      "nystera": 14,
      "jingkang97": 8,
      "ngjiewu": 7
    }
  },
  {
    "path": "src/main/java/seedu/hustler/task/Reminders.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * Display reminders list when the app first start"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * and user can type command \"remind\" to bring up reminders after that."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public class Reminders {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Reminder list that contains tasks that are overdue."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static ArrayList\u003cTask\u003e overDueList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Reminder list that contain tasks with less than 30 minutes or less till deadline."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static ArrayList\u003cTask\u003e lastDayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Reminder list htat contain tasks with less than 24 hours or less till deadline."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static ArrayList\u003cTask\u003e lastThirtyMinutesList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * 24 hours converted to seconds."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static final int TWENTY_FOUR_HOURS \u003d 86400;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * 30 minutes converted to seconds."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static final int THIRTY_MINUTES \u003d 1800;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * List of overdue tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param list current TaskList."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return a list of overdue tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static ArrayList\u003cTask\u003e overdue(TaskList list) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        overDueList.clear();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            LocalDateTime currentTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            boolean done \u003d list.get(i).isDone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            boolean checkDeadline \u003d list.get(i).toString().contains(\"[D]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            boolean checkEvent \u003d list.get(i).toString().contains(\"[E]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            boolean checkRange \u003d list.get(i).toString().contains(\"[R]\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            if (!done \u0026\u0026 checkDeadline || checkEvent || checkRange) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                long duration \u003d Duration.between(currentTime, list.get(i).getDateTime()).getSeconds();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                if (duration \u003c\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    overDueList.add(list.get(i));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return overDueList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * List of tasks that are due in 24 hours or less."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param list current TaskList."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return a list of tasks that are due in 24 hours or less."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static ArrayList\u003cTask\u003e lastDay(TaskList list) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        lastDayList.clear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            LocalDateTime currentTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            boolean done \u003d list.get(i).isDone;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            boolean checkDeadline \u003d list.get(i).toString().contains(\"[D]\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            boolean checkEvent \u003d list.get(i).toString().contains(\"[E]\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            boolean checkRange \u003d list.get(i).toString().contains(\"[R]\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            if (!done \u0026\u0026 checkDeadline || checkEvent || checkRange) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                long duration \u003d Duration.between(currentTime, list.get(i).getDateTime()).getSeconds();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                if (duration \u003c\u003d TWENTY_FOUR_HOURS \u0026\u0026 duration \u003e THIRTY_MINUTES) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    lastDayList.add(list.get(i));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return lastDayList;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * List of tasks that are due in 30 minutes or less."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param list current TaskList."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return a list of tasks that are due in 30 minutes or less."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static ArrayList\u003cTask\u003e lastThirtyMins(TaskList list) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        lastThirtyMinutesList.clear();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            LocalDateTime currentTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            boolean done \u003d list.get(i).isDone;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            boolean checkDeadline \u003d list.get(i).toString().contains(\"[D]\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            boolean checkEvent \u003d list.get(i).toString().contains(\"[E]\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            boolean checkRange \u003d list.get(i).toString().contains(\"[R]\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            if (!done \u0026\u0026 checkDeadline || checkEvent || checkRange) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                long duration \u003d Duration.between(currentTime, list.get(i).getDateTime()).getSeconds();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                if (duration \u003c\u003d THIRTY_MINUTES \u0026\u0026 duration \u003e 0) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    lastThirtyMinutesList.add(list.get(i));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return lastThirtyMinutesList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Runs all types of reminders list at once."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param list current TaskList."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static void runAll(TaskList list) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        overdue(list);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        lastThirtyMins(list);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        lastDay(list);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Display reminders list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static void displayReminders() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if (!overDueList.isEmpty()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            if (overDueList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                System.out.println(\"The task below is overdue!!!\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                System.out.print(\"1.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                for (Task i : overDueList) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    System.out.println(i);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                System.out.println(\"The tasks below are overdue!!!\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                for (int i \u003d 0; i \u003c overDueList.size(); i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    System.out.println(i + 1 + \".\" + overDueList.get(i));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if (!lastThirtyMinutesList.isEmpty()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            if (lastThirtyMinutesList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                System.out.println(\"The task below is due in 30 minutes or less!!!\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                System.out.print(\"1.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                for (Task i : lastThirtyMinutesList) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    System.out.println(i);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                System.out.println(\"The tasks below are due in 30 minutes or less!!!\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                for (int i \u003d 0; i \u003c lastThirtyMinutesList.size(); i++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    System.out.println(i + 1 + \".\" + lastThirtyMinutesList.get(i));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if (!lastDayList.isEmpty()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            if (lastDayList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                System.out.println(\"The task below is due in 24 hours or less!!!\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                System.out.print(\"1.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                for (Task i : lastDayList) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    System.out.println(i);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                System.out.println(\"The tasks below are due in 24 hours or less!!!\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                for (int i \u003d 0; i \u003c lastDayList.size(); i++) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    System.out.println(i + 1 + \".\" + lastDayList.get(i));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * For testing, check if task that are overdue exist in overDueList."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return true if overDueList exist."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static boolean exist() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        boolean check \u003d false;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if (!overDueList.isEmpty()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            check \u003d true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return check;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nystera": 1,
      "jingkang97": 176
    }
  },
  {
    "path": "src/main/java/seedu/hustler/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.variables.Difficulty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.variables.Tag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * An abstract class that acts as a template for ToDo, Deadline and Event."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * String that contains the description of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Boolean which states whether the task is done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * String that states the difficulty of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Default difficulty will be M."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nystera"
        },
        "content": "    protected Difficulty difficulty;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The one-word String tagged onto the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": "    protected Tag tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Initializes description, sets isDone as false and difficulty as M."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.difficulty \u003d new Difficulty(\"M\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Initializes description, sets isDone as false and difficulty"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * according to user\u0027s input."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Task(String description, String difficulty, String tagName) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.difficulty \u003d new Difficulty(difficulty);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.tag \u003d new Tag(tagName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the status of the task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a symbol specifying whether a task has been completed or not."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Marks a class as complete."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markAsDone(TaskList list) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return string description."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Returns the difficulty of the task."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @return string difficulty."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Difficulty getDifficulty() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return this.difficulty;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Returns the tag of the task."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the task\u0027s tag."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String getTag() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this.tag.getTagName();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a string that displays all information"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * about the task in a user readable format."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the status and description of the task."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"]\" + this.getDifficulty().toString() +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nystera"
        },
        "content": "                this.tag.toString() + \" \" +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nystera"
        },
        "content": "            this.getDescription();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a disc savable csv format of the task info."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @return a pipe separated string of the status, difficulty and description."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toSaveFormat() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return (this.isDone ? 1 : 0) + \"|\" + this.difficulty.toString() + \"|\" +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nystera"
        },
        "content": "                this.tag.tagName + \"|\"+"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nystera"
        },
        "content": "                this.description;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks whether an input task is equal to current object."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param temp input task"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true or false to comparison."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Task temp) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return this.description.equals(temp.description);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract LocalDateTime getDateTime();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public abstract void setDateTime(LocalDateTime localDateTime);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 1,
      "nystera": 29,
      "jingkang97": 1,
      "ngjiewu": 24,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/hustler/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.data.CommandLog;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.data.AvatarStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.data.CommandLog;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.data.Schedule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.game.achievement.AchievementList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.game.achievement.AddTask;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.game.achievement.DoneTask;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import static seedu.hustler.game.achievement.AddTask.addAchievementLevel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import static seedu.hustler.game.achievement.DoneTask.doneAchievementLevel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": "import static seedu.hustler.parser.DateTimeParser.getDateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * A list of tasks that has a java ArrayList at its core. Contains methods"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * that add, remove and perform operations on elements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * of the list like mark as done."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * ArrayList of Tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private ArrayList\u003cTask\u003e list \u003d new  ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Ui instance that communicates errors with the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Schedule instance to plan schedule."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private Schedule schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Initializes list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Returns a task at a particular index."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param index index of the task you want"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return task at that index"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Returns size of task list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return length of tasklist."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Checks whether list is empty or not."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return true or false to whether the internal ArrayList is empty or not."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return list.isEmpty();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Adds a task to the ArrayList based on the task type and task description."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Parses the description in case of event or deadline."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Handles exceptions."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param taskType the type of task eg. todo, event, deadline"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param taskDescriptionFull the description that follows the task type."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void add(String taskType, String taskDescriptionFull) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nystera"
        },
        "content": "        List\u003cString\u003e splitInput \u003d Arrays.asList(taskDescriptionFull.split(\" \"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nystera"
        },
        "content": "        String difficulty \u003d \"\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nystera"
        },
        "content": "        String tag \u003d \"\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (splitInput.contains(\"/d\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nystera"
        },
        "content": "            int dIndex \u003d splitInput.indexOf(\"/d\") + 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nystera"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nystera"
        },
        "content": "                difficulty \u003d splitInput.get(dIndex);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nystera"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nystera"
        },
        "content": "                difficulty \u003d \"\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nystera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (splitInput.contains(\"-tag\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nystera"
        },
        "content": "            int tIndex \u003d splitInput.indexOf(\"-tag\") + 1;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nystera"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nystera"
        },
        "content": "                tag \u003d splitInput.get(tIndex);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nystera"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nystera"
        },
        "content": "                tag \u003d \"\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nystera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nystera"
        },
        "content": "        String onlyDescription \u003d getDescription(splitInput);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        boolean checkAnomaly \u003d true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if (taskType.equals(\"todo\") \u0026\u0026 !DetectAnomalies.test(new ToDo(taskDescriptionFull), list)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nystera"
        },
        "content": "                list.add(new ToDo(onlyDescription, difficulty, tag));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            checkAnomaly \u003d false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else if (taskType.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nystera"
        },
        "content": "                String timeStr \u003d getTime(splitInput);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nystera"
        },
        "content": "                LocalDateTime by \u003d getDateTime(timeStr);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nystera"
        },
        "content": "                if (!DetectAnomalies.test(new Deadline(taskDescriptionFull, by), list)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    list.add(new Deadline(onlyDescription, by, difficulty, tag));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    String taskDate \u003d getOnlyDate(splitInput);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    if (Schedule.isValidDate(taskDate)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nystera"
        },
        "content": "                        schedule.addToSchedule(list.get(list.size() - 1), schedule.convertStringToDate(taskDate));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    checkAnomaly \u003d false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                ui.wrong_description_error();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nystera"
        },
        "content": "            } catch (ParseException ignore) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nystera"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else if (taskType.equals(\"event\")) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nystera"
        },
        "content": "                String timeStr \u003d getTime(splitInput);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nystera"
        },
        "content": "                LocalDateTime at \u003d getDateTime(timeStr);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nystera"
        },
        "content": "                if (!DetectAnomalies.test(new Event(taskDescriptionFull, at), list)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    list.add(new Event(onlyDescription, at, difficulty, tag));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    String taskDate \u003d getOnlyDate(splitInput);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    if (Schedule.isValidDate(taskDate)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nystera"
        },
        "content": "                        schedule.addToSchedule(list.get(list.size() - 1), schedule.convertStringToDate(taskDate));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    checkAnomaly \u003d false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                ui.wrong_description_error();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nystera"
        },
        "content": "            } catch (ParseException ignore) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nystera"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (!CommandLog.isRestoring()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            if (!checkAnomaly) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    AddTask.increment();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    AddTask.updateAchievementLevel();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    AddTask.updatePoints();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    AchievementList.updateAddTask(addAchievementLevel);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                    String output \u003d \"\\t  \" + list.get(list.size() - 1).toString();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                    System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                    System.out.println(\"\\tGot it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                    System.out.println(output);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                    System.out.println(\"\\tNow you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                    System.out.println(\"\\t_____________________________________\\n\\n\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                System.out.println(\"Task clashes with another existing task in the list!\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Returns the core ArrayList inside the TaskList object."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return ArrayList of Tasks."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public ArrayList\u003cTask\u003e return_list() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Marks a task at index as done."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param i index of the task to mark as done."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @throws IndexOutOfBoundsException if an out of bounds index is requested."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void doTask(int i) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            list.get(i).markAsDone();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            if (list.get(i).isDone) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                if (!CommandLog.isRestoring()) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    DoneTask.increment();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    DoneTask.updateAchievementLevel();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    DoneTask.updatePoints();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    AchievementList.updateDoneTask(doneAchievementLevel);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                    System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                    System.out.println(\"\\tNice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                    System.out.println(\"\\t  \" + (i + 1) + \".\" + list.get(i).toString());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                    System.out.println(\"\\t_____________________________________\\n\\n\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nystera"
        },
        "content": "                Hustler.avatar.gainXp();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nystera"
        },
        "content": "                AvatarStorage.save(Hustler.avatar);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            ui.task_doesnt_exist_error();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } catch (IOException ignore) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Removes task at index."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param i index at which task is removed."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @throws IndexOutOfBoundsException if an out of bounds index is requested."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void removeTask(int i) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            final Task lastTask \u003d list.get(i);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            list.remove(i);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            System.out.println(\"\\tNoted. I have removed this task:\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            System.out.println(\"\\t  \" + (i + 1) + \".\" + lastTask.toString());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            System.out.println(\"\\tNow there are \" + list.size() + \" tasks left.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            System.out.println(\"\\t_____________________________________\\n\\n\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            ui.task_doesnt_exist_error();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Snoozes task at index."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param i index at which task is snoozed."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param userInput full description of the user\u0027s input."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @throws IndexOutOfBoundsException if an out of bounds index is requested."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void snoozeTask(int i, String[] userInput) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            if (userInput[2].contains(\"/\")) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                LocalDateTime localDateTime \u003d getDateTime(userInput[2] + \" \" + userInput[3]);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                list.get(i).setDateTime(localDateTime);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                int num \u003d Integer.parseInt(userInput[2]);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                LocalDateTime ldt \u003d list.get(i).getDateTime();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                switch (userInput[3]) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                case \"minutes\":"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    list.get(i).setDateTime(ldt.plusMinutes(num));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                case \"hours\":"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    list.get(i).setDateTime(ldt.plusHours(num));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                case \"days\":"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    list.get(i).setDateTime(ldt.plusDays(num));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                case \"weeks\":"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    list.get(i).setDateTime(ldt.plusWeeks(num));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                case \"months\":"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    list.get(i).setDateTime(ldt.plusMonths(num));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    System.out.println(\"You have typed in the wrong format. Please re-enter the snooze command.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            System.out.println(\"\\tGot it. You have snoozed the task.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            System.out.println(\"\\t\" + list.get(i).toString());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            ui.task_doesnt_exist_error();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Displays the list of tasks contained in the object."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void displayList() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        // If user inputs list without appending list even once."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (list.isEmpty()) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            ui.show_empty_list_error();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        System.out.println(\"\\tHere are the tasks in your list:\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            System.out.println(\"\\t\" + (i + 1) + \".\" + list.get(i).toString());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        System.out.println(\"\\t_____________________________________\\n\\n\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Finds task which contains a character sequence supplied."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param taskDescription a character sequence from which tasks will be found."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void findTask(String taskDescription) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        ArrayList\u003cInteger\u003e matchingTasks \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nystera"
        },
        "content": "            if (list.get(i).getDescription().contains(taskDescription)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nystera"
        },
        "content": "                || list.get(i).getTag().equalsIgnoreCase(taskDescription)) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                matchingTasks.add(Integer.valueOf(i));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (matchingTasks.isEmpty()) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            ui.task_doesnt_exist_error();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        System.out.println(\"\\tFound \" + matchingTasks.size() + \". Here you go.\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        for (Integer id : matchingTasks) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            System.out.println(\"\\t  \" + (id + 1) + \".\" + list.get(id).toString());"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        System.out.println(\"\\t_____________________________________\\n\\n\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Task getLastTask() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this.list.get(list.size() - 1);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private String getDescription(List\u003cString\u003e splitInput) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "nystera"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "nystera"
        },
        "content": "        for (String str : splitInput) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "nystera"
        },
        "content": "            if (str.equals(\"/d\") || str.equals(\"-tag\") || str.equals(\"/by\")"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "nystera"
        },
        "content": "                || str.equals(\"/at\")) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "nystera"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "nystera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "nystera"
        },
        "content": "            description +\u003d str + \" \";"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return description.trim();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private String getTime(List\u003cString\u003e splitInput) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "nystera"
        },
        "content": "        String time \u003d \"\";"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "nystera"
        },
        "content": "        for (int i \u003d 0; i \u003c splitInput.size(); i++) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "nystera"
        },
        "content": "            if (splitInput.get(i).contains(\"/by\") || (splitInput.get(i).contains(\"/at\"))) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "nystera"
        },
        "content": "                for (int j \u003d i + 1; j \u003c i + 3; j++) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    time +\u003d splitInput.get(j) + \" \";"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nystera"
        },
        "content": "                }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "nystera"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "nystera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return time.trim();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private String getOnlyDate(List\u003cString\u003e splitInput) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "nystera"
        },
        "content": "        String date \u003d \"\";"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "nystera"
        },
        "content": "        for (int i \u003d 0; i \u003c splitInput.size(); i++) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "nystera"
        },
        "content": "            if (splitInput.get(i).contains(\"/by\") || (splitInput.get(i).contains(\"/at\"))) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "nystera"
        },
        "content": "                date +\u003d splitInput.get(i + 1);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "nystera"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nystera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return date.trim();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Checks whether two instances of TaskList are equal."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param temp TaskList instance to compare against."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return true or false to the comparison."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public boolean equals(TaskList temp) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (this.size() !\u003d temp.size()) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            System.out.println(\"Length not equal\");"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        for (int i \u003d 0; i \u003c this.size(); i++) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            if (!this.get(i).equals(temp.get(i))) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                System.out.println(this.get(i).description + temp.get(i).description + \"?\");"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 7,
      "yzia2000": 192,
      "nystera": 105,
      "jingkang97": 26,
      "ngjiewu": 50
    }
  },
  {
    "path": "src/main/java/seedu/hustler/task/ToDo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "//import com.sun.tools.javac.comp.Todo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * A class that inherits from the abstract class Task. This task type"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * is a simple todo that can be marked as done when done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * LocalDateTime to store the todo\u0027s date and time."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    protected LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Initializes description and default difficulty."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Initializes description and user input difficulty."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public ToDo(String description, String difficulty, String tag) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "        super(description, difficulty, tag);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Overrides the method to display the task type along"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * with inherited task string."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return details of the task in a user readable format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Overrides the method to display the task type along"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * with inherited task string saveAchievements format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return inherited string plus task format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public String toSaveFormat() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return \"T|\" + super.toSaveFormat();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Checks equality with another Todo instance."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param temp the instance to compare against."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return true or false to the comparison."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public boolean equals(ToDo temp) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this.description.equals(temp.description);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return this.localDateTime;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void setDateTime(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.localDateTime \u003d localDateTime;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 32,
      "nystera": 10,
      "jingkang97": 20,
      "ngjiewu": 8
    }
  },
  {
    "path": "src/main/java/seedu/hustler/task/variables/Difficulty.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.task.variables;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": " * The class that stores the difficulty of the task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class Difficulty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Enumerator that separates the level of the difficulty."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "     enum Level {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "        L,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "        M,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "        H"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The level of the difficulty."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private Level level;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Constructs a difficulty level based on user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Will automatically set default difficulty as M (medium)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * if user input cannot be parsed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param difficulty the level of the difficulty."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Difficulty(String difficulty) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "         switch (difficulty.toLowerCase()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "             case \"l\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": "             case \"low\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "             this.level \u003d Level.L;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "             break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "             case \"m\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "             case \"medium\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": "             default:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nystera"
        },
        "content": "             this.level \u003d Level.M;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nystera"
        },
        "content": "             break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nystera"
        },
        "content": "             case \"h\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nystera"
        },
        "content": "             case \"high\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nystera"
        },
        "content": "             this.level \u003d Level.H;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return \"[\" + this.level.toString() + \"]\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 50
    }
  },
  {
    "path": "src/main/java/seedu/hustler/task/variables/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.task.variables;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": " * The class that handles the tags of the Tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The one-word tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Constructs a tag with the string given."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param name the tag name from the user input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Tag(String name) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "        tagName \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * returns the String of the tagName."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the tag tagName."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this.tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (!this.tagName.equals(\"\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "           return \"[#\" + this.tagName + \"]\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 36
    }
  },
  {
    "path": "src/main/java/seedu/hustler/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.data.CommandLog;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A class dedicated to performing interactions with the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Takes inputs and contains methods that output error messages."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static final String LINE \u003d \"\\t_____________________________________\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Print with formatting."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void show_message(String message) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        System.out.println(\"\\t\" + message);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        System.out.println(\"\\t_____________________________________\\n\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints an output message if list history was not saved."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show_save_error() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        System.out.println(\"\\tCouldn\u0027t saveAchievements file.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t_____________________________________\\n\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints a bye message if user enters bye."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show_bye_message() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\tBye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints an error message if user does not enter a valid command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void correct_command_error() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (!CommandLog.isRestoring()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            System.out.println(\"\\tPlease enter a valid command: todo, \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                + \"deadline, event, doafter, list, bye, find, delete.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            System.out.println(\"\\t_____________________________________\\n\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints an error message if the format of event or deadline"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * commands is not correct."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void wrong_description_error() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(\"\\tDescription needs a \u0027/\u0027 before by/at\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t_____________________________________\\n\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints an error message if user performs an operation on a nonexistant"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * task."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void task_doesnt_exist_error() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\tTask doesn\u0027t exist. Please choose another.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t_____________________________________\\n\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints error message if an empty list is asked to be displayed."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show_empty_list_error() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\tList is empty. Please type \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"another command apart from list.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t_____________________________________\\n\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints an error message if a command like find, delete, todo, deadline,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * event or others is entered without a following description."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void empty_description_error() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\tPlease enter a description after the command.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t_____________________________________\\n\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints an error message when the format of the date/time"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * entered for event or deadline is not correct."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void date_time_error() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\tFormat of time is incorrect either in command \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            + \"or saveAchievements file. Saving event/deadline as mentioned without date \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"time parsing.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t_____________________________________\\n\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints an error message when the format of date is wrong when showing schedule."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void dateFormatError() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\tFormat of date invalid. Please type it in in DD/MM/YYYY\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints an error message when the format of show command is wrong."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showFormatError() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\tShow command invalid. Please only type \\\"show \u003cDD/MM/YYYY\u003e\\\"\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * A hello message when hustler is ran."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show_opening_string() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        String logo \u003d \" _   _   _    _     _____  ______   _       ___      ___\\n\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                + \"|  | |  | | |  |  |  / ____/ |__   __|  | |     |  __|  / __  \\\\\\n\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                + \"|  |_| | | |  |  |   |  \\\\___      |  |    | |      | |__  | |__/ /\\n\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                + \"|  _  | | |   |  |   \\\\____ \\\\     |  |    | |     |  __|  |  _  /\\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                + \"|  | | | |  \\\\_/ |    ___/  |     |  |    | |___ |  |__  | / \\\\ \\\\\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                + \"|_| |_|  \\\\___/  /_____/      |_|     |____||____| |_|  \\\\_\\\\\\n\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 3,
      "yzia2000": 9,
      "nystera": 2,
      "jingkang97": 6,
      "ngjiewu": 9,
      "-": 116
    }
  },
  {
    "path": "src/main/java/seedu/hustler/ui/timer/timer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.ui.timer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "public class timer implements Runnable {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    protected int hours;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    protected int minutes;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    protected int seconds;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public timer() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        hours \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        minutes \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        seconds \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public timer(String hours, String minutes, String seconds) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        this.hours \u003d Integer.parseInt(hours);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        this.minutes \u003d Integer.parseInt(minutes);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        this.seconds \u003d Integer.parseInt(seconds);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        System.out.println(\"Timer mode has commenced! Time set: \" + hours + \"hr \" + minutes + \"min \" + seconds + \"sec\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            while (hours !\u003d 0 || minutes !\u003d 0 | seconds !\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                Thread.sleep(1000);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                decrementSeconds();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } catch (Exception e) {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "\tSystem.out.println(\"Timer mode has ended.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void decrementSeconds() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (seconds !\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            seconds--;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else  {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            seconds \u003d 59;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            decrementMinutes();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void decrementMinutes() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (minutes !\u003d 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            minutes--;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            minutes \u003d 59;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            decrementHours();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void decrementHours() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        hours--;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void printTimeLeft() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        System.out.println(\"time remaining: \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                           + (hours \u003c 10 ? \"0\" : \"\") + hours + \"hr \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                           + (minutes \u003c 10 ? \"0\" : \"\") + minutes + \"min \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                           + (seconds \u003c 10 ? \"0\" : \"\") + seconds + \"sec\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 63
    }
  },
  {
    "path": "src/main/java/seedu/hustler/ui/timer/timerManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.ui.timer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "public class timerManager {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    protected static timer countdownTimer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    protected static Thread countdownThread;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public timerManager() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "\t    countdownTimer \u003d new timer();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            countdownThread \u003d new Thread(countdownTimer);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void setTimer(String time) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        String[] timeParts \u003d time.split(\" \");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        countdownTimer \u003d new timer(timeParts[0], timeParts[1], timeParts[2]);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void startTimer() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        countdownThread \u003d new Thread(countdownTimer);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        countdownThread.start();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void printTimeLeft() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        countdownTimer.printTimeLeft();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static void stopTimer() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            countdownThread.interrupt();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 30
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"seedu.hustler.MainWindow\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"177.0\" layoutY\u003d\"560.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\" prefWidth\u003d\"321.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"498.0\" layoutY\u003d\"560.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutY\u003d\"-32.0\" prefHeight\u003d\"590.0\" prefWidth\u003d\"574.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "      \u003cAnchorPane minWidth\u003d\"100.0\" prefHeight\u003d\"600.0\" prefWidth\u003d\"176.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            \u003cButton layoutY\u003d\"0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"70.0\" prefWidth\u003d\"176.0\" text\u003d\"Tasks\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            \u003cButton layoutY\u003d\"70.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"70.0\" prefWidth\u003d\"176.0\" text\u003d\"Task Completion Mode\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            \u003cButton layoutY\u003d\"140.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"70.0\" prefWidth\u003d\"176.0\" text\u003d\"Achievements\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            \u003cButton layoutY\u003d\"210.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"70.0\" prefWidth\u003d\"176.0\" text\u003d\"Statistics\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            \u003cButton layoutY\u003d\"280.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"70.0\" prefWidth\u003d\"176.0\" text\u003d\"Avatar\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            \u003cButton layoutY\u003d\"350.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"70.0\" prefWidth\u003d\"176.0\" text\u003d\"Shop\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            \u003cButton layoutY\u003d\"420.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"70.0\" prefWidth\u003d\"176.0\" text\u003d\"Arena\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            \u003cButton layoutY\u003d\"490.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"70.0\" prefWidth\u003d\"176.0\" text\u003d\"Settings\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "      \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "      \u003cPane layoutX\u003d\"175.0\" opacity\u003d\"0.5\" prefHeight\u003d\"558.0\" prefWidth\u003d\"399.0\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            \u003cTextArea fx:id\u003d\"console\" layoutY\u003d\"107.0\" prefHeight\u003d\"451.0\" prefWidth\u003d\"399.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"107.0\" prefWidth\u003d\"399.0\" style\u003d\"-fx-background-color: #00FF00;\" text\u003d\"HUSTLER\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                  \u003cFont size\u003d\"52.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "         \u003c/children\u003e\u003c/Pane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ngjiewu": 44
    }
  },
  {
    "path": "src/test/java/seedu/hustler/HustlerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *  Test class for Duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class HustlerTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    * Dummy test function."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 2,
      "-": 16
    }
  },
  {
    "path": "src/test/java/seedu/hustler/command/ParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Test class for Parser."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Dummy test."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 1,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/hustler/data/ScheduleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "import static seedu.hustler.parser.DateTimeParser.getDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ScheduleTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void taskInScheduleTest() throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        LocalDateTime by \u003d getDateTime(\"10/10/2019 1234\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Schedule schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String description \u003d \"test description\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String dateBy \u003d \"10/10/2019 1234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String dateOnly \u003d \"10/10/2019\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Date date \u003d schedule.convertStringToDate(dateOnly);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Deadline deadline \u003d new Deadline(description, by);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        schedule.addToSchedule(deadline, date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Task toCheckTask \u003d schedule.getDatedList(date).get(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(deadline.toString(), toCheckTask.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 4,
      "jingkang97": 5,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/hustler/data/StorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Test class for storage."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Dummy test for storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        File history \u003d new File(\"data/test.txt\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        history.delete();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new Storage(\"data/test.txt\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList list \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArrayEquals(list.return_list().toArray(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            (new ArrayList\u003cTask\u003e()).toArray());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(\"todo\", \"Work on CS2113T feature list\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        list.add(\"deadline\", \"Finish Feature list /by 1/1/2019 1800\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(\"event\", \"Student life fair /at 1/1/2019 2400\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.save(list.return_list());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Couldn\u0027t be saved.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        history.delete();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 1,
      "nystera": 3,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/hustler/game/avatar/Avatar.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.avatar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " *  Test class for Avatar."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class Avatar {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    * Dummy test function."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 17,
      "nystera": 1
    }
  },
  {
    "path": "src/test/java/seedu/hustler/game/avatar/Level.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.avatar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " *  Test class for Level."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class Level {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    * Dummy test function."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 17,
      "nystera": 1
    }
  },
  {
    "path": "src/test/java/seedu/hustler/game/avatar/Stats.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.avatar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " *  Test class for Stats."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class Stats {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    * Dummy test function."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 17,
      "nystera": 1
    }
  },
  {
    "path": "src/test/java/seedu/hustler/reminders/RemindersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.reminders;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.Reminders;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * Test class for deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public class RemindersTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Check if oneDay reminder exist."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        ArrayList\u003cTask\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        LocalDateTime localDateTime \u003d LocalDateTime.of(2019,8,1,1,1,1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        temp.add(new Deadline(\"assignemntsss\",localDateTime));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        TaskList list \u003d new TaskList(temp);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Reminders.overdue(list);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        assertTrue(Reminders.exist());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 5,
      "jingkang97": 28
    }
  },
  {
    "path": "src/test/java/seedu/hustler/task/DeadlineTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "import static seedu.hustler.parser.DateTimeParser.getDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Test class for deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Dummy test for deadline."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        LocalDateTime localDateTimeOne \u003d getDateTime(\"5/5/2019 1800\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Deadline task1 \u003d new Deadline(\"meet Kartike.\", localDateTimeOne);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        assertEquals(task1.description, \"meet Kartike.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        /* assertEquals(task1.dateBy, \"5th of May 2019, 6:00PM\"); */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        assertEquals(task1.by, localDateTimeOne);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        assertEquals(task1.getDateTime(), LocalDateTime.of(2019,5,5,18,0));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        /* Deadline task2 \u003d new Deadline(\"meet Kartike.\", \"next week\"); */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        /* assertEquals(task2.description, \"meet Kartike.\"); */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        /* assertEquals(task2.dateBy, \"next week\"); */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        /* assertEquals(task2.by, \"next week\"); */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        LocalDateTime localDateTimeTwo \u003d getDateTime(\"5/5/2019 1200\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Deadline task3 \u003d new Deadline(\"meet Kartike.\", localDateTimeTwo);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        task3.setDateTime(LocalDateTime.of(2019,5,5,18,0));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        assertEquals(task3.getDateTime(), task1.getDateTime());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Deadline task4 \u003d new Deadline(\"meet Kartike.\", localDateTimeTwo);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        task4.setDateTime(localDateTimeOne);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        assertEquals(task4.getDateTime(), task1.getDateTime());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 26,
      "nystera": 2,
      "jingkang97": 7,
      "ngjiewu": 9
    }
  },
  {
    "path": "src/test/java/seedu/hustler/task/DetectAnomaliesTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "import static seedu.hustler.parser.DateTimeParser.getDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public class DetectAnomaliesTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Check if anomalies can be detected."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        LocalDateTime localDateTime \u003d getDateTime(\"9/9/2019 1900\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        list.add(new Deadline(\"assignemntsss\",localDateTime));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        assertTrue(DetectAnomalies.test(new Deadline(\"another assignment\",localDateTime),list));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 2,
      "jingkang97": 24
    }
  },
  {
    "path": "src/test/java/seedu/hustler/task/EventTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "import static seedu.hustler.parser.DateTimeParser.getDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Test class for Event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Dummy test for Event class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        LocalDateTime localDateTimeOne \u003d getDateTime(\"5/5/2019 1800\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Event task1 \u003d new Event(\"meet Kartike.\", localDateTimeOne);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        assertEquals(task1.description, \"meet Kartike.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        /* assertEquals(task1.dateAt, \"5th of May 2019, 6:00PM\"); */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        assertEquals(task1.at, localDateTimeOne);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        assertEquals(task1.getDateTime(), LocalDateTime.of(2019,5,5,18,0));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        /* Event task2 \u003d new Event(\"meet Kartike.\", \"next week\"); */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        /* assertEquals(task2.description, \"meet Kartike.\"); */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        /* assertEquals(task2.dateAt, \"next week\"); */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        /* assertEquals(task2.at, \"next week\"); */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        LocalDateTime localDateTimeTwo \u003d getDateTime(\"5/5/2019 1200\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Event task3 \u003d new Event(\"meet Kartike.\", localDateTimeTwo);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        task3.setDateTime(LocalDateTime.of(2019,5,5,18,0));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        assertEquals(task3.getDateTime(), task1.getDateTime());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Event task4 \u003d new Event(\"meet Kartike.\", localDateTimeTwo);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        task4.setDateTime(localDateTimeOne);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        assertEquals(task4.getDateTime(), task1.getDateTime());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 26,
      "nystera": 2,
      "jingkang97": 8,
      "ngjiewu": 8
    }
  },
  {
    "path": "src/test/java/seedu/hustler/task/TaskListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Test class for TaskListTest."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Dummy test for TaskList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 1,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/hustler/task/TaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Test for Task class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Dummy test for Task class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 1,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/hustler/task/ToDoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Test class for ToDo."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *  Dummy test for ToDo."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        ToDo task \u003d new ToDo(\"Finish work\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(task.description, \"Finish work\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nystera": 1,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/hustler/ui/UiTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Test for Ui class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Dummy test for Ui class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 1,
      "-": 18
    }
  }
]
