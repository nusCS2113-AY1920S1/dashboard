[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "group \u0027seedu.hustler\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    mainClassName \u003d \"seedu.hustler.Launcher\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  standardInput \u003d System.in"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  useJUnitPlatform()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    archiveBaseName \u003d \"hustler\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    archiveVersion \u003d \"mid-v1.3\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 1,
      "ngjiewu": 9,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/hustler/Hustler.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.data.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.game.achievement.AchievementList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.game.achievement.ConsecutiveLogin;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.game.avatar.Avatar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.game.avatar.Inventory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.game.shop.ShopList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.Reminders;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.TaskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.ui.timer.TimerManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " * A personal assistant that takes in user input and gives and performs"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * an operation that can help the user"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * in his day to day needs. Has a task list with multiple features."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "public class Hustler extends Application {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * TaskList instance that  stores all the tasks added by the"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * user and from storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static TaskList list;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * shopList stores and manages the items to purchased in Hustler."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Bought items will be added to the storage and is not able for purchase"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * in the future."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static ShopList shopList \u003d new ShopList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * achievementList stores and manage all the achievements available in Hustler."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Achievements can either be locked and unlocked."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static AchievementList achievementList \u003d new AchievementList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Storage instance that stores and loads tasks to and from"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * disk."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static TaskStorage taskStorage \u003d new TaskStorage(\"data/hustler.txt\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * UI instance that is used to take input from console"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * and display errors and responses. Handles user interaction."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Parser instance that makes sense of user input and"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * performs some operation on list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private static CommandParser parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Avatar instance that keeps track of the User\u0027s progress."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static Avatar avatar;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * TimerManager instance that starts the timer."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public static TimerManager timermanager \u003d new TimerManager();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * MemoryManager instance that starts the timer."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static MemoryManager memorymanager \u003d new MemoryManager();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * CommandLog instance that records user tasks."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static CommandLog commandlog \u003d new CommandLog();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Inventory that stores all the bought items."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static Inventory inventory \u003d new Inventory();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Initializes the essential components needed to run Hustler."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Loads existing task list and avatar."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Displays reminders at the start of Hustler."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public static void initialize() throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        ui.show_opening_string();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nystera"
        },
        "content": "        Folder.checkDirectory();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        loadStorage();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        memorymanager.createBackup();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Reminders.runAll(list);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Reminders.displayReminders();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        achievementList \u003d AchievementStorage.loadAchievements();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        ConsecutiveLogin.updateCount();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        ConsecutiveLogin.updatePoints();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        ConsecutiveLogin.updateAchievementLevel();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        achievementList.updateDedicated();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nystera"
        },
        "content": "        avatar \u003d AvatarStorage.load();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nystera"
        },
        "content": "        AvatarStorage.save(avatar);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nystera"
        },
        "content": "        shopList \u003d ShopStorage.load();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nystera"
        },
        "content": "        inventory \u003d inventory.updateInventory();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Runs Hustler until the users enters \"bye\"."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Performs operations like list, find, delete and add on the task list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Saves the list to disk for next Hustler session inside data/hustler.txt."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param rawInput full user\u0027s input inside text area of GUI."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public static void run(String rawInput) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nystera"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            Command command \u003d parser.parse(rawInput);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nystera"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            saveStorage();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } catch (CommandLineException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nystera"
        },
        "content": "            e.getErrorMsg();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Loads different data from the relevant files."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static void loadStorage() throws IOException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nystera"
        },
        "content": "        list \u003d new TaskList(taskStorage.load());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        avatar \u003d AvatarStorage.load();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        //Loads information such as number of tasks done, added, points, etc."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        AchievementStorage.loadStatus();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        AchievementStorage.createBackup(achievementList);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static void reloadBackup() throws IOException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nystera"
        },
        "content": "        list \u003d new TaskList(taskStorage.reloadBackup());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        avatar \u003d AvatarStorage.reloadBackup();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        AchievementStorage.reloadStatus();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        AchievementStorage.reloadAchievements();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Saves the task list to storage area."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static void saveStorage() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nystera"
        },
        "content": "            taskStorage.save(list.return_list());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            AvatarStorage.save(avatar);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            AchievementStorage.saveAchievements(achievementList);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            AchievementStorage.saveStatus();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            ui.show_save_error();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 33,
      "yzia2000": 40,
      "nystera": 39,
      "jingkang97": 34,
      "ngjiewu": 26
    }
  },
  {
    "path": "src/main/java/seedu/hustler/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "package seedu.hustler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngjiewu": 12
    }
  },
  {
    "path": "src/main/java/seedu/hustler/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "package seedu.hustler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " * A GUI for Hustler using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private Hustler hustler \u003d new Hustler();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setHustler(hustler);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingkang97": 2,
      "ngjiewu": 29
    }
  },
  {
    "path": "src/main/java/seedu/hustler/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "package seedu.hustler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import javafx.scene.effect.ColorAdjust;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import javafx.scene.layout.*;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.parser.DateTimeParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.task.Reminders;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import java.io.OutputStream;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "public class MainWindow extends AnchorPane{"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private TextArea console;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private PrintStream ps;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private Button task;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private Button taskCompletionMode;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private Button achievement;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private Button statistics;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private Button avatar;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private Button shop;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private Button arena;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private Button settings;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private ImageView menu;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private ImageView timer;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private ImageView trophy;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private ImageView spiderGraph;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private ImageView profile;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private ImageView trolley;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private ImageView swords;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private ImageView gear;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private AnchorPane rootPane;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private FlowPane welcomeScreen;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private Hustler hustler;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private FlowPane flowPane \u003d new FlowPane();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private ScrollPane scrollPANEE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private FlowPane heading;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Initializes essential components to run Hustler."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @throws IOException if text area could not be found."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void initialize() throws IOException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        ps \u003d new PrintStream(new Console(console));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.setOut(ps);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.setErr(ps);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        Hustler.initialize();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        StackPane stackPane \u003d new StackPane();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        welcomeScreen.setStyle(\"-fx-background-color:#2dcb70\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Rectangle whiteSpace \u003d new Rectangle();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        whiteSpace.setOpacity(0.0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        whiteSpace.setHeight(50);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        whiteSpace.widthProperty().bind(flowPane.widthProperty());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Text text \u003d new Text(\"Hi, I am Hustler!\\n What can I do for you?\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        text.setFont(Font.font(\"Gill Sans\", 30));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        text.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        text.setTextAlignment(TextAlignment.CENTER);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        stackPane.setMargin(text,new Insets(0,50,0,50));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        stackPane.setAlignment(text,Pos.CENTER);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        stackPane.getChildren().addAll(text);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        stackPane.prefWidthProperty().bind(welcomeScreen.widthProperty());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        welcomeScreen.getChildren().addAll(whiteSpace,stackPane);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void setHustler(Hustler h) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        hustler \u003d h;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Changes printing stream to text area in GUI."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public class Console extends OutputStream {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        private TextArea console;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        public Console(TextArea console) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            this.console \u003d console;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        public void appendText(String valueOf) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            Platform.runLater(() -\u003e console.appendText(valueOf));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        public void write(int b) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            appendText(String.valueOf((char)b));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Handles operations after each user\u0027s input."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void handleUserInput() throws IOException{"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if (!userInput.getText().isEmpty()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            removeWelcome();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            sendClicked();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            flowPane.setStyle(\"-fx-background-color:#ffffff\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            String token[] \u003d input.split(\" \");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            if (input.equals(\"/achievement\")) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                achievementAction();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            } else if (input.equals(\"/bye\")) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                Hustler.run(\"/bye\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                Hustler.run(input);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                scrollPANEE.setContent(console);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                console.prefHeightProperty().bind(scrollPANEE.heightProperty());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            sendReleased();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void sendClicked() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        ColorAdjust color \u003d new ColorAdjust();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setBrightness(-0.16);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        sendButton.setEffect(color);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void sendReleased() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        ColorAdjust color \u003d new ColorAdjust();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setBrightness(0);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        sendButton.setEffect(color);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void removeWelcome() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        rootPane.getChildren().remove(welcomeScreen);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void taskAction() throws IOException{"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        heading.getChildren().clear();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Text title1 \u003d new Text(\"TASKS\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        title1.setFont(Font.font(\"Gill Sans\", 15));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        title1.setFill(Color.GRAY);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        StackPane titlePane \u003d new StackPane();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.setAlignment(title1, Pos.CENTER);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.prefHeightProperty().bind(heading.prefHeightProperty());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.prefWidthProperty().bind(heading.widthProperty());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.getChildren().addAll(title1);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        heading.getChildren().addAll(titlePane);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Hustler.run(userInput.getText());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        flowPane.getChildren().clear();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        flowPane.setStyle(\"-fx-background-color:#ffffff\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Rectangle whiteSpace0 \u003d new Rectangle();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        whiteSpace0.setOpacity(0.0);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        whiteSpace0.setHeight(10);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        whiteSpace0.widthProperty().bind(scrollPANEE.widthProperty());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        flowPane.getChildren().add(whiteSpace0);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        Image dateTimeIcon \u003d new Image(new FileInputStream(\"src/main/resources/images/datetime.png\"));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        flowPane.setVgap(10);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        for(int i \u003d 0; i \u003c Hustler.list.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            ImageView imageView \u003d new ImageView();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            imageView.setImage(dateTimeIcon);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            imageView.setFitHeight(10);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            imageView.setFitWidth(10);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            StackPane stackPane \u003d new StackPane();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            Rectangle rect \u003d new Rectangle();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            Text text \u003d new Text(i + 1 + \". \" + Hustler.list.get(i).getDescription());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            text.setFont(Font.font(\"Gill Sans\", 20));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            text.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            rect.setOpacity(0.3);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            rect.setHeight(50);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            rect.widthProperty().bind(scrollPANEE.widthProperty());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            rect.setArcHeight(30.0);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            rect.setArcWidth(30.0);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            rect.setStyle(\"#ffffff\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            stackPane.setMargin(text,new Insets(0,0,3,50));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            stackPane.setAlignment(text,Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            Image notDoneCheck \u003d new Image(new FileInputStream(\"src/main/resources/images/notDone.png\"));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            ImageView notdoneCheckImage \u003d new ImageView();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            notdoneCheckImage.setFitHeight(20);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            notdoneCheckImage.setFitWidth(20);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            notdoneCheckImage.setImage(notDoneCheck);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            Image doneCheck \u003d new Image(new FileInputStream(\"src/main/resources/images/done.png\"));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            ImageView doneCheckImage \u003d new ImageView();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            doneCheckImage.setFitHeight(25);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            doneCheckImage.setFitWidth(30);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            doneCheckImage.setImage(doneCheck);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            Button doneButton \u003d new Button();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            doneButton.setGraphic(notdoneCheckImage);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            doneButton.setBackground(Background.EMPTY);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            stackPane.setAlignment(doneButton,Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            stackPane.setMargin(doneButton, new Insets(0,0,0,10));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            if(Hustler.list.get(i).getStatusIcon().contains(\"\\u2713\")) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                doneButton.setGraphic(doneCheckImage);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                stackPane.setMargin(doneButton, new Insets(0,0,0,5));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                text.setStrikethrough(true);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                text.setOpacity(0.5);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            if(Hustler.list.get(i).getDateTime() \u003d\u003d null) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                stackPane.getChildren().addAll(rect, text,doneButton);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                flowPane.getChildren().add(stackPane);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            else if(Hustler.list.get(i).getDateTime() !\u003d null) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                Text dateTime \u003d new Text(DateTimeParser.convertDateTime(Hustler.list.get(i).getDateTime()));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                stackPane.setMargin(dateTime, new Insets(0,0,3,70));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                stackPane.setAlignment(dateTime,Pos.BOTTOM_LEFT);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                stackPane.setMargin(imageView, new Insets(0,0,3,53));"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                stackPane.setAlignment(imageView,Pos.BOTTOM_LEFT);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                dateTime.setFont(Font.font(\"Gill Sans\", 10));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                ColorAdjust colorAdjust \u003d new ColorAdjust();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                if(Reminders.checkOverdue(i)) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    colorAdjust.setContrast(0.12);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    colorAdjust.setHue(-0.02);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    colorAdjust.setSaturation(0.81);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    imageView.setEffect(colorAdjust);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    dateTime.setFill(Color.RED);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                } else if(Reminders.checkThirty(i)) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    colorAdjust.setContrast(0.12);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    colorAdjust.setHue(0.2);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    colorAdjust.setSaturation(0.81);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    imageView.setEffect(colorAdjust);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    dateTime.setFill(Color.ORANGE);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                } else if(Reminders.checkLastDay(i)) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    colorAdjust.setContrast(0.14);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    colorAdjust.setHue(0.33);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    colorAdjust.setSaturation(0.81);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    imageView.setEffect(colorAdjust);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    dateTime.setFill(Color.YELLOW);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    dateTime.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                stackPane.getChildren().addAll(rect, text, dateTime,imageView, doneButton);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                flowPane.getChildren().add(stackPane);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        flowPane.prefWidthProperty().bind(scrollPANEE.widthProperty());"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        scrollPANEE.setContent(flowPane);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        ColorAdjust color \u003d new ColorAdjust();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setContrast(0.35);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setHue(-0.21);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setBrightness(0.09);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setSaturation(1.0);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        menu.setEffect(color);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        timer.setEffect(null);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        trophy.setEffect(null);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        spiderGraph.setEffect(null);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        profile.setEffect(null);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        trolley.setEffect(null);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        swords.setEffect(null);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        gear.setEffect(null);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        task.setStyle(\"-fx-background-color:#243342\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        taskCompletionMode.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        achievement.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        statistics.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        avatar.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        shop.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        arena.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        settings.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        task.textFillProperty().setValue(Paint.valueOf(\"#ffffff\"));"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        taskCompletionMode.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        achievement.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        statistics.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        avatar.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        shop.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        arena.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        settings.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void taskCompletionModeAction() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        heading.getChildren().clear();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Text title1 \u003d new Text(\"TASK COMPLETION MODE\");"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        title1.setFont(Font.font(\"Gill Sans\", 15));"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        title1.setFill(Color.GRAY);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        StackPane titlePane \u003d new StackPane();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.setAlignment(title1, Pos.CENTER);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.prefHeightProperty().bind(heading.prefHeightProperty());"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.prefWidthProperty().bind(heading.widthProperty());"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.getChildren().addAll(title1);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        heading.getChildren().addAll(titlePane);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        flowPane.setStyle(\"-fx-background-color:#ffffff\");"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        flowPane.getChildren().clear();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        console.clear();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        ColorAdjust color \u003d new ColorAdjust();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setContrast(0.35);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setHue(-0.21);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setBrightness(0.09);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setSaturation(1.0);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        menu.setEffect(null);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        timer.setEffect(color);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        trophy.setEffect(null);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        spiderGraph.setEffect(null);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        profile.setEffect(null);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        trolley.setEffect(null);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        swords.setEffect(null);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        gear.setEffect(null);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        task.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        taskCompletionMode.setStyle(\"-fx-background-color:#243342\");"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        achievement.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        statistics.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        avatar.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        shop.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        arena.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        settings.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        task.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        taskCompletionMode.textFillProperty().setValue(Paint.valueOf(\"#ffffff\"));"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        achievement.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        statistics.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        avatar.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        shop.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        arena.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        settings.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void achievementAction() throws IOException {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        heading.getChildren().clear();"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Text title1 \u003d new Text(\"ACHIEVEMENTS\");"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        title1.setFont(Font.font(\"Gill Sans\", 15));"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        title1.setFill(Color.GRAY);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        StackPane titlePane \u003d new StackPane();"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.setAlignment(title1, Pos.CENTER);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.prefHeightProperty().bind(heading.prefHeightProperty());"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.prefWidthProperty().bind(heading.widthProperty());"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.getChildren().addAll(title1);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        heading.getChildren().addAll(titlePane);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        Image lock \u003d new Image(new FileInputStream(\"src/main/resources/images/locked_padlock.png\"));"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        flowPane.setStyle(\"-fx-background-color:#ffffff\");"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        flowPane.getChildren().clear();"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Hustler.run(\"/achievement\");"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        flowPane.setVgap(10);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Rectangle whiteSpace0 \u003d new Rectangle();"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        whiteSpace0.setOpacity(0.0);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        whiteSpace0.setHeight(10);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        whiteSpace0.widthProperty().bind(scrollPANEE.widthProperty());"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        flowPane.getChildren().add(whiteSpace0);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        StackPane SP \u003d new StackPane();"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Rectangle R \u003d new Rectangle();"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Text T \u003d new Text(\"ACHIEVEMENTS UNLOCKED\");"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        T.setFont(Font.font(\"Gill Sans\", 20));"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        T.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        R.setOpacity(0.3);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        R.setHeight(30);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        R.widthProperty().bind(scrollPANEE.widthProperty());"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        R.setArcHeight(30.0);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        R.setArcWidth(30.0);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        R.setStyle(\"#ffffff\");"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        SP.setAlignment(T,Pos.CENTER);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        SP.getChildren().addAll(R,T);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        flowPane.getChildren().add(SP);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        for(int i \u003d 0; i \u003c Hustler.achievementList.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            if(!Hustler.achievementList.get(i).checkLock()) {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                StackPane stackPane \u003d new StackPane();"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                Rectangle rect \u003d new Rectangle();"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                Text text \u003d new Text(Hustler.achievementList.get(i).toString());"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                text.setFont(Font.font(\"Gill Sans\", 20));"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                text.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                rect.setOpacity(0.3);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                rect.setHeight(50);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                rect.widthProperty().bind(scrollPANEE.widthProperty());"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                rect.setArcHeight(30.0);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                rect.setArcWidth(30.0);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                rect.setStyle(\"#ffffff\");"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                stackPane.setMargin(text,new Insets(0,0,0,50));"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                stackPane.setAlignment(text,Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                stackPane.getChildren().addAll(rect, text);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                flowPane.getChildren().add(stackPane);"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Rectangle whiteSpace1 \u003d new Rectangle();"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        whiteSpace1.setOpacity(0.0);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        whiteSpace1.setHeight(10);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        whiteSpace1.widthProperty().bind(scrollPANEE.widthProperty());"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        flowPane.getChildren().add(whiteSpace1);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        StackPane StackPanel \u003d new StackPane();"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Rectangle Rec \u003d new Rectangle();"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Text Txt \u003d new Text(\"ACHIEVEMENTS LOCKED\");"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Txt.setFont(Font.font(\"Gill Sans\", 20));"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Txt.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Rec.setOpacity(0.3);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Rec.setHeight(50);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Rec.widthProperty().bind(scrollPANEE.widthProperty());"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Rec.setArcHeight(30.0);"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Rec.setArcWidth(30.0);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Rec.setStyle(\"#ffffff\");"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        StackPanel.setAlignment(Txt,Pos.CENTER);"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        StackPanel.getChildren().addAll(Rec,Txt);"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        flowPane.getChildren().add(StackPanel);"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        for(int i \u003d 0; i \u003c Hustler.achievementList.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            if(Hustler.achievementList.get(i).checkLock()) {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                ImageView imageview \u003d new ImageView();"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                imageview.setImage(lock);"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                imageview.setFitHeight(30);"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                imageview.setFitWidth(30);"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                imageview.setOpacity(0.3);"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                StackPane stackPane \u003d new StackPane();"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                Rectangle rect \u003d new Rectangle();"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                Text text \u003d new Text(Hustler.achievementList.get(i).toString());"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                text.setFont(Font.font(\"Gill Sans\", 20));"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                text.setStyle(\"-fx-fill: white\");"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                text.setOpacity(0.3);"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                rect.setOpacity(0.3);"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                rect.setHeight(50);"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                rect.widthProperty().bind(flowPane.widthProperty());"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                rect.setArcHeight(30.0);"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                rect.setArcWidth(30.0);"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                rect.setStyle(\"#ffffff\");"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                stackPane.setMargin(text,new Insets(0,0,0,80));"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                stackPane.setAlignment(text, Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                stackPane.setMargin(imageview, new Insets(0,0,0,30));"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                stackPane.setAlignment(imageview,Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                stackPane.getChildren().addAll(rect,text,imageview);"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                flowPane.getChildren().addAll(stackPane);"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        flowPane.prefWidthProperty().bind(scrollPANEE.widthProperty());"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        scrollPANEE.setContent(flowPane);"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        ColorAdjust color \u003d new ColorAdjust();"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setContrast(0.35);"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setHue(-0.21);"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setBrightness(0.09);"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setSaturation(1.0);"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        menu.setEffect(null);"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        timer.setEffect(null);"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        trophy.setEffect(color);"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        spiderGraph.setEffect(null);"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        profile.setEffect(null);"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        trolley.setEffect(null);"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        swords.setEffect(null);"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        gear.setEffect(null);"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        task.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        taskCompletionMode.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        achievement.setStyle(\"-fx-background-color:#243342\");"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        statistics.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        avatar.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        shop.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        arena.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        settings.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        task.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        taskCompletionMode.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        achievement.textFillProperty().setValue(Paint.valueOf(\"#ffffff\"));"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        statistics.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        avatar.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        shop.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        arena.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        settings.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void statisticsAction() {"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        heading.getChildren().clear();"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Text title1 \u003d new Text(\"STATISTICS\");"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        title1.setFont(Font.font(\"Gill Sans\", 15));"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        title1.setFill(Color.GRAY);"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        StackPane titlePane \u003d new StackPane();"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.setAlignment(title1, Pos.CENTER);"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.prefHeightProperty().bind(heading.prefHeightProperty());"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.prefWidthProperty().bind(heading.widthProperty());"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.getChildren().addAll(title1);"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        heading.getChildren().addAll(titlePane);"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        flowPane.setStyle(\"-fx-background-color:#ffffff\");"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        flowPane.getChildren().clear();"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        ColorAdjust color \u003d new ColorAdjust();"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setContrast(0.35);"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setHue(-0.21);"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setBrightness(0.09);"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setSaturation(1.0);"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        menu.setEffect(null);"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        timer.setEffect(null);"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        trophy.setEffect(null);"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        spiderGraph.setEffect(color);"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        profile.setEffect(null);"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        trolley.setEffect(null);"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        swords.setEffect(null);"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        gear.setEffect(null);"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        task.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        taskCompletionMode.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        achievement.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        statistics.setStyle(\"-fx-background-color:#243342\");"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        avatar.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        shop.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        arena.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        settings.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        task.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        taskCompletionMode.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        achievement.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        statistics.textFillProperty().setValue(Paint.valueOf(\"#ffffff\"));"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        avatar.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        shop.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        arena.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        settings.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void avatarAction() {"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        heading.getChildren().clear();"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Text title1 \u003d new Text(\"AVATAR\");"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        title1.setFont(Font.font(\"Gill Sans\", 15));"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        title1.setFill(Color.GRAY);"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        StackPane titlePane \u003d new StackPane();"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.setAlignment(title1, Pos.CENTER);"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.prefHeightProperty().bind(heading.prefHeightProperty());"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.prefWidthProperty().bind(heading.widthProperty());"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.getChildren().addAll(title1);"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        heading.getChildren().addAll(titlePane);"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        flowPane.setStyle(\"-fx-background-color:#ffffff\");"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        flowPane.getChildren().clear();"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        ColorAdjust color \u003d new ColorAdjust();"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setContrast(0.35);"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setHue(-0.21);"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setBrightness(0.09);"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setSaturation(1.0);"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        menu.setEffect(null);"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        timer.setEffect(null);"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        trophy.setEffect(null);"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        spiderGraph.setEffect(null);"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        profile.setEffect(color);"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        trolley.setEffect(null);"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        swords.setEffect(null);"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        gear.setEffect(null);"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        task.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        taskCompletionMode.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        achievement.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        statistics.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        avatar.setStyle(\"-fx-background-color:#243342\");"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        shop.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        arena.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        settings.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        task.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        taskCompletionMode.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        achievement.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        statistics.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        avatar.textFillProperty().setValue(Paint.valueOf(\"#ffffff\"));"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        shop.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        arena.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        settings.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        ps \u003d new PrintStream(new Console(console));"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        console.clear();"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Hustler.run(\"/avatar stats\");"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        scrollPANEE.setContent(console);"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void shopAction() {"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        heading.getChildren().clear();"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Text title1 \u003d new Text(\"SHOP\");"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        title1.setFont(Font.font(\"Gill Sans\", 15));"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        title1.setFill(Color.GRAY);"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        StackPane titlePane \u003d new StackPane();"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        //titlePane.setMargin(title1, new Insets(0,0,0,50));"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.setAlignment(title1, Pos.CENTER);"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.prefHeightProperty().bind(heading.prefHeightProperty());"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.prefWidthProperty().bind(heading.widthProperty());"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.getChildren().addAll(title1);"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        heading.getChildren().addAll(titlePane);"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        flowPane.setStyle(\"-fx-background-color:#ffffff\");"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        flowPane.getChildren().clear();"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        ColorAdjust color \u003d new ColorAdjust();"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setContrast(0.35);"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setHue(-0.21);"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setBrightness(0.09);"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setSaturation(1.0);"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        menu.setEffect(null);"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        timer.setEffect(null);"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        trophy.setEffect(null);"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        spiderGraph.setEffect(null);"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        profile.setEffect(null);"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        trolley.setEffect(color);"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        swords.setEffect(null);"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        gear.setEffect(null);"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        task.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        taskCompletionMode.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        achievement.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        statistics.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        avatar.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        shop.setStyle(\"-fx-background-color:#243342\");"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        arena.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        settings.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        task.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        taskCompletionMode.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        achievement.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        statistics.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        avatar.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        shop.textFillProperty().setValue(Paint.valueOf(\"#ffffff\"));"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        arena.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        settings.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        ps \u003d new PrintStream(new Console(console));"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        console.clear();"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Hustler.run(\"/shop\");"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        scrollPANEE.setContent(console);"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void arenaAction() {"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        heading.getChildren().clear();"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Text title1 \u003d new Text(\"ARENA\");"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        title1.setFont(Font.font(\"Gill Sans\", 15));"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        title1.setFill(Color.GRAY);"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        StackPane titlePane \u003d new StackPane();"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        //titlePane.setMargin(title1, new Insets(0,0,0,50));"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.setAlignment(title1, Pos.CENTER);"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.prefHeightProperty().bind(heading.prefHeightProperty());"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.prefWidthProperty().bind(heading.widthProperty());"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.getChildren().addAll(title1);"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        heading.getChildren().addAll(titlePane);"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        flowPane.setStyle(\"-fx-background-color:#ffffff\");"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        flowPane.getChildren().clear();"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        ColorAdjust color \u003d new ColorAdjust();"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setContrast(0.35);"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setHue(-0.21);"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setBrightness(0.09);"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setSaturation(1.0);"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        menu.setEffect(null);"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        timer.setEffect(null);"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        trophy.setEffect(null);"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        spiderGraph.setEffect(null);"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        profile.setEffect(null);"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        trolley.setEffect(null);"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        swords.setEffect(color);"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        gear.setEffect(null);"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        task.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        taskCompletionMode.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        achievement.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        statistics.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        avatar.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        shop.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        arena.setStyle(\"-fx-background-color:#243342\");"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        settings.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        achievement.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        task.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        taskCompletionMode.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        statistics.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        avatar.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        shop.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        arena.textFillProperty().setValue(Paint.valueOf(\"#ffffff\"));"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        settings.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void settingsAction() {"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        heading.getChildren().clear();"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Text title1 \u003d new Text(\"SETTINGS\");"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        title1.setFont(Font.font(\"Gill Sans\", 15));"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        title1.setFill(Color.GRAY);"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        StackPane titlePane \u003d new StackPane();"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.setAlignment(title1, Pos.CENTER);"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.prefHeightProperty().bind(heading.prefHeightProperty());"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.prefWidthProperty().bind(heading.widthProperty());"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        titlePane.getChildren().addAll(title1);"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        heading.getChildren().addAll(titlePane);"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        flowPane.setStyle(\"-fx-background-color:#ffffff\");"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        flowPane.getChildren().clear();"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        ColorAdjust color \u003d new ColorAdjust();"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setContrast(0.35);"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setHue(-0.21);"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setBrightness(0.09);"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        color.setSaturation(1.0);"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        menu.setEffect(null);"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        timer.setEffect(null);"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        trophy.setEffect(null);"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        spiderGraph.setEffect(null);"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        profile.setEffect(null);"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        trolley.setEffect(null);"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        swords.setEffect(null);"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        gear.setEffect(color);"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        task.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        taskCompletionMode.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        achievement.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        statistics.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        avatar.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        shop.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        arena.setStyle(\"-fx-background-color:#34495E\");"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        settings.setStyle(\"-fx-background-color:#243342\");"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        achievement.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        task.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        taskCompletionMode.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        statistics.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        avatar.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        shop.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        arena.textFillProperty().setValue(Paint.valueOf(\"#95a5a6\"));"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        settings.textFillProperty().setValue(Paint.valueOf(\"#ffffff\"));"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 1,
      "jingkang97": 754,
      "ngjiewu": 80
    }
  },
  {
    "path": "src/main/java/seedu/hustler/data/AchievementStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "package seedu.hustler.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.game.achievement.AchievementList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.logic.parser.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import static seedu.hustler.game.achievement.Achievements.totalPoints;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import static seedu.hustler.game.achievement.AddTask.numberOfTasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import static seedu.hustler.game.achievement.ConsecutiveLogin.storedDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import static seedu.hustler.game.achievement.ConsecutiveLogin.consecutiveCount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import static seedu.hustler.game.achievement.ConsecutiveLogin.reset;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import static seedu.hustler.game.achievement.ConsecutiveLogin.checkLogin;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import static seedu.hustler.game.achievement.DoneTask.numberOfDone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * A class that stores User\u0027s achievements and loads it on request from disc."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public class AchievementStorage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * File path of achievement.txt that stores all achievement data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static final String ACHIEVEMENT_FILEPATH \u003d \"data/achievement.txt\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * File path of status.txt that contains all the information regarding"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * progress of the user with regards to achievements."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static final String STATUS_FILEPATH \u003d \"data/status.txt\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * File path of achievementBackup.txt that is used for undo/redo command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static final String ACHIEVEMENT_FILEPATH_BACKUP \u003d \"data/achievementBackup.txt\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * File path of statusBackup.txt that is used for undo/redo command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static final String STATUS_FILEPATH_BACKUP \u003d \"data/statusBackup.txt\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Attempts to load the status.txt file and initialises"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return progress with updated statistics."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @throws IOException throws an error if there is no status.txt file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Creates a new instance and initialises all status."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static AchievementList loadStatus() throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            Scanner scanner \u003d new Scanner(new File(STATUS_FILEPATH));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                String[] txt \u003d scanner.nextLine().split(\" \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                if (txt[0].equals(\"Add:\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    numberOfTasks \u003d Integer.parseInt(txt[1]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                } else if (txt[0].equals(\"Done:\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    numberOfDone \u003d Integer.parseInt(txt[1]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                } else if (txt[0].equals(\"TotalPoints:\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    totalPoints \u003d Integer.parseInt(txt[1]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                } else if (txt[0].equals(\"LastLogin:\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    storedDateTime \u003d DateTimeParser.getDateTime(txt[1] + \" \" + txt[2]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                } else if (txt[0].equals(\"ConsecutiveCount:\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    consecutiveCount \u003d Integer.parseInt(txt[1]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return Hustler.achievementList;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(new File(STATUS_FILEPATH)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.write(\"Add: 0\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.write(\"Done: 0\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.write(\"TotalPoints: 0\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.write(\"LastLogin: 0\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.write(\"ConsecutiveCount: 0\\n\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            storedDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return Hustler.achievementList;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Backup for status."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return previous state of achievement list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static AchievementList reloadStatus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            Scanner scanner \u003d new Scanner(new File(STATUS_FILEPATH_BACKUP));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                String[] txt \u003d scanner.nextLine().split(\" \");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                if(txt[0].equals(\"Add:\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    numberOfTasks \u003d Integer.parseInt(txt[1]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                } else if(txt[0].equals(\"Done:\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    numberOfDone \u003d Integer.parseInt(txt[1]);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                } else if(txt[0].equals(\"TotalPoints:\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    totalPoints \u003d Integer.parseInt(txt[1]);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                } else if(txt[0].equals(\"LastLogin:\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    storedDateTime \u003d DateTimeParser.getDateTime(txt[1] + \" \" + txt[2]);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                } else if(txt[0].equals(\"ConsecutiveCount:\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                   consecutiveCount \u003d Integer.parseInt(txt[1]);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return Hustler.achievementList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return Hustler.achievementList;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Save all current achievement progress."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @throws IOException when writing of file has errors."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static void saveStatus() throws IOException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(new File(STATUS_FILEPATH)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        writer.write(\"Add: \" + numberOfTasks);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        writer.write(\"\\n\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        writer.write(\"Done: \" + numberOfDone);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        writer.write(\"\\n\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        writer.write(\"TotalPoints: \" + totalPoints);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if (reset() || checkLogin()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.write(\"\\n\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.write(\"LastLogin: \" + DateTimeParser.convertDateTime(LocalDateTime.now()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.write(\"\\n\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.write(\"\\n\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.write(\"LastLogin: \" + DateTimeParser.convertDateTime(storedDateTime));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.write(\"\\n\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        writer.write(\"ConsecutiveCount: \" + consecutiveCount);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Attempts to load the achievement.txt file and initialise the lock status and"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * points gained."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return achievement list with updated status."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static AchievementList loadAchievements() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            Scanner scanner \u003d new Scanner(new File(ACHIEVEMENT_FILEPATH));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                String[] txt \u003d scanner.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                Hustler.achievementList.updateStatus(Boolean.parseBoolean(txt[0]),index,Integer.parseInt(txt[1]));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                index +\u003d 1;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return Hustler.achievementList;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return Hustler.achievementList;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Backup for all achievement progress."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return previous state of achievement list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static AchievementList reloadAchievements() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            Scanner scanner \u003d new Scanner(new File(ACHIEVEMENT_FILEPATH_BACKUP));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            Hustler.achievementList \u003d new AchievementList();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                String[] txt \u003d scanner.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                Hustler.achievementList.updateStatus(Boolean.parseBoolean(txt[0]),index,Integer.parseInt(txt[1]));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                index +\u003d 1;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return Hustler.achievementList;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } catch(FileNotFoundException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return Hustler.achievementList;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Saves all achievement progress."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param achievementList current achievement list."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return current achievement list."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @throws IOException throws ann error if achievement.txt"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * is not found."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static AchievementList saveAchievements(AchievementList achievementList) throws IOException{"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(new File(ACHIEVEMENT_FILEPATH)));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        for (int i \u003d 0; i \u003c achievementList.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.write(achievementList.get(i).toTxt());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.write(\"\\n\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return achievementList;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Creates backup text file for achievements and status."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param achievementList current achievement list."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return returns achievement list."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @throws IOException throws an error if statusBackup.txt"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * or achievementBackup.txt."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static AchievementList createBackup(AchievementList achievementList) throws IOException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(new File(STATUS_FILEPATH_BACKUP)));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        writer.write(\"Add: \" + numberOfTasks);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        writer.write(\"\\n\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        writer.write(\"Done: \" + numberOfDone);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        writer.write(\"\\n\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        writer.write(\"TotalPoints: \" + totalPoints);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if(reset() || checkLogin()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            writer.write(\"\\n\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            writer.write(\"LastLogin: \" + DateTimeParser.convertDateTime(LocalDateTime.now()));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            writer.write(\"\\n\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            writer.write(\"\\n\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            writer.write(\"LastLogin: \" + DateTimeParser.convertDateTime(storedDateTime));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            writer.write(\"\\n\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        writer.write(\"ConsecutiveCount: \" + consecutiveCount);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        writer \u003d new BufferedWriter(new FileWriter(new File(ACHIEVEMENT_FILEPATH_BACKUP)));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        for(int i \u003d 0; i \u003c achievementList.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            writer.write(achievementList.get(i).toTxt());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            writer.write(\"\\n\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return achievementList;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 47,
      "nystera": 1,
      "jingkang97": 183
    }
  },
  {
    "path": "src/main/java/seedu/hustler/data/AvatarStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.game.avatar.Avatar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.game.avatar.Level;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.game.avatar.Stats;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.game.shop.items.armors.Armor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.game.shop.items.weapons.Weapon;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.util.Formatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": " * A class that stores User\u0027s avatar and loads it on request from disc."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class AvatarStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static final String FILEPATH \u003d \"data/avatar.txt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static final String FILEPATHBACKUP \u003d FILEPATH.split(\"avatar.txt\")[0] + \"backup/avatarBackup.txt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static Formatter formatter;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Loads up the current avatar on the destination of this"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Hustler app."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the Avatar that is currently loaded."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws FileNotFoundException when file is not found, will create a"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *     new txtfile to start data storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static Avatar load() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        Avatar avatar \u003d new Avatar();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nystera"
        },
        "content": "            Scanner avatarTxt \u003d new Scanner(new File(FILEPATH));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nystera"
        },
        "content": "            String name \u003d new String();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nystera"
        },
        "content": "            Level level \u003d new Level();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nystera"
        },
        "content": "            Stats stats \u003d new Stats();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nystera"
        },
        "content": "            Optional\u003cWeapon\u003e weapon \u003d Optional.empty();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nystera"
        },
        "content": "            Optional\u003cArmor\u003e armor \u003d Optional.empty();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nystera"
        },
        "content": "            while (avatarTxt.hasNextLine()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nystera"
        },
        "content": "                String[] txt \u003d avatarTxt.nextLine().split(\" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nystera"
        },
        "content": "                if (txt[0].equals(\"Name\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    name \u003d txt[1];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nystera"
        },
        "content": "                } else if (txt[0].equals(\"Level\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    level \u003d new Level(Integer.parseInt(txt[1]), Integer.parseInt(txt[2]));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nystera"
        },
        "content": "                } else if (txt[0].equals(\"Stats\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    stats \u003d new Stats(Integer.parseInt(txt[1]), Integer.parseInt(txt[2]),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nystera"
        },
        "content": "                            Integer.parseInt(txt[3]), Integer.parseInt(txt[4]));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nystera"
        },
        "content": "                } else if (txt[0].equals(\"Weapon\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    weapon \u003d Weapon.getWeapon(txt[1]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nystera"
        },
        "content": "                } else if (txt[0].equals(\"Armor\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    armor \u003d Armor.getArmor(txt[1]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nystera"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nystera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            avatarTxt.close();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nystera"
        },
        "content": "            avatar \u003d new Avatar(name, level, stats, weapon, armor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            System.out.println(\"\\tNo Avatar saved in database, creating a new Avatar now.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            System.out.println(\"\\t_____________________________________\\n\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        return avatar;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Reloads the avatar based on a copy of the initial avatar.txt of this"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Hustler app."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @return the Avatar that is being reloaded."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @throws FileNotFoundException as this reload happens in the background,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *     no message is shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static Avatar reloadBackup() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        Avatar avatar \u003d new Avatar();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            Scanner avatarBackupTxt \u003d new Scanner(new File(FILEPATHBACKUP));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            String name \u003d new String();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            Level level \u003d new Level();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            Stats stats \u003d new Stats();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nystera"
        },
        "content": "            Optional\u003cWeapon\u003e weapon \u003d Optional.empty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nystera"
        },
        "content": "            Optional\u003cArmor\u003e armor \u003d Optional.empty();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            while (avatarBackupTxt.hasNextLine()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                String[] backupTxt \u003d avatarBackupTxt.nextLine().split(\" \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                if (backupTxt[0].equals(\"Name\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    name \u003d backupTxt[1];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                } else if (backupTxt[0].equals(\"Level\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    level \u003d new Level(Integer.parseInt(backupTxt[1]), Integer.parseInt(backupTxt[2]));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                } else if (backupTxt[0].equals(\"Stats\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    stats \u003d new Stats(Integer.parseInt(backupTxt[1]), Integer.parseInt(backupTxt[2]),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                            Integer.parseInt(backupTxt[3]), Integer.parseInt(backupTxt[4]));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nystera"
        },
        "content": "                } else if (backupTxt[0].equals(\"Weapon\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nystera"
        },
        "content": "                      weapon \u003d Weapon.getWeapon(backupTxt[1]);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nystera"
        },
        "content": "                } else if (backupTxt[0].equals(\"Armor\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nystera"
        },
        "content": "                      armor \u003d Armor.getArmor(backupTxt[1]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            avatarBackupTxt.close();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nystera"
        },
        "content": "            avatar \u003d new Avatar(name, level, stats, weapon, armor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        return avatar;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Updates and saves the current avatar onto the txtfile."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param avatar the updated avatar to be saved."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the updated avatar."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws IOException when writing of file has errors."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static Avatar save(Avatar avatar) throws IOException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nystera"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(new File(FILEPATH)));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nystera"
        },
        "content": "        writer.write(avatar.toTxt());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nystera"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return avatar;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Creates and saves the a backup of the current avatar when the user first starts this app.."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @param avatar the updated avatar to be saved."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @return the updated avatar."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @throws IOException when writing of file has errors."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static Avatar createBackup(Avatar avatar) throws IOException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(new File(FILEPATHBACKUP)));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        writer.write(avatar.toTxt());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        return avatar;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 52,
      "yzia2000": 8,
      "nystera": 71,
      "ngjiewu": 1
    }
  },
  {
    "path": "src/main/java/seedu/hustler/data/CommandLog.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "public class CommandLog {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    private static ArrayList\u003cString\u003e commandlog;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    private static ArrayList\u003cString\u003e redoLog;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    private static boolean isRestoring \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public CommandLog() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        commandlog \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        redoLog \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static void recordCommand(String command) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        commandlog.add(command);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        clearRedoLog();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static void restoreData(int numberOfCommandsToUndo) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        isRestoring \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        int restoreDataUntil \u003d commandlog.size() - numberOfCommandsToUndo;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (restoreDataUntil \u003e\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            for (int i \u003d 0; i \u003c restoreDataUntil; i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    CommandParser parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    Command command \u003d parser.parse(commandlog.get(i));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    command.execute();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    Hustler.saveStorage();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nystera"
        },
        "content": "                } catch (CommandLineException | IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            while (numberOfCommandsToUndo \u003e 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                System.out.println(\"       _____________________________________\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                System.out.println(\"       These commands have been undone: \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                while (numberOfCommandsToUndo \u003e 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    System.out.println(\"       \" + commandlog.get(restoreDataUntil));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    redoLog.add(commandlog.get(restoreDataUntil));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    commandlog.remove(restoreDataUntil);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    numberOfCommandsToUndo--;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                System.out.println(\"       _____________________________________\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            while (commandlog.size() \u003e restoreDataUntil) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                commandlog.remove(restoreDataUntil);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            System.out.println(\"Error! You are attempting to undo more commands than is possible!\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        isRestoring \u003d false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static void redo() throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        isRestoring \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (redoLog.size() \u003e 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            for (int i \u003d 0; i \u003c redoLog.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                commandlog.add(redoLog.get(i));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            while (redoLog.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                redoLog.remove(0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            Hustler.reloadBackup();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            restoreData(0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            System.out.println(\"All previously undone commands have been redone!\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            System.out.println(\"Redo commands can only be used immediately after undo commands!\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        isRestoring \u003d false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static void clearRedoLog() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        while (redoLog.size() \u003e 0) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            redoLog.remove(0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static void deleteLatestLoggedCommand() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        commandlog.remove(commandlog.size() - 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static boolean isRestoring() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        return isRestoring;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 90,
      "nystera": 2
    }
  },
  {
    "path": "src/main/java/seedu/hustler/data/Folder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": " * Class to create directories in Hustler."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class Folder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private static final String DIRPATH \u003d \"data\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Checks directory to see if file exists. If it"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * doesn\u0027t exist, creates one."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return directory"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static File checkDirectory() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "        File directory \u003d new File(DIRPATH);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": "            directory.mkdir();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return directory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 6,
      "nystera": 18
    }
  },
  {
    "path": "src/main/java/seedu/hustler/data/MemoryManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "public class MemoryManager {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public MemoryManager() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void createBackup() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": "        TaskStorage taskStorage \u003d new TaskStorage();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "            taskStorage.createBackup(Hustler.list.return_list());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            AvatarStorage.createBackup(Hustler.avatar);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void reloadBackup(int numberOfCommandsToUndo) throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        Hustler.reloadBackup();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        CommandLog.restoreData(numberOfCommandsToUndo);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void redo() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        CommandLog.redo();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 31,
      "nystera": 2,
      "ngjiewu": 1
    }
  },
  {
    "path": "src/main/java/seedu/hustler/data/Schedule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * This class stores the Scheduling of Tasks such that it will be easier for Duke to retrieve Tasks based"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * off the Date given."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Schedule {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This formatter allows only the storage of the Date. Excludes Time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DATE_FORMATTER_NO_TIME \u003d \"dd/MM/yyyy\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tree map stores the Dates in ascending order which allows easier finding of Task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static TreeMap\u003cDate, ArrayList\u003cTask\u003e\u003e schedulesInOrder \u003d new TreeMap\u003cDate, ArrayList\u003cTask\u003e\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Schedule() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the Task into the TreeMap with proper Date storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task the task given"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date the date of the task given (excludes time)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the ArrayList that contains the task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if user inputs the wrong format of Date."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e addToSchedule(Task task, Date date) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!schedulesInOrder.containsKey(date)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            schedulesInOrder.put(date, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        schedulesInOrder.get(date).add(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return schedulesInOrder.get(date);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints all Tasks in the given Date."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date the date (excludes Time)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void printSchedule(Date date) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String strDate \u003d convertDateToString(date);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (schedulesInOrder.containsKey(date)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"\\tHere are the tasks on this date: (\" + strDate + \")\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Task task : schedulesInOrder.get(date)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"\\t\" + i + \". \" + task.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"\\tThere are no tasks in the given date: (\" + strDate + \")\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts String to Date. Catches exception if String cannot be convert to the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * date in the given format."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateStr the String of the date to be parsed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the date if String is valid, and null if String is not valid."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date convertStringToDate(String dateStr) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            Date date \u003d new SimpleDateFormat(DATE_FORMATTER_NO_TIME).parse(dateStr);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.dateFormatError();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts the Date to String."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date the Date in DD/MM/uuuu format."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the String in \"DD/MM/uuu\"."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public String convertDateToString(Date date) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        DateFormat dateFormat \u003d new SimpleDateFormat(DATE_FORMATTER_NO_TIME);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return dateFormat.format(date);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if the String can be convert to a Date format."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateStr String of the date."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if String can be parsed as a valid Date type."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidDate(String dateStr) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            Date date \u003d new SimpleDateFormat(DATE_FORMATTER_NO_TIME).parse(dateStr);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the ArrayList from the MapTree with the key of Date."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date the Date value that is the key of the TreeMap."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the ArrayList of the key date."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e getDatedList(Date date) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return schedulesInOrder.get(date);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 3,
      "-": 113
    }
  },
  {
    "path": "src/main/java/seedu/hustler/data/Settings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.util.Formatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": " * A class that stores User\u0027s customized settings."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class Settings {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static final String FILEPATH \u003d \"data/settings.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The Date Format that Hustler allows."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private SimpleDateFormat dateFormat1 \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private SimpleDateFormat dateFormat2 \u003d new SimpleDateFormat(\"yyyy/MM/dd HHmm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private SimpleDateFormat dateFormat3 \u003d new SimpleDateFormat(\"MM/dd/yyyy HHmm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static Formatter formatter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private ArrayList\u003cString\u003e quotesOfTheDay;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private SimpleDateFormat preferredDateFormat;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Default constructor of settings which initializes the default"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Settings() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.quotesOfTheDay \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.preferredDateFormat \u003d dateFormat1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Loads up the current avatar on the destination of this"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Hustler app."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the Avatar that is currently loaded."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws FileNotFoundException when file is not found, will create a"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *     new txtfile to start data storage."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Settings load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(\"hello\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nystera"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nystera"
        },
        "content": "            Scanner settingsTxt \u003d new Scanner(new File(FILEPATH));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nystera"
        },
        "content": "            formatter \u003d new Formatter(FILEPATH);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nystera"
        },
        "content": "            Settings newSettings \u003d new Settings();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return newSettings;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nystera"
        },
        "content": "            System.out.println(\"hello\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return new Settings();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Updates and saves the new avatar\u0027s name onto the txtfile."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param preferredName the updated avatar name to be saved."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the updated Settings."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws IOException when writing of file has errors."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Settings save(String preferredName) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nystera"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(new File(FILEPATH)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nystera"
        },
        "content": "        writer.write(this.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nystera"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 72,
      "ngjiewu": 5
    }
  },
  {
    "path": "src/main/java/seedu/hustler/data/ShopStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.game.shop.ShopList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": " * The shop storage manager that handles saving and editing the shop.txt file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class ShopStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The filepath of the shop.txt."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static final String FILEPATH \u003d \"data/shop.txt\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Attemps to load the shop.txt file and initializes the boolean values of"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * each item in the shop list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the shop list with the updated values."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws IOException throws an error if there is no shop.txt file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *     Creates a new instance and initializes the boolean values."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static ShopList load() throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "            Scanner shopTxt \u003d new Scanner(new File(FILEPATH));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "            ArrayList\u003cBoolean\u003e boolList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "            while (shopTxt.hasNextLine()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "                boolList.add(shopTxt.nextBoolean());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nystera"
        },
        "content": "            for (int i \u003d 0; i \u003c Hustler.shopList.size(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nystera"
        },
        "content": "                Hustler.shopList.updateStatus(i, boolList.get(i));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nystera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return Hustler.shopList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nystera"
        },
        "content": "            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(new File(FILEPATH)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nystera"
        },
        "content": "            for (int i \u003d 0; i \u003c 6; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nystera"
        },
        "content": "                writer.write(\"false\" + (i !\u003d 5 ? \"\\n\" : \"\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nystera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nystera"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return Hustler.shopList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Updates the shop.txt file whenever user purchases an item to reflect"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * correctly in the shop list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the shop list with the updated values."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static ShopList update() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nystera"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nystera"
        },
        "content": "            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(new File(FILEPATH)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nystera"
        },
        "content": "            writer.write(Hustler.shopList.itemsStatus());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nystera"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return Hustler.shopList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nystera"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return Hustler.shopList;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 67
    }
  },
  {
    "path": "src/main/java/seedu/hustler/data/TaskStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.schedule.Scheduler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.task.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "import static seedu.hustler.logic.parser.DateTimeParser.getDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * A class that stores current task list and loads it on request from disc."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class TaskStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Path to the file where tasks are stored and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * retrieved from."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    private static String filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    private static String filePathBackup;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private Schedule schedule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private static final DateTimeFormatter formatter \u003d DateTimeFormatter.ISO_DATE_TIME;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Empty constructor."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public TaskStorage() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Initializes filePath."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public TaskStorage(String filePath) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.filePathBackup \u003d filePath.split(\"hustler.txt\")[0] + \"backup/hustlerBackup.txt\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Loads list of tasks from disc from a csv style file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return an array list loaded from the disc."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public ArrayList\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            Scanner hustlerTxt \u003d new Scanner(new File(this.filePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            while (hustlerTxt.hasNextLine()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                // splits line input based on |"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                String[] taskString \u003d hustlerTxt.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                if (taskString[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    LocalDateTime now \u003d LocalDateTime.parse(taskString[5], formatter);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    list.add(new ToDo(taskString[4], taskString[2], taskString[3], now));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                } else if (taskString[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    LocalDateTime by \u003d getDateTime(taskString[5]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    LocalDateTime now \u003d LocalDateTime.parse(taskString[6], formatter);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    if (taskString.length \u003d\u003d 10) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                        int period \u003d Integer.parseInt(taskString[8]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                        boolean hasRecurred \u003d Boolean.parseBoolean(taskString[9]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                        list.add(new RecurringDeadline(taskString[4], by, taskString[2], taskString[3],"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                                now, taskString[7], period, hasRecurred));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                        list.add(new Deadline(taskString[4], by, taskString[2], taskString[3], now));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nystera"
        },
        "content": "                        String dateOnly \u003d taskString[5].split(\" \")[0];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nystera"
        },
        "content": "                        Date date \u003d schedule.convertStringToDate(dateOnly);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nystera"
        },
        "content": "                        Task lastTask \u003d list.get(list.size() - 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nystera"
        },
        "content": "                        schedule.addToSchedule(lastTask, date);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    } catch (ParseException ignored) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nystera"
        },
        "content": "                        return null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    LocalDateTime at \u003d getDateTime(taskString[5]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    LocalDateTime now \u003d LocalDateTime.parse(taskString[6], formatter);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    if (taskString.length \u003d\u003d 10) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                        int period \u003d Integer.parseInt(taskString[8]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                        boolean hasRecurred \u003d Boolean.parseBoolean(taskString[9]);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                        list.add(new RecurringEvent(taskString[4], at, taskString[2], taskString[3],"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                                now, taskString[7], period, hasRecurred));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                        list.add(new Event(taskString[4], at, taskString[2], taskString[3], now));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nystera"
        },
        "content": "                        String dateOnly \u003d taskString[5].split(\" \")[0];"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nystera"
        },
        "content": "                        Date date \u003d schedule.convertStringToDate(dateOnly);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nystera"
        },
        "content": "                        Task lastTask \u003d list.get(list.size() - 1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nystera"
        },
        "content": "                        schedule.addToSchedule(lastTask, date);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    } catch (ParseException ignored) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nystera"
        },
        "content": "                        return null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                if (taskString[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                    list.get(list.size() - 1).markAsDone();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            hustlerTxt.close();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            System.out.println(\"\\tNo list saved in database. Please \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                + \"create a list now.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            System.out.println(\"\\t_____________________________________\\n\\n\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            this.loadTimeSpent(list);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Reloads list of tasks from a backup of the original hustler.txt file."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @return an array list loaded from the backup disc."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public ArrayList\u003cTask\u003e reloadBackup() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            Scanner hustlerBackupTxt \u003d new Scanner(new File(this.filePathBackup));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            while (hustlerBackupTxt.hasNextLine()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                // splits line input based on |"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                String[] taskString \u003d hustlerBackupTxt.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                // instantiate classes"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                if (taskString[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    LocalDateTime now \u003d LocalDateTime.parse(taskString[5], formatter);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    list.add(new ToDo(taskString[4], taskString[2], taskString[3], now));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                } else if (taskString[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    LocalDateTime by \u003d getDateTime(taskString[5]);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    LocalDateTime now \u003d LocalDateTime.parse(taskString[6], formatter);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    if (taskString.length \u003d\u003d 10) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                        int period \u003d Integer.parseInt(taskString[8]);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                        boolean hasRecurred \u003d Boolean.parseBoolean(taskString[9]);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                        list.add(new RecurringDeadline(taskString[4], by, taskString[2], taskString[3],"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                                now, taskString[7], period, hasRecurred));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                        list.add(new Deadline(taskString[4], by, taskString[2], taskString[3], now));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                        String dateOnly \u003d taskString[4].split(\" \")[0];"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                        Date date \u003d schedule.convertStringToDate(dateOnly);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                        Task lastTask \u003d list.get(list.size() - 1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                        schedule.addToSchedule(lastTask, date);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    } catch (ParseException ignored) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                        return null;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    LocalDateTime at \u003d getDateTime(taskString[4]);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    LocalDateTime now \u003d LocalDateTime.parse(taskString[6], formatter);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    if (taskString.length \u003d\u003d 10) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                        int period \u003d Integer.parseInt(taskString[8]);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                        boolean hasRecurred \u003d Boolean.parseBoolean(taskString[9]);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                        list.add(new RecurringEvent(taskString[4], at, taskString[2], taskString[3],"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                                now, taskString[7], period, hasRecurred));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                        list.add(new Event(taskString[4], at, taskString[2], taskString[3], now));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                        String dateOnly \u003d taskString[4].split(\" \")[0];"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                        Date date \u003d schedule.convertStringToDate(dateOnly);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                        Task lastTask \u003d list.get(list.size() - 1);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                        schedule.addToSchedule(lastTask, date);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    } catch (ParseException ignored) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                        return null;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                if (taskString[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                    list.get(list.size() - 1).markAsDone();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            hustlerBackupTxt.close();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            System.out.println(\"\\tNo list saved in database. Please \""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    + \"create a list now.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            System.out.println(\"\\t_____________________________________\\n\\n\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Saves the input task list to disc."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param inputList the list of tasks to saveAchievements to disc."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @throws IOException if file could not be saved"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void save(ArrayList\u003cTask\u003e inputList) throws IOException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        // if list has nothing just quit"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (inputList.isEmpty()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            (new File(this.filePath)).delete();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            saveTimeSpent(inputList);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        //if data folder doesnt exist create it"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        File directory \u003d new File(this.filePath.split(\"/\")[0]);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            directory.mkdir();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        // saveAchievements inputs"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        String savedLine \u003d inputList.get(0).toSaveFormat();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        for (int i \u003d 1; i \u003c inputList.size(); i++) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            savedLine \u003d savedLine + \"\\n\" + inputList.get(i).toSaveFormat();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter("
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            new FileWriter(new File(this.filePath))"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            );"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        writer.write(savedLine);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        saveTimeSpent(inputList);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Saves the time spent on each task in a separate file that contains"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * address of the task and the time spent in seconds."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param inputList list of tasks whose time spent is saved"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @throws IOException in case of IO error."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void saveTimeSpent(ArrayList\u003cTask\u003e inputList) throws IOException {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        // if list has nothing just quit"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        String saveAt \u003d \"data/timeSpent.txt\";"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (inputList.isEmpty()) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            (new File(saveAt)).delete();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        //if data folder doesnt exist create it"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        File directory \u003d new File(saveAt.split(\"/\")[0]);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            directory.mkdir();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        // saveAchievements inputs"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        String savedLine \u003d 0 + \"|\" + Scheduler.getTimeSpent(inputList.get(0));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        for (int i \u003d 1; i \u003c inputList.size(); i++) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            savedLine \u003d savedLine + \"\\n\" + i + \"|\" + Scheduler.getTimeSpent(inputList.get(i));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter("
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            new FileWriter(new File(saveAt))"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            );"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        writer.write(savedLine);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Configures Scheduler on launch with time spent on incomplete tasks."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param list list of tasks whose time spent is loaded"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @throws IOException IO loading error"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void loadTimeSpent(ArrayList\u003cTask\u003e list) throws IOException {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            Scanner timeSpentSaved \u003d new Scanner(new File(\"data/timeSpent.txt\"));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            while (timeSpentSaved.hasNextLine()) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                String[] taskString \u003d timeSpentSaved.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                int index \u003d Integer.parseInt(taskString[0]);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                int timeSpent \u003d Integer.parseInt(taskString[1]);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                Scheduler.add(list.get(index), timeSpent);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            timeSpentSaved.close();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Creates a backup copy of hustler.txt each time the user uses this app; used for UndoCommand."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param inputList the list of tasks to saveAchievements to disc."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @throws IOException if file could not be saved"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void createBackup(ArrayList\u003cTask\u003e inputList) throws IOException {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        // if list has nothing just quit"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (inputList.isEmpty()) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            (new File(this.filePathBackup)).delete();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        //if data folder doesn\u0027t exist create it"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        File directory \u003d new File(this.filePathBackup.split(\"/hustlerBackup.txt\")[0]);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            directory.mkdir();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        // saveAchievements inputs"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        String savedLine \u003d inputList.get(0).toSaveFormat();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        for (int i \u003d 1; i \u003c inputList.size(); i++) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            savedLine \u003d savedLine + \"\\n\" + inputList.get(i).toSaveFormat();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter("
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            new FileWriter(new File(this.filePathBackup))"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            );"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        writer.write(savedLine);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 71,
      "yzia2000": 135,
      "nystera": 27,
      "jingkang97": 10,
      "ngjiewu": 68
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/achievement/AchievementList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "package seedu.hustler.game.achievement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import static seedu.hustler.game.achievement.AddTask.addAchievementLevel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import static seedu.hustler.game.achievement.AddTask.addPoints;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import static seedu.hustler.game.achievement.ConsecutiveLogin.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import static seedu.hustler.game.achievement.DoneTask.doneAchievementLevel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * Deals with addition of achievements and unlocking of achievements."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * Also prints out achievement list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public class AchievementList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * List of all unlocked and locked achievements."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private ArrayList\u003cAchievements\u003e achievementList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Creates a new instance of achievement list and populates"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * achievement list with achievements."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public AchievementList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        achievementList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        populate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Adds all available achievements to achievement list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * and initialise the achievements."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return achievement list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private AchievementList populate() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.achievementList.add(new DoneTask(\"Bronze\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.achievementList.add(new DoneTask(\"Silver\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.achievementList.add(new DoneTask(\"Gold\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.achievementList.add(new AddTask(\"Bronze\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.achievementList.add(new AddTask(\"Silver\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.achievementList.add(new AddTask(\"Gold\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.achievementList.add(new ConsecutiveLogin(\"Bronze\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.achievementList.add(new ConsecutiveLogin(\"Silver\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.achievementList.add(new ConsecutiveLogin(\"Gold\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.achievementList.add(new FirstLogin());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        FirstLogin.updatePoints();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Updates status of an achievement."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param lock to unlock achievement."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param index index of achievement inside achievement list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param points set points gained from unlocking achievement."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void updateStatus(Boolean lock, int index, int points) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        achievementList.get(index).setLock(lock);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        achievementList.get(index).setPoints(points);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Checks if the condition for busybee have been satisfied"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * and updates status of achievement accordingly."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return updated version of achievement list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public ArrayList\u003cAchievements\u003e updateBusyBee() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        for(int i \u003d 0; i \u003c this.achievementList.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            if (this.achievementList.get(i).getDescription().equals(\"Busybee\") \u0026\u0026 achievementList.get(i).getAchievementLevel().equals(addAchievementLevel) \u0026\u0026 achievementList.get(i).checkLock()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                this.achievementList.get(i).setLock(false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                this.achievementList.get(i).setPoints(addPoints);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                System.out.println(\"You have unlocked this achievement!\\n\" + this.achievementList.get(i));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return achievementList;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Checks if the condition for completionist have been satisfied"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * and updates status of achievement accordingly."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return updated version of achievement list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public ArrayList\u003cAchievements\u003e updateCompletionist() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        for(int i \u003d 0; i \u003c achievementList.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            if (achievementList.get(i).getDescription().equals(\"Completionist\") \u0026\u0026 achievementList.get(i).getAchievementLevel().equals(doneAchievementLevel) \u0026\u0026 achievementList.get(i).checkLock()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                achievementList.get(i).setLock(false);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                achievementList.get(i).setPoints(addPoints);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                System.out.println(\"You have unlocked this achievement!\\n\" + achievementList.get(i));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return achievementList;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Checks if the condition for consecutive login have been satisfied"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * and updates status of achievement accordingly."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return updated version of achievement list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public ArrayList\u003cAchievements\u003e updateDedicated() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        for(int i \u003d 0; i \u003c achievementList.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            if(achievementList.get(i).getDescription().equals(\"Dedicated to the art\") \u0026\u0026 achievementList.get(i).getAchievementLevel().equals(loginAchievementLevel) \u0026\u0026 achievementList.get(i).checkLock()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                achievementList.get(i).setLock(false);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                achievementList.get(i).setPoints(loginPoints);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                System.out.println(\"You have unlocked this achievement!\\n\" + achievementList.get(i));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return achievementList;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Adds achievements to achievement list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param achievements achievement to be added to achievement list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void add(Achievements achievements) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        achievementList.add(achievements);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Gets a particular achievement from achievement list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param i index of achievement."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return an achievement."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public Achievements get(int i) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return achievementList.get(i);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Gets the size of achievement list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return size of achievement."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return achievementList.size();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Display all achievements from achievement list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void list() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        System.out.println(\"\\uD83D\\uDD13 ACHIEVEMENTS UNLOCKED \\uD83D\\uDD13\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if(!achievementList.isEmpty()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            int l \u003d 0;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            for(int i \u003d 0; i \u003c achievementList.size(); i ++) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                if(!achievementList.get(i).checkLock()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    l ++;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    System.out.print(l + \". \");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    System.out.println(achievementList.get(i));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            System.out.println(\"\\uD83D\\uDD12 LOCKED ACHIEVEMENTS \\uD83D\\uDD12\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            int j \u003d 0;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            for(int i \u003d 0; i \u003c achievementList.size(); i ++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                if(achievementList.get(i).checkLock()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    j ++;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    System.out.print(j + \". \");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    System.out.println(achievementList.get(i));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            System.out.println(\"Total Points \u003d \" + totalPoints + \" \\uD83D\\uDCB0\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Creates a duplicate of achievement list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return array of achievements."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public ArrayList\u003cAchievements\u003e createCopy() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        ArrayList\u003cAchievements\u003e copy \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "\tfor (int i \u003d 0; i \u003c achievementList.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            copy.add(achievementList.get(i));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "\treturn copy;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 8,
      "jingkang97": 166
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/achievement/Achievements.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.achievement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * Achievements that the user can achieve in Hustler."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public abstract class Achievements implements Write {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Total points the user has."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static int totalPoints;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve achievement level of a particular achievement."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public abstract String getAchievementLevel();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve description of an achievement."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public abstract String getDescription();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve information regarding an achievement."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public abstract String getInformation();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve points attainable from an achievement."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public abstract int getPoints();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Update how much point is gained from unlocking an achievement."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param points number of points"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public abstract int setPoints(int points);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Check whether achievement is locked."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public abstract Boolean checkLock();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Unlock an achievement."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param lock lock"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public abstract Boolean setLock(Boolean lock);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Format which the achievement will be printed out."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return \"Gained:\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 1,
      "jingkang97": 60,
      "ngjiewu": 2
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/achievement/AddTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.achievement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * Achievement which can be attained after certain number of tasks are added."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * There is 3 achievement level which depends on the number of tasks added."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public class AddTask extends Achievements {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Number of tasks added."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static int numberOfTasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Keeps track of final points which is dependent"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * on number of tasks completed and stores it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static int addPoints;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Achievement level - Bronze, Silver, Gold."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static String addAchievementLevel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Description of achievement."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Information regarding how to attain achievement."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private String information;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Achievement level - Bronze, Silver, Gold."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private String achievementLevel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Points earned."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private int points;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Achievement status."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private Boolean locked;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Points earn from bronze level of achievement."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static final int BRONZE_POINT \u003d 5;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Points earn from silver level achievement."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static final int SILVER_POINT \u003d 10;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Points from gold level achievement."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static final int GOLD_POINT \u003d 15;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Initialise this achievement."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param achievementLevel Achievement level of the achievement."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public AddTask(String achievementLevel) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.description \u003d \"Busybee\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.information \u003d \"Added 10 tasks, 100 tasks, and 1000 tasks for Bronze, Silver and Gold consecutively.\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.achievementLevel \u003d achievementLevel;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.points \u003d 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.locked \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Increase the number of tasks added."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return number of tasks added."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static int increment() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        numberOfTasks++;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return numberOfTasks;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Update the achievement level if user meets the condition."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Condition base on number of tasks added."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return Achievement level."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static String updateAchievementLevel() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if(numberOfTasks \u003d\u003d 5) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            addAchievementLevel \u003d \"Bronze\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else if(numberOfTasks \u003d\u003d 10) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            addAchievementLevel \u003d \"Silver\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else if (numberOfTasks \u003d\u003d 15) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            addAchievementLevel \u003d \"Gold\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            addAchievementLevel \u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return addAchievementLevel;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Update points accordingly."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return points attained from number of tasks done."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static int updatePoints() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if (numberOfTasks \u003d\u003d 5) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            addPoints \u003d BRONZE_POINT;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            totalPoints +\u003d addPoints;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else if (numberOfTasks \u003d\u003d 10) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            addPoints \u003d SILVER_POINT;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            totalPoints +\u003d addPoints;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else if (numberOfTasks \u003d\u003d 15) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "           addPoints \u003d GOLD_POINT;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "           totalPoints +\u003d addPoints;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            addPoints \u003d 0;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return addPoints;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Gets achievement level of the achievement."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return achievement level."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public String getAchievementLevel() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return this.achievementLevel;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve description of achievement."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return description."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve information regarding the achievement."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return information."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public String getInformation() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return this.information;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve current points from achievement."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return points."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public int getPoints() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return points;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Update points gained from unlocking achievement."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param points updated points."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return points."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public int setPoints(int points) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.points \u003d points;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return points;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Checks whether achievement have been unlocked."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return true or false."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public Boolean checkLock() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return locked;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Unlocks achievement."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param lock Lock condition."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return true or false."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public Boolean setLock(Boolean lock) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        locked \u003d lock;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return locked;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * The format in which the achievement will be printed out."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return string format of the achievement."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return super.toString() + \" \" + points + \" \" + description + \" \" + achievementLevel;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Format in which achievement will be stored."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return string format of achievement."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String toTxt() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return locked + \"|\" + points + \"|\" + achievementLevel + \"|\" + description + \"|\" + information;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 8,
      "nystera": 1,
      "jingkang97": 184,
      "ngjiewu": 14
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/achievement/ConsecutiveLogin.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.achievement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * Achievement which can be attained after user logs in consecutively."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * There are 3 achievement levels which depend on the number of consecutive login."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public class ConsecutiveLogin extends Achievements {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Checks if user logs in consecutively."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static Boolean consecutiveCheck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Keeps track of how many times user logs in consecutively."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static int consecutiveCount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Points earned from logging in consecutively."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static int loginPoints;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Date and time stored every time user logs in."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static LocalDateTime storedDateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Achievement level - Bronze, Silver, Gold."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static String loginAchievementLevel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Description of achievement."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Information regarding how to attain achievement."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private String information;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Achievement level - Bronze, Silver, Gold."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private String achievementLevel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Points earned."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private int points;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Achievement status."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private Boolean locked;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Points earn from bronze level of achievement."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static final int BRONZE_POINT \u003d 5;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Points earn from silver level achievement."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static final int SILVER_POINT \u003d 10;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Points from gold level achievement."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static final int GOLD_POINT \u003d 15;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Initialise this achievement."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param achievementLevel Achievement level of the achievement."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public ConsecutiveLogin(String achievementLevel) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.description \u003d \"Dedicated to the art\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.information \u003d \"Logs in for 5, 10 and 15 days for Bronze, Silver and Gold consecutively.\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.achievementLevel \u003d achievementLevel;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.points \u003d 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.locked \u003d true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Checks if user logs in consecutively day after day."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return true if user logs in consecutively."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static Boolean checkLogin() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        LocalDateTime currentTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        long duration \u003d Duration.between(storedDateTime,currentTime).toDays();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if (duration \u003d\u003d 1) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            consecutiveCheck \u003d true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            consecutiveCheck \u003d false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return consecutiveCheck;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Resets consecutive count if user do not log in consecutively."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return false if user did not log in consecutively."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static Boolean reset() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        LocalDateTime currentTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        long duration \u003d Duration.between(storedDateTime,currentTime).toDays();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if (duration \u003e 1) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Update number of consecutive counts depending on how the user logs in."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return consecutive counts."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static int updateCount() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if(!checkLogin() \u0026\u0026 reset()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            consecutiveCount \u003d 0;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else if (checkLogin()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            consecutiveCount++;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return consecutiveCount;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Update the achievement level if user meets the condition."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Condition base on number of consecutive login."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return Achievement level."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static String updateAchievementLevel() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if(consecutiveCount \u003d\u003d 5) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            loginAchievementLevel \u003d \"Bronze\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else if(consecutiveCount \u003d\u003d 10) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            loginAchievementLevel \u003d \"Silver\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else if (consecutiveCount \u003d\u003d 15) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            loginAchievementLevel \u003d \"Gold\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            loginAchievementLevel \u003d null;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return loginAchievementLevel;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Update points accordingly."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return points attained from consecutive login."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static int updatePoints() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if (consecutiveCount \u003d\u003d 5) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            loginPoints \u003d BRONZE_POINT;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            totalPoints +\u003d loginPoints;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else if (consecutiveCount \u003d\u003d 10) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            totalPoints +\u003d loginPoints;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            loginPoints +\u003d SILVER_POINT;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else if (consecutiveCount \u003d\u003d 15) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            totalPoints +\u003d loginPoints;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            loginPoints +\u003d GOLD_POINT;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            loginPoints \u003d 0;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return loginPoints;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Gets achievement level of the achievement."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return achievement level."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String getAchievementLevel() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return this.achievementLevel;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve description of achievement."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return description."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve information regarding the achievement."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return information."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public String getInformation() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return this.information;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve current points from achievement."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return points."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public int getPoints() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return points;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Update points gained from unlocking achievement."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param points updated points."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return points."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public int setPoints(int points) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.points \u003d points;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return points;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Checks whether achievement have been unlocked."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return true or false."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public Boolean checkLock() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return locked;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Unlocks achievement."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param lock Lock condition."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return true or false."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public Boolean setLock(Boolean lock) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        locked \u003d lock;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return locked;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * The format in which the achievement will be printed out."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return string format of the achievement."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return super.toString() + \" \" + points + \" \" + description + \" \" + achievementLevel;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Format in which achievement will be stored."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return string format of achievement."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String toTxt() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return locked + \"|\" + points + \"|\" + achievementLevel + \"|\" + description + \"|\" + information;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 7,
      "nystera": 1,
      "jingkang97": 232,
      "ngjiewu": 12
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/achievement/DoneTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.achievement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * Achievement which can be attained after certain number of tasks are completed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * There is 3 achievement level which depends on the number of tasks completed."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class DoneTask extends Achievements {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Number of tasks done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static int numberOfDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Keeps track of final points which is dependent"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * on number of tasks completed and stores it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static int donePoints;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Achievement level - Bronze, Silver, Gold."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static String doneAchievementLevel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Description of achievement."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Information regarding how to attain achievement."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private String information;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Achievement level - Bronze, Silver, Gold."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private String achievementLevel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Points earned."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private int points;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Achievement status."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private Boolean locked;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Points earn from bronze level of achievement."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static final int BRONZE_POINT \u003d 5;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Points earn from silver level achievement."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static final int SILVER_POINT \u003d 10;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Points from gold level achievement."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static final int GOLD_POINT \u003d 15;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Initialise this achievement."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param achievementLevel Achievement level of the achievement."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public DoneTask(String achievementLevel) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.description \u003d \"Completionist\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.information \u003d \"Completed 5 tasks, 25 tasks and 125 tasks for Bronze, Silver and Gold consecutively.\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.achievementLevel \u003d achievementLevel;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.points \u003d 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.locked \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Increase number of tasks done when user mark task as done."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return number of tasks done."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static int increment() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        numberOfDone++;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return numberOfDone;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Update the achievement level if user meets the condition."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Condition base on number of tasks done."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return Achievement level."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static String updateAchievementLevel() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if(numberOfDone \u003d\u003d 5) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            doneAchievementLevel \u003d \"Bronze\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else if(numberOfDone \u003d\u003d 10) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            doneAchievementLevel \u003d \"Silver\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else if (numberOfDone \u003d\u003d 15) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            doneAchievementLevel \u003d \"Gold\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            doneAchievementLevel \u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return doneAchievementLevel;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Update points accordingly."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return points attained from number of tasks done."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static int updatePoints() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if (numberOfDone \u003d\u003d 5) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            donePoints \u003d BRONZE_POINT;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            totalPoints +\u003d donePoints;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else if (numberOfDone \u003d\u003d 10) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            donePoints \u003d SILVER_POINT;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            totalPoints +\u003d donePoints;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else if (numberOfDone \u003d\u003d 15) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            totalPoints +\u003d donePoints;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            donePoints \u003d GOLD_POINT;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            donePoints \u003d 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return donePoints;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Gets achievement level of the achievement."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return achievement level."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String getAchievementLevel() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return this.achievementLevel;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve description of achievement."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return description."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve information regarding the achievement."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return information."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public String getInformation() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return this.information;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve current points from achievement."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return points."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public int getPoints() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return points;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Update points gained from unlocking achievement."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param points updated points."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return points."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public int setPoints(int points) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.points \u003d points;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return points;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Checks whether achievement have been unlocked."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return true or false."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public Boolean checkLock() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return this.locked;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Unlocks achievement."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param lock Lock condition."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return true or false."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public Boolean setLock(Boolean lock) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        locked \u003d lock;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return locked;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * The format in which the achievement will be printed out."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return string format of the achievement."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return super.toString() + \" \" + points + \" \" + description + \" \" + achievementLevel;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Format in which achievement will be stored."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return string format of achievement."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public String toTxt() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return locked + \"|\" + points + \"|\" + achievementLevel + \"|\" + description + \"|\" + information;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 8,
      "nystera": 4,
      "jingkang97": 182,
      "ngjiewu": 15
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/achievement/FirstLogin.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "package seedu.hustler.game.achievement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * Achievement which can be attained after user first logs in."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public class FirstLogin extends Achievements {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Description of achievement."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Information regarding how to attain achievement."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private String information;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Achievement level of achievement - Bronze, Silver, Gold."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private String achievementLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Points earned."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private int points;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Achievement status."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private Boolean locked;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Initialise this achievement."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public FirstLogin() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.description \u003d \"Fresh off the boat\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.information \u003d \"Use Hustler for the first time.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        this.achievementLevel \u003d \"Gold\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.points \u003d 15;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        locked \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Update total points when user attains this achievement."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return total points."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static int updatePoints() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        totalPoints +\u003d 15;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return totalPoints;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Gets achievement level of the achievement."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return achievement level."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String getAchievementLevel() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return achievementLevel;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve description of achievement."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return description."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve information regarding the achievement."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return information."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public String getInformation() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return information;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Retrieve current points from achievement."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return points."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public int getPoints() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return points;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Update points gained from unlocking achievement."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param points updated points."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return points."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public int setPoints(int points) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.points \u003d points;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return points;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Checks whether achievement have been unlocked."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return true or false."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public Boolean checkLock() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return locked;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Unlocks achievement."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param lock Lock condition."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return true or false."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public Boolean setLock(Boolean lock) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        locked \u003d lock;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return locked;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * The format in which the achievement will be printed out."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return string format of the achievement."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return super.toString() + \" \" + points + \" \" + this.description + \" \" + achievementLevel;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Format in which achievement will be stored."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return string format of achievement."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String toTxt() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return locked + \"|\" + points + \"|\" + achievementLevel + \"|\" + description + \"|\" + information;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 1,
      "jingkang97": 129,
      "ngjiewu": 6
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/achievement/Write.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "package seedu.hustler.game.achievement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * The interface that all classes in achievement must inherit to"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * convert them to proper format before storing them in a txtfile."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public interface Write {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Convert object to text format to be written into achievement.txt."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return String format of achievement."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public String toTxt();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingkang97": 15
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/avatar/Avatar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.avatar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.data.AvatarStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.game.shop.items.ShopItem;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.game.shop.items.armors.Armor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.game.shop.items.weapons.Weapon;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * A class for the avatar in Hustler."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class Avatar implements Convertible {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The name of the avatar."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Level of the avatar."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private Level level;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Stats of the avatar."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private Stats stats;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The equipped weapon of the avatar."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private Optional\u003c? extends ShopItem\u003e weapon;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The equipped armor of the avatar."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private Optional\u003c? extends ShopItem\u003e armor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Default initialization of the level and stat."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public Avatar() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.name \u003d \"Avatar\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.level \u003d new Level();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.stats \u003d new Stats();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.weapon \u003d Optional.empty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.armor \u003d Optional.empty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Initializing name, level and stat with specific"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * values."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param level object to initialize level with"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param stats object to initialize stats with"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Avatar(String name, Level level, Stats stats, Optional\u003cWeapon\u003e weapon, Optional\u003cArmor\u003e armor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.level \u003d level;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.stats \u003d stats;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.weapon \u003d weapon;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.armor \u003d armor;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Sets the name for the avatar."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param preferredName the new name to update to the avatar."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the avatar with the updated name."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Avatar setName(String preferredName) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.name \u003d preferredName;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nystera"
        },
        "content": "        AvatarStorage.save(this);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Gets the name for the avatar."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Increases avatar xp by 1. Avatar levels up and increases"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * its stats if the xp gained levels it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the level of the avatar."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Level gainXp() throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.level \u003d level.increaseXp();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (this.level.canLevel()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nystera"
        },
        "content": "            this.level \u003d level.levelUp();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nystera"
        },
        "content": "            this.stats \u003d stats.upStats(this.level.getLevel());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nystera"
        },
        "content": "            showCongrats();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nystera"
        },
        "content": "        AvatarStorage.save(this);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this.level;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void equip(ShopItem equipment) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if(equipment.getType().equals(\"Weapon\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nystera"
        },
        "content": "            this.weapon \u003d Optional.of(equipment);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else if (equipment.getType().equals(\"Armor\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nystera"
        },
        "content": "            this.armor \u003d Optional.of(equipment);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nystera"
        },
        "content": "        AvatarStorage.save(this);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Displays on the screen the congratulatory message to indicate that the User"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * has leveled up."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private void showCongrats() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(\"\\tCongratulations, you\u0027ve leveled up! Your avatar has gotten stronger:\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(this.toString());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(\"\\t_____________________________________\\n\\n\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nystera"
        },
        "content": "        String equipment \u003d (weapon.isEmpty() \u0026\u0026 armor.isEmpty()) ? \"\" : (\"[Equipped: \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nystera"
        },
        "content": "            + (weapon.map(weapon -\u003e weapon.toString()).orElse(\"\"))"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nystera"
        },
        "content": "                + (armor.map(armor -\u003e armor.toString()).orElse(\"\")) + \"]\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this.name + \", \" + this.level.toString() + \"\\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nystera"
        },
        "content": "            + this.stats.toString() + \"\\n\" + equipment;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String toTxt() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return \"Name \" + this.name + \"\\n\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nystera"
        },
        "content": "            + \"Level \" + this.level.toTxt() + \"\\n\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nystera"
        },
        "content": "            + \"Stats \" + this.stats.toTxt() + \"\\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nystera"
        },
        "content": "            + \"Weapon \" + this.weapon.map(weapon -\u003e weapon.toString()) + \"\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nystera"
        },
        "content": "            + \"Armor \" + this.armor.map(armor -\u003e armor.toString());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 32,
      "nystera": 107
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/avatar/Convertible.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.avatar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": " * The interface that all classes in avatar must inherit to"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * convert them to saveAchievements in a txtfile."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "public interface Convertible {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Converts avatar into a parsable text format to saveAchievements in a txt file."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the String to add into a txt file."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String toTxt();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 11,
      "jingkang97": 2
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/avatar/Inventory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.avatar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.game.shop.ShopList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.game.shop.items.ShopItem;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class Inventory {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private ArrayList\u003cShopItem\u003e items;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Inventory() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "        items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Inventory updateInventory() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.items \u003d Hustler.shopList.getPurchasedItems();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public int getSize() { return items.size(); }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public ShopItem get(int i) { return items.get(i); }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void getToEquip(int index) throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "        Hustler.avatar.equip(items.get(index));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        System.out.println(\"You are equipped with \" + items.get(index));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void list() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(\"********** You currently have these items: **********\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (items.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": "            System.out.println(\"You have no items in your inventory.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nystera"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nystera"
        },
        "content": "            for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nystera"
        },
        "content": "                System.out.println(i + 1 + \". \" + items.get(i).toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nystera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(\"******************************************************\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 40,
      "jingkang97": 5
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/avatar/Level.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.avatar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " * Class representing the level of the avatar. Also contains the current xp."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class Level implements Convertible {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Integer level of avatar."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private int level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Integer value of XP. Avatar has to hit this threshold"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * to level up."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private int xp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Constructs a default Level."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public Level() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.level \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.xp \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Constructs Level with the given level and xp."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param level the current level of the avatar."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param xp the current xp of the avatar."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Level(int level, int xp) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.level \u003d level;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.xp \u003d xp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Gets the current level of the avatar."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the current level of the avatar."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public int getLevel() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this.level;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Gets the current xp of the avatar."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the current xp of the avatar."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public int getXp() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this.xp;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Increment xp by 1."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the current Level."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Level increaseXp() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.xp++;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Levels up by 1."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the current level."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Level levelUp() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return new Level(this.level + 1, this.xp);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Checks if avatar can reach the next level."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return true if avatar can gain a level; false if otherwise."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public boolean canLevel() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (this.xp \u003e\u003d xpNeeded(this.level)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The simple algorithm to calculate the xp needed for the"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * next level."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param level the level of the avatar."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the xp needed to hit the next level."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private int xpNeeded(int level) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (level \u003c\u003d 3) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return 5 * level;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return (3 * (level * level)) - ((level - 3) * 15);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return \"Level: \" + this.level + \" | XP: \" + this.xp;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String toTxt() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this.level + \" \" + this.xp;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 19,
      "nystera": 89,
      "ngjiewu": 1
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/avatar/Stats.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.avatar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Class that deals with the stats of avatar."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class Stats implements Convertible {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Stat that deals damage."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private int damage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Stat that blocks damage."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private int defence;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Stat that represents stamina."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private int stamina;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Stat that represents speed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private int speed;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Constructs the default Stats values."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public Stats() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.damage \u003d 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.defence \u003d 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.stamina \u003d 3;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.speed \u003d 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Construct Stats with the given damage, defence, stamina"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * and speed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param damage the damage of the avatar."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param defence the defence of the avatar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param stamina the stamina of the avatar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param speed the speed of the avatar."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Stats(int damage, int defence, int stamina, int speed) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.damage \u003d damage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.defence \u003d defence;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.stamina \u003d stamina;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.speed \u003d speed;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Increases the stats based on the current level."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param level the current level of the avatar."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the updated stats after increment."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Stats upStats(int level) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.damage +\u003d (level % 2 \u003d\u003d 0) ? 2 : 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.defence +\u003d (level % 3 \u003d\u003d 0) ? 2 : 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.stamina +\u003d 2;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.speed +\u003d (level % 3 \u003d\u003d 0) ? 1 : 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return \"Damage: \"  + this.damage + \"\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nystera"
        },
        "content": "            + \"Defence: \" + this.defence + \"\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nystera"
        },
        "content": "            + \"Stamina: \" + this.stamina + \"\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nystera"
        },
        "content": "            + \"Speed: \" + this.speed;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String toTxt() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this.damage + \" \" + this.defence + \" \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nystera"
        },
        "content": "            + this.stamina + \" \" + this.speed;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 30,
      "nystera": 48
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/shop/ShopList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.shop;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.game.achievement.Achievements;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.game.shop.items.ShopItem;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.game.shop.items.weapons.Broadsword;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.game.shop.items.weapons.Mace;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.game.shop.items.weapons.MoonlightSword;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.game.shop.items.armors.Chainmail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.game.shop.items.armors.IronArmor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.game.shop.items.armors.LeatherArmor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": " * The list of items that can be purchased in the shop."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class ShopList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The ArrayList of ShopItem to be purchased."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private ArrayList\u003cShopItem\u003e shopList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Constructs a ShopList and populate with every existing shopItem."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public ShopList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.shopList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "        populateShop();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Prints out the list of ShopItems available in the store."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public ShopList list() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(\"******************** Here are the items in the shop ********************\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nystera"
        },
        "content": "        for (int i \u003d 0; i \u003c this.shopList.size(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nystera"
        },
        "content": "            /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nystera"
        },
        "content": "             * Divides the list to format the printing of different classes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nystera"
        },
        "content": "             */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nystera"
        },
        "content": "            if (i \u003d\u003d 0 || !(shopList.get(i).isEquals(shopList.get(i - 1)))) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nystera"
        },
        "content": "                System.out.println(\"\\n\\t\\t\\t\\t\u003d\u003d\u003d\u003d\u003d\u003d\" + shopList.get(i).getType() + \"\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nystera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nystera"
        },
        "content": "            System.out.print((i + 1) + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nystera"
        },
        "content": "            System.out.print(shopList.get(i).toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nystera"
        },
        "content": "            System.out.println(shopList.get(i).isPurchased() ? \" [Purchased]\" :"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nystera"
        },
        "content": "                \" [\" + shopList.get(i).getCost() + \" points to purchase]\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(\"\\t\\t\\t\\tYou currently have: \" + Achievements.totalPoints + \" points.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(\"*************************************************************************\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Purchase the current item in the shop in the given index."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param index the index of the item in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the ShopItem in the given index; null if IndexOfOfBounds exception is caught."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Optional\u003cShopItem\u003e buy(int index) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nystera"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nystera"
        },
        "content": "            if (!shopList.get(index).isPurchased()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nystera"
        },
        "content": "                if (shopList.get(index).canPurchase(Achievements.totalPoints)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    shopList.get(index).setPurchased(true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    Achievements.totalPoints -\u003d shopList.get(index).getCost();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    System.out.println(\"\\t Item has been purchased!\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    System.out.println(\"\\tYour leftover points are: \" + Achievements.totalPoints);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    return Optional.ofNullable(shopList.get(index));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nystera"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    System.out.println(\"\\tNot enough points. Please accumulate more points!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    return Optional.empty();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nystera"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nystera"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nystera"
        },
        "content": "                System.out.println(\"\\tItem has already been purchased! Please check your inventory.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nystera"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nystera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nystera"
        },
        "content": "            System.out.println(\"\\tThere is no such index! Please input a valid number\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Gets the current size of the ArrayList in shopList."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the size of the shopList."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this.shopList.size();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Updates the Boolean value of isPurchased of the ShopItem to be true."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param index the index of the ShopItem."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param bool the boolean value of isPurchased."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void updateStatus(int index, Boolean bool) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.shopList.get(index).setPurchased(bool);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Obtain all the isPurchased value of every ShopItem to update in the txtfile."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the String to be written in shop.txt."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String itemsStatus() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nystera"
        },
        "content": "        String toWrite \u003d \"\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nystera"
        },
        "content": "        for (int i \u003d 0; i \u003c shopList.size(); i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nystera"
        },
        "content": "            toWrite +\u003d shopList.get(i).isPurchased().toString() + (i !\u003d shopList.size() - 1 ? \"\\n\" : \"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return toWrite;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public ArrayList\u003cShopItem\u003e getPurchasedItems() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nystera"
        },
        "content": "        ArrayList\u003cShopItem\u003e itemsPurchased \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nystera"
        },
        "content": "        for (ShopItem item : shopList) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nystera"
        },
        "content": "            if (item.isPurchased()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nystera"
        },
        "content": "                itemsPurchased.add(item);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nystera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return itemsPurchased;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Adds in every existing ShopItem in shop."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the newly populated ShopList."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private ShopList populateShop() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nystera"
        },
        "content": "        shopList.add(new Broadsword());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nystera"
        },
        "content": "        shopList.add(new Mace());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nystera"
        },
        "content": "        shopList.add(new MoonlightSword());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nystera"
        },
        "content": "        shopList.add(new LeatherArmor());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nystera"
        },
        "content": "        shopList.add(new IronArmor());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nystera"
        },
        "content": "        shopList.add(new Chainmail());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 136
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/shop/items/Purchasable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.shop.items;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": " * Interface that all shop items implements; checks if the User is able to"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": " * purchase the selected item in the shop."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "public interface Purchasable {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The abstract function that checks if User is able to purchase"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * the item from the shop."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param points the current points of the avatar."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return true if User can purchase the item; false if otherwise."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "    boolean canPurchase(int points);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 16
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/shop/items/ShopItem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.game.shop.items;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.game.shop.items.armors.Armor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.game.shop.items.weapons.Weapon;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": " *  * The class in which every item will inherit from."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": " *   */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "public abstract class ShopItem implements Purchasable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *      * The cost of the shop item."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *           */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    protected int cost;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *      * Boolean if the shop item has been purchased."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *           */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    protected Boolean isPurchased;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *      * The type in string, of each item."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *           */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Boolean if the shop item is equipped. Optional as not all"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * items can be equipped."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param true if the item is equipped; false if otherwise."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private Optional\u003cBoolean\u003e isEquipped;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Constructs a ShopItem with the given cost, hasPurchased, and type."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param cost the cost of the item."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param hasPurchased if the ShopItem was purchased; false if otherwise."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param type the type in string, of the item."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public ShopItem(int cost, Boolean hasPurchased, String type) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        this.isPurchased \u003d hasPurchased;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.isEquipped \u003d Optional.empty();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *      * Gets the cost of the Shop Item."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *           * @return the cost of the shop item."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *                */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public int getCost() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        return this.cost;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *      * Gets the boolean value of isPurchased."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *           * @return true if item has been purchased; false if otherwise."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *                */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public Boolean isPurchased() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        return this.isPurchased;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *      * Sets the boolean value of isPurchased."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *           * @param purchased the boolean value if item has been purchased."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *                */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void setPurchased(Boolean purchased) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        this.isPurchased \u003d purchased;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *      * Gets the type of shop item."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *           * @return the type of the shop item in String."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *                */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *      * Checks if the shop item is same type as the other by comparing their type."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *           * @param other the other shop item to compare to."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *                * @return the boolean value if they are equivalent; false if otherwise."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *                     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public boolean isEquals(ShopItem other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        return this.type.equals(other.type);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public boolean canPurchase(int points) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        return points \u003e\u003d this.cost;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 72,
      "nystera": 18
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/shop/items/armors/Armor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.shop.items.armors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.game.shop.items.ShopItem;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": " * The abstract class that all armor that the avatar yields inherits from."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "public abstract class Armor extends ShopItem {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The defence increment of the armor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private final int DEF_INCR;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The stamina increment of the armor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private final int STA_INCR;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Constructs a new armor with the given cost, hasPurchased, defence increment"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * and stamina increment."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param cost the cost of the armor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param hasPurchased the boolean value if armor has been purchased."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param defIcr the defence increment of the armor."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param staIcr the stamina increment of the armor."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Armor(int cost, boolean hasPurchased, int defIcr, int staIcr) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "        super(cost, hasPurchased, \"Armor\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.DEF_INCR \u003d defIcr;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.STA_INCR \u003d staIcr;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static Optional\u003cArmor\u003e getArmor(String name) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (name.contains(\"Chainmail\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return Optional.of(new Chainmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else if (name.contains(\"Iron\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return Optional.of(new IronArmor());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else if (name.contains(\"Leather\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return Optional.of(new LeatherArmor());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Gets the defence increment of the armor."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the defence increment of the armor."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public int getDEF_INCR() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return DEF_INCR;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Gets the stamina increment of the armor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the stamina increment of the armor."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public int getSTA_INCR() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return STA_INCR;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return \"+\" + DEF_INCR + \" DEF, +\" + STA_INCR + \" STA \";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 65,
      "ngjiewu": 1
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/shop/items/armors/Chainmail.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.shop.items.armors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": " * The highest tiered armor in the shop."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class Chainmail extends Armor {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The defence increment of the Chainmail."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final int DEF_INCR \u003d 7;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The stamina increment of the Chainmail."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final int STA_INCR \u003d 6;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The cost of the Chainmail."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final int COST \u003d 15;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Constructs a new Chainmail with its default variables."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Chainmail() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nystera"
        },
        "content": "        super(COST, false, DEF_INCR, STA_INCR);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Constructs a new Chainmail with the given hasPurchased."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param hasPurchased the boolean value if the chainmail has been purchased."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Chainmail(boolean hasPurchased) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "        super(COST, hasPurchased, DEF_INCR, STA_INCR);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return \"Chainmail, \" + super.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 39,
      "ngjiewu": 2
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/shop/items/armors/IronArmor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.shop.items.armors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": " * The second tiered armor in the shop."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class IronArmor extends Armor {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The defence increment of the iron armor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final int DEF_INCR \u003d 3;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The stamina increment of the iron armor."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final int STA_INCR \u003d 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The cost of the iron armor."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final int COST \u003d 10;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Constructs a new iron armor with its default variables."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public IronArmor() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nystera"
        },
        "content": "        super(COST, false, DEF_INCR, STA_INCR);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Constructs a new iron armor with the boolean value of hasPurchased."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param hasPurchased the boolean value if the iron armor has been purchased."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public IronArmor(boolean hasPurchased) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "        super(COST, hasPurchased, DEF_INCR, STA_INCR);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return \"Iron Armor, \" + super.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 39,
      "ngjiewu": 2
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/shop/items/armors/LeatherArmor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.shop.items.armors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": " * The cheapest armor in the shop."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class LeatherArmor extends Armor {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The defence increment of the leather armor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final int DEF_INCR \u003d 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The stamina increment of the leather armor."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final int STA_INCR \u003d 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The cost of the leather armor."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final int COST \u003d 5;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Constructs a new leather armor with its default variables."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public LeatherArmor() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nystera"
        },
        "content": "        super(COST, false, DEF_INCR, STA_INCR);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Constructs a new leather armor with a boolean hasPurchased."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param hasPurchased the boolean value if leather armor has been purchased."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public LeatherArmor(boolean hasPurchased) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "        super(COST, hasPurchased, DEF_INCR, STA_INCR);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return \"Leather Armor, \" + super.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 39,
      "ngjiewu": 2
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/shop/items/weapons/Broadsword.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.shop.items.weapons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": " * The cheapest weapon in the shop which gives the least damage."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class Broadsword extends Weapon {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The damage increment of Broadsword."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final int DMG_INCR \u003d 2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The cost of the Broadsword."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final int COST \u003d 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Constructs a Broadsword with it\u0027s default variables."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Broadsword() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "        super(COST, false, DMG_INCR);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Constructs a new Broadsword with the given hasPurchased."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param hasPurchased boolean if the Broadsword has been purchased."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Broadsword(boolean hasPurchased) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "        super(COST, hasPurchased, DMG_INCR);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return \"Broadsword, \" + super.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 34,
      "ngjiewu": 2
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/shop/items/weapons/Mace.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.shop.items.weapons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": " * The second tier weapon."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class Mace extends Weapon {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The damage increment of the Mace."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final int DMG_INCR \u003d 4;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The cost of the Mace."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final int COST \u003d 7;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Constructs a mace with its default variables."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Mace() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "        super(COST, false, DMG_INCR);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Constructs a mace with the given hasPurchased."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param hasPurchased boolean if the mace has been purchased."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Mace(boolean hasPurchased) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "        super(COST, hasPurchased, DMG_INCR);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return \"Mace, \" + super.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nystera": 35,
      "ngjiewu": 2
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/shop/items/weapons/MoonlightSword.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.shop.items.weapons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": " * The highest tiered Weapon in the shop."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class MoonlightSword extends Weapon {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The damage increment of the Moonlight Sword."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final int DMG_INCR \u003d 10;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The cost of the Moonlight Sword."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final int COST \u003d 20;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Constructs a new Moonlight Sword with its default variables."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public MoonlightSword() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "        super(COST, false, DMG_INCR);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Constructs a new Moonlight Sword with the given hasPurchased."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param hasPurchased boolean if the Moonlight Sword has been purchased."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public MoonlightSword(boolean hasPurchased) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "        super(COST, hasPurchased, DMG_INCR);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return \"Moonlight Sword, \" + super.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 34,
      "ngjiewu": 2
    }
  },
  {
    "path": "src/main/java/seedu/hustler/game/shop/items/weapons/Weapon.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.shop.items.weapons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.game.shop.items.ShopItem;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": " * Abstract class of weapon that all weapons the avatar yields inherits from."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "public abstract class Weapon extends ShopItem {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The damage increment of the weapon."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private final int DMG_INCR;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Constructs a weapon with the cost, hasPurchased, and the damage increment."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param cost the cost of the weapon."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param hasPurchased the boolean value if the weapon has been purchased; false if otherwise."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param dmgIncr the int of the damage increment."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Weapon(int cost, boolean hasPurchased, int dmgIncr) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "        super(cost, hasPurchased, \"Weapon\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.DMG_INCR \u003d dmgIncr;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static Optional\u003cWeapon\u003e getWeapon(String name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (name.contains(\"Broadsword\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return Optional.of(new Broadsword());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else if (name.contains(\"Mace\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return Optional.of(new Mace());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else if (name.contains(\"Moonlight\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return Optional.of(new MoonlightSword());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Gets the damage increment of the weapon."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the damage of the weapon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public int getDamage() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this.DMG_INCR;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return \"+\" + this.DMG_INCR + \" DMG \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 50
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/CommandLineException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": " * Helps print out errors to prompt the user of the proper input."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class CommandLineException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public CommandLineException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Prints out the error message in the command prompt."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void getErrorMsg() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(Ui.LINE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(this.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(Ui.LINE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 23
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/CommandLogic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.logic.parser.DateTimeParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": " * Checks if the user input are desired by Duke by checking if the format of the String input is valid based off"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": " * the command type."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class CommandLogic {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Types of prompts to alert the users of their errors in the input."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final String WRONG_FORMAT_NO_DESCRIPTION \u003d \"Adding command description cannot be empty!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final String WRONG_FORMAT_LENGTH \u003d \"Please only type \\\"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final String WRONG_FORMAT_NO_TIME \u003d \"Todo does not need to have a time inputted!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final String WRONG_FORMAT_BY \u003d \"Deadline needs to have /\\\"by\\\" before inputting time!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final String WRONG_FORMAT_AT \u003d \"Event needs to have /\\\"at\\\" before inputting time!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final String WRONG_FORMAT_IN \u003d \"Ranged Event needs to have /\\\"in\\\" before inputting the times!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final String WRONG_FORMAT_AFTER \u003d \"Adding an after ToDo needs to have /\\\"after\\\" before inputting the index of linked task!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    private static final String WRONG_FORMAT_NEEDS \u003d \"FixedDurationTasks need to have/\\\"needs\\\" before inputting duration!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final String INVALID_NUMBER \u003d \"Please enter a valid number!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static final String INVALID_SNOOZE \u003d \"Please only snooze either a specific DD/MM/YYYY or \\\"\u003cnumber\u003e \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "        + \"\u003ctime to delay\u003e\\\"\\n etc: 3 days\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Tries to check for errors for a deadline input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param rawInput user\u0027s single line input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param userInput user\u0027s input split by spacing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return boolean expression depends on if the input is valid."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws CommandLineException for the Main class to catch."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static boolean validateDeadline(String rawInput, String[] userInput) throws CommandLineException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (isOneWord(rawInput)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_NO_DESCRIPTION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else if (!rawInput.contains(\"/by\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_BY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nystera"
        },
        "content": "            String date \u003d rawInput.split(\"/by \")[1];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Validates event to check for format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param rawInput raw user input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param userInput split user input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return true if event is validated"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws CommandLineException Exception for format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static boolean validateEvent(String rawInput, String[] userInput) throws CommandLineException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (isOneWord(rawInput)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_NO_DESCRIPTION);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else if (!rawInput.contains(\"/at\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_AT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Validates todo to check for format."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param rawInput raw user input"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param userInput split user input"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return true if validated"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws CommandLineException Exception for format"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static boolean validateToDo(String rawInput, String[] userInput) throws CommandLineException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (isOneWord(rawInput)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_NO_DESCRIPTION);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else if (rawInput.contains(\"/\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_NO_TIME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Validates Range to check for format."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param rawInput raw user input"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param userInput split user input"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return true if validated"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws CommandLineException Exception for format"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static boolean validateRange(String rawInput, String[] userInput) throws CommandLineException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (isOneWord(rawInput)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_NO_DESCRIPTION);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else if (!rawInput.contains(\"/in\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_IN);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nystera"
        },
        "content": "        String dates \u003d rawInput.split(\"/in \")[1];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nystera"
        },
        "content": "        String[] datesStr \u003d dates.split(\" and \", 2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nystera"
        },
        "content": "        DateTimeParser.getDateTime(datesStr[0]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nystera"
        },
        "content": "        DateTimeParser.getDateTime(datesStr[1]);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Validates DoAfter to check for format."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param rawInput raw user input"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param userInput split user input"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return true if validated"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws CommandLineException Exception for format"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static boolean validateDoAfter(String rawInput, String[] userInput) throws CommandLineException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (isOneWord(rawInput)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_NO_DESCRIPTION);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else if (!rawInput.contains(\"/after\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_AFTER);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nystera"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nystera"
        },
        "content": "            int number \u003d Integer.parseInt(rawInput.split(\"/after \", 2)[1]);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(INVALID_NUMBER);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static boolean validateFixedDurationTask(String rawInput) throws CommandLineException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (isOneWord(rawInput)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_NO_DESCRIPTION);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else if (!rawInput.contains(\"/needs\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_NEEDS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Validates number command to check for format."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param rawInput raw user input"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return true if validated"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws CommandLineException Exception for format"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Validates number command to check for format."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param rawInput raw user input"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return true if validated"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws CommandLineException Exception for format"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static boolean validateNumberCommand(String rawInput) throws CommandLineException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (!isTwoWord(rawInput)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_LENGTH + rawInput.split(\" \")[0] + \" \u003cnumber ID of task\u003e\\\"\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nystera"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nystera"
        },
        "content": "            int number \u003d Integer.parseInt(rawInput.split(\" \")[1]);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(INVALID_NUMBER);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Validates snooze command to check for format."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param command raw user input"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return true if validated"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws CommandLineException Exception for format"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static boolean validateSnooze(String command) throws CommandLineException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nystera"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nystera"
        },
        "content": "         * Checks if user is inputting snooze in form of (number of times) (delay) or a specific date."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nystera"
        },
        "content": "         */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (isTwoWord(command)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nystera"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nystera"
        },
        "content": "                int number \u003d Integer.parseInt(command.split(\" \")[0]);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nystera"
        },
        "content": "                switch (command.split(\" \")[1]) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nystera"
        },
        "content": "                case \"minutes\":"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nystera"
        },
        "content": "                case \"hours\":"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nystera"
        },
        "content": "                case \"days\":"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nystera"
        },
        "content": "                case \"weeks\":"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nystera"
        },
        "content": "                case \"months\":"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nystera"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    throw new CommandLineException(INVALID_SNOOZE);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nystera"
        },
        "content": "                }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nystera"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nystera"
        },
        "content": "                throw new CommandLineException(INVALID_SNOOZE);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nystera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else if (isOneWord(command)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nystera"
        },
        "content": "            DateTimeParser.getDateTime(command.split(\" \")[0]);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(INVALID_SNOOZE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Validates find command to check for format."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param rawInput raw user input"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return true if validated"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws CommandLineException Exception for format"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static boolean validateFind(String rawInput) throws CommandLineException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (!isTwoWord(rawInput)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_LENGTH + rawInput.split(\" \")[0] + \" \u003ckeyword\u003e\\\"\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Validates show command to check for format."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param rawInput raw user input"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return true if validated"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws CommandLineException Exception for format"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static boolean validateShow(String rawInput) throws CommandLineException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (!isTwoWord(rawInput)) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_LENGTH + rawInput.split(\" \")[0] + \" \u003cDD/MM/YYYY\u003e\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nystera"
        },
        "content": "            DateTimeParser.getDateTime(rawInput.split(\" \")[1]);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Validates one word command to check for format."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param rawInput raw user input"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return true if validated"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @throws CommandLineException Exception for format"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static boolean validateOneWord(String rawInput) throws CommandLineException {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (!isOneWord(rawInput)) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_LENGTH + rawInput.split(\" \")[0] + \"\\\"\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Checks one word."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param rawInput raw user input"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return true or false to check"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static boolean isOneWord(String rawInput) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return rawInput.split(\" \").length \u003d\u003d 1;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Checks two words."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param rawInput raw user input"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return true or false to check"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private static boolean isTwoWord(String rawInput) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return rawInput.split(\" \").length \u003d\u003d 2;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 10,
      "nystera": 252
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": " * Template for duke commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public abstract void execute() throws IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 1,
      "nystera": 11,
      "ngjiewu": 1
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/command/achievementCommand/AchievementCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.logic.command.achievementCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * Command to see all achievements."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public class AchievementCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Adds task of type and description inside taskInfo."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Hustler.achievementList.list();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        //AchievementList.showList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 2,
      "jingkang97": 17
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/command/avatar/CheckAvatarCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.logic.command.avatar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.logic.parser.anomaly.OneWordAnomaly;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": " * Command that checks the avatar\u0027s current status."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class CheckAvatarCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private String[] userInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private OneWordAnomaly anomaly \u003d new OneWordAnomaly();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public CheckAvatarCommand(String[] userInput) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nystera"
        },
        "content": "            anomaly.detect(userInput);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nystera"
        },
        "content": "            ui.showAvatarStatistics();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } catch (CommandLineException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "            ui.show_message(e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 31
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/command/avatar/EquipCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "package seedu.hustler.logic.command.avatar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.logic.parser.anomaly.InventoryAnomaly;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class EquipCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private final String[] userInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private InventoryAnomaly inventoryAnomaly \u003d new InventoryAnomaly();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public EquipCommand(String[] userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void execute() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        //int parsedInt \u003d Integer.parseInt(this.userInput[1]);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            inventoryAnomaly.detect(this.userInput);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            int parsedInt \u003d Integer.parseInt(this.userInput[1]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            Hustler.inventory.getToEquip(parsedInt - 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } catch (CommandLineException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            ui.show_message(e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 1,
      "nystera": 14,
      "jingkang97": 20
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/command/avatar/SetNameCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "package seedu.hustler.logic.command.avatar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": " * Command that sets the name of the avatar."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class SetNameCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The new name of the avatar."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Constructs a new SetNameCommand using the user inputs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param userInput the String array of the user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public SetNameCommand(String[] userInput) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.name \u003d userInput[1];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void execute() throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "        Hustler.avatar.setName(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": "        ui.showNameChangeSuccess();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 1,
      "nystera": 30,
      "jingkang97": 2
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/command/schedulecommands/AddEntry.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "package seedu.hustler.logic.command.schedulecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.logic.parser.anomaly.AddEntryAnomaly;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.schedule.RecommendedSchedule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Adds an entry to recommended schedule."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class AddEntry extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * User input to parse."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private String[] userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Detects anomalies for input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private AddEntryAnomaly anomaly \u003d new AddEntryAnomaly();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Initializes user input with supplied input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param userInput initialization of the userInput"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public AddEntry(String[] userInput) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Adds an entry to the recommended schedule."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "           anomaly.detect(userInput); "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        } catch(CommandLineException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            ui.show_message(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        int index \u003d Integer.parseInt(this.userInput[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        index--;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        RecommendedSchedule.addFromTaskList(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        RecommendedSchedule.displayRecommendedSchedule();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 49
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/command/schedulecommands/RemoveEntry.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "package seedu.hustler.logic.command.schedulecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.logic.parser.anomaly.RemoveEntryAnomaly;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.schedule.RecommendedSchedule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Removes an entry from the recommended schedule."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class RemoveEntry extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * User input to parse."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private String[] userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Detects anomalies in input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private RemoveEntryAnomaly anomaly \u003d new RemoveEntryAnomaly();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Initializes userInput with supplied value."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param userInput initialization for the userInput"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public RemoveEntry(String[] userInput) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Removes an entry from the recommended schedule."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            anomaly.detect(this.userInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        } catch(CommandLineException e){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            ui.show_message(e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        int index \u003d Integer.parseInt(this.userInput[1]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        index--;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        RecommendedSchedule.recommended.remove(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        RecommendedSchedule.reTime();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        RecommendedSchedule.displayRecommendedSchedule();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 50
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/command/schedulecommands/UpdateEntry.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "package seedu.hustler.logic.command.schedulecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.logic.parser.anomaly.UpdateEntryAnomaly;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.schedule.RecommendedSchedule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Changes the time allocated to an entry in the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * recommended schedule."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class UpdateEntry extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * User\u0027s input that needs to be parsed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private String[] userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Detects anomalies in input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private UpdateEntryAnomaly anomaly \u003d new UpdateEntryAnomaly();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Initialized the userInput with supplied value."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param userInput initialization value"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public UpdateEntry(String[] userInput) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Changes the time allocated to a task in the recommended"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * schedule."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            anomaly.detect(this.userInput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        } catch(CommandLineException e){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            ui.show_message(e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        String[] numbers \u003d userInput[1].split(\" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        int index \u003d Integer.parseInt(numbers[0]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        int time \u003d this.parseDuration(numbers[1]); "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        index--;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        RecommendedSchedule.updateAllocTime(index, time);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        RecommendedSchedule.displayRecommendedSchedule();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Parses the date time supplied in the form of H:M:S"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * to seconds."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param datetime datetime duration to parse"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return parsed number of seconds"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public int parseDuration(String datetime) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        String[] times \u003d datetime.split(\":\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        int hours \u003d Integer.parseInt(times[0]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        int minutes \u003d Integer.parseInt(times[1]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        int seconds \u003d Integer.parseInt(times[2]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return hours * 3600 + minutes * 60 + seconds;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 68
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/command/shop/BuyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.logic.command.shop;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.data.ShopStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.logic.parser.anomaly.BuyAnomaly;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": " * Command to purchase an item in the shop with the given index."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "public class BuyCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The index of the item desired."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * User input to parse."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private String[] userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Detect anomalies for input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private BuyAnomaly anomaly \u003d new BuyAnomaly();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Constructs a buyCommand with the index of the item."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param userInput initialization of the userInput"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public BuyCommand(String[] userInput) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nystera"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nystera"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nystera"
        },
        "content": "            anomaly.detect(userInput);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nystera"
        },
        "content": "            this.index \u003d Integer.parseInt(userInput[1]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nystera"
        },
        "content": "            Hustler.shopList.buy(this.index - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nystera"
        },
        "content": "            ShopStorage.update();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nystera"
        },
        "content": "            Hustler.inventory.updateInventory();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } catch (CommandLineException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nystera"
        },
        "content": "            ui.show_message(e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 51,
      "ngjiewu": 3
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/command/shop/InventoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.logic.command.shop;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.logic.parser.anomaly.OneWordAnomaly;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class InventoryCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private final String[] userInput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private OneWordAnomaly inventoryAnomaly \u003d new OneWordAnomaly();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public InventoryCommand(String[] userInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            inventoryAnomaly.detect(this.userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "            Hustler.inventory.list();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } catch (CommandLineException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            ui.show_message(e.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 1,
      "nystera": 9,
      "jingkang97": 18
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/command/shop/ShopListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.logic.command.shop;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": " * Command to execute the listing of items in the shop."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "public class ShopListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Lists the items in the shop."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "        Hustler.shopList.list();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 11,
      "ngjiewu": 5
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/command/task/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.logic.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.logic.parser.anomaly.AddCommandAnomaly;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.data.CommandLog;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.schedule.Scheduler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Command that adds task to list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Contains task type and description."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private String[] taskInfo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Detects anomalies in user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private AddCommandAnomaly anomaly \u003d new AddCommandAnomaly();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Initializes taskInfo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param taskInfo the info of the task to add."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public AddCommand(String[] taskInfo) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.taskInfo \u003d taskInfo;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Adds task of type and description inside taskInfo."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (this.taskInfo.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            ui.empty_description_error();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            CommandLog.deleteLatestLoggedCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            anomaly.detect(taskInfo);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        } catch (CommandLineException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            ui.show_message(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        List\u003cString\u003e taskDescription \u003d Arrays.asList(taskInfo[1].split(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (taskDescription.contains(\"/by\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            Hustler.list.add(\"deadline\", this.taskInfo[1]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        } else if (taskDescription.contains(\"/at\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            Hustler.list.add(\"event\", this.taskInfo[1]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            Hustler.list.add(\"todo\", this.taskInfo[1]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 3,
      "yzia2000": 52,
      "nystera": 8
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/command/task/ByeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.logic.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.logic.parser.anomaly.OneWordAnomaly;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " * Command the quits the entire Hustler program."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private final String[] userInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private OneWordAnomaly byeAnomaly \u003d new OneWordAnomaly();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public ByeCommand(String[] userInput) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Prints a good bye message and safely exits the program."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            byeAnomaly.detect(userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            ui.show_bye_message();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } catch(CommandLineException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            ui.show_message(e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 2,
      "jingkang97": 18,
      "ngjiewu": 17
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/command/task/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.logic.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.logic.parser.anomaly.DeleteAnomaly;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Command that deletes task in list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * User input that contains index of task to delete."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private String[] userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Detect anomalies for input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private DeleteAnomaly anomaly \u003d new DeleteAnomaly();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    * Initializes userInput."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    * @param userInput array that contains task id to delete"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public DeleteCommand(String[] userInput) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Deletes task at index taskIndex inside."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            anomaly.detect(userInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            if (userInput[1].equals(\"all\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                Hustler.list.clearList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(userInput[1]) - 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nystera"
        },
        "content": "            Hustler.list.removeTask(taskIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } catch (CommandLineException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            ui.show_message(e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 2,
      "yzia2000": 25,
      "nystera": 4,
      "ngjiewu": 18
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/command/task/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.logic.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.schedule.Scheduler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.parser.anomaly.DoneAnomaly;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Command to do task in list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * User input that contains index of task to do."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private String[] userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Detects anomalies for input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    private DoneAnomaly anomaly \u003d new DoneAnomaly();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    * Initializes userInput."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    * @param userInput input that contains task id to do"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public DoneCommand(String[] userInput) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Does task at index taskIndex inside."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            anomaly.detect(userInput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(userInput[1]) - 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            Hustler.list.doTask(taskIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            Scheduler.remove(Hustler.list.get(taskIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } catch (CommandLineException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            ui.show_message(e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 14,
      "yzia2000": 26,
      "nystera": 3,
      "ngjiewu": 4
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/command/task/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.logic.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.logic.parser.anomaly.FindAnomaly;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Command that lists tasks in TaskList instance."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * User input that contains keyword to search for in list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private String[] userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Detect anomalies for input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private FindAnomaly anomaly \u003d new FindAnomaly();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Initializes userInput."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param userInput the array of users inputs to initialize with."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public FindCommand(String[] userInput) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Lists commands which contain keyword."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            anomaly.detect(userInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nystera"
        },
        "content": "            Hustler.list.findTask(this.userInput[1]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } catch (CommandLineException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            ui.show_message(e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 2,
      "yzia2000": 26,
      "nystera": 4,
      "ngjiewu": 11
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/command/task/InvalidCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.logic.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Represents invalid command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class InvalidCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Print error for InvalidCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        ui.correct_command_error();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 2,
      "yzia2000": 13,
      "nystera": 2
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/command/task/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.logic.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.logic.parser.anomaly.OneWordAnomaly;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Command that lists tasks in TaskList instance."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private final String userInput[];"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private OneWordAnomaly listAnomaly \u003d new OneWordAnomaly();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public ListCommand(String[] userInput) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Lists commands in TaskList instance."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            listAnomaly.detect(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "            Hustler.list.displayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } catch(CommandLineException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            ui.show_message(e.getMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 2,
      "yzia2000": 11,
      "nystera": 3,
      "jingkang97": 16
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/command/task/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.logic.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.data.MemoryManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.logic.parser.anomaly.OneWordAnomaly;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private final String[] userInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private OneWordAnomaly redoAnomaly \u003d new OneWordAnomaly();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public RedoCommand(String[] userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Undoes a an undo command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void execute() throws IOException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            redoAnomaly.detect(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            MemoryManager memorymanager \u003d new MemoryManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            memorymanager.redo();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } catch(CommandLineException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            ui.show_message(e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 18,
      "jingkang97": 16
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/command/task/RemindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.logic.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.logic.parser.anomaly.OneWordAnomaly;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.Reminders;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": " * Command that executes reminders."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class RemindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private final String[] userInput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private OneWordAnomaly remindAnomaly \u003d new OneWordAnomaly();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public RemindCommand(String[] userInput) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Executes remind pipeline."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            remindAnomaly.detect(userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "            Reminders.runAll(Hustler.list);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "            Reminders.displayReminders();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } catch(CommandLineException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            ui.show_message(e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "    } "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 2,
      "nystera": 16,
      "jingkang97": 18
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/command/task/ScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.logic.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.data.Schedule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Command that lists tasks in TaskList instance."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class ScheduleCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * A schedule instance that shows schedules."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private Schedule schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * User input that contains the date."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private String[] userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Initializes userInput."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param userInput the array of users inputs that contains date."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public ScheduleCommand(String[] userInput) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Lists commands which have the date specified in userInput."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (this.userInput.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            ui.empty_description_error();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        Date date \u003d schedule.convertStringToDate(this.userInput[1]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (date !\u003d (null)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            schedule.printSchedule(date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 2,
      "yzia2000": 38,
      "nystera": 3,
      "ngjiewu": 1
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/command/task/SnoozeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.logic.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.logic.parser.anomaly.SnoozeAnomaly;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Command that snoozes tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class SnoozeCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * User input to parse."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private String[] userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Detect anomalies for input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private SnoozeAnomaly anomaly \u003d new SnoozeAnomaly();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Initializes user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param userInput user input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public SnoozeCommand(String[] userInput) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Deletes task at index inside userInput."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            anomaly.detect(userInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(userInput[1].split(\" \")[0]) - 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            String[] splitInput \u003d userInput[1].split(\" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            Hustler.list.snoozeTask(taskIndex, splitInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } catch (CommandLineException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            ui.show_message(e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 2,
      "yzia2000": 21,
      "nystera": 3,
      "ngjiewu": 20
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/command/task/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.logic.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.logic.parser.anomaly.SortAnomaly;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " * Command that sorts the task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * User input to parse."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private String[] userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Detect anomalies for input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private SortAnomaly anomaly \u003d new SortAnomaly();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Initializes the sortType."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param userInput type of sort."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public SortCommand(String[] userInput) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Sorts the task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            anomaly.detect(userInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            Hustler.list.sortTask(userInput[1]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } catch (CommandLineException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            ui.show_message(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 2,
      "ngjiewu": 42
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/command/task/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.logic.command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.parser.anomaly.UndoAnomaly;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.data.MemoryManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " * Command that undoes the previous command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Contains task type and description."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    private String[] taskInfo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Detects anomalies for input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    private UndoAnomaly anomaly \u003d new UndoAnomaly();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Contains the number of commands to undo.."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    private int numberOfCommandsToUndo;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Initializes taskInfo."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @param taskInfo the number of user commands to undo."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public UndoCommand(String[] taskInfo) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        this.taskInfo \u003d taskInfo;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Undoes a set number of user commands.."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void execute() throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        MemoryManager memorymanager \u003d new MemoryManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (this.taskInfo.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            this.numberOfCommandsToUndo \u003d 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            memorymanager.reloadBackup(numberOfCommandsToUndo);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                anomaly.detect(taskInfo);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                this.numberOfCommandsToUndo \u003d Integer.parseInt(taskInfo[1]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            } catch(CommandLineException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                ui.show_message(e.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            memorymanager.reloadBackup(numberOfCommandsToUndo);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 59,
      "ngjiewu": 3
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/command/timer/PauseTimerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.logic.command.timer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.ui.timer.TimerManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " * Command that pauses the timer."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "public class PauseTimerCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Pauses the timer."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        TimerManager.pauseTimer();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 8,
      "ngjiewu": 8
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/command/timer/ResumeTimerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.logic.command.timer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.ui.timer.TimerManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " * Command that resumes the timer."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "public class ResumeTimerCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Resumes the timer."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        TimerManager.resumeTimer();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 8,
      "ngjiewu": 8
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/command/timer/ShowTimerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.logic.command.timer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " * Command that shows the time remaining of timer."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "public class ShowTimerCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Shows the time remaining of the timer."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        Hustler.timermanager.checkTimeLeft();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 10,
      "ngjiewu": 6
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/command/timer/StopTimerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.logic.command.timer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.ui.timer.TimerManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.schedule.RecommendedSchedule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.schedule.Scheduler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Command that stops the timer, updates time spent on"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * tasks and also displays current schedule."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "public class StopTimerCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Stops the timer and updates time spent on"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * each task based on the schedule of work."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        RecommendedSchedule.confirm();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        Scheduler.displayEntries();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        TimerManager.stopTimer();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 8,
      "yzia2000": 8,
      "ngjiewu": 6
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/command/timer/TimerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.logic.command.timer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.parser.anomaly.TimerAnomaly;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.schedule.RecommendedSchedule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.schedule.Scheduler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.ui.timer.TimerManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " * Command that starts the timer."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "public class TimerCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Contains task type and description."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    private String[] taskInfo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Detects anomalies for input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    private TimerAnomaly anomaly \u003d new TimerAnomaly();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Initializes taskInfo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @param taskInfo the info of the task to add."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public TimerCommand(String[] taskInfo) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        this.taskInfo \u003d taskInfo;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Starts the timer, initializes the recommended schedule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * and displays the recommended schedule."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            anomaly.detect(taskInfo);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            String[] timerSplit \u003d taskInfo[1].split(\" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            int hours \u003d Integer.parseInt(timerSplit[0]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            int minutes \u003d Integer.parseInt(timerSplit[1]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            int seconds \u003d Integer.parseInt(timerSplit[2]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            RecommendedSchedule.recommend(hours * 3600 + minutes * 60 + seconds);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            RecommendedSchedule.displayRecommendedSchedule();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } catch (CommandLineException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            ui.show_message(e.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        TimerManager timermanager \u003d new TimerManager();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        timermanager.setTimer(taskInfo[1]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        timermanager.startTimer();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 40,
      "yzia2000": 13,
      "ngjiewu": 5
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/parser/CommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.logic.command.achievementCommand.AchievementCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.logic.command.shop.BuyCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.logic.command.avatar.CheckAvatarCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.logic.command.avatar.EquipCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.logic.command.avatar.SetNameCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.command.schedulecommands.AddEntry;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.logic.command.schedulecommands.RemoveEntry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.logic.command.schedulecommands.UpdateEntry;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.logic.command.shop.InventoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.logic.command.shop.ShopListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.command.task.*;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.command.timer.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.data.CommandLog;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": " * Takes raw user input as string, makes sense out of the input using"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": " * regex and then performs operations based on the input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class CommandParser extends Parser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Takes raw input and splits it into task type (eg. todo) and task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * description (eg. finish work). In cases like task type: list, bye,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * the output array only contains task type."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @param rawInput users single line string input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @return an array split into task type and task description"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public String[] split(String rawInput) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        String[] userInput \u003d rawInput.split(\" \", 2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * This method takes the raw user input and attempts to decipher"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * the user\u0027s intentions (whether the user wants to find a task, add"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * a task, etc.), thereafter returning the corresponding command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @param rawInput user\u0027s single line string input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @return an instruction, of type Command, to be executed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Command parse(String rawInput) throws CommandLineException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        String[] userInput \u003d this.split(rawInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        if (userInput[0].equals(\"/find\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return new FindCommand(userInput);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } else if (userInput[0].equals(\"/delete\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            CommandLog.recordCommand(rawInput);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return new DeleteCommand(userInput);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else if (userInput[0].equals(\"/redo\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return new RedoCommand(userInput);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } else if (userInput[0].equals(\"/list\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return new ListCommand(userInput);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } else if (userInput[0].equals(\"/remind\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return new RemindCommand(userInput);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } else if (userInput[0].equals(\"/done\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            CommandLog.recordCommand(rawInput);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return new DoneCommand(userInput);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } else if (userInput[0].equals(\"/show\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return new ScheduleCommand(userInput);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } else if (userInput[0].equals(\"/snooze\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            CommandLog.recordCommand(rawInput);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            return new SnoozeCommand(userInput);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } else if (userInput[0].equals(\"/avatar\") \u0026\u0026 userInput[1].equals(\"stats\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return new CheckAvatarCommand(userInput);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else if (userInput[0].equals(\"/setname\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            CommandLog.recordCommand(rawInput);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return new SetNameCommand(userInput);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } else if (userInput[0].equals(\"/achievement\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return new AchievementCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else if (userInput[0].equals(\"/add\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            CommandLog.recordCommand(rawInput);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return new AddCommand(userInput);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } else if (userInput[0].equals(\"/timer\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            return new TimerCommand(userInput);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } else if (userInput[0].equals(\"/undo\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            return new UndoCommand(userInput);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } else if (userInput[0].equals(\"/pausetimer\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            return new PauseTimerCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } else if (userInput[0].equals(\"/resumetimer\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            return new ResumeTimerCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } else if (userInput[0].equals(\"/stoptimer\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            return new StopTimerCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } else if (userInput[0].equals(\"/showtimer\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            return new ShowTimerCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else if (userInput[0].equals(\"/shop\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            return new ShopListCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else if (userInput[0].equals(\"/inventory\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return new InventoryCommand(userInput);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } else if (userInput[0].equals(\"/equip\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return new EquipCommand(userInput);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } else if (userInput[0].equals(\"/buy\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return new BuyCommand(userInput);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else if (userInput[0].equals(\"/remove\"))  {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return new RemoveEntry(userInput);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else if (userInput[0].equals(\"/update\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return new UpdateEntry(userInput);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else if (userInput[0].equals(\"/addFromList\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return new AddEntry(userInput);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } else if (userInput[0].equals(\"/sort\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            return new SortCommand(userInput);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } else if (userInput[0].equals(\"/bye\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return new ByeCommand(userInput);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return new InvalidCommand();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 53,
      "yzia2000": 8,
      "nystera": 17,
      "jingkang97": 16,
      "ngjiewu": 21
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/parser/DateTimeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "package seedu.hustler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * Handles LocalDateTime conversion to String and vice versa for each add command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Date and time with format d/M/uuuu HHmm."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static final String DATE_TIME_FORMATTER \u003d \"d/M/uuuu HHmm\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Date with format d/M/uuuu HHmm."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static final String DATE_FORMATTER \u003d \"d/M/uuuu\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Convert type String to type LocalDateTime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param dateTime date and time of type String."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return date and time of type LocalDateTime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public static LocalDateTime getDateTime(String dateTime) throws DateTimeParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        localDateTime \u003d LocalDateTime.parse(dateTime,formatter);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return localDateTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Convert type String to type LocalDateTime."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param date date of type String."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return date of type LocalDateTime."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static LocalDateTime getDate(String date) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        LocalDateTime localDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_FORMATTER);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            localDate \u003d LocalDateTime.parse(date,formatter);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return localDate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            System.out.println(\"Wrong date format!!!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Convert type LocalDateTime to String."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param localDateTime date and time of type LocalDateTime."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return date and time of type String."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static String convertDateTime(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        String dateTime;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            dateTime \u003d localDateTime.format(formatter);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return dateTime;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            System.out.println(\"Wrong date and time format!!!\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Convert type LocalDate to String."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param localDate date of type LocalDateTime."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return date of type String."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static String convertDate(LocalDateTime localDate) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        String date;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_FORMATTER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            date \u003d localDate.format(formatter);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            System.out.println(\"Wrong date format!!!\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Makes use of the DateTimeFormatter and LocalDateTime class"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * to parse the user input date time and initializes the"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * dateBy member variable."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static String toDateTimeString(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        String suffix;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        switch (dateTime.getDayOfMonth() % 10) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            suffix \u003d \"st\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            suffix \u003d \"nd\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            suffix \u003d \"rd\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            suffix \u003d \"th\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if (dateTime.getDayOfMonth() \u003e 3 \u0026\u0026 dateTime.getDayOfMonth() \u003c 21) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            suffix \u003d \"th\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        DateTimeFormatter printFormat \u003d DateTimeFormatter.ofPattern(\"d\u0027\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                + suffix + \"\u0027 \u0027of\u0027 MMMM uuuu\u0027,\u0027 h:mma\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return dateTime.format(printFormat);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 2,
      "jingkang97": 120,
      "ngjiewu": 1
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Abstract class for parsing."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public abstract class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Abstract method that parses string description to another object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public abstract Object parse(String description) throws CommandLineException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 3,
      "yzia2000": 7,
      "nystera": 3
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/parser/ParserForCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class ParserForCommand {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * The name of the command to parse for."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Initializes command variable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param command name of command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public ParserForCommand(String command) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.command \u003d command; "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    } "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * A method that parses a user input string of index"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * to integer index."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param description description that contains string integer"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return Integer object that is the parsed integer index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public Integer parseIndex(String description) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        switch (this.command) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        case \"snooze\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            return Integer.parseInt(description) - 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 31,
      "nystera": 1,
      "ngjiewu": 1
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/parser/anomaly/AddCommandAnomaly.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "package seedu.hustler.logic.parser.anomaly;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import static seedu.hustler.logic.parser.DateTimeParser.getDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class AddCommandAnomaly extends DetectAnomaly {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Detects anomaly in user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param userInput the index issued by the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @throws CommandLineException for anomalies detected"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void detect(String[] userInput) throws CommandLineException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            List\u003cString\u003e splitInput \u003d Arrays.asList(userInput[1].split(\" \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            if (splitInput.contains(\"/d\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                int difficultyIndex \u003d splitInput.indexOf(\"/d\") + 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                String difficulty \u003d splitInput.get(difficultyIndex);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                if (!(difficulty.equals(\"H\") || difficulty.equals(\"E\") || difficulty.equals(\"M\"))) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                    throw new CommandLineException(\"Difficulty should be H, M or E.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            if (splitInput.contains(\"/tag\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                int tagIndex \u003d splitInput.indexOf(\"/d\") + 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                splitInput.get(tagIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            if (splitInput.contains(\"/by\") || splitInput.contains(\"/at\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                String timeStr \u003d TaskList.getTime(splitInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                getDateTime(timeStr);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                if (splitInput.contains(\"/every\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                    int everyIndex \u003d splitInput.indexOf(\"/every\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                    String frequency \u003d splitInput.get(everyIndex + 1) + \" \" + splitInput.get(everyIndex + 2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                    String unit \u003d splitInput.get(everyIndex + 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                    if (!(unit.equals(\"days\") || unit.equals(\"weeks\") ||  unit.equals(\"minutes\") "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                        || unit.equals(\"hours\") || unit.equals(\"months\"))) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                        throw new CommandLineException(\"/every units are minutes, hours, days, weeks, months.\"); "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                    TaskList.convertToMinute(frequency);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                if (splitInput.contains(\"/every\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                    throw new CommandLineException(\"/every does not work on ToDo tasks.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            throw new CommandLineException(\"The description of the command does not follow the right\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                + \" format. Please check user guide.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            throw new CommandLineException(\"Date Time should follow the format DD/MM/YY HHmm.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            throw new CommandLineException(\"The description of the command does not follow the right\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                + \" format. Please check user guide.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    } "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 62
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/parser/anomaly/AddEntryAnomaly.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "package seedu.hustler.logic.parser.anomaly;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class AddEntryAnomaly extends DetectAnomaly {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Detects anomaly in user input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param userInput the index issued by the user"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void detect(String[] userInput) throws CommandLineException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            index \u003d Integer.parseInt(userInput[1]);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            index--;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            Hustler.list.get(index);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            throw new CommandLineException(\"Please issue a number after the command: /command \u003cindex\u003e\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            throw new CommandLineException(\"Please enter the correct index of task.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    } "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 25
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/parser/anomaly/BuyAnomaly.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.logic.parser.anomaly;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class BuyAnomaly extends DetectAnomaly {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private final String OUT_OF_BOUNDS_MSG \u003d \"Please input the correct index! Recheck the shop size by typing \\\"/shop\\\"\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private final String WRONG_FORMAT_MSG \u003d \"Please input a proper format! Type \\\"/buy \u003cindex\u003e\\\"\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void detect(String[] userInput) throws CommandLineException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "           int index \u003d Integer.parseInt(userInput[1]);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "           if (index \u003c\u003d 0 || index \u003e Hustler.shopList.size()) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": "               throw new CommandLineException(OUT_OF_BOUNDS_MSG);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "           }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(WRONG_FORMAT_MSG);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 21,
      "jingkang97": 1
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/parser/anomaly/DeleteAnomaly.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "package seedu.hustler.logic.parser.anomaly;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " * Detects anomalies in delete command inputted by user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "public class DeleteAnomaly extends DetectAnomaly {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Delete format should be: \u0027/delete \u003cinteger\u003e\u0027 or \u0027/delete all\u0027\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Detects anomalies in delete command input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param userInput input for which anomaly is detected"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @throws CommandLineException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void detect(String[] userInput) throws CommandLineException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        if (userInput.length \u003d\u003d 1 || userInput[1].isBlank()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            throw new CommandLineException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        String[] parsedInput \u003d userInput[1].split(\" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        if (parsedInput.length \u003e 1) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            throw new CommandLineException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        if (!isNumeric(parsedInput[0])) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            if (!parsedInput[0].equals(\"all\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                throw new CommandLineException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        int deleteIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            deleteIndex \u003d Integer.parseInt(parsedInput[0]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            throw new CommandLineException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        deleteIndex--;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        if (deleteIndex \u003e\u003d Hustler.list.size() || deleteIndex \u003c 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            throw new CommandLineException(MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Checks if given string is numeric."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param string string to be checked."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @return true if string represents an integer, false otherwise"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private boolean isNumeric(String string) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            Integer.parseInt(string);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngjiewu": 65
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/parser/anomaly/DetectAnomaly.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "package seedu.hustler.logic.parser.anomaly;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " * Detects anomalies in user input for each command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public abstract class DetectAnomaly {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Detects anomalies for command input."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param userInput input for which anomaly is detected"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @throws CommandLineException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public abstract void detect(String[] userInput) throws CommandLineException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 10,
      "ngjiewu": 7
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/parser/anomaly/DoneAnomaly.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.logic.parser.anomaly;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " * Detects anomalies in done command inputted by user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "public class DoneAnomaly extends DetectAnomaly {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Done format should be: \u0027/done \u003cinteger\u003e\u0027!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private static final String MESSAGE_TASK_COMPLETED \u003d \"This task has already been completed.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        + \"\\tYou cannot mark it as done again!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Detects anomalies in done command input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @param userInput input for which anomaly is detected"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @throws CommandLineException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void detect(String[] userInput) throws CommandLineException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        if (userInput.length \u003d\u003d 1 || userInput[1].isBlank()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            throw new CommandLineException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        String[] parsedInput \u003d userInput[1].split(\" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (parsedInput.length \u003e 1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            throw new CommandLineException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        int doneIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            doneIndex \u003d Integer.parseInt(parsedInput[0]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            throw new CommandLineException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        doneIndex--;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        if (doneIndex \u003e\u003d Hustler.list.size() || doneIndex \u003c 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            throw new CommandLineException(MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        if (Hustler.list.get(doneIndex).isCompleted()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            throw new CommandLineException(MESSAGE_TASK_COMPLETED);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 29,
      "yzia2000": 1,
      "ngjiewu": 18
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/parser/anomaly/FindAnomaly.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "package seedu.hustler.logic.parser.anomaly;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " * Detects anomalies in find command inputted by user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "public class FindAnomaly extends DetectAnomaly {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Find format should be: /find \u003ckeyword\u003e\\n\\t\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        + \"Keyword also cannot be empty!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Detects anomalies in find command input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param userInput input for which anomaly is detected"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @throws CommandLineException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void detect(String[] userInput) throws CommandLineException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        if (userInput.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            throw new CommandLineException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        if (userInput[1].isBlank()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            throw new CommandLineException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngjiewu": 28
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/parser/anomaly/InventoryAnomaly.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "package seedu.hustler.logic.parser.anomaly;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public class InventoryAnomaly extends DetectAnomaly{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void detect(String[] userInput) throws CommandLineException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            index \u003d Integer.parseInt(userInput[1]);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            index--;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            if(index \u003e\u003d Hustler.inventory.getSize() || index \u003c 0) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                throw new CommandLineException(\"Please input a index that exist inside the shop list!\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            throw new CommandLineException(\"Please input a number here!\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingkang97": 21
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/parser/anomaly/OneWordAnomaly.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "package seedu.hustler.logic.parser.anomaly;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public class OneWordAnomaly extends DetectAnomaly {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private final String ONE_WORD_MSG \u003d \"Please only input \\\"/\u003ccommand\u003e\\\"\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void detect(String[] userInput) throws CommandLineException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (userInput.length !\u003d 1) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "            throw new CommandLineException(ONE_WORD_MSG);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 4,
      "jingkang97": 11
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/parser/anomaly/RemoveEntryAnomaly.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "package seedu.hustler.logic.parser.anomaly;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.schedule.RecommendedSchedule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class RemoveEntryAnomaly extends DetectAnomaly {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Detects anomaly in user input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param userInput the index issued by the user"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @throws CommandLineException for anomalies detected"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void detect(String[] userInput) throws CommandLineException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            index \u003d Integer.parseInt(userInput[1]);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            index--;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            RecommendedSchedule.recommended.get(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            throw new CommandLineException(\"Please issue an index after the command: /command \u003cindex\u003e\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            throw new CommandLineException(\"Please enter the correct index.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    } "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 26
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/parser/anomaly/SnoozeAnomaly.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "package seedu.hustler.logic.parser.anomaly;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import static seedu.hustler.logic.parser.DateTimeParser.getDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " * Detects anomalies in snooze command inputted by user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "public class SnoozeAnomaly extends DetectAnomaly {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Snooze format should be: \u0027snooze \u003cindex\u003e \u003cdate\u003e \u003ctime\u003e\u0027 OR\\n\\t\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            + \"\u0027snooze \u003cindex\u003e \u003cinteger\u003e \u003cperiod\u003e\u0027\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private static final String MESSAGE_INVALID_DATE_TIME \u003d \"Date Time should follow the format DD/MM/YY HHmm.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private static final String MESSAGE_INVALID_PERIOD \u003d \"The period provided is invalid!\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            + \"Valid periods are minutes/hours/days/weeks/months\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Detects anomalies in snooze command input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param userInput input for which anomaly is detected"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @throws CommandLineException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void detect(String[] userInput) throws CommandLineException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        if (userInput.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            throw new CommandLineException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        String[] parsedInput \u003d userInput[1].split(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        if (parsedInput.length !\u003d 3) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            throw new CommandLineException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        int snoozeIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            snoozeIndex \u003d Integer.parseInt(parsedInput[0]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            throw new CommandLineException(\"Please enter an integer for the index.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        snoozeIndex--;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        if (snoozeIndex \u003e\u003d Hustler.list.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            throw new CommandLineException(MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        // 1st method to snooze"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        if (parsedInput[1].contains(\"/\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            String dateTime \u003d parsedInput[1] + \" \" + parsedInput[2];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                getDateTime(dateTime);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                throw new CommandLineException(MESSAGE_INVALID_DATE_TIME);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            // 2nd method to snooze"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                Integer.parseInt(parsedInput[1]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                String period \u003d parsedInput[2];"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                String[] periods \u003d {\"minutes\", \"hours\", \"days\", \"weeks\", \"months\"};"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                for (String validPeriod : periods) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    if (period.equals(validPeriod)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                        return;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                throw new CommandLineException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            throw new CommandLineException(MESSAGE_INVALID_PERIOD);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 1,
      "ngjiewu": 76
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/parser/anomaly/SortAnomaly.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "package seedu.hustler.logic.parser.anomaly;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " * Detects anomalies in sort command inputted by user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "public class SortAnomaly extends DetectAnomaly {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Sort format should be: /sort \u003csortType\u003e\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private static final String MESSAGE_INVALID_SORT_TYPE \u003d \"The sort type provided is invalid!\\n\\t\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        + \"Valid sort types are: normal/datetime/priority.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Detects anomalies in sort command input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param userInput input for which anomaly is detected"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @throws CommandLineException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void detect(String[] userInput) throws CommandLineException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        if (userInput.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            throw new CommandLineException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        String[] parsedInput \u003d userInput[1].split(\" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        if (parsedInput.length !\u003d 1) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            throw new CommandLineException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        String sortType \u003d parsedInput[0];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        String[] sortTypes \u003d {\"normal\", \"datetime\", \"priority\"};"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        for (String validSortType: sortTypes) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            if (sortType.equals(validSortType)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        throw new CommandLineException(MESSAGE_INVALID_SORT_TYPE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngjiewu": 40
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/parser/anomaly/TimerAnomaly.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.logic.parser.anomaly;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": " * Detects timer anomalies in user input."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "public class TimerAnomaly extends DetectAnomaly {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Detects anomalies for input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @param userInput input for which anomaly is detected"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @return true or false for any anomaly detected"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void detect(String[] userInput) throws CommandLineException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        //detects if the /timer command is followed with any arguments."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (userInput.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            throw new CommandLineException(\"Timer format should be: \u0027timer \u003cinteger\u003e \u003cinteger\u003e \u003cinteger\u003e\u0027!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        String[] timeParts \u003d userInput[1].split(\" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        //detects whether the number of arguments are exactly three (hours, minutes and"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        //seconds). For example, \u0027timer 1\u0027 and \u0027timer 1 2 3 4\u0027 are invalid inputs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (timeParts.length !\u003d 3) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            throw new CommandLineException(\"Timer format should be: \u0027timer \u003cinteger\u003e \u003cinteger\u003e \u003cinteger\u003e\u0027!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        //detects whether the relevant arguments are non-integers. For example, \u0027timer winter cheese sofa\u0027 is a invalid input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        for (int i \u003d 0; i \u003c 3; i +\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                int numberOfCommandsToUndo \u003d Integer.parseInt(timeParts[i]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                throw new CommandLineException(\"Timer format should be: \u0027timer \u003cinteger\u003e \u003cinteger\u003e \u003cinteger\u003e\u0027!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 41,
      "jingkang97": 2
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/parser/anomaly/UndoAnomaly.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.logic.parser.anomaly;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": " * Detects undo anomalies in user input."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "public class UndoAnomaly extends DetectAnomaly {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Detects anomalies for the undo command.."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @param userInput input for which anomaly is detected"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @return true or false for any anomaly detected"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void detect(String[] userInput) throws CommandLineException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        String[] parsedInput \u003d userInput[1].split(\" \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        //detects whether they are more arguments than expected. For example,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "\t    //\u0027undo 1 2 3\u0027 and \u0027undo 3 fried rice\u0027 are invalid inputs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (parsedInput.length !\u003d 1) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            throw new CommandLineException(\"Undo commands should follow this format: \u0027undo \u003cinteger\u003e\u0027!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "\t    //detects whether the argument is a non-integer. For example, \u0027undo"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "\t    //tacobell\u0027 is a invalid input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            int numberOfCommandsToUndo \u003d Integer.parseInt(parsedInput[0]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            throw new CommandLineException(\"Undo commands should follow this format: \u0027undo \u003cinteger\u003e\u0027!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 32,
      "ngjiewu": 1
    }
  },
  {
    "path": "src/main/java/seedu/hustler/logic/parser/anomaly/UpdateEntryAnomaly.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "package seedu.hustler.logic.parser.anomaly;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.schedule.RecommendedSchedule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.logic.CommandLineException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class UpdateEntryAnomaly extends DetectAnomaly {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Detects anomaly in user input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param userInput the index issued by the user"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @throws CommandLineException for anomalies detected"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void detect(String[] userInput) throws CommandLineException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        String[] numbers \u003d userInput[1].split(\" \");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (numbers.length !\u003d 2) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            throw new CommandLineException(\"Please follow the format: /update \u003cindex\u003e \u003cH:M:S\u003e\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            int index \u003d -1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            index \u003d Integer.parseInt(numbers[0]);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            index--;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            RecommendedSchedule.recommended.get(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            String[] times \u003d numbers[1].split(\":\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            Integer.parseInt(times[0]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            Integer.parseInt(times[1]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            Integer.parseInt(times[2]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            throw new CommandLineException(\"Please follow the format: /update \u003cindex\u003e \u003cH:M:S\u003e\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            throw new CommandLineException(\"Please enter the correct index.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 34
    }
  },
  {
    "path": "src/main/java/seedu/hustler/schedule/Priority.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "package seedu.hustler.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.task.variables.Difficulty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.schedule.time.TimeRemaining;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * A class that assigns a priority score to"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * given task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class Priority {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Takes in a task and computes a priority score"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * for the task based on its difficulty and amount of"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * hours available."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param entry the task for which priority is computed"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return priority score of the task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public static double getPriorityScore(ScheduleEntry entry) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        double priorityScore \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (entry.getTask().getDifficulty().toString().equals(\"[H]\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            priorityScore \u003d 3;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        } else if (entry.getTask().getDifficulty().toString().equals(\"[M]\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            priorityScore \u003d 2;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            priorityScore \u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        Duration timeRemaining \u003d TimeRemaining.left(entry.getTask());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        long secondsRemaining \u003d timeRemaining.getSeconds();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        long timeForScoring \u003d secondsRemaining + entry.getTimeSpent();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        double daysForScoring \u003d timeForScoring / 86400.0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        priorityScore /\u003d daysForScoring;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return priorityScore;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 41
    }
  },
  {
    "path": "src/main/java/seedu/hustler/schedule/RecommendedSchedule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "package seedu.hustler.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Extends on the Scheduler in order to provide recommendations"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * for the task completion mode."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class RecommendedSchedule extends Scheduler {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Recommended list of entries to work."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public static ArrayList\u003cScheduleEntry\u003e recommended \u003d new ArrayList\u003cScheduleEntry\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Current amount of seconds available for work."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private static long seconds;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Initializes recommended based on the supplied time available and priority."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * If the amount of hours availabe is 1, the highest priority task is given."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * If the amount of hours is greater than 1 but less than two, two tasks are added."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Otherwise, 3 tasks are added based on priority."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Time is allocated evenly to all tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param timeInSeconds time available for a task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public static void recommend(long timeInSeconds) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        seconds \u003d timeInSeconds;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            ui.show_message(\"There are no tasks to complete. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                + \"Please add more tasks.\"); "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        sort();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        double hours \u003d timeInSeconds / 3600.0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (hours \u003c\u003d 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            recommended.add(schedule.get(0));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        } else if (hours \u003e 1 \u0026\u0026 hours \u003c\u003d 2) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            recommended.add(schedule.get(0)); "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            if (size() \u003e 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                recommended.add(schedule.get(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            recommended.add(schedule.get(0)); "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            if (size() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                recommended.add(schedule.get(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            } else if (schedule.size() \u003e 2) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                recommended.add(schedule.get(1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                recommended.add(schedule.get(2)); "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        reTime();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Evenly distributes time to all recommended tasks."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public static void reTime() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        for (ScheduleEntry entry : recommended) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            entry.setTimeAlloc(seconds / recommended.size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Sorts schedule based on priority for easy retreival."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public static void sort() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        Collections.sort(schedule, new SortByPriority());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Displays the recommended schedule and amount of time allocated to each entry."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public static void displayRecommendedSchedule() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        String output \u003d \"Hey, this is your recommended schedule for the next \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            + \"few hours. Please confirm if you will follow it. Please add or delete\" "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            + \" entries before updating time:\\n\\t\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        for (int i \u003d 0; i \u003c recommended.size(); i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            long hours \u003d recommended.get(i).getTimeAlloc() / 3600;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            long minutes \u003d (recommended.get(i).getTimeAlloc() / 60) % 60;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            long seconds \u003d recommended.get(i).getTimeAlloc() % 60;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            output +\u003d (i + 1) + \". \" + recommended.get(i).getTask().toString() "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                + \" time alloted: \" + hours + \":\" + minutes + \":\" + seconds + \"\\n\\t\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        ui.show_message(output);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * At the end of the timer, stores the amount of time spent in the"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * schedule."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public static void confirm() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        seconds \u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        for (ScheduleEntry entry : recommended) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            entry.updateTimeSpent(entry.getTimeAlloc());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        recommended \u003d new ArrayList\u003cScheduleEntry\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        displayEntries();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Adds tasks to the recommended based on index in the Hustler tasklist."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param index index of the task in the Hustler tasklist."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public static void addFromTaskList(int index) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        for (ScheduleEntry entry : schedule) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            if (entry.getTask() \u003d\u003d Hustler.list.get(index)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                recommended.add(entry);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        reTime();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Updates the allocated time to a particular entry in the recommended"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param index index of entry in recommended"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param timeInSeconds time allocated in seconds"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public static void updateAllocTime(int index, long timeInSeconds) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        System.out.println(index);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        System.out.println(timeInSeconds);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        recommended.get(index).setTimeAlloc(timeInSeconds);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 137
    }
  },
  {
    "path": "src/main/java/seedu/hustler/schedule/ScheduleEntry.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "package seedu.hustler.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Entry of the schedule which symbolizes an"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * incomplete task, amount of time spent on the task,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * amount of time allocated by the completion engine and"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * priority score of the task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class ScheduleEntry {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Incomplete task that has to be completed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Amount of time spent on the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private long secondsSpent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Amount of time allocated to the task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private long secondsAlloc;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Priority of the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private double priorityScore;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Initializes the task and seconds spent on it."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param task incomplete task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param secondsSpent amount of time spent on it"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public ScheduleEntry(Task task, long secondsSpent) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.secondsSpent \u003d secondsSpent;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Adds time to the time spent on the task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param seconds seconds spent recently"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void updateTimeSpent(long seconds) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.secondsSpent +\u003d seconds;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.priorityUpdate();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Returns the time spent on the task as seconds."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return seconds spent on the task"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public long getTimeSpent() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return this.secondsSpent;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Returns the task of the entry."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public Task getTask() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return this.task;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Updates the priority of the task based on time spent, time"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * available and difficulty of the task."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void priorityUpdate() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.priorityScore \u003d Priority.getPriorityScore(this);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Returns the priority score of the task at the moment."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return priority of the task for comparison sake"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public double getPriorityScore() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.priorityUpdate();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return this.priorityScore;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Sets the time spent on the task."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param seconds seconds spent on the task overall"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void setTimeSpent(long seconds) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.secondsSpent \u003d seconds;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Sets the time allocated to the task."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param seconds seconds allocated to the task"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void setTimeAlloc(long seconds) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.secondsAlloc \u003d seconds;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Returns the amount of time allocated to the task."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return time allocated"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public long getTimeAlloc() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return this.secondsAlloc;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 114
    }
  },
  {
    "path": "src/main/java/seedu/hustler/schedule/Scheduler.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "package seedu.hustler.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * A class that holds all the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * tasks to complete, time spent on each task,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * and priority of each task, which is together called"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * an entry. Scheduler handles all these entries."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class Scheduler {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * An ArrayList that stores entries"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * that are tasks to complete with the amount"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * of time spent on each task and their computed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * priority."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public static ArrayList\u003cScheduleEntry\u003e schedule "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        \u003d new ArrayList\u003cScheduleEntry\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Add an entry to the schedule based on the task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * supplied as input, only if the task is not done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param task task to be added as entry"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public static void add(Task task) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (task.isCompleted()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        schedule.add(new ScheduleEntry(task, 0));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Adds task as an entry and also configuring a preset"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * amount of time spent on the task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param task task to be added as entry"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param timeSpent amount of time spent on each task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public static void add(Task task, long timeSpent) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (task.isCompleted()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        schedule.add(new ScheduleEntry(task, timeSpent));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Returns an entry based on supplied index."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param index index of the wanted entry"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return entry that contains the task, time spent and priority of the task"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public static ScheduleEntry getEntry(int index) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return schedule.get(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Adds seconds to the time spent on a task in the schedule."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param index index of the entry to update"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param seconds seconds to be added to the time spent on the task"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public static void updateEntry(int index, long seconds) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        schedule.get(index).updateTimeSpent(seconds);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Returns the list of entries."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return list of entries"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public static ArrayList\u003cScheduleEntry\u003e getList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Updates the schedule with a latest task from"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * the original TaskList."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public static void update() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        add(Hustler.list.getLastTask());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Removes entry at an index."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param index index at which entry should be removed"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public static void remove(int index) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        schedule.remove(index);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Removes an entry based on the task supplied."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param task task whose matching entry needs to be removed"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public static void remove(Task task) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            if (getEntry(i).getTask()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                    \u003d\u003d task) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                index \u003d i;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        remove(index);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Returns the size of the current list of entries."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return size of the list of entries"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public static int size() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return schedule.size();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Checks with the schedule contains the task supplied."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param task check for the task supplied"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return check for whether task supplied exists."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public static boolean contains(Task task) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        for (ScheduleEntry entry : schedule) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            if (entry.getTask() \u003d\u003d task) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Displays the whole schedule which includes incomplete tasks,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * and time spent on each of the tasks."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public static void displayEntries() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        for (ScheduleEntry entry : schedule) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            output +\u003d \"\\t\" + entry.getTask().toString() "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                + \" hours spent: \" + (entry.getTimeSpent() / 3600.0) + \"\\n\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            output \u003d \"Tasks completed. Please add more.\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        ui.show_message(output);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Returns the time spent on each task."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param task the task for which time spent is required"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return amount of time spent on the task"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public static long getTimeSpent(Task task) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (task.isCompleted()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return -1; "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        for (ScheduleEntry entry : schedule) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            if (entry.getTask() \u003d\u003d task) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                return entry.getTimeSpent();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 176
    }
  },
  {
    "path": "src/main/java/seedu/hustler/schedule/SortByPriority.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "package seedu.hustler.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * A comparator to sort the schedule based on priority."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class SortByPriority implements Comparator\u003cScheduleEntry\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Compares two entries based on priority."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param entryA first entry to compare with"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param entryB second entry to compare with"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return an integer based on the comparison {1, 0, -1}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public int compare(ScheduleEntry entryA, ScheduleEntry entryB) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (entryA.getPriorityScore() \u003c entryB.getPriorityScore()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return 1; "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        } else if (entryA.getPriorityScore() \u003d\u003d entryB.getPriorityScore()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    } "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 26
    }
  },
  {
    "path": "src/main/java/seedu/hustler/schedule/time/TimeRemaining.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "package seedu.hustler.schedule.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Class that gives the time remaining"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * for a task to be due."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class TimeRemaining {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Gives the time remaining"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * before an event is due."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param event event to be checked"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return amount of time remaining before it is due"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public static Duration left(Event event) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return Duration.between(LocalDateTime.now(), event.getDateTime());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Gives the amount of time remaining"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * before a deadline is due."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param deadline deadline to be checked"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return amount of time remaining before it is due."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public static Duration left(Deadline deadline) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return Duration.between(LocalDateTime.now(), deadline.getDateTime());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Handles to the ToDo case."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param todo todo task to be checked."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return 365 days by default"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public static Duration left(ToDo todo) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return Duration.ofDays(14);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Computes amount of time available before task is due."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param task task to be checked."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return amount of time available (14 days in case of todo)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public static Duration left(Task task) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return Duration.ofDays(14);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return Duration.between(LocalDateTime.now(), task.getDateTime());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 64
    }
  },
  {
    "path": "src/main/java/seedu/hustler/settings/ProfilePic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "package seedu.hustler.settings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public class ProfilePic extends Settings {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private List pictures \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void set() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingkang97": 16
    }
  },
  {
    "path": "src/main/java/seedu/hustler/settings/Quotes.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "package seedu.hustler.settings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public class Quotes extends Settings{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static Boolean lock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private String quoteDescription;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public Quotes(String quoteDescription) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.quoteDescription \u003d quoteDescription;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        lock \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void set() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static Boolean unlock() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return lock \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingkang97": 31
    }
  },
  {
    "path": "src/main/java/seedu/hustler/settings/QuotesList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "package seedu.hustler.settings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public class QuotesList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private ArrayList\u003cQuotes\u003e quoteList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Random quotes or fixed quote;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private String displayState;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public QuotesList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.quoteList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private ArrayList\u003cQuotes\u003e populateQuoteList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        quoteList.add(new Quotes(\"Just do it.\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        quoteList.add(new Quotes(\"The way to get started is to quit talking and begin doing.\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        quoteList.add(new Quotes(\"Focus on being productive instead of busy.\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        quoteList.add(new Quotes(\"Deliver more than expected.\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        quoteList.add(new Quotes(\"The scariest moment is always just before you start.\"));;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return quoteList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingkang97": 37
    }
  },
  {
    "path": "src/main/java/seedu/hustler/settings/Settings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "package seedu.hustler.settings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public abstract class Settings {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    //public abstract void state();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    //random, fixed, index,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    //on or off"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public abstract void set();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingkang97": 15
    }
  },
  {
    "path": "src/main/java/seedu/hustler/settings/SettingsList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "package seedu.hustler.settings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public class SettingsList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private ArrayList\u003cString\u003e settingsList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public SettingsList() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        settingsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingkang97": 14
    }
  },
  {
    "path": "src/main/java/seedu/hustler/settings/Sort.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "package seedu.hustler.settings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public class Sort extends Settings{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void set() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingkang97": 11
    }
  },
  {
    "path": "src/main/java/seedu/hustler/task/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.task.variables.Difficulty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.task.variables.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import static seedu.hustler.logic.parser.DateTimeParser.convertDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import static seedu.hustler.logic.parser.DateTimeParser.toDateTimeString;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": " * A class that inherits from the abstract class Task. This task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": " * type is a Deadline which specifies the date and time before"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": " * which the Task should be completed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * LocalDateTime to store the deadline\u0027s date and time."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Initializes description, default difficulty and by."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public Deadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Initializes description, user input difficulty and by."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public Deadline(String description, LocalDateTime by, String difficulty, String tag, LocalDateTime now) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        super(description, difficulty, tag, now);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public Deadline(String description, LocalDateTime by, Difficulty difficulty, Tag tag, LocalDateTime now) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        super(description, difficulty, tag, now);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Overrides the toString method in Task to display task type and date time."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return a string with the target info."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + toDateTimeString(getDateTime()) + \")\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Overrides the toSaveFormat function to include task type and date time."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return a string with pipe separated info."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public String toSaveFormat() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return \"D|\" + super.toSaveFormat() + \"|\" + convertDateTime(by) + super.toSaveInputDateTime();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Checks equality with another Deadline instance."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param temp the instance to compare against."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return true or false to the comparison."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public boolean equals(Deadline temp) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (this.description.equals(temp.description) \u0026\u0026 this.by \u003d\u003d temp.by) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void setDateTime(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.by \u003d localDateTime;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 2,
      "yzia2000": 39,
      "nystera": 12,
      "jingkang97": 6,
      "ngjiewu": 22
    }
  },
  {
    "path": "src/main/java/seedu/hustler/task/DetectAnomalies.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * Detect any clash of date and time between tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * It also detects if tasks with same description has been added multiple times."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public class DetectAnomalies {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Test if there is any clashes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return true or false."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static Boolean test(Task task, ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        String[] descriptionToken \u003d task.getDescription().split(\"/by|/at\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        boolean check \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            boolean descriptionMatch \u003d list.get(i).getDescription().trim().equals(descriptionToken[0].trim());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            if (task.getDateTime() \u003d\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                if (descriptionMatch) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    check \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            } else if (list.get(i).getDateTime() !\u003d null"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    \u0026\u0026 task.getDateTime().isEqual(list.get(i).getDateTime()) || descriptionMatch) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                check \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            } else if (list.get(i).getDateTime() \u003d\u003d null \u0026\u0026 descriptionMatch) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                check \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return check;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 1,
      "jingkang97": 33,
      "ngjiewu": 4
    }
  },
  {
    "path": "src/main/java/seedu/hustler/task/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.task.variables.Difficulty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.task.variables.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import static seedu.hustler.logic.parser.DateTimeParser.convertDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import static seedu.hustler.logic.parser.DateTimeParser.toDateTimeString;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": " * A class that inherits from the abstract class Task. This task type"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": " * is an Event which specifies a Task at a specific date and time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * LocalDateTime to store the event\u0027s date and time."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Initializes description, default difficulty and at."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Event(String description, LocalDateTime at) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Initializes description, user input difficulty and by."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public Event(String description,  LocalDateTime at, String difficulty, String tag, LocalDateTime now) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        super(description, difficulty, tag, now);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public Event(String description, LocalDateTime at, Difficulty difficulty, Tag tag, LocalDateTime now) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        super(description, difficulty, tag, now);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Overrides the toString method in Task to display task type and date time."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return a string with the target info."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + toDateTimeString(this.at) + \")\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Overrides the toSaveFormat function to include task type and date time."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return a string with pipe separated info."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public String toSaveFormat() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return \"E|\" + super.toSaveFormat() + \"|\" + convertDateTime(at) + super.toSaveInputDateTime();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Checks equality with another Event instance."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param temp the instance to compare against."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return true or false to the comparison."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public boolean equals(Event temp) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (this.description.equals(temp.description) \u0026\u0026 this.at \u003d\u003d temp.at) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void setDateTime(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.at \u003d localDateTime;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 2,
      "yzia2000": 45,
      "nystera": 10,
      "jingkang97": 6,
      "ngjiewu": 17
    }
  },
  {
    "path": "src/main/java/seedu/hustler/task/RecurringDeadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "package seedu.hustler.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.task.variables.Difficulty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.task.variables.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " * A class that inherits from Deadline. This task type is"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " * RecurringDeadline which is a recurrent Deadline."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "public class RecurringDeadline extends Deadline {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * String description that stats the frequency of recurrence."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    protected String frequency;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Integer to store the period in minutes of each cycle of the RecurringDeadline."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    protected int period;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Boolean to keep track of whether next cycle of the RecurringDeadline has been added."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    boolean hasRecurred;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Initializes RecurringDeadline\u0027s attributes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public RecurringDeadline(String description, LocalDateTime by, String difficulty, String tag,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                             LocalDateTime now, String frequency, int period, boolean hasRecurred) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        super(description, by, difficulty, tag, now);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.frequency \u003d frequency;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.hasRecurred \u003d hasRecurred;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Initializes RecurringDeadline\u0027s attributes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public RecurringDeadline(String description, LocalDateTime by, Difficulty difficulty, Tag tag,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                             LocalDateTime now, String frequency, int period) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        super(description, by, difficulty, tag, now);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.frequency \u003d frequency;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.hasRecurred \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return super.toString() + \" (Repeats every \" + frequency + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public String toSaveFormat() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return super.toSaveFormat() + \"|\" + frequency + \"|\" + period + \"|\" + hasRecurred;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        if (LocalDateTime.now().isAfter(this.by) \u0026\u0026 !hasRecurred) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            addNextRecurrence();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        if (!hasRecurred) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            addNextRecurrence();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Adds the next recurrence of the RecurringDeadline"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * to the task list based on its period."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void addNextRecurrence() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        LocalDateTime nextBy \u003d this.by.plusMinutes(period);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(\"\\tNext recurrence of this Deadline has been added!\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        Hustler.list.add(new RecurringDeadline(description, nextBy, difficulty, tag,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                LocalDateTime.now(), frequency, period));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.hasRecurred \u003d true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngjiewu": 87
    }
  },
  {
    "path": "src/main/java/seedu/hustler/task/RecurringEvent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "package seedu.hustler.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.task.variables.Difficulty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.task.variables.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " * A class that inherits from Event. This task type is"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " * RecurringEvent which is a recurrent Event."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "public class RecurringEvent extends Event {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * String description that stats the frequency of recurrence."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    protected String frequency;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Integer to store the period in minutes of each cycle of the RecurringEvent."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    protected int period;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Boolean to keep track of whether next cycle of the RecurringEvent has been added."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    boolean hasRecurred;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Initializes RecurringEvent\u0027s attributes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public RecurringEvent(String description, LocalDateTime at, String difficulty, String tag,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                             LocalDateTime now, String frequency, int period, boolean hasRecurred) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        super(description, at, difficulty, tag, now);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.frequency \u003d frequency;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.hasRecurred \u003d hasRecurred;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Initializes RecurringEvent\u0027s attributes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public RecurringEvent(String description, LocalDateTime at, Difficulty difficulty, Tag tag,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                             LocalDateTime now, String frequency, int period) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        super(description, at, difficulty, tag, now);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.frequency \u003d frequency;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.hasRecurred \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return super.toString() + \" (Repeats every \" + frequency + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public String toSaveFormat() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return super.toSaveFormat() + \"|\" + frequency + \"|\" + period + \"|\" + hasRecurred;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        if (LocalDateTime.now().isAfter(this.at) \u0026\u0026 !hasRecurred) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            addNextRecurrence();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        if (!hasRecurred) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            addNextRecurrence();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Adds the next recurrence of the RecurringEvent"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * to the task list based on its period."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void addNextRecurrence() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        LocalDateTime nextAt \u003d this.at.plusMinutes(period);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(\"\\tNext recurrence of this Event has been added!\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        Hustler.list.add(new RecurringEvent(description, nextAt, difficulty, tag,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                LocalDateTime.now(), frequency, period));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.hasRecurred \u003d true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngjiewu": 87
    }
  },
  {
    "path": "src/main/java/seedu/hustler/task/Reminders.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * Display reminders list when the app first start"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * and user can type command \"remind\" to bring up reminders after that."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public class Reminders {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Reminder list that contains tasks that are overdue."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static ArrayList\u003cTask\u003e overDueList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Reminder list that contain tasks with less than 30 minutes or less till deadline."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static ArrayList\u003cTask\u003e lastDayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Reminder list htat contain tasks with less than 24 hours or less till deadline."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static ArrayList\u003cTask\u003e lastThirtyMinutesList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * 24 hours converted to seconds."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static final int TWENTY_FOUR_HOURS \u003d 86400;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * 30 minutes converted to seconds."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    private static final int THIRTY_MINUTES \u003d 1800;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Check if a task is overdue."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param i index of task in task list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return true if task is overdue."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static Boolean checkOverdue(int i) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Boolean check \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        LocalDateTime currentTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        long duration \u003d Duration.between(currentTime, Hustler.list.get(i).getDateTime()).getSeconds();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if (duration \u003c\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            check \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return check;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Check if a task is due in thirty minutes."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param i index of task in task list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return true if task is due in thirty minutes."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static Boolean checkThirty(int i) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Boolean check \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        LocalDateTime currentTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        long duration \u003d Duration.between(currentTime, Hustler.list.get(i).getDateTime()).getSeconds();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if (duration \u003c\u003d THIRTY_MINUTES \u0026\u0026 duration \u003e 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            check \u003d true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return check;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Check if a task is due in 24 hours."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param i index of task in task list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return true if task is due in 24 hours."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static Boolean checkLastDay(int i) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Boolean check \u003d false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        LocalDateTime currentTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        long duration \u003d Duration.between(currentTime, Hustler.list.get(i).getDateTime()).getSeconds();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if (duration \u003c\u003d TWENTY_FOUR_HOURS \u0026\u0026 duration \u003e THIRTY_MINUTES) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            check \u003d true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return check;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * List of overdue tasks."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param list current TaskList."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return a list of overdue tasks."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static ArrayList\u003cTask\u003e overdue(TaskList list) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        overDueList.clear();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            LocalDateTime currentTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            boolean done \u003d list.get(i).isDone;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            boolean checkDeadline \u003d list.get(i).toString().contains(\"[D]\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            boolean checkEvent \u003d list.get(i).toString().contains(\"[E]\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            boolean checkRange \u003d list.get(i).toString().contains(\"[R]\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            if (!done \u0026\u0026 checkDeadline || checkEvent || checkRange) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                if (checkOverdue(i)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    overDueList.add(list.get(i));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return overDueList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * List of tasks that are due in 24 hours or less."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param list current TaskList."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return a list of tasks that are due in 24 hours or less."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static ArrayList\u003cTask\u003e lastDay(TaskList list) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        lastDayList.clear();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            LocalDateTime currentTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            boolean done \u003d list.get(i).isDone;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            boolean checkDeadline \u003d list.get(i).toString().contains(\"[D]\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            boolean checkEvent \u003d list.get(i).toString().contains(\"[E]\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            boolean checkRange \u003d list.get(i).toString().contains(\"[R]\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            if (!done \u0026\u0026 checkDeadline || checkEvent || checkRange) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                long duration \u003d Duration.between(currentTime, list.get(i).getDateTime()).getSeconds();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                if (duration \u003c\u003d TWENTY_FOUR_HOURS \u0026\u0026 duration \u003e THIRTY_MINUTES) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    lastDayList.add(list.get(i));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return lastDayList;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * List of tasks that are due in 30 minutes or less."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param list current TaskList."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return a list of tasks that are due in 30 minutes or less."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static ArrayList\u003cTask\u003e lastThirtyMins(TaskList list) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        lastThirtyMinutesList.clear();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            LocalDateTime currentTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            boolean done \u003d list.get(i).isDone;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            boolean checkDeadline \u003d list.get(i).toString().contains(\"[D]\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            boolean checkEvent \u003d list.get(i).toString().contains(\"[E]\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            boolean checkRange \u003d list.get(i).toString().contains(\"[R]\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            if (!done \u0026\u0026 checkDeadline || checkEvent || checkRange) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                long duration \u003d Duration.between(currentTime, list.get(i).getDateTime()).getSeconds();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                if (duration \u003c\u003d THIRTY_MINUTES \u0026\u0026 duration \u003e 0) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    lastThirtyMinutesList.add(list.get(i));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return lastThirtyMinutesList;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Runs all types of reminders list at once."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param list current TaskList."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static void runAll(TaskList list) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        overdue(list);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        lastThirtyMins(list);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        lastDay(list);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Display reminders list."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static void displayReminders() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if (!overDueList.isEmpty()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            if (overDueList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                System.out.println(\"\\tThe task below is overdue!!!\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                System.out.print(\"\\t1. \");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                for (Task i : overDueList) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    System.out.println(i);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                System.out.println(\"\\tThe tasks below are overdue!!!\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                for (int i \u003d 0; i \u003c overDueList.size(); i++) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    System.out.println(\"\\t\" + (i + 1) + \". \" + overDueList.get(i));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if (!lastThirtyMinutesList.isEmpty()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            if (lastThirtyMinutesList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                System.out.println(\"\\tThe task below is due in 30 minutes or less!!!\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                System.out.print(\"\\t1. \");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                for (Task i : lastThirtyMinutesList) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    System.out.println(i);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                System.out.println(\"\\tThe tasks below are due in 30 minutes or less!!!\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                for (int i \u003d 0; i \u003c lastThirtyMinutesList.size(); i++) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    System.out.println(\"\\t\" + (i + 1) + \". \" + lastThirtyMinutesList.get(i));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if (!lastDayList.isEmpty()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            if (lastDayList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                System.out.println(\"\\tThe task below is due in 24 hours or less!!!\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                System.out.print(\"\\t1. \");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                for (Task i : lastDayList) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                    System.out.println(i);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                System.out.println(\"\\tThe tasks below are due in 24 hours or less!!!\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                for (int i \u003d 0; i \u003c lastDayList.size(); i++) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    System.out.println(\"\\t\" + (i + 1) + \". \" + lastDayList.get(i));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                System.out.println(\"\\t_____________________________________\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * For testing, check if task that are overdue exist in overDueList."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return true if overDueList exist."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public static boolean exist() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        boolean check \u003d false;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if (!overDueList.isEmpty()) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            check \u003d true;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return check;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nystera": 1,
      "jingkang97": 209,
      "ngjiewu": 28
    }
  },
  {
    "path": "src/main/java/seedu/hustler/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.variables.Difficulty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.variables.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * An abstract class that acts as a template for ToDo, Deadline and Event."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * String that contains the description of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Boolean which states whether the task is done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * String that states the difficulty of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Default difficulty will be M."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nystera"
        },
        "content": "    protected Difficulty difficulty;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The one-word String tagged onto the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": "    protected Tag tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Stores the current date and time at the instance when the user inputs the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    protected LocalDateTime inputDateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Initializes description, sets isDone as false and difficulty as M."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.difficulty \u003d new Difficulty(\"M\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Initializes description, sets isDone as false and difficulty"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * according to user\u0027s input."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public Task(String description, String difficulty, String tagName, LocalDateTime now) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.difficulty \u003d new Difficulty(difficulty);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nystera"
        },
        "content": "        this.tag \u003d new Tag(tagName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.inputDateTime \u003d now;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Initializes Task\u0027s attributes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public Task(String description, Difficulty difficulty, Tag tag, LocalDateTime now) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        this.inputDateTime \u003d now;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Returns the status of the task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return a symbol specifying whether a task has been completed or not."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Marks a class as complete."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return string description."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Returns the difficulty of the task."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @return Difficulty of the task."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Difficulty getDifficulty() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return this.difficulty;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Returns the tag of the task."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nystera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the task\u0027s tag."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String getTag() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this.tag.getTagName();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public LocalDateTime getInputDateTime() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return this.inputDateTime;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Returns a string that displays all information"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * about the task in a user readable format."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return the status and description of the task."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"]\" + this.getDifficulty().toString()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                + this.tag.toString() + \" \" + this.getDescription();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Returns a disc savable csv format of the task info."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @return a pipe separated string of the status, difficulty and description."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public String toSaveFormat() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return (this.isDone ? 1 : 0) + \"|\" + this.difficulty.toSaveFormat()"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                + \"|\" + this.tag.tagName + \"|\" + this.description;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public String toSaveInputDateTime() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return \"|\" + inputDateTime;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Checks whether an input task is equal to current object."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param temp input task"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return true or false to comparison."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public boolean equals(Task temp) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return this.description.equals(temp.description);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Checks whether the task has been completed."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return task completed or not"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public abstract LocalDateTime getDateTime();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public abstract void setDateTime(LocalDateTime localDateTime);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 81,
      "nystera": 23,
      "jingkang97": 2,
      "ngjiewu": 58
    }
  },
  {
    "path": "src/main/java/seedu/hustler/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.data.CommandLog;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.data.Schedule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.game.achievement.AddTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.game.achievement.DoneTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import seedu.hustler.schedule.Scheduler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import seedu.hustler.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import static seedu.hustler.logic.parser.DateTimeParser.getDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * A list of tasks that has a java ArrayList at its core. Contains methods"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * that add, remove and perform operations on elements"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * of the list like mark as done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * ArrayList of Tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Ui instance that communicates errors with the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Schedule instance to plan schedule."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private Schedule schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Initializes list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Returns a task at a particular index."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param index index of the task you want"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return task at that index"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Returns size of task list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return length of task list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Adds a new Task to the task list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param task new Task to be added."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        String output \u003d \"\\t  \" + list.get(list.size() - 1).toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        updateBusybeeAchievement(!CommandLog.isRestoring());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        Scheduler.add(this.getLastTask());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Adds a task to the ArrayList based on the task type and task description."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Parses the description in case of event or deadline."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Handles exceptions."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param taskType the type of task eg. todo, event, deadline"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param taskDescriptionFull the description that follows the task type."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void add(String taskType, String taskDescriptionFull) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nystera"
        },
        "content": "        List\u003cString\u003e splitInput \u003d Arrays.asList(taskDescriptionFull.split(\" \"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nystera"
        },
        "content": "        String difficulty \u003d \"\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nystera"
        },
        "content": "        String tag \u003d \"\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (splitInput.contains(\"/d\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            int difficultyIndex \u003d splitInput.indexOf(\"/d\") + 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            difficulty \u003d splitInput.get(difficultyIndex);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (splitInput.contains(\"/tag\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            int tagIndex \u003d splitInput.indexOf(\"/tag\") + 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            tag \u003d splitInput.get(tagIndex);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nystera"
        },
        "content": "        String onlyDescription \u003d getDescription(splitInput);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        boolean checkAnomaly \u003d true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if (taskType.equals(\"todo\") \u0026\u0026 !DetectAnomalies.test(new ToDo(taskDescriptionFull), list)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            list.add(new ToDo(onlyDescription, difficulty, tag, LocalDateTime.now()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            checkAnomaly \u003d false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            if (taskType.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                addDeadline(taskDescriptionFull, difficulty, tag);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                checkAnomaly \u003d false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                addEvent(taskDescriptionFull, difficulty, tag);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                checkAnomaly \u003d false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        updateBusybeeAchievement(checkAnomaly);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        Scheduler.add(this.getLastTask());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Checks if the user have met Busybee achievement conditions and"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * update accordingly."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param checkAnomaly check if there\u0027s any clashes"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void updateBusybeeAchievement(boolean checkAnomaly) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        if (!checkAnomaly) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            AddTask.increment();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            AddTask.updateAchievementLevel();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            AddTask.updatePoints();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            Hustler.achievementList.updateBusyBee();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            if (!CommandLog.isRestoring()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                ui.show_task_added(list);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            if (!CommandLog.isRestoring()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                ui.show_task_clash();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Checks if the user have met Completionist achievement conditions and"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * update accordingly."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void updateCompletionistAchievement() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            DoneTask.increment();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            DoneTask.updateAchievementLevel();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            DoneTask.updatePoints();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            Hustler.achievementList.updateCompletionist();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            if (!CommandLog.isRestoring()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                ui.show_task_done(list.toString());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void addDeadline(String taskDescriptionFull, String difficulty, String tag) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        List\u003cString\u003e splitInput \u003d Arrays.asList(taskDescriptionFull.split(\" \"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        String onlyDescription \u003d getDescription(splitInput);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        String timeStr \u003d getTime(splitInput);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        LocalDateTime time \u003d getDateTime(timeStr);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        boolean isRecurring \u003d false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        int everyIndex \u003d 0, numOfMin \u003d 0;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        String frequency \u003d \"\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (splitInput.contains(\"/every\")) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            isRecurring \u003d true;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            everyIndex \u003d splitInput.indexOf(\"/every\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            frequency \u003d splitInput.get(everyIndex + 1) + \" \" + splitInput.get(everyIndex + 2);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            numOfMin \u003d convertToMinute(frequency);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (!DetectAnomalies.test(new Deadline(taskDescriptionFull, time), list)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            if (isRecurring) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                list.add(new RecurringDeadline(onlyDescription, time, difficulty, tag,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                    LocalDateTime.now(), frequency, numOfMin, false));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                list.add(new Deadline(onlyDescription, time, difficulty, tag, LocalDateTime.now()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void addEvent(String taskDescriptionFull, String difficulty, String tag) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        List\u003cString\u003e splitInput \u003d Arrays.asList(taskDescriptionFull.split(\" \"));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        String onlyDescription \u003d getDescription(splitInput);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        String timeStr \u003d getTime(splitInput);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        LocalDateTime time \u003d getDateTime(timeStr);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        boolean isRecurring \u003d false;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        int everyIndex \u003d 0, numOfMin \u003d 0;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        String frequency \u003d \"\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (splitInput.contains(\"/every\")) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            isRecurring \u003d true;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            everyIndex \u003d splitInput.indexOf(\"/every\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            frequency \u003d splitInput.get(everyIndex + 1) + \" \" + splitInput.get(everyIndex + 2);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            numOfMin \u003d convertToMinute(frequency);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (!DetectAnomalies.test(new Event(taskDescriptionFull, time), list)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            if (isRecurring) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                list.add(new RecurringEvent(onlyDescription, time, difficulty, tag,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                    LocalDateTime.now(), frequency, numOfMin, false));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                list.add(new Event(onlyDescription, time, difficulty, tag, LocalDateTime.now()));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Returns the core ArrayList inside the TaskList object."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return ArrayList of Tasks."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public ArrayList\u003cTask\u003e return_list() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Marks a task at index as done."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param i index of the task to mark as done."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void doTask(int i) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            list.get(i).markAsDone();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            if (list.get(i).isDone) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                updateCompletionistAchievement();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                if (!CommandLog.isRestoring()) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    ui.show_task_done(list.get(i).toString());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nystera"
        },
        "content": "                Hustler.avatar.gainXp();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nystera"
        },
        "content": "        } catch (IOException ignore) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Removes task at index."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param i index at which task is removed."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @throws IndexOutOfBoundsException if an out of bounds index is requested."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void removeTask(int i) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        String taskDescription \u003d list.get(i).toString();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        list.remove(i);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (!CommandLog.isRestoring()) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            ui.show_task_removed(list, taskDescription);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Clears all the tasks in the task list."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void clearList() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        if (list.isEmpty()) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            if (!CommandLog.isRestoring()) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                ui.show_list_empty();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            list.clear();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            if (!CommandLog.isRestoring()) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                ui.show_list_cleared();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Snoozes task at index."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param i index at which task is snoozed."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param userInput full description of the user\u0027s input."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void snoozeTask(int i, String[] userInput) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        if (userInput[1].contains(\"/\")) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            LocalDateTime localDateTime \u003d getDateTime(userInput[1] + \" \" + userInput[2]);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            list.get(i).setDateTime(localDateTime);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            int num \u003d Integer.parseInt(userInput[1]);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            LocalDateTime ldt \u003d list.get(i).getDateTime();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            switch (userInput[2]) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            case \"minutes\":"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                list.get(i).setDateTime(ldt.plusMinutes(num));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            case \"hours\":"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                list.get(i).setDateTime(ldt.plusHours(num));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            case \"days\":"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                list.get(i).setDateTime(ldt.plusDays(num));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            case \"weeks\":"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                list.get(i).setDateTime(ldt.plusWeeks(num));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            case \"months\":"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                list.get(i).setDateTime(ldt.plusMonths(num));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                ui.show_message(\"You have typed in the wrong format. Please re-enter the snooze command.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (!CommandLog.isRestoring()) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            ui.show_task_snoozed(list.get(i).toString());"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Sorts the task list based on the user\u0027s preference."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * There are 3 ways in which tasks can be sorted:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * 1. /normal sorts the tasks based on when the user input the tasks."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * 2. /chronological sorts the tasks based on the date and time of the tasks."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * 3. /prioritize sorts the tasks based on the difficulty of the tasks."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param sortType the user\u0027s preferred sorting order."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void sortTask(String sortType) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        switch (sortType) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        case \"normal\":"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            TreeMap\u003cLocalDateTime,Task\u003e normalList \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            for (Task task : list) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                normalList.put(task.getInputDateTime(),task);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            list.clear();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            for (Map.Entry\u003cLocalDateTime,Task\u003e entry : normalList.entrySet()) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                list.add(entry.getValue());"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        case \"datetime\":"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            TreeMap\u003cLocalDateTime,Task\u003e toDoList \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            TreeMap\u003cLocalDateTime,Task\u003e otherTasksList \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            for (Task task : list) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    toDoList.put(task.getInputDateTime(),task);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    otherTasksList.put(task.getDateTime(),task);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            list.clear();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            for (Map.Entry\u003cLocalDateTime,Task\u003e entry : toDoList.entrySet()) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                list.add(entry.getValue());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            for (Map.Entry\u003cLocalDateTime,Task\u003e entry : otherTasksList.entrySet()) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                list.add(entry.getValue());"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        case \"priority\":"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            Collections.sort(list, (t1, t2) -\u003e {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                if (t1.getDifficulty().toString().equals(t2.getDifficulty().toString())) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    return 0;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                } else if (t1.getDifficulty().toString().equals(\"[H]\")) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    return -1;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                } else if (t1.getDifficulty().toString().equals(\"[M]\")"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                        \u0026\u0026 t2.getDifficulty().toString().equals(\"[L]\")) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    return -1;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                    return 1;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            });"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (!CommandLog.isRestoring()) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            ui.show_list_sorted(list);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Displays the list of tasks contained in the object."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void displayList() {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (list.isEmpty()) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            if (!CommandLog.isRestoring()) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                ui.show_empty_list_error();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            if (!CommandLog.isRestoring()) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                ui.show_list(list);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Finds task which contains a character sequence supplied."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param taskDescription a character sequence from which tasks will be found."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void findTask(String taskDescription) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        ArrayList\u003cInteger\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "nystera"
        },
        "content": "            if (list.get(i).getDescription().contains(taskDescription)"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "nystera"
        },
        "content": "                || list.get(i).getTag().equalsIgnoreCase(taskDescription)) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                matchingTasks.add(i);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (matchingTasks.isEmpty()) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            ui.task_doesnt_exist_error();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            ui.show_matching_tasks(list, matchingTasks);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Converts the frequency into number of minutes."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param frequency string that denotes the frequency."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @return number of minutes."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public static int convertToMinute(String frequency) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        int number \u003d Integer.parseInt(frequency.split(\" \")[0]);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        String period \u003d frequency.split(\" \")[1];"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        int minutes \u003d 0;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        switch (period) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        case \"minutes\":"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            minutes \u003d number;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        case \"hours\":"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            minutes \u003d number * 60;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        case \"days\":"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            minutes \u003d number * 60 * 24;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        case \"weeks\":"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            minutes \u003d number * 60 * 24 * 7;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        case \"months\":"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            minutes \u003d number * 60 * 24 * 7 * 28;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            minutes \u003d 0;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return minutes;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Obtains the last task in the task list."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @return last task in the task list."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Task getLastTask() {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this.list.get(list.size() - 1);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public static String getDescription(List\u003cString\u003e splitInput) {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "nystera"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "nystera"
        },
        "content": "        for (String str : splitInput) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            if (str.equals(\"/d\") || str.equals(\"/tag\") || str.equals(\"/by\")"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "nystera"
        },
        "content": "                || str.equals(\"/at\")) {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "nystera"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "nystera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "nystera"
        },
        "content": "            description +\u003d str + \" \";"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return description.trim();"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public static String getTime(List\u003cString\u003e splitInput) {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "nystera"
        },
        "content": "        String time \u003d \"\";"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "nystera"
        },
        "content": "        for (int i \u003d 0; i \u003c splitInput.size(); i++) {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "nystera"
        },
        "content": "            if (splitInput.get(i).contains(\"/by\") || (splitInput.get(i).contains(\"/at\"))) {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "nystera"
        },
        "content": "                for (int j \u003d i + 1; j \u003c i + 3; j++) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "nystera"
        },
        "content": "                    time +\u003d splitInput.get(j) + \" \";"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "nystera"
        },
        "content": "                }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "nystera"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "nystera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return time.trim();"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private String getOnlyDate(List\u003cString\u003e splitInput) {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "nystera"
        },
        "content": "        String date \u003d \"\";"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "nystera"
        },
        "content": "        for (int i \u003d 0; i \u003c splitInput.size(); i++) {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "nystera"
        },
        "content": "            if (splitInput.get(i).contains(\"/by\") || (splitInput.get(i).contains(\"/at\"))) {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "nystera"
        },
        "content": "                date +\u003d splitInput.get(i + 1);"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "nystera"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "nystera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return date.trim();"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Checks whether two instances of TaskList are equal."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @param temp TaskList instance to compare against."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return true or false to the comparison."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public boolean equals(TaskList temp) {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        if (this.size() !\u003d temp.size()) {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            System.out.println(\"Length not equal\");"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        for (int i \u003d 0; i \u003c this.size(); i++) {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            if (!this.get(i).equals(temp.get(i))) {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                System.out.println(this.get(i).description + temp.get(i).description + \"?\");"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 24,
      "yzia2000": 207,
      "nystera": 59,
      "jingkang97": 43,
      "ngjiewu": 170
    }
  },
  {
    "path": "src/main/java/seedu/hustler/task/ToDo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * A class that inherits from the abstract class Task. This task type"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * is a simple todo that can be marked as done when done."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * LocalDateTime to store the todo\u0027s date and time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    protected LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Initializes description and default difficulty."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Initializes description and user input difficulty."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public ToDo(String description, String difficulty, String tag, LocalDateTime now) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        super(description, difficulty, tag, now);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Overrides the method to display the task type along"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * with inherited task string."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return details of the task in a user readable format."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Overrides the method to display the task type along"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * with inherited task string saveAchievements format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * @return inherited string plus task format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public String toSaveFormat() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return \"T|\" + super.toSaveFormat() + super.toSaveInputDateTime();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Checks equality with another Todo instance."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @param temp the instance to compare against."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * @return true or false to the comparison."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public boolean equals(ToDo temp) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this.description.equals(temp.description);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        return this.localDateTime;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void setDateTime(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        this.localDateTime \u003d localDateTime;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 31,
      "nystera": 8,
      "jingkang97": 18,
      "ngjiewu": 11
    }
  },
  {
    "path": "src/main/java/seedu/hustler/task/variables/Difficulty.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.task.variables;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": " * The class that stores the difficulty of the task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class Difficulty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Enumerator that separates the level of the difficulty."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "    enum Level {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "        L,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "        M,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "        H"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The level of the difficulty."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": "    private Level level;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Constructs a difficulty level based on user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Will automatically set default difficulty as M (medium)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * if user input cannot be parsed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param difficulty the level of the difficulty."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Difficulty(String difficulty) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "        switch (difficulty.toLowerCase()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "        case \"l\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": "        case \"low\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "            this.level \u003d Level.L;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "        case \"m\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "        case \"medium\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nystera"
        },
        "content": "            this.level \u003d Level.M;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nystera"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nystera"
        },
        "content": "        case \"h\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nystera"
        },
        "content": "        case \"high\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nystera"
        },
        "content": "            this.level \u003d Level.H;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return \"[\" + this.level.toString() + \"]\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public String toSaveFormat() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return this.level.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public Level getLevel() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        return this.level;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 49,
      "ngjiewu": 7
    }
  },
  {
    "path": "src/main/java/seedu/hustler/task/variables/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.task.variables;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": " * The class that handles the tags of the Tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * The one-word tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Constructs a tag with the string given."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @param name the tag name from the user input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public Tag(String name) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": "        tagName \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * returns the String of the tagName."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * @return the tag tagName."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return this.tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nystera"
        },
        "content": "        if (!this.tagName.equals(\"\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nystera"
        },
        "content": "            return \"[#\" + this.tagName + \"]\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nystera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nystera"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 36
    }
  },
  {
    "path": "src/main/java/seedu/hustler/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.Hustler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.data.CommandLog;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import seedu.hustler.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import java.lang.reflect.Array;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * A class dedicated to performing interactions with the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Takes inputs and contains methods that output error messages."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public static final String LINE \u003d \"\\t_____________________________________\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Print with formatting."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void show_message(String message) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        System.out.println(\"\\t\" + message);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Prints an output message if list history was not saved."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void show_save_error() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        System.out.println(\"\\tCouldn\u0027t saveAchievements file.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Prints a bye message if user enters bye."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void show_bye_message() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        System.out.println(\"\\tBye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Prints an error message if user does not enter a valid command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void correct_command_error() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (!CommandLog.isRestoring()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nystera"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            System.out.println(\"\\tPlease enter a valid command: add, \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                + \"list, bye, find, delete.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nystera"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Prints an error message if the format of event or deadline"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * commands is not correct."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void wrong_description_error() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(\"\\tDescription needs a \u0027/\u0027 before by/at\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Prints an error message if user performs an operation on a nonexistent"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void task_doesnt_exist_error() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        System.out.println(\"\\tTask doesn\u0027t exist. Please choose another.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Prints error message if an empty list is asked to be displayed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void show_empty_list_error() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        System.out.println(\"\\tList is empty. Please type \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            + \"another command apart from list.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Prints an error message if a command like find, delete, todo, deadline,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * event or others is entered without a following description."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void empty_description_error() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        System.out.println(\"\\tPlease enter a description after the command.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Prints an error message when the format of the date/time"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * entered for event or deadline is not correct."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void date_time_error() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        System.out.println(\"\\tFormat of time is incorrect either in command \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            + \"or saveAchievements file. Saving event/deadline as mentioned without date \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "            + \"time parsing.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Prints an error message when the format of date is wrong when showing schedule."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void dateFormatError() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(\"\\tFormat of date invalid. Please type it in in DD/MM/YYYY\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Prints the new name of the avatar and lets the user know that it has been changed."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void showNameChangeSuccess() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(\"\\tName has been successfully changed!\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(\"\\tYour new name is: \" + Hustler.avatar.getName());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Prints the statistics of the avatar."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void showAvatarStatistics() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(Hustler.avatar.toString());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nystera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nystera"
        },
        "content": "     * Prints an error message when the format of show command is wrong."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nystera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void showFormatError() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(\"\\tShow command invalid. Please only type \\\"show \u003cDD/MM/YYYY\u003e\\\"\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nystera"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * A hello message when hustler is ran."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void show_opening_string() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        String logo \u003d \" _   _   _    _     _____  ______   _       ___      ___\\n\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                + \"|  | |  | | |  |  |  / ____/ |__   __|  | |     |  __|  / __  \\\\\\n\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                + \"|  |_| | | |  |  |   |  \\\\___      |  |    | |      | |__  | |__/ /\\n\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                + \"|  _  | | |   |  |   \\\\____ \\\\     |  |    | |     |  __|  |  _  /\\n\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                + \"|  | | | |  \\\\_/ |    ___/  |     |  |    | |___ |  |__  | / \\\\ \\\\\\n\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                + \"|_| |_|  \\\\___/  /_____/      |_|     |____||____| |_|  \\\\_\\\\\\n\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Prints a message if list is empty."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void show_list_empty() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(\"\\tNothing to be cleared! Task list is already empty!\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Prints a message when list is cleared."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void show_list_cleared() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(\"\\tAll tasks in the task list has been cleared! List is now empty!\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Prints a message when a task has been snoozed."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param taskDescription description of the snoozed task."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void show_task_snoozed(String taskDescription) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(\"\\tGot it. You have snoozed the task.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(\"\\t\" + taskDescription);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Prints the entire collection of tasks in task list."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param list collection of tasks."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void show_list(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(\"\\tHere are the tasks in your list:\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            System.out.println(\"\\t\" + (i + 1) + \". \" + list.get(i).toString());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Prints a message when a task has been added."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param list collection of tasks."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void show_task_added(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(\"\\tGot it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(\"\\t  \" + list.get(list.size() - 1).toString());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(\"\\tNow you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Prints a message when a task clashes with another task in the list."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void show_task_clash() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(\"Task clashes with another existing task in the list!\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Prints a message when a task has been completed."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param taskDescription description of the completed task."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void show_task_done(String taskDescription) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(\"\\tNice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(\"\\t  \" + taskDescription);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Prints a message when a task has been removed."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param list collection of tasks."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param taskDescription description of the removed task."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void show_task_removed(ArrayList\u003cTask\u003e list, String taskDescription) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(\"\\tNoted. I have removed this task:\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(\"\\t  \" + taskDescription);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(\"\\tNow there are \" + list.size() + \" tasks left.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Prints the tasks that contains the searched keyword."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param list collection of tasks."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param matchingTasks list of integers which contains the matching tasks."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void show_matching_tasks(ArrayList\u003cTask\u003e list, ArrayList\u003cInteger\u003e matchingTasks) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(\"\\tFound \" + matchingTasks.size() + \". Here you go.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        for (Integer id : matchingTasks) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            System.out.println(\"\\t  \" + (id + 1) + \". \" + list.get(id).toString());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Prints a message when the task list has been sorted."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @param list collection of tasks."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public void show_list_sorted(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(\"\\tTask list has been successfully sorted!\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        show_list(list);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /** Issue an error if command not followed by number in case of"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * commands like done, delete amongst others."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void numberCommandError() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        this.show_message(\"Command should be followed by a number. /command \u003cnumber\u003e\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 3,
      "yzia2000": 88,
      "nystera": 60,
      "jingkang97": 6,
      "ngjiewu": 126
    }
  },
  {
    "path": "src/main/java/seedu/hustler/ui/timer/Timer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.ui.timer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.ui.timer.statusTypes.threadStatus;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": " * The timer device operated by timerManager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "public class Timer implements Runnable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * The current status of the timer, an attribute that is"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * affected by the types of commands used by the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    protected static threadStatus threadstatus \u003d threadStatus.DEFAULT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * An array of 3 integers representing the hours, minutes"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * and seconds (indexes 2, 1, and 0 respectively of timeArray)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * of the timer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    protected int[] timeArray \u003d new int[3];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Default constructor that initialises the timer to 0hrs"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * 0minutes and 0seconds."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    protected Timer() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        timeArray \u003d new int[3];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        threadstatus \u003d threadStatus.DEFAULT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Overloaded constructor that directly sets the hours, minutes"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * and seconds of the timer according to the user\u0027s discretion."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @param hours hours of the timer."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @param minutes minutes of the timer."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @param seconds seconds of the timer."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    protected Timer(String hours, String minutes, String seconds) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        timeArray[0] \u003d Integer.parseInt(seconds);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        timeArray[1] \u003d Integer.parseInt(minutes);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        timeArray[2] \u003d Integer.parseInt(hours);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Starts running the timer, counting down until"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * the time is up or if the timer is ended"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * prematurely by the user. Timer can be paused"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * and resumed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        TimerUI.printThreadStart(threadstatus, timeArray);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            while (!isFinished()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                Thread.sleep(1000);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                timeArray \u003d TimerLogic.decrement(timeArray);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        TimerUI.printThreadInterrupt(threadstatus);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Returns the time currently stored by the timer."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * This method is an accessor for other methods."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @return the entire array containing information"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     *     about the timer\u0027s hours, minutes and seconds."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    protected int[] getTime() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        return timeArray;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Returns a boolean value telling the timer if"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * the countdown is completed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * @return true if timer if completed, false otherwise."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    private boolean isFinished() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        return (timeArray[0] \u003d\u003d 0 \u0026\u0026 timeArray[1] \u003d\u003d 0 \u0026\u0026 timeArray[2] \u003d\u003d 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 72,
      "ngjiewu": 9
    }
  },
  {
    "path": "src/main/java/seedu/hustler/ui/timer/TimerLogic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.ui.timer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": " * This class contains information on the how to actually decrement the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": " * timer\u0027s time. Allows the timer to actually countdown."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "public class TimerLogic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @param time[] takes the current time of the timer and attempts to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * decrement it by one second."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @return the next iteration of the countdown."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    protected static int[] decrement(int time[]) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        return recursiveDecrement(index, time);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Recursively countsdown the timer\u0027s time. If seconds if 0, reduce"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * minutes, if minutes if 0, reduce hours etc."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    private static int[] recursiveDecrement(int index, int time[]) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (time[index] \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            time[index] \u003d 59;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            return recursiveDecrement(index + 1, time);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            time[index]--;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            return time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 31,
      "ngjiewu": 1
    }
  },
  {
    "path": "src/main/java/seedu/hustler/ui/timer/TimerManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.ui.timer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.ui.timer.statusTypes.threadStatus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.ui.timer.statusTypes.threadError;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": " * The access point for all Timer-related things."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "public class TimerManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * All instances of TimerManager share the same Timer and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * thread so that all things Timer-related are in sync."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    protected static Timer countdownTimer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    protected static Thread countdownThread;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Empty constructor that also creates a Timer and a thread"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * for the timeManager. All timeManagers are required to"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * have these two attributes initialised."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    public TimerManager() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        countdownTimer \u003d new Timer();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        countdownThread \u003d new Thread(countdownTimer);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Allows the timeManager to set the Timer\u0027s time as per"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * the user\u0027s wishes."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void setTimer(String time) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        String[] timeParts \u003d time.split(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        countdownTimer \u003d new Timer(timeParts[0], timeParts[1], timeParts[2]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Allows the timeManager to reset the Timer, reverting"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * its hours, minutes and seconds to 0 again at any"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * point."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static void resetTimer() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        countdownTimer \u003d new Timer();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        Timer.threadstatus \u003d threadStatus.RESET;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Allows the timeManager to start the Timer countdown,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * usually done after setting the Timer."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void startTimer() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        Timer.threadstatus \u003d threadStatus.RUNNING;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        countdownThread \u003d new Thread(countdownTimer);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        countdownThread.start();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Allows the timeManager to retrieve the current time"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * of the Timer in order to print and inform the user."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Lets the user know how much time is left."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public void checkTimeLeft() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        TimerUI.printTimeLeft(countdownTimer.getTime());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Allows the timeManager to pause the Timer if the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * user so desires."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static void pauseTimer() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (Timer.threadstatus \u003d\u003d threadStatus.RUNNING || Timer.threadstatus \u003d\u003d threadStatus.RESUMED) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            Timer.threadstatus \u003d threadStatus.PAUSED;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            countdownThread.interrupt();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            TimerUI.printThreadError(threadError.PAUSEERROR);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Allows the timeManager to resume a Timer that has"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * been paused by the user. Timers that have not been"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * paused cannot be resumed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static void resumeTimer() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (Timer.threadstatus \u003d\u003d threadStatus.PAUSED) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            Timer.threadstatus \u003d threadStatus.RESUMED;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            countdownThread \u003d new Thread(countdownTimer);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            countdownThread.start();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            TimerUI.printThreadError(threadError.RESUMEERROR);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Allows the timeManager to stop a Timer\u0027s countdown"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * prematurely."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static void stopTimer() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (Timer.threadstatus \u003d\u003d threadStatus.RUNNING || Timer.threadstatus \u003d\u003d threadStatus.RESUMED || Timer.threadstatus \u003d\u003d threadStatus.PAUSED) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            Timer.threadstatus \u003d threadStatus.STOPPED;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            countdownThread.interrupt();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            resetTimer();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            TimerUI.printThreadError(threadError.STOPERROR);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 101,
      "ngjiewu": 7
    }
  },
  {
    "path": "src/main/java/seedu/hustler/ui/timer/TimerUI.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "package seedu.hustler.ui.timer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.ui.timer.statusTypes.threadError;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.ui.timer.statusTypes.threadStatus;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " * Manages all code that will need to print information for the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " * Acts as a node and HQ for all such user-interface activities."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "public class TimerUI {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * All strings to be printed will always be generated elsewhere. This private"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * function will be the last part of every printing-related action; this method"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * is the gate of sorts. This deliberate abstraction allows the developer"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * to mute printing if required."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    private static void printToUser (String output) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * The main location to generate messages related to why a timer starts to"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * countdown (new timer started, old timer resumed, etc)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    protected static void printThreadStart(threadStatus threadstatus, int[] timeArray) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (threadstatus \u003d\u003d threadStatus.RUNNING) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            printToUser(UIMessages.threadStart.TimerStart(timeArray));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else if (threadstatus \u003d\u003d threadStatus.RESUMED) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            printToUser(UIMessages.threadStart.TimerResumed());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * The main location to generate messages related to why a timer has"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * stopped its countdown (has it been paused, stopped prematurely, etc)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    protected static void printThreadInterrupt(threadStatus threadstatus) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (threadstatus \u003d\u003d threadStatus.PAUSED) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            printToUser(UIMessages.threadStop.TimerPaused());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else if (threadstatus \u003d\u003d threadStatus.RESET) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            printToUser(UIMessages.threadStop.TimerStopped());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else if (threadstatus \u003d\u003d threadStatus.RUNNING || threadstatus \u003d\u003d threadStatus.RESUMED) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            printToUser(UIMessages.threadStop.TimesUp());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            Timer.threadstatus \u003d threadStatus.FINISHED;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * The main location to generate messages related to all errors that arise"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * to the the timer/ thread (invalid commands, etc)."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    protected static void printThreadError(threadError threaderrortype) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        if (threaderrortype \u003d\u003d threadError.RESUMEERROR) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            printToUser(UIMessages.threadError.NoTimerToResumeError());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else if (threaderrortype \u003d\u003d threadError.PAUSEERROR) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            printToUser(UIMessages.threadError.NoTimerToPauseError());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        } else if (threaderrortype \u003d\u003d threadError.STOPERROR) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            printToUser(UIMessages.threadError.NoTimerToStopError());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     * Generates the string the inform the user of how much time remains."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    protected static void printTimeLeft(int[] timeArray) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        String output \u003d \"Time remaining: \" + UiLogic.padOutput(timeArray);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        printToUser(output);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 26,
      "ngjiewu": 44
    }
  },
  {
    "path": "src/main/java/seedu/hustler/ui/timer/UIMessages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.ui.timer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "import seedu.hustler.ui.timer.statusTypes.threadStatus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": " * This class contains all classes that generate UIMessages"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": " * for printing. These includes the threadStart, threadStop"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": " * and threadError classes."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "public class UIMessages {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * A class that returns a descrption of the timer activity each timer"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * the timer starts, resumes, etc."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static class threadStart {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "         * This method informs the user each time a new timer is started."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "         *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "         * @param timeArray the current hours, minutes and seconds of the timer."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "         * @return a string telling the user that a new timer has been started,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "         * along with the timer\u0027s duration."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "         */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        public static String TimerStart(int[] timeArray) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            String output \u003d \"Timer has commenced! Time set: \" + UiLogic.padOutput(timeArray);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "         * This method informs the user each time a paused timer is resumed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "         * @return  a string telling the user that a paused timer has been"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "         * resumed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "         */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        public static String TimerResumed() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            String output \u003d \"Timer mode has resumed!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * This class generates the various messages to explain why a timer has"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * been stopped (whether because it has been paused, stopped, etc.)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * These string messages will then be printed to inform the user of what"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * has happened."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static class threadStop {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "         * @return a string telling the user that the timer has been paused."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        public static String TimerPaused() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            String output \u003d \"Timer mode has been paused!\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "         * @return a string telling the user that the timer has been stopped."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        public static String TimerStopped() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            String output \u003d \"Timer has been stopped and reset\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "         * @return a string telling the user that the countdown is complete.."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "         */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        public static String TimesUp() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            String output \u003d \"Timer mode has been completed!\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * This class generates the various error messages to be printed"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * if the user\u0027s commands are invalid or if they cannot be performed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static class threadError {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "         * @return a string telling the user that the \u0027resumetimer\u0027 command cannot"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "         * currently be used."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "         */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        public static String NoTimerToResumeError() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "             String output \u003d \"Error: No paused timer to resume!\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "         * @return a string telling the user that the \u0027pausetimer\u0027 command cannot"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "         * currently be used."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "         */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        public static String NoTimerToPauseError() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            String output \u003d \"Error: No running timer to pause!\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "         * @return a string telling the user that the \u0027stoptimer\u0027 command cannot"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "         * currently be used."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "         */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        public static String NoTimerToStopError() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            String output \u003d \"Error! No running timer to stop!\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 108
    }
  },
  {
    "path": "src/main/java/seedu/hustler/ui/timer/UiLogic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.ui.timer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": " * A class with functions that help process outputs, making them more readable before printing."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "public class UiLogic {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Takes in the integers to be printed and pads them with \u00270\u0027s where applicable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @param timeArray the hours, minutes and seconds to be printed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * @return the padded integers hours, minutes and seconds, to be printed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public static String padOutput(int[] timeArray) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        return (  (timeArray[2] \u003c 10 ? \"0\" : \"\") + timeArray[2] + \"hrs \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                + (timeArray[1] \u003c 10 ? \"0\" : \"\") + timeArray[1] + \"min \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "                + (timeArray[0] \u003c 10 ? \"0\" : \"\") + timeArray[0] + \"sec\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 17,
      "ngjiewu": 1
    }
  },
  {
    "path": "src/main/java/seedu/hustler/ui/timer/statusTypes.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "package seedu.hustler.ui.timer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": " * This class contains the various types of statuses"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": " * needed by the program to signal specific types of"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": " * error, specific thread statuses, etc."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "public class statusTypes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Types of erros that can occur. To be used so that the appropriate error"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * messages for different situations can be printed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public enum threadError {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        RESUMEERROR,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        PAUSEERROR,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        STOPERROR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     * Types of statuses the timer can have."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    public enum threadStatus {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        DEFAULT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "\tRUNNING,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "\tPAUSED,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        RESUMED,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        RESET,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        STOPPED,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "        FINISHED"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EnriqueKhai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EnriqueKhai": 32
    }
  },
  {
    "path": "src/main/resources/view/AchievementWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"601.0\" maxWidth\u003d\"579.0\" minHeight\u003d\"601.0\" minWidth\u003d\"424.0\" prefHeight\u003d\"601.0\" prefWidth\u003d\"579.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"view.AchievementWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "      \u003cScrollPane layoutX\u003d\"23.0\" layoutY\u003d\"90.0\" minHeight\u003d\"511.0\" minWidth\u003d\"329.0\" prefHeight\u003d\"511.0\" prefWidth\u003d\"403.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"176.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "      \u003cAnchorPane prefHeight\u003d\"601.0\" prefWidth\u003d\"176.0\" style\u003d\"-fx-background-color: #34495e;\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "      \u003cGridPane prefHeight\u003d\"90.0\" prefWidth\u003d\"176.0\" style\u003d\"-fx-background-color: #2dcb70;\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jingkang97": 25
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "\u003c?import javafx.geometry.Rectangle2D?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "\u003c?import javafx.scene.effect.ColorAdjust?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"rootPane\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"601.0\" prefWidth\u003d\"590.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"seedu.hustler.MainWindow\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutY\u003d\"-32.0\" prefHeight\u003d\"590.0\" prefWidth\u003d\"558.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"174.0\" layoutY\u003d\"553.0\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"48.0\" prefWidth\u003d\"401.0\" promptText\u003d\"Type a command...\" style\u003d\"-fx-border-color: #ffffff;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"178.0\" AnchorPane.rightAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "      \u003cGridPane alignment\u003d\"CENTER\" layoutX\u003d\"176.0\" prefHeight\u003d\"90.0\" prefWidth\u003d\"399.0\" style\u003d\"-fx-background-color: #ffffff;\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"60.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            \u003cRowConstraints maxHeight\u003d\"30.0\" minHeight\u003d\"10.0\" prefHeight\u003d\"24.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            \u003cRowConstraints maxHeight\u003d\"36.0\" minHeight\u003d\"10.0\" prefHeight\u003d\"36.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            \u003cImageView fitHeight\u003d\"66.0\" fitWidth\u003d\"91.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003cimage\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                  \u003cImage url\u003d\"@../../../../src/main/resources/images/ICON.png\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003c/image\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                  \u003cInsets left\u003d\"50.0\" right\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "      \u003cTextArea fx:id\u003d\"console\" prefHeight\u003d\"157.0\" prefWidth\u003d\"400.0\" wrapText\u003d\"true\" AnchorPane.bottomAnchor\u003d\"45.0\" AnchorPane.leftAnchor\u003d\"175.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"90.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"heading\" layoutX\u003d\"175.0\" layoutY\u003d\"91.0\" prefHeight\u003d\"45.0\" prefWidth\u003d\"414.0\" style\u003d\"-fx-background-color: #ffffff;\" AnchorPane.bottomAnchor\u003d\"465.0\" AnchorPane.leftAnchor\u003d\"176.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"91.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"498.0\" layoutY\u003d\"559.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" onMousePressed\u003d\"#sendClicked\" onMouseReleased\u003d\"#sendReleased\" prefHeight\u003d\"45.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: #2dcb70;\" text\u003d\"Send\" textFill\u003d\"WHITE\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "         \u003ceffect\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            \u003cColorAdjust /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "         \u003c/effect\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "      \u003cGridPane prefHeight\u003d\"601.0\" prefWidth\u003d\"176.0\" style\u003d\"-fx-background-color: #34495e;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "      \u003cAnchorPane fx:id\u003d\"stack\" minWidth\u003d\"100.0\" prefHeight\u003d\"601.0\" prefWidth\u003d\"176.0\" style\u003d\"-fx-background-color: #34495e;\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            \u003cButton fx:id\u003d\"task\" layoutY\u003d\"88.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#taskAction\" onMouseClicked\u003d\"#removeWelcome\" prefHeight\u003d\"62.0\" prefWidth\u003d\"176.0\" style\u003d\"-fx-background-color: #34495e; -fx-background-image: ../../../../images/notDone.png;\" text\u003d\" TASK\" textFill\u003d\"#95a5a6\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                  \u003cFont name\u003d\"Helvetica Neue\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003cgraphic\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                  \u003cImageView fx:id\u003d\"menu\" fitHeight\u003d\"41.0\" fitWidth\u003d\"37.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                     \u003cimage\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                        \u003cImage url\u003d\"@../../../../src/main/resources/images/Menus.png\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                     \u003c/image\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                        \u003cColorAdjust /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                     \u003c/effect\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003c/graphic\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                  \u003cInsets right\u003d\"75.0\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            \u003c/Button\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            \u003cButton fx:id\u003d\"taskCompletionMode\" layoutY\u003d\"150.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#taskCompletionModeAction\" onMouseClicked\u003d\"#removeWelcome\" prefHeight\u003d\"62.0\" prefWidth\u003d\"176.0\" style\u003d\"-fx-background-color: #34495e;\" text\u003d\"TASK COMPLETION MODE\" textFill\u003d\"#95a5a6\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                  \u003cFont name\u003d\"Helvetica\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003cgraphic\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                  \u003cImageView fx:id\u003d\"timer\" fitHeight\u003d\"46.0\" fitWidth\u003d\"60.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                     \u003cimage\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                        \u003cImage url\u003d\"@../../../../src/main/resources/images/Timers.png\" /\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                     \u003c/image\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                     \u003cviewport\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                        \u003cRectangle2D minX\u003d\"1.0\" minY\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                     \u003c/viewport\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003c/graphic\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            \u003c/Button\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            \u003cButton fx:id\u003d\"achievement\" layoutY\u003d\"212.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#achievementAction\" onMouseClicked\u003d\"#removeWelcome\" prefHeight\u003d\"62.0\" prefWidth\u003d\"176.0\" style\u003d\"-fx-background-color: #34495e;\" text\u003d\"ACHIEVEMENTS\" textFill\u003d\"#95a5a6\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                  \u003cFont name\u003d\"Helvetica Neue\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003cgraphic\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                  \u003cImageView fx:id\u003d\"trophy\" fitHeight\u003d\"68.0\" fitWidth\u003d\"42.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                     \u003cimage\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                        \u003cImage url\u003d\"@../../../../src/main/resources/images/trophies.png\" /\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                     \u003c/image\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003c/graphic\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                  \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            \u003c/Button\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            \u003cButton fx:id\u003d\"statistics\" layoutY\u003d\"274.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#statisticsAction\" onMouseClicked\u003d\"#removeWelcome\" prefHeight\u003d\"62.0\" prefWidth\u003d\"176.0\" style\u003d\"-fx-background-color: #34495e;\" text\u003d\"STATISTICS\" textFill\u003d\"#95a5a6\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003cgraphic\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                  \u003cImageView fx:id\u003d\"spiderGraph\" fitHeight\u003d\"108.0\" fitWidth\u003d\"51.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                     \u003cimage\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                        \u003cImage url\u003d\"@../../../../src/main/resources/images/Statistics.png\" /\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                     \u003c/image\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003c/graphic\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                  \u003cInsets right\u003d\"26.0\" /\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            \u003c/Button\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            \u003cButton fx:id\u003d\"avatar\" layoutY\u003d\"336.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#avatarAction\" onMouseClicked\u003d\"#removeWelcome\" prefHeight\u003d\"62.0\" prefWidth\u003d\"176.0\" style\u003d\"-fx-background-color: #34495e;\" text\u003d\"AVATAR\" textFill\u003d\"#95a5a6\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003cgraphic\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                  \u003cImageView fx:id\u003d\"profile\" fitHeight\u003d\"46.0\" fitWidth\u003d\"42.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                     \u003cimage\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                        \u003cImage url\u003d\"@../../../../src/main/resources/images/Avatars.png\" /\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                     \u003c/image\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003c/graphic\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                  \u003cInsets right\u003d\"55.0\" /\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            \u003c/Button\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            \u003cButton fx:id\u003d\"shop\" layoutY\u003d\"398.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#shopAction\" onMouseClicked\u003d\"#removeWelcome\" prefHeight\u003d\"62.0\" prefWidth\u003d\"176.0\" style\u003d\"-fx-background-color: #34495e;\" text\u003d\" SHOP\" textFill\u003d\"#95a5a6\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003cgraphic\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                  \u003cImageView fx:id\u003d\"trolley\" fitHeight\u003d\"75.0\" fitWidth\u003d\"43.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                     \u003cimage\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                        \u003cImage url\u003d\"@../../../../src/main/resources/images/Shops.png\" /\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                     \u003c/image\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003c/graphic\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                  \u003cInsets right\u003d\"70.0\" /\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            \u003c/Button\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            \u003cButton fx:id\u003d\"arena\" layoutY\u003d\"460.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#arenaAction\" onMouseClicked\u003d\"#removeWelcome\" prefHeight\u003d\"62.0\" prefWidth\u003d\"176.0\" style\u003d\"-fx-background-color: #34495e;\" text\u003d\"ARENA\" textFill\u003d\"#95a5a6\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003cgraphic\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                  \u003cImageView fx:id\u003d\"swords\" fitHeight\u003d\"44.0\" fitWidth\u003d\"42.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                     \u003cimage\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                        \u003cImage url\u003d\"@../../../../src/main/resources/images/Arena.png\" /\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                     \u003c/image\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003c/graphic\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                  \u003cInsets right\u003d\"60.0\" /\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            \u003c/Button\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            \u003cButton fx:id\u003d\"settings\" layoutY\u003d\"522.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#settingsAction\" onMouseClicked\u003d\"#removeWelcome\" prefHeight\u003d\"62.0\" prefWidth\u003d\"176.0\" style\u003d\"-fx-background-color: #34495e;\" text\u003d\"SETTINGS\" textFill\u003d\"#95a5a6\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003cgraphic\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                  \u003cImageView fx:id\u003d\"gear\" fitHeight\u003d\"49.0\" fitWidth\u003d\"46.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                     \u003cimage\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "                        \u003cImage url\u003d\"@../../../../src/main/resources/images/Settings.png\" /\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                     \u003c/image\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003c/graphic\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "                  \u003cInsets right\u003d\"40.0\" /\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            \u003c/Button\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "      \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "      \u003cGridPane prefHeight\u003d\"90.0\" prefWidth\u003d\"176.0\" style\u003d\"-fx-background-color: #2dcb70;\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPANEE\" layoutY\u003d\"133.0\" prefHeight\u003d\"425.0\" prefWidth\u003d\"414.0\" AnchorPane.bottomAnchor\u003d\"43.0\" AnchorPane.leftAnchor\u003d\"176.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"133.0\"\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"flowPane\" prefHeight\u003d\"466.0\" prefWidth\u003d\"414.0\" style\u003d\"-fx-background-color: #ffffff;\" /\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"welcomeScreen\" layoutX\u003d\"176.0\" layoutY\u003d\"91.0\" prefHeight\u003d\"45.0\" prefWidth\u003d\"414.0\" AnchorPane.bottomAnchor\u003d\"43.0\" AnchorPane.leftAnchor\u003d\"176.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"91.0\" /\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jingkang97": 178,
      "ngjiewu": 26
    }
  },
  {
    "path": "src/test/java/seedu/hustler/HustlerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *  Test class for Duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class HustlerTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    * Dummy test function."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 2,
      "-": 16
    }
  },
  {
    "path": "src/test/java/seedu/hustler/command/ParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Test class for Parser."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Dummy test."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 1,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/hustler/data/ScheduleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "import static seedu.hustler.parser.DateTimeParser.getDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ScheduleTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void taskInScheduleTest() throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        LocalDateTime by \u003d getDateTime(\"10/10/2019 1234\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Schedule schedule \u003d new Schedule();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String description \u003d \"test description\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String dateBy \u003d \"10/10/2019 1234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String dateOnly \u003d \"10/10/2019\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Date date \u003d schedule.convertStringToDate(dateOnly);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Deadline deadline \u003d new Deadline(description, by);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        schedule.addToSchedule(deadline, date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Task toCheckTask \u003d schedule.getDatedList(date).get(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(deadline.toString(), toCheckTask.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 4,
      "jingkang97": 5,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/hustler/data/TaskStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Test class for storage."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class TaskStorageTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Dummy test for storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        File history \u003d new File(\"data/test.txt\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        history.delete();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": "        TaskStorage taskStorage \u003d new TaskStorage(\"data/test.txt\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nystera"
        },
        "content": "        TaskList list \u003d new TaskList(taskStorage.load());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArrayEquals(list.return_list().toArray(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            (new ArrayList\u003cTask\u003e()).toArray());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(\"todo\", \"Work on CS2113T feature list\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        list.add(\"deadline\", \"Finish Feature list /by 1/1/2019 1800\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(\"event\", \"Student life fair /at 1/1/2019 2400\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nystera"
        },
        "content": "            taskStorage.save(list.return_list());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"Couldn\u0027t be saved.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        history.delete();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 1,
      "nystera": 7,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/hustler/game/achievement/AchievementTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "package seedu.hustler.game.achievement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public class AchievementTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Dummy test function."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void checkAchievementUnlock() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingkang97": 24
    }
  },
  {
    "path": "src/test/java/seedu/hustler/game/avatar/AvatarTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.avatar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " *  Test class for Avatar."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class AvatarTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    * Dummy test function."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 16,
      "nystera": 2
    }
  },
  {
    "path": "src/test/java/seedu/hustler/game/avatar/Level.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.avatar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " *  Test class for Level."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class Level {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    * Dummy test function."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 17,
      "nystera": 1
    }
  },
  {
    "path": "src/test/java/seedu/hustler/game/avatar/Stats.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.avatar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " *  Test class for Stats."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class Stats {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    * Dummy test function."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 17,
      "nystera": 1
    }
  },
  {
    "path": "src/test/java/seedu/hustler/game/shop/ShopListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.game.shop;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nystera"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "public class ShopListTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void purchaseItemsOutOfBounds() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nystera"
        },
        "content": "        assertEquals(Optional.empty(), new ShopList().buy(1000));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void checkFixedShopSize() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nystera"
        },
        "content": "        assertEquals(6, new ShopList().size());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nystera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nystera"
        },
        "content": "    public void checkPurchasedStatus() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nystera"
        },
        "content": "        String newlyPopulatedString \u003d \"0\\n0\\n0\\n0\\n0\\n0\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nystera"
        },
        "content": "        assertEquals(newlyPopulatedString, new ShopList().itemsStatus());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nystera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nystera"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nystera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 29
    }
  },
  {
    "path": "src/test/java/seedu/hustler/reminders/RemindersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.reminders;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.Reminders;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nystera"
        },
        "content": "import seedu.hustler.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " * Test class for deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public class RemindersTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Check if oneDay reminder exist."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        ArrayList\u003cTask\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        LocalDateTime localDateTime \u003d LocalDateTime.of(2019,8,1,1,1,1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        temp.add(new Deadline(\"assignemntsss\",localDateTime));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        TaskList list \u003d new TaskList(temp);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Reminders.overdue(list);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        assertTrue(Reminders.exist());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 5,
      "jingkang97": 28
    }
  },
  {
    "path": "src/test/java/seedu/hustler/task/DeadlineTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "import static seedu.hustler.parser.DateTimeParser.getDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Test class for deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Dummy test for deadline."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        LocalDateTime localDateTimeOne \u003d getDateTime(\"5/5/2019 1800\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Deadline task1 \u003d new Deadline(\"meet Kartike.\", localDateTimeOne);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        assertEquals(task1.description, \"meet Kartike.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        /* assertEquals(task1.dateBy, \"5th of May 2019, 6:00PM\"); */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        assertEquals(task1.by, localDateTimeOne);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        assertEquals(task1.getDateTime(), LocalDateTime.of(2019,5,5,18,0));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        /* Deadline task2 \u003d new Deadline(\"meet Kartike.\", \"next week\"); */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        /* assertEquals(task2.description, \"meet Kartike.\"); */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        /* assertEquals(task2.dateBy, \"next week\"); */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        /* assertEquals(task2.by, \"next week\"); */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        LocalDateTime localDateTimeTwo \u003d getDateTime(\"5/5/2019 1200\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Deadline task3 \u003d new Deadline(\"meet Kartike.\", localDateTimeTwo);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        task3.setDateTime(LocalDateTime.of(2019,5,5,18,0));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        assertEquals(task3.getDateTime(), task1.getDateTime());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Deadline task4 \u003d new Deadline(\"meet Kartike.\", localDateTimeTwo);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        task4.setDateTime(localDateTimeOne);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        assertEquals(task4.getDateTime(), task1.getDateTime());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 26,
      "nystera": 2,
      "jingkang97": 7,
      "ngjiewu": 9
    }
  },
  {
    "path": "src/test/java/seedu/hustler/task/DetectAnomaliesTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nystera"
        },
        "content": "import static seedu.hustler.parser.DateTimeParser.getDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "public class DetectAnomaliesTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     * Check if anomalies can be detected."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        LocalDateTime localDateTime \u003d getDateTime(\"9/9/2019 1900\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        list.add(new Deadline(\"assignemntsss\",localDateTime));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        assertTrue(DetectAnomalies.test(new Deadline(\"another assignment\",localDateTime),list));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 2,
      "jingkang97": 24
    }
  },
  {
    "path": "src/test/java/seedu/hustler/task/EventTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nystera"
        },
        "content": "import static seedu.hustler.parser.DateTimeParser.getDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " * Test class for Event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yzia2000"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     * Dummy test for Event class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        LocalDateTime localDateTimeOne \u003d getDateTime(\"5/5/2019 1800\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingkang97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Event task1 \u003d new Event(\"meet Kartike.\", localDateTimeOne);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        assertEquals(task1.description, \"meet Kartike.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        /* assertEquals(task1.dateAt, \"5th of May 2019, 6:00PM\"); */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        assertEquals(task1.at, localDateTimeOne);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        assertEquals(task1.getDateTime(), LocalDateTime.of(2019,5,5,18,0));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        /* Event task2 \u003d new Event(\"meet Kartike.\", \"next week\"); */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        /* assertEquals(task2.description, \"meet Kartike.\"); */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        /* assertEquals(task2.dateAt, \"next week\"); */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        /* assertEquals(task2.at, \"next week\"); */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yzia2000"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "        LocalDateTime localDateTimeTwo \u003d getDateTime(\"5/5/2019 1200\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Event task3 \u003d new Event(\"meet Kartike.\", localDateTimeTwo);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        task3.setDateTime(LocalDateTime.of(2019,5,5,18,0));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        assertEquals(task3.getDateTime(), task1.getDateTime());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        Event task4 \u003d new Event(\"meet Kartike.\", localDateTimeTwo);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingkang97"
        },
        "content": "        task4.setDateTime(localDateTimeOne);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngjiewu"
        },
        "content": "        assertEquals(task4.getDateTime(), task1.getDateTime());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yzia2000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yzia2000": 26,
      "nystera": 2,
      "jingkang97": 8,
      "ngjiewu": 8
    }
  },
  {
    "path": "src/test/java/seedu/hustler/task/TaskListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Test class for TaskListTest."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Dummy test for TaskList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 1,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/hustler/task/TaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Test for Task class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Dummy test for Task class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 1,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/hustler/task/ToDoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Test class for ToDo."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *  Dummy test for ToDo."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        ToDo task \u003d new ToDo(\"Finish work\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(task.description, \"Finish work\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nystera": 1,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/hustler/ui/UiTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nystera"
        },
        "content": "package seedu.hustler.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Test for Ui class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Dummy test for Ui class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nystera": 1,
      "-": 18
    }
  }
]
