[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.8.4\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    archiveBaseName \u003d \"ArchDuke\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    archiveVersion \u003d \"0.1.4\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "clean {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    delete \u0027savedProjects.json\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    delete \u0027logs\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "jacoco {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    toolVersion \u003d \"0.8.4\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        xml.enabled true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        csv.enabled true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    jacocoReportPath \u0027build/reports/jacoco/test/jacocoTestReport.xml\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": "version \u00270.1.3\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    mainClassName \u003d \"launcher.Duke\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sinteary"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sinteary"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    compile group: \u0027org.apache.logging.log4j\u0027, name: \u0027log4j-core\u0027, version: \u00272.12.1\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "//    compile group:\"com.fasterxml.jackson.core\", name:\"jackson-core\", version:\u00272.4.2\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "//    compile group:\"com.fasterxml.jackson.core\", name:\"jackson-databind\", version:\u00272.4.2\u0027"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "//    compile group:\"com.fasterxml.jackson.core\", name:\"jackson-annotations\", version:\u00272.4.2\u0027"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 22,
      "Lucria": 26,
      "-": 36,
      "Dkenobi": 13
    }
  },
  {
    "path": "src/main/java/controllers/AssignmentController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "package controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static util.constant.ConstantHelper.COMMAND_ASSIGN_TASK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.IMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import util.ParserHelper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sinteary"
        },
        "content": "//@@author sinteary"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sinteary"
        },
        "content": "public class AssignmentController {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private ArrayList\u003cString\u003e errorMessages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private ArrayList\u003cArrayList\u003cString\u003e\u003e successMessages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private ParserHelper parserHelper;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private Project project;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * A Controller class which parses the input from the user to get a list of valid"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * task and member indexes, and manages the assignment to and removal of tasks from members."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param project The which the user is managing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public AssignmentController(Project project) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.errorMessages \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.successMessages \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.parserHelper \u003d new ParserHelper();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project \u003d project;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Does the actual assignment of task by calling on the project and establishing the"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * necessary links between tasks and members. Collates messages to inform user of"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * successful assignments/unassignments."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param input The input from the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void assignAndUnassign(String input) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assert input !\u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        if (input.length() \u003c COMMAND_ASSIGN_TASK.length()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            errorMessages.add(\"Insufficient parameters!\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                + \"Indicate the tasks and members whom you wish to assign or remove!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            errorMessages.add(\"Format is \\\"assign task -i TASK_INDEX [-to MEMBER_INDEX] [-rm MEMBER_INDEX]\\\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            errorMessages.add(\"You must either assign a task to someone, or remove, or both!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        input \u003d input.substring(COMMAND_ASSIGN_TASK.length()); //remove the \"assign task \" portion"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cArrayList\u003cInteger\u003e\u003e assignmentParams \u003d parserHelper.parseAssignmentParams(input, project);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        errorMessages.addAll(parserHelper.getErrorMessages());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cInteger\u003e validTaskIndexes \u003d assignmentParams.get(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cInteger\u003e validAssignees \u003d assignmentParams.get(1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cInteger\u003e validUnassignees \u003d assignmentParams.get(2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        if (validTaskIndexes.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            errorMessages.add(\"No valid task numbers detected. Cannot assign/unassign any tasks.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            errorMessages.add(\"Please check that the task index number(s) are valid, and input them in \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                + \"this format: -i TASK_INDEX1 [TASK_INDEX2]\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        if (validAssignees.size() \u003d\u003d 0 \u0026\u0026 validUnassignees.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            errorMessages.add(\"No valid member indexes detected. No tasks can be assigned.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            errorMessages.add(\"Please check that you are using valid member indexes.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            errorMessages.add(\"Also ensure that the correct flags are used: \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                + \"\u0027-to\u0027 for assignees, \u0027-rm\u0027 for unassignees.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (Integer taskIndex : validTaskIndexes) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            Task task \u003d project.getTask(taskIndex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            ArrayList\u003cString\u003e successMessagesForEachTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            successMessagesForEachTask.add(\"For task \" + taskIndex + \" (\" + task.getTaskName() + \"):\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            //assigning tasks"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            if (!validAssignees.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                ArrayList\u003cString\u003e assignMessages \u003d assign(validAssignees, task);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                successMessagesForEachTask.addAll(assignMessages);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            //unassigning tasks"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            if (!validUnassignees.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                ArrayList\u003cString\u003e unassignMessages \u003d unassign(validUnassignees, task);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                successMessagesForEachTask.addAll(unassignMessages);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            successMessages.add(successMessagesForEachTask);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Assign valid members to a particular task and updates the associated success or error messages"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * relating to the assignment."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param validAssignees ArrayList containing valid member index numbers, for assignees."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param task Task to be assigned to members."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return ArrayList of messages from task assignments."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private ArrayList\u003cString\u003e assign(ArrayList\u003cInteger\u003e validAssignees, Task task) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cString\u003e assignMessages \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (Integer assigneeIndex : validAssignees) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            IMember member \u003d project.getMember(assigneeIndex);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            if (project.containsAssignment(task, (Member)member)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                assignMessages.add(\"Task has already been assigned to member \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    + assigneeIndex + \" (\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    + member.getName() + \").\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                project.createAssignment(task, (Member)member);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                assignMessages.add(\"Assigned to member \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    + assigneeIndex + \" (\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    + member.getName() + \").\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return assignMessages;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Removes valid members from a particular task, and updates the associated success or error messages"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * relating to the removal of assignment."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param validUnassignees ArrayList containing valid member index numbers, for unassignees."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param task Task to be unassigned."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return ArrayList of messages from task assignments."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private ArrayList\u003cString\u003e unassign(ArrayList\u003cInteger\u003e validUnassignees, Task task) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cString\u003e unassignMessages \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (Integer unassigneeIndex : validUnassignees) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            IMember member \u003d project.getMemberList().getMember(unassigneeIndex);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            if (!project.containsAssignment(task, (Member)member)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                unassignMessages.add(\"Task cannot be unassigned from member \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    + unassigneeIndex + \" (\" + member.getName() + \") as it was \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    + \"not assigned in the first place!\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                project.removeAssignment((Member)member, task);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                unassignMessages.add(\"Unassigned task from member \" + unassigneeIndex"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    + \" (\" + member.getName() + \").\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return unassignMessages;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns messages about invalid inputs to be shown to the user."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return an ArrayList of error messages that arise from invalid inputs."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ArrayList\u003cString\u003e getErrorMessages() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return errorMessages;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns messages about successful assignments to be shown to the user."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return an ArrayList of success messages indicating successful assignment."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ArrayList\u003cArrayList\u003cString\u003e\u003e getSuccessMessages() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return successMessages;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 148,
      "iamabhishek98": 2,
      "Lucria": 1
    }
  },
  {
    "path": "src/main/java/controllers/ConsoleInputController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import repositories.ProjectRepository;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.uiformatter.CommandHelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.uiformatter.ViewHelper;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.log.ArchDukeLogger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import static util.constant.ConstantHelper.DEFAULT_HORI_BORDER_LENGTH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class ConsoleInputController implements IController {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private ProjectRepository projectRepository;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private String managingProjectIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private ViewHelper viewHelper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private CommandHelper commandHelper;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    //@@author Lucria"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param projectRepository : takes in a projectRepository."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public ConsoleInputController(ProjectRepository projectRepository) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.projectRepository \u003d projectRepository;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.managingProjectIndex \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.viewHelper \u003d new ViewHelper();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.commandHelper \u003d new CommandHelper();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Method that is called upon receiving commands from CLI."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param input : Input typed by user into CLI"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String[] onCommandReceived(String input) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            ArchDukeLogger.logInfo(ConsoleInputController.class.getName(), \"User input: \u0027\" + input + \"\u0027\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            Scanner inputReader \u003d new Scanner(input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            String command;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            if (inputReader.hasNext()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                command \u003d inputReader.next();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                return new String[] {\"No input detected! Type \\\"help\\\" for a list of commands!\"};"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                return end();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            case \"create\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                return commandCreate(input);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                return commandList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            case \"manage\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                return commandManage(inputReader);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                return commandDelete(inputReader);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            case \"help\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                return commandHelp();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                return new String[] {\"Invalid inputs. Please refer to User Guide or type help!\"};"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } catch (NullPointerException err) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return new String[] {\"Please delete any corrupted .json saved data and try again!\"};"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    //@@author Lucria"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Creates a new project with a given name and a number of numbers."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param input To read the input from the user."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String[] commandCreate(String input) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        ArchDukeLogger.logDebug(ConsoleInputController.class.getName(), \"[commandCreate] User input: \u0027\" + input + \"\u0027\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        boolean isProjectCreated \u003d projectRepository.addToRepo(input);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (!isProjectCreated) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return new String[] {\"Creation of Project failed. Please check parameters given!\"};"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return new String[] {\"Project created!\"};"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Method called when users wishes to view all Projects"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * that are currently created or stored."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String[] commandList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        ArchDukeLogger.logDebug(ConsoleInputController.class.getName(), \"[commandList]\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e allProjectsDetails \u003d projectRepository.getAllProjectsDetailsForTable();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (allProjectsDetails.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return new String[] {\"You currently have no projects!\"};"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return viewHelper.consolePrintMultipleTables(allProjectsDetails, DEFAULT_HORI_BORDER_LENGTH,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    1, \"Here are all the Projects you are managing:\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Manage the project."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param inputReader To read the input from the user."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String[] commandManage(Scanner inputReader) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        ArchDukeLogger.logDebug(ConsoleInputController.class.getName(), \"[commandManage] User input: \" + inputReader);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (inputReader.hasNext()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            this.managingProjectIndex \u003d inputReader.next();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                ArchDukeLogger.logInfo(ConsoleInputController.class.getName(), \"Managing project: \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                        + projectRepository.getItem(Integer.parseInt(managingProjectIndex)).getName());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                return new String[] {\"Now managing \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                        + projectRepository.getItem(Integer.parseInt(managingProjectIndex)).getName()};"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            } catch (IndexOutOfBoundsException err) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                return new String[] {\"Please enter the correct index of an existing Project!\"};"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            } catch (NumberFormatException err) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                return new String[]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                {\"The project \\\"\" + managingProjectIndex + \"\\\" does not exist!\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                 \"Please ensure the project index number exists and is an integer.\"};"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return new String[] {\"Please enter a project number!\"};"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    //@@author Lucria"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Deletes a project."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param inputReader To read the input from the user."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String[] commandDelete(Scanner inputReader) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        ArchDukeLogger.logDebug(ConsoleInputController.class.getName(), \"[commandDelete] User input: \" + inputReader);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (inputReader.hasNext()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            String projectInput \u003d inputReader.next();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                int projectIndex \u003d Integer.parseInt(projectInput);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                boolean isProjectDeleted \u003d this.projectRepository.deleteItem(projectIndex);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                if (isProjectDeleted) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    return new String[]{\"Project \" + projectIndex + \" has been deleted\"};"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    return new String[]{\"Index out of bounds! Please check project index!\"};"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            } catch (NumberFormatException err) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                return new String[]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                {\"Invalid project index: \" + projectInput,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                 \"Please ensure that the project number is an integer, and that it exists in the repo!\"};"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return new String[] {\"Please enter a project number to delete\"};"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    //@@author seanlimhx"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Displays the set of the commands which can be used."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private String[] commandHelp() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return viewHelper.consolePrintTable(commandHelper.getCommandsForConsole(), DEFAULT_HORI_BORDER_LENGTH);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    //@@author Lucria"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Method to be called when user says bye to exit the program."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String[] end() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        ArchDukeLogger.logInfo(ConsoleInputController.class.getName(), \"ArchDuke have stopped.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return new String[] { \"Bye. Hope to see you again soon!\" };"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String getManagingProjectIndex() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return managingProjectIndex;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlimhx": 10,
      "Lucria": 150,
      "-": 6,
      "Dkenobi": 6
    }
  },
  {
    "path": "src/main/java/controllers/IController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public interface IController {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    String[] onCommandReceived(String input);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 4,
      "Dkenobi": 1
    }
  },
  {
    "path": "src/main/java/controllers/ProjectInputController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "package controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static util.constant.ConstantHelper.DEFAULT_HORI_BORDER_LENGTH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.IMember;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.NullMember;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.reminder.IReminder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.reminder.Reminder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.ITask;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import repositories.ProjectRepository;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import util.ParserHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.date.DateTimeHelper;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.factories.MemberFactory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.factories.ReminderFactory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.factories.TaskFactory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.json.JsonConverter;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.log.ArchDukeLogger;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import util.uiformatter.AssignmentViewHelper;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import util.uiformatter.CommandHelper;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import util.uiformatter.ViewHelper;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class ProjectInputController implements IController {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private ProjectRepository projectRepository;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private MemberFactory memberFactory;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private TaskFactory taskFactory;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private boolean isManagingAProject;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private ViewHelper viewHelper;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private CommandHelper commandHelper;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private JsonConverter jsonConverter \u003d new JsonConverter();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private Project projectToManage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Constructor for ProjectInputController takes in a View model and a ProjectRepository."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * ProjectInputController is responsible for handling user input when user chooses to manage a project."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param projectRepository The object holding all projects."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public ProjectInputController(ProjectRepository projectRepository) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.projectRepository \u003d projectRepository;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.memberFactory \u003d new MemberFactory();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.taskFactory \u003d new TaskFactory();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.isManagingAProject \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.viewHelper \u003d new ViewHelper();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.commandHelper \u003d new CommandHelper();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Allows the user to manage the project by branching into the project of their choice."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param input User input containing project index number (to add to project class)."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String[] onCommandReceived(String input) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArchDukeLogger.logInfo(ProjectInputController.class.getName(), \"[onCommandReceived] User input: \u0027\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + input + \"\u0027\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        int projectNumber;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            projectNumber \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } catch (NumberFormatException err) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            isManagingAProject \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String[] {\"Input is not a number! Please input a proper project index!\"};"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.projectToManage \u003d projectRepository.getItem(projectNumber);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        isManagingAProject \u003d true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return new String[] {\"Please enter a new command:\"};"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Manages the project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return Boolean variable giving status of whether the exit command is entered."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String[] manageProject(String projectFullCommand) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArchDukeLogger.logDebug(ProjectInputController.class.getName(), \"[manageProject]\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String[] responseToView;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArchDukeLogger.logInfo(ProjectInputController.class.getName(), \"Managing:\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                + this.projectToManage.getName() + \",input:\u0027\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + projectFullCommand + \"\u0027\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        if (projectFullCommand.matches(\"exit\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            isManagingAProject \u003d false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            responseToView \u003d projectExit(this.projectToManage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else if (projectFullCommand.matches(\"add member.*\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            responseToView \u003d projectAddMember(this.projectToManage, projectFullCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else if (projectFullCommand.matches(\"edit member.*\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            responseToView \u003d projectEditMember(this.projectToManage, projectFullCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else if (projectFullCommand.matches(\"delete member.*\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            responseToView \u003d projectDeleteMember(this.projectToManage, projectFullCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else if (projectFullCommand.matches(\"view members.*\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            responseToView \u003d projectViewMembers(this.projectToManage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } else if (projectFullCommand.matches(\"role.*\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            responseToView \u003d projectRoleMembers(this.projectToManage, projectFullCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else if (projectFullCommand.matches(\"view credits.*\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            responseToView \u003d projectViewCredits(this.projectToManage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else if (projectFullCommand.matches(\"add task.*\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            responseToView \u003d projectAddTask(this.projectToManage, projectFullCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else if (projectFullCommand.matches(\"view tasks.*\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            responseToView \u003d projectViewTasks(this.projectToManage, projectFullCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        } else if (projectFullCommand.matches(\"view assignments.*\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            responseToView \u003d projectViewAssignments(this.projectToManage, projectFullCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else if (projectFullCommand.matches(\"view task requirements.*\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            responseToView \u003d projectViewTaskRequirements(this.projectToManage, projectFullCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else if (projectFullCommand.matches(\"edit task requirements.*\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            responseToView \u003d projectEditTaskRequirements(this.projectToManage, projectFullCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else if (projectFullCommand.matches(\"edit task.*\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            responseToView \u003d projectEditTask(this.projectToManage, projectFullCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else if (projectFullCommand.matches(\"delete task.*\")) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            responseToView \u003d projectDeleteTask(this.projectToManage, projectFullCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else if (projectFullCommand.matches(\"assign task.*\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            responseToView \u003d projectAssignTask(this.projectToManage, projectFullCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else if (projectFullCommand.matches(\"add reminder.*\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            responseToView \u003d projectAddReminder(this.projectToManage,projectFullCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else if (projectFullCommand.matches(\"view reminders\"))  {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            responseToView \u003d projectViewReminder(this.projectToManage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }  else if (projectFullCommand.matches(\"view reminders category\"))  {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            responseToView \u003d projectViewReminderCategory(this.projectToManage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else if (projectFullCommand.matches(\"edit reminder.*\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            responseToView \u003d projectEditReminder(this.projectToManage,projectFullCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else if (projectFullCommand.matches(\"delete reminder.*\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            responseToView \u003d projectDeleteReminder(this.projectToManage,projectFullCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else if (projectFullCommand.matches(\".*mark reminder.*\")) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            responseToView \u003d projectSetReminderStatus(this.projectToManage,projectFullCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } else if (projectFullCommand.matches(\"view\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            responseToView \u003d projectViewSelf(this.projectToManage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } else if (projectFullCommand.matches(\"agenda\")) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            responseToView \u003d projectViewCalender(this.projectToManage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        } else if (projectFullCommand.matches(\"help\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            responseToView \u003d projectHelp();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else if (projectFullCommand.matches(\"bye\")) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return end();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String[] {\"Invalid command. Try again!\"};"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        jsonConverter.saveProject(this.projectToManage);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return responseToView;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String[] projectViewCalender(Project projectToManage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        HashMap\u003cInteger, Integer\u003e currentMonthTasks \u003d projectRepository.getAllTasksInCurrentMonth(projectToManage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return viewHelper.consolePrintCalender(currentMonthTasks);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String[] projectViewSelf(Project projectToManage) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return viewHelper.consolePrintTable(projectRepository.getProjectDetailsForTable(projectToManage),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                DEFAULT_HORI_BORDER_LENGTH);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private String[] projectHelp() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return viewHelper.consolePrintTable(commandHelper.getCommandsForProject(), DEFAULT_HORI_BORDER_LENGTH);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Adds roles to Members in a Project."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param projectToManage : The project specified by the user."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param projectCommand : User input."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String[] projectRoleMembers(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArchDukeLogger.logDebug(ProjectInputController.class.getName(), \"[projectRoleMembers] User input: \u0027\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + projectCommand + \"\u0027\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String parsedCommands \u003d projectCommand.substring(5);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String[] commandOptions \u003d parsedCommands.split(\" -n \");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (commandOptions.length !\u003d 2) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String[] {\"Wrong command format! Please enter role INDEX -n ROLE_NAME\"};"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        int memberIndex \u003d Integer.parseInt(commandOptions[0]);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        IMember selectedMember \u003d projectToManage.getMemberList().getMember(memberIndex);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (selectedMember.getClass() !\u003d NullMember.class) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            selectedMember.setRole(commandOptions[1]);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String[] {\"Successfully changed the role of \" + selectedMember.getName() + \" to \""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + selectedMember.getRole() + \".\"};"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return new String[] {selectedMember.getDetails()};"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    //@@author iamabhishek98"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Adds a member to the current project."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectCommand The user input."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String[] projectAddMember(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArchDukeLogger.logDebug(ProjectInputController.class.getName(), \"[projectToManage] User input: \u0027\""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                + projectCommand + \"\u0027\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (projectCommand.length() \u003c 11) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return new String[] {\"Add member command minimum usage must be \\\"add member -n NAME\\\"!\","
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                                 \"Please refer to user guide for additional details.\"};"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String memberDetails \u003d projectCommand.substring(11);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        int numberOfCurrentMembers \u003d projectToManage.getNumOfMembers();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        memberDetails \u003d memberDetails + \" -x \" + numberOfCurrentMembers;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        IMember newMember \u003d memberFactory.create(memberDetails);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (newMember.getName() !\u003d null) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (projectToManage.memberExists(newMember)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                return new String[] {\"The member you have tried to add already exists!\","
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    \"Member name: \" + newMember.getName(),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    \"Please ensure that each member has a different name.\"};"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                projectToManage.addMember((Member) newMember);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                return new String[]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    {\"Added new member to: \" + projectToManage.getName(),"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    \"Member details \" + newMember.getDetails()};"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return new String[] {newMember.getDetails()};"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    //@@author iamabhishek98"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Updates the details of a given member in the current project."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectCommand The user input."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String[] projectEditMember(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArchDukeLogger.logDebug(ProjectInputController.class.getName(), \"[projectEditMember] User input: \u0027\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                + projectCommand + \"\u0027\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            int memberIndexNumber \u003d Integer.parseInt(projectCommand.substring(12).split(\" \")[0]);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (projectToManage.getNumOfMembers() \u003e\u003d memberIndexNumber \u0026\u0026 memberIndexNumber \u003e 0) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                String updatedMemberDetails \u003d projectCommand.substring(projectCommand.indexOf(\"-\"));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                String output \u003d projectToManage.editMember(memberIndexNumber,updatedMemberDetails);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                return new String[] { output };"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                return new String[] {\"The member index entered is invalid.\"};"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            ArchDukeLogger.logError(ProjectInputController.class.getName(), \"[projectEditMember] \""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"Please enter the updated member details format correctly.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return new String[] {\"Please enter the updated member details format correctly.\"};"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    //@@author iamabhishek98"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Deletes a member from the current project."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectCommand The user input."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String[] projectDeleteMember(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArchDukeLogger.logDebug(ProjectInputController.class.getName(), \"[projectDeleteMember] User input: \u0027\""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                + projectCommand + \"\u0027\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (projectCommand.length() \u003c\u003d 14) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return new String[] {\"Can\u0027t delete members: No member index numbers detected!\","
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                \"Please enter them as space-separated integers.\"};"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ParserHelper parserHelper \u003d new ParserHelper();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cInteger\u003e validMemberIndexes \u003d parserHelper.parseMembersIndexes(projectCommand.substring(14),"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectToManage.getNumOfMembers());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e outputMessages \u003d new ArrayList\u003c\u003e(parserHelper.getErrorMessages());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (validMemberIndexes.isEmpty()) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            outputMessages.add(\"No valid member indexes. Cannot delete members.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return outputMessages.toArray(new String[0]);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Collections.sort(validMemberIndexes);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Collections.reverse(validMemberIndexes);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (Integer index : validMemberIndexes) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Member memberToRemove \u003d projectToManage.getMember(index);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            outputMessages.add(\"Removed member \" + index + \": \" + memberToRemove.getDetails());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectToManage.removeMember(memberToRemove);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (!validMemberIndexes.isEmpty()) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            outputMessages.add(\"Take note that the member indexes might have changed after deleting!\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return outputMessages.toArray(new String[0]);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    //@@author iamabhishek98"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Displays all the members in the current project."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Can be updated later on to include more information (tasks etc)."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String[] projectViewMembers(Project projectToManage) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArchDukeLogger.logDebug(ProjectInputController.class.getName(), \"[projectViewMembers]\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e allMemberDetailsForTable \u003d projectToManage.getMemberList().getAllMemberDetailsForTable();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String header \u003d \"Members of \" + projectToManage.getName() + \":\";"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        allMemberDetailsForTable.add(0, header);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArchDukeLogger.logDebug(ProjectInputController.class.getName(), allMemberDetailsForTable.toString());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return viewHelper.consolePrintTable(allMemberDetailsForTable, DEFAULT_HORI_BORDER_LENGTH);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    //@@author iamabhishek98"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Displays the members’ credits, their index number, name, and name of tasks completed."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String[] projectViewCredits(Project projectToManage) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArchDukeLogger.logDebug(ProjectInputController.class.getName(), \"[projectViewCredits]\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e allCredits \u003d projectToManage.getCredits();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArchDukeLogger.logDebug(ProjectInputController.class.getName(), \"allCredits: \" + allCredits.toString());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (allCredits.isEmpty()) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            allCredits.add(0, \"There are no members in this project.\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            allCredits.add(0, \"Here are the credits earned by the members of this project: \");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return allCredits.toArray(new String[0]);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Adds a task to the current project."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectCommand The user input."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String[] projectAddTask(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArchDukeLogger.logDebug(ProjectInputController.class.getName(), \"[projectAddTask] User input: \u0027\""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                + projectCommand + \"\u0027\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            ITask newTask \u003d taskFactory.create(projectCommand.substring(9));"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (newTask.getDetails() !\u003d null) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                if (projectToManage.taskExists(newTask)) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    return new String[]{\"The task you are trying to add already exists!\","
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                        \"Task name: \" + newTask.getTaskName(),"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                        \"Please ensure that each task has a different task name.\"};"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                projectToManage.addTask((Task) newTask);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                return new String[] {\"Added new task to the list.\"};"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return new String[] {\"Failed to create new task. Please ensure all \""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                                + \"necessary parameters are given correctly.\","
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                                 \"Task priority must be an integer between 1 to 5\","
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                                 \"Task credit must be an integer between 0 to 100\","
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                                 \"Date must be a valid date!\"};"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            ArchDukeLogger.logError(ProjectInputController.class.getName(), \"[projectAddTask] \""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"Please enter your task format correctly.\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return new String[] {\"Please ensure that your task format are correct and dates are valid.\"};"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Updates the task details of a given task in the project."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectCommand The user input."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String[] projectEditTask(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArchDukeLogger.logDebug(ProjectInputController.class.getName(), \"[projectEditTask] User input: \u0027\""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                + projectCommand + \"\u0027\");"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (projectCommand.length() \u003c\u003d 10) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                return new String[]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                {\"No parameters detected. Please enter details in the following format:\","
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                 \"TASK_INDEX [-t TASK_NAME] [-p TASK_PRIORITY] [-d TASK_DUEDATE] [-c TASK_CREDIT] [-s STATE]\"};"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            } "
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            int taskIndexNumber \u003d Integer.parseInt(projectCommand.substring(10).trim().split(\" \")[0]);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (projectToManage.getNumOfTasks() \u003e\u003d taskIndexNumber \u0026\u0026 taskIndexNumber \u003e 0) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                if (!projectCommand.contains(\"-\")) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    return new String[] {\"No flags are found! Available flags for use are \u0027-t\u0027, \u0027-p, \u0027-d\u0027, \u0027-c\u0027 and \""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                            + \"\u0027-s\u0027 to indicate the new task details! Refer to the user guide for more help!\"};"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                String updatedTaskDetails \u003d projectCommand.substring(projectCommand.indexOf(\"-\"));"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                return projectToManage.editTask(taskIndexNumber, updatedTaskDetails);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return new String[] {\"The task index entered is invalid.\"};"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            ArchDukeLogger.logError(ProjectInputController.class.getName(), \"[projectEditTask] \""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"Please enter a valid number for your task index.\");"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return new String[] {\"Please enter a valid number for your task index.\"};"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    //@@author iamabhishek98"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Deletes a task from the project."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectCommand The user input."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String[] projectDeleteTask(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArchDukeLogger.logDebug(ProjectInputController.class.getName(), \"[projectDeleteTask] User input: \u0027\""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                + projectCommand + \"\u0027\");"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (projectCommand.length() \u003c\u003d 12) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return new String[] {\"No task number detected! Please enter the task index number.\"};"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ParserHelper parserHelper \u003d new ParserHelper();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cInteger\u003e validTaskIndexes \u003d parserHelper.parseTasksIndexes(projectCommand.substring(12),"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectToManage.getNumOfTasks());"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e outputMessages \u003d new ArrayList\u003c\u003e(parserHelper.getErrorMessages());"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        // Sort to ensure task indexes work in the correct way"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Collections.sort(validTaskIndexes);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Collections.reverse(validTaskIndexes);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (Integer index: validTaskIndexes) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            outputMessages.add(\"Removed task \" + index + \": \" + projectToManage.getTaskIndexName(index));"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectToManage.removeTask(index);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (!validTaskIndexes.isEmpty()) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            outputMessages.add(\"Take note that index numbers of other tasks may have changed after deleting!\");"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return outputMessages.toArray(new String[0]);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Updates the task requirements of a given task in the project."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectCommand The user input."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String[] projectEditTaskRequirements(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArchDukeLogger.logDebug(ProjectInputController.class.getName(),"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                \"[projectEditTaskRequirements] User input: \u0027\" + projectCommand + \"\u0027\");"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (projectCommand.length() \u003c\u003d 23) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return new String[] {\"Task index is missing! Please input index of task to be edited!\"};"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            int taskIndexNumber \u003d Integer.parseInt(projectCommand.substring(23).trim().split(\" \")[0]);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (projectToManage.getNumOfTasks() \u003e\u003d taskIndexNumber \u0026\u0026 taskIndexNumber \u003e 0) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                if (!projectCommand.contains(\"-\")) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    return new String[] {\"No flags are found! Please use flags such as \u0027-r\u0027 or \u0027-rm\u0027 to indicate \""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                            + \"the new requirements to be added or removed! Refer to the user guide for more help!\"};"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    String updatedTaskRequirements \u003d projectCommand.substring(projectCommand.indexOf(\"-\"));"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    return projectToManage.editTaskRequirements(taskIndexNumber,updatedTaskRequirements);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return new String[] {\"The task index entered is invalid.\"};"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            ArchDukeLogger.logError(ProjectInputController.class.getName(), \"[projectEditTaskRequirements] \""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"Task index is missing! Please input a proper task index!\");"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return new String[] {\"Task index is invalid! Please input a proper task index!\"};"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Displays the tasks in the current project."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectCommand The user input."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String[] projectViewTaskRequirements(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArchDukeLogger.logDebug(ProjectInputController.class.getName(),"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                \"[projectViewTaskRequirements] User input: \u0027\" + projectCommand + \"\u0027\");"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (projectCommand.length() \u003c 23) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return new String[] {\"Please indicate the index of the task to be viewed.\"};"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                int taskIndex \u003d Integer.parseInt(projectCommand.substring(23));"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                if (projectToManage.getNumOfTasks() \u003e\u003d taskIndex \u0026\u0026 taskIndex \u003e 0) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    if (projectToManage.getTask(taskIndex).getNumOfTaskRequirements() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                        return new String[] {\"This task has no specific requirements.\"};"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                        ArrayList\u003cString\u003e taskRequirements \u003d projectToManage.getTask(taskIndex).getTaskRequirements();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                        return viewHelper.consolePrintTable(taskRequirements, DEFAULT_HORI_BORDER_LENGTH);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                return new String[] {\"The task index entered is invalid.\"};"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                ArchDukeLogger.logError(ProjectInputController.class.getName(),"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                        \"[projectAssignTask] Input is either not a number or too large! \""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                                + \"Please input a proper task index!\");"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                return new String[] {\"Input is either not a number or too large! Please input a proper task index!\"};"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    //@@author iamabhishek98"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Displays all the tasks in the given project."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectCommand The user input."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String[] projectViewTasks(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArchDukeLogger.logDebug(ProjectInputController.class.getName(), \"[projectViewTasks] User input: \u0027\""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            + projectCommand + \"\u0027\");"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if ((\"view tasks\").equals(projectCommand)) {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                HashMap\u003cString, ArrayList\u003cString\u003e\u003e tasksAndAssignedMembers"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    \u003d projectToManage.getTasksAndAssignedMembers();"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                ArrayList\u003cArrayList\u003cString\u003e\u003e allTaskDetailsForTable"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    \u003d projectToManage.getTaskList().getAllTaskDetailsForTable(tasksAndAssignedMembers,"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    \"/PRIORITY\", projectToManage);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                ArchDukeLogger.logDebug(ProjectInputController.class.getName(), allTaskDetailsForTable.toString());"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                if (allTaskDetailsForTable.size() \u003d\u003d 1 \u0026\u0026 allTaskDetailsForTable.get(0).size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    ArrayList\u003cString\u003e taskTable \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    taskTable.add(\"Tasks of \" + projectToManage.getName() + \":\");"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    taskTable.add(allTaskDetailsForTable.get(0).get(0));"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    return viewHelper.consolePrintTable(taskTable, DEFAULT_HORI_BORDER_LENGTH);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                return viewHelper.consolePrintMultipleTables(allTaskDetailsForTable, DEFAULT_HORI_BORDER_LENGTH, 2,"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                        \"Tasks of \" + projectToManage.getName() + \":\");"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            } else if (projectCommand.length() \u003e\u003d 11) {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                String sortCriteria \u003d projectCommand.substring(11);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                HashMap\u003cString, ArrayList\u003cString\u003e\u003e tasksAndAssignedMembers"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    \u003d projectToManage.getTasksAndAssignedMembers();"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                ArrayList\u003cArrayList\u003cString\u003e\u003e allTaskDetailsForTable \u003d"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    projectToManage.getTaskList().getAllTaskDetailsForTable(tasksAndAssignedMembers, sortCriteria,"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                        projectToManage);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                ArchDukeLogger.logDebug(ProjectInputController.class.getName(), allTaskDetailsForTable.toString());"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                if (allTaskDetailsForTable.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    ArchDukeLogger.logError(ProjectInputController.class.getName(), \"[projectAssignTask] \""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                            + \"Currently there are no tasks with the specified attribute.\");"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    return (new String[] {\"Currently there are no tasks with the specified attribute.\"});"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                if (allTaskDetailsForTable.size() \u003d\u003d 1 \u0026\u0026 allTaskDetailsForTable.get(0).size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    ArrayList\u003cString\u003e taskTable \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    taskTable.add(\"Tasks of \" + projectToManage.getName() + \":\");"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    taskTable.add(allTaskDetailsForTable.get(0).get(0));"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    return viewHelper.consolePrintTable(taskTable, DEFAULT_HORI_BORDER_LENGTH);"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                return viewHelper.consolePrintMultipleTables(allTaskDetailsForTable, DEFAULT_HORI_BORDER_LENGTH, 2,"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                        \"Tasks of \" + projectToManage.getName() + \":\");"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            ArchDukeLogger.logError(ProjectInputController.class.getName(), \"[projectAssignTask] \""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                + \"Currently there are no tasks with the specified attribute.\");"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return (new String[] {\"Currently there are no tasks with the specified attribute.\"});"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    //@@author sinteary"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Manages the assignment to and removal of tasks from members."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param projectCommand The user input."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public String[] projectAssignTask(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArchDukeLogger.logDebug(ProjectInputController.class.getName(), \"[projectAssignTask] User input: \u0027\""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                + projectCommand + \"\u0027\");"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        AssignmentController assignmentController \u003d new AssignmentController(projectToManage);"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assignmentController.assignAndUnassign(projectCommand);"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cString\u003e errorMessages \u003d assignmentController.getErrorMessages();"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e successMessages \u003d assignmentController.getSuccessMessages();"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        if (!errorMessages.isEmpty()) {"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            errorMessages.add(0, \"Errors...\");"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            successMessages.add(errorMessages);"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        if (successMessages.isEmpty()) {"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return new String[]{\"No valid assignment input detected! Please refer to the user guide for help.\"};"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return viewHelper.consolePrintMultipleTables(successMessages,"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                DEFAULT_HORI_BORDER_LENGTH, 1, \"Results from task assignments:\");"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns a list of assignments according to specifications of user."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param projectToManage The project to manage."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param projectCommand The full command by the user."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public String[] projectViewAssignments(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArchDukeLogger.logDebug(ProjectInputController.class.getName(),"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                \"[projectViewAssignments] User input: \u0027\" + projectCommand + \"\u0027\");"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        AssignmentViewHelper assignmentViewHelper \u003d new AssignmentViewHelper();"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return assignmentViewHelper.viewAssignments(projectCommand, projectToManage);"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Exits the current project."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return Boolean variable specifying the exit status."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String[] projectExit(Project projectToManage) {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArchDukeLogger.logDebug(ProjectInputController.class.getName(), \"[projectExit]\");"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return new String[] {\"Exited project: \" + projectToManage.getName()};"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public boolean getIsManagingAProject() {"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return isManagingAProject;"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String[] end() {"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArchDukeLogger.logDebug(ProjectInputController.class.getName(), \"[end]\");"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return new String[] {\"Bye. Hope to see you again soon!\"};"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    //@@Dkenobi"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Add reminder to the default list."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param projectToManage The project to manage."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param projectCommand The user input."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String [] projectAddReminder(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArchDukeLogger.logDebug(ProjectInputController.class.getName(),"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                \"[projectAddReminder] User input: \u0027\" + projectCommand + \"\u0027\");"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            ReminderFactory reminderFactory \u003d new ReminderFactory();"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            IReminder newReminder \u003d reminderFactory.createReminder(projectCommand.substring(13));"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            if (newReminder.getReminderName() !\u003d null) {"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                projectToManage.addReminderToList((Reminder) newReminder);"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                return new String[] {\"Added new reminder to the Reminder List in the project.\"};"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String[] {\"Failed to create new task. Please ensure all \""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"necessary parameters are given\"};"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } catch (NumberFormatException | ParseException e) {"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            ArchDukeLogger.logError(ProjectInputController.class.getName(), \"[projectAddReminder] \""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"Please enter your reminder date format correctly.\");"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String[] {\"Please enter your reminder date format correctly.\"};"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * View reminder to the default list list of tasks and the members assigned to them."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param projectToManage The project to manage."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String [] projectViewReminder(Project projectToManage) {"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArchDukeLogger.logDebug(ProjectInputController.class.getName(), \"[projectViewReminder]\");"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        DateTimeHelper dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArrayList\u003cString\u003e allTaskDetailsForTable \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        allTaskDetailsForTable.add(0, \"Reminder of \" + projectToManage.getName() + \":\");"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        if (projectToManage.getReminderListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            allTaskDetailsForTable.add(\" - There are currently no reminders! -\");"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            for (Reminder reminder: projectToManage.getReminderList()) {"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                allTaskDetailsForTable.add(index + \". \" + reminder.getStatus() + \" \" + reminder.getReminderName());"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                allTaskDetailsForTable.add(\"   - Category: \" + reminder.getCategory());"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                allTaskDetailsForTable.add(\"   - Remarks: \" + reminder.getReminderRemarks());"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                if (reminder.getReminderDate() !\u003d null) {"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    allTaskDetailsForTable.add(\"   - \" + dateTimeHelper.formatDateForDisplay(reminder.getReminderDate())"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                            + dateTimeHelper.getDifferenceDays(reminder.getReminderDate()));"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                allTaskDetailsForTable.add(\" \");"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            allTaskDetailsForTable.remove(allTaskDetailsForTable.size() - 1);"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return viewHelper.consolePrintTable(allTaskDetailsForTable, DEFAULT_HORI_BORDER_LENGTH);"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Delete reminder from the list."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param projectCommand The user input."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @return the output for the user to consume."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String[] projectDeleteReminder(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArchDukeLogger.logDebug(ProjectInputController.class.getName(), \"[projectDeleteReminder] User input: \u0027\""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + projectCommand + \"\u0027\");"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ParserHelper parserHelper \u003d new ParserHelper();"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        int index \u003d parserHelper.parseDeleteReminder(projectCommand);"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        if (index \u003d\u003d 0) {"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            ArrayList\u003cString\u003e outputMessages \u003d new ArrayList\u003c\u003e(parserHelper.getErrorMessages());"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return outputMessages.toArray(new String[0]);"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else if (index \u003e projectToManage.getReminderListSize()) {"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String[] {\"No reminder index number found in the list! \""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"Please enter the correct reminder index number.\"};"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            Reminder removedReminder \u003d projectToManage.getReminder(index);"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            projectToManage.removeReminder(index);"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String[] {removedReminder.getReminderName()"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + \" has been remove from the reminder list in the project.\"};"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Edit reminder from the list."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param projectCommand The user input."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @return the output for the user to consume."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String[] projectEditReminder(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArchDukeLogger.logDebug(ProjectInputController.class.getName(), \"[projectEditReminder] User input: \u0027\""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + projectCommand + \"\u0027\");"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ParserHelper parserHelper \u003d new ParserHelper();"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        int index \u003d parserHelper.parseEditReminder(projectCommand);"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        if (index \u003d\u003d 0) {"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            ArrayList\u003cString\u003e outputMessages \u003d new ArrayList\u003c\u003e(parserHelper.getErrorMessages());"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return outputMessages.toArray(new String[0]);"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else if (index \u003e projectToManage.getReminderListSize()) {"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String[] {\"No reminder index number found in the list! \""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"Please enter the correct reminder index number.\"};"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                ArrayList\u003cString\u003e newReminderDetails \u003d parserHelper.parseReminderDetails(projectCommand);"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                DateTimeHelper dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                if (!newReminderDetails.get(0).matches(\"--\")) {"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    projectToManage.getReminder(index).setReminderName(newReminderDetails.get(0));"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                if (!newReminderDetails.get(1).matches(\"--\")) {"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    projectToManage.getReminder(index).setReminderRemarks(newReminderDetails.get(1));"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                if (newReminderDetails.get(2) !\u003d null) {"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    projectToManage.getReminder(index)"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                        .setReminderDate(dateTimeHelper.formatDate(newReminderDetails.get(2)));"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                if (!(newReminderDetails.get(3).equals(\"DEFAULT\"))) {"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    projectToManage.getReminder(index).setCategory(newReminderDetails.get(3));"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    projectToManage.getReminder(index);"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                return new String[] {\"Your reminder have been updated.\"};"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            } catch (NumberFormatException | ParseException e) {"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                ArchDukeLogger.logError(ProjectInputController.class.getName(), \"[projectEditReminder] \""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                        + \"Please enter your reminder date format correctly.\");"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                return new String[] {\"Please enter your reminder date format correctly.\"};"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Set the status of the reminder."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param projectToManage The project to manage."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param projectCommand The user input."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String[] projectSetReminderStatus(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArchDukeLogger.logDebug(ProjectInputController.class.getName(),"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                \"[projectSetReminderStatus] User input: \u0027\" + projectCommand + \"\u0027\");"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ParserHelper parserHelper \u003d new ParserHelper();"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArrayList\u003cString\u003e checkReminderDetails \u003d parserHelper.parseCheckReminder(projectCommand);"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        if (checkReminderDetails \u003d\u003d null) {"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            ArrayList\u003cString\u003e outputMessages \u003d new ArrayList\u003c\u003e(parserHelper.getErrorMessages());"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return outputMessages.toArray(new String[0]);"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            boolean status \u003d Boolean.parseBoolean(checkReminderDetails.get(0));"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            int index \u003d Integer.parseInt(checkReminderDetails.get(1));"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            projectToManage.markReminder(status,index);"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new String[] {projectToManage.getReminder(index).getReminderName() + \" have been marked \""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + projectToManage.getReminder(index).getStatus()};"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * The method view the reminder in categories."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param projectToManage The project specified by the user."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String[] projectViewReminderCategory(Project projectToManage) {"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e reminderCategory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cReminder\u003e\u003e reminderCategoryList \u003d projectToManage.getCategoryReminderList();"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        int indexCategory \u003d 1;"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        for (Map.Entry\u003cString, ArrayList\u003cReminder\u003e\u003e list: reminderCategoryList.entrySet()) {"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            int index \u003d 1;"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            ArrayList\u003cString\u003e categoryOfReminder \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            categoryOfReminder.add(indexCategory + \". \" + list.getKey());"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            for (Reminder reminder: list.getValue()) {"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                categoryOfReminder.add(index + \". \" + reminder.getReminderName());"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            reminderCategory.add(categoryOfReminder);"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            indexCategory++;"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return viewHelper.consolePrintMultipleTables(reminderCategory, DEFAULT_HORI_BORDER_LENGTH, 2,"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                \"Reminders of \" + projectToManage.getName() + \":\");"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 65,
      "iamabhishek98": 351,
      "seanlimhx": 17,
      "Lucria": 75,
      "Dkenobi": 235
    }
  },
  {
    "path": "src/main/java/launcher/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package launcher;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import views.CLIView;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args Refers to CLI arguments"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        CLIView cliView \u003d new CLIView();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        cliView.start();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 2,
      "-": 14
    }
  },
  {
    "path": "src/main/java/launcher/UILauncher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package launcher;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import views.ui.Main;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class UILauncher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 2,
      "Dkenobi": 11
    }
  },
  {
    "path": "src/main/java/models/member/IMember.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "package models.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "public interface IMember {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    String getDetails();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    void updateDetails(String name, String phone, String email);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void setIndexNumber(int indexNumber);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    int getIndexNumber();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    String getName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    String getPhone();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    String getEmail();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    String getRole();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    String setRole(String input);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    String getMemberID();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 10,
      "iamabhishek98": 9,
      "Lucria": 4
    }
  },
  {
    "path": "src/main/java/models/member/IMemberList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "package models.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "public interface IMemberList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void addMember(Member newMember);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    String editMember(int memberIndexNumber, String updatedMemberDetails);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void removeMember(Member memberToRemove);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    ArrayList\u003cString\u003e getAllMemberDetails();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    ArrayList\u003cString\u003e getAllMemberDetailsForTable();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    IMember getMember(int i);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    int getNumOfMembers();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    boolean contains(IMember newMember);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 13,
      "iamabhishek98": 1,
      "Lucria": 8
    }
  },
  {
    "path": "src/main/java/models/member/Member.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "package models.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "public class Member implements IMember {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private int indexNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String role;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private String memberID;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Class representing a member in a project team."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param name The name of the member."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param phone The phone number of the member."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param email The email address of the member."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param indexNumber The index number assigned to the member, unique to the project."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public Member(String name, String phone, String email, int indexNumber, String role) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.indexNumber \u003d indexNumber;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.memberID \u003d UUID.randomUUID().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        } else if (!(obj instanceof Member)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            Member other \u003d (Member) obj;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return this.name.equals(other.name);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return Objects.hash(this.memberID);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.indexNumber + \". \" + this.name + \" (Phone: \" + this.phone + \" | Email: \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            + this.email + \" | Role: \" + this.role + \")\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void setIndexNumber(int indexNumber) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.indexNumber \u003d indexNumber;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public int getIndexNumber() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.indexNumber;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.phone;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.email;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String getRole() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return this.role;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String setRole(String input) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return this.role \u003d input;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void updateDetails(String name, String phone, String email) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public String getMemberID() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.memberID;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 65,
      "iamabhishek98": 21,
      "Lucria": 14
    }
  },
  {
    "path": "src/main/java/models/member/MemberList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "package models.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import util.ParserHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.validation.ValidityHelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class MemberList implements IMemberList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private ArrayList\u003cMember\u003e memberList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private ParserHelper parserHelper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private ValidityHelper validityHelper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Class representing a list with all members and their details."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public MemberList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.memberList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.parserHelper \u003d new ParserHelper();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.validityHelper \u003d new ValidityHelper();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cMember\u003e getMemberList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.memberList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Adds a new member to the member list of this project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param newMember A new member to be added to the project."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void addMember(Member newMember) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        newMember.setIndexNumber(this.memberList.size() + 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.memberList.add(newMember);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Updates the member details of an existing member using the index number of the member."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param memberIndexNumber The index number of the member whose details are to be updated."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param updatedMemberDetails The updated member details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return An error message if any."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String editMember(int memberIndexNumber, String updatedMemberDetails) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String [] memberDetails \u003d parserHelper.parseMemberDetails(updatedMemberDetails);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String name \u003d memberDetails[0];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String phone \u003d memberDetails[1];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String email \u003d memberDetails[2];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String errorMessage \u003d validityHelper.emailPhoneErrorMessage(email, phone);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (!\"\".equals(errorMessage)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return errorMessage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        for (Member currentMember : memberList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (currentMember.getIndexNumber() \u003d\u003d memberIndexNumber) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                String updatedName \u003d (\"--\".equals(name)) ? currentMember.getName() : name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                String updatedPhone \u003d (\"--\".equals(phone)) ? currentMember.getPhone() : phone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                String updatedEmail \u003d (\"--\".equals(email)) ? currentMember.getEmail() : email;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                currentMember.updateDetails(updatedName, updatedPhone, updatedEmail);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return \"Updated member details with the index number \" + memberIndexNumber;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Removes a member from the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Shifts the index numbers of all members up if required."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param toBeRemoved The Member that needs to be removed"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void removeMember(Member toBeRemoved) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (toBeRemoved.getIndexNumber() \u003c memberList.size()) { //if need to reassign index numbers after removal"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            this.memberList.remove(toBeRemoved);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d memberList.size(); i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                memberList.get(i - 1).setIndexNumber(i);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            this.memberList.remove(toBeRemoved);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns an ArrayList with String descriptions of members details."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return An ArrayList with String descriptions of members details."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ArrayList\u003cString\u003e getAllMemberDetails() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cString\u003e memberDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (Member member : this.memberList) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            memberDetails.add(member.getDetails());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return memberDetails;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Returns an ArrayList of Strings in the format to be printed in table form."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return An ArrayList of Strings in the format to be printed in table form."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public ArrayList\u003cString\u003e getAllMemberDetailsForTable() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e memberDetailsForTable \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        if (this.memberList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            memberDetailsForTable.add(\" - There are currently no members! -\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            for (Member member : this.memberList) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                memberDetailsForTable.add(member.getIndexNumber() + \". \" + member.getName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                memberDetailsForTable.add(\"   - Role: \" + member.getRole());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                memberDetailsForTable.add(\"   - Phone: \" + member.getPhone());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                memberDetailsForTable.add(\"   - Email: \" + member.getEmail());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                memberDetailsForTable.add(\"\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            memberDetailsForTable.remove(memberDetailsForTable.size() - 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return memberDetailsForTable;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Method returns a IMember."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param i : Member index."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @return : IMember. Will return a NullMember if index doesn\u0027t exist"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public IMember getMember(int i) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return this.memberList.get(i - 1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } catch (IndexOutOfBoundsException err) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return new NullMember(\"Requested member index is out of bounds! Please check again.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Returns the size of the current member list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return The size of the current member list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public int getNumOfMembers() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return memberList.size();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Checks if the member list contains a member."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param newMember The member to be checked."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return True if the project\u0027s member list already contains the member, false otherwise."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public boolean contains(IMember newMember) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.memberList.contains(newMember);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 55,
      "iamabhishek98": 42,
      "seanlimhx": 24,
      "Lucria": 19,
      "Dkenobi": 2
    }
  },
  {
    "path": "src/main/java/models/member/NullMember.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package models.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class NullMember implements IMember {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String errorMessage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public NullMember(String errorMessage) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void updateDetails(String name, String phone, String email) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void setIndexNumber(int indexNumber) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public int getIndexNumber() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String getRole() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String setRole(String input) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public String getMemberID() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 10,
      "sinteary": 5,
      "Lucria": 49
    }
  },
  {
    "path": "src/main/java/models/project/IProject.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package models.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.IMember;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.IMemberList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.reminder.Reminder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.ITask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public interface IProject {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    String getName();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    IMemberList getMemberList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    TaskList getTaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    boolean taskExists(ITask task);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    String getTaskIndexName(Integer index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    int getNumOfMembers();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    int getNumOfTasks();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void addMember(Member newMember);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    String editMember(int memberIndexNumber, String updatedMemberDetails);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void removeMember(Member toBeRemoved);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    Member getMember(int indexNumber);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    boolean memberExists(IMember newMember);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    void addTask(Task newTask);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    void removeTask(int taskIndexNumber);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    Task getTask(int taskIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    String[] editTask(int taskIndexNumber, String updatedTaskDetails);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    String[] editTaskRequirements(int taskIndexNumber, String updatedTaskRequirements);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    ArrayList\u003cString\u003e getCredits();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void createAssignment(Task task, Member member);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void removeAssignment(Member member, Task task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    boolean containsAssignment(Task task, Member member);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    HashMap\u003cString, ArrayList\u003cString\u003e\u003e getMembersIndividualTaskList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    HashMap\u003cString, ArrayList\u003cString\u003e\u003e getTasksAndAssignedMembers();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    ITask getTaskFromID(String taskID);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    void addReminderToList(Reminder reminder);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    ArrayList\u003cReminder\u003e getReminderList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    void markReminder(Boolean isDone, int index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    Reminder getReminder(int index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    void removeReminder(int index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    int getReminderListSize();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    IMember getMemberFromID(String memberID);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    HashMap\u003cString,ArrayList\u003cReminder\u003e\u003e getCategoryReminderList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 33,
      "iamabhishek98": 10,
      "seanlimhx": 4,
      "Lucria": 9,
      "Dkenobi": 24
    }
  },
  {
    "path": "src/main/java/models/project/NullProject.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package models.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.IMember;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.member.MemberList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.reminder.Reminder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.ITask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class NullProject implements IProject {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public MemberList getMemberList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public TaskList getTaskList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public boolean taskExists(ITask task) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public String getTaskIndexName(Integer index) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public int getNumOfMembers() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public int getNumOfTasks() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void addMember(Member newMember) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Empty method"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": "         */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String editMember(int memberIndexNumber, String updatedMemberDetails) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Empty method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void removeMember(Member toBeRemoved) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Empty method"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public Member getMember(int indexNumber) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public boolean memberExists(IMember newMember) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Empty method"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void removeTask(int taskIndexNumber) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Empty method"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "         */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public Task getTask(int taskIndex) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public String[] editTask(int taskIndexNumber, String updatedTaskDetails) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        Empty method"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return new String[0];"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public String[] editTaskRequirements(int taskIndexNumber, String updatedTaskRequirements) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e getCredits() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void createAssignment(Task task, Member member) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Empty method"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void removeAssignment(Member member, Task task) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Empty method"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sinteary"
        },
        "content": "         */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public boolean containsAssignment(Task task, Member member) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public HashMap\u003cString, ArrayList\u003cString\u003e\u003e getMembersIndividualTaskList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public HashMap\u003cString, ArrayList\u003cString\u003e\u003e getTasksAndAssignedMembers() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public IMember getMemberFromID(String memberID) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public HashMap\u003cString, ArrayList\u003cReminder\u003e\u003e getCategoryReminderList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ITask getTaskFromID(String taskID) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void addReminderToList(Reminder reminder) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Empty method"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public ArrayList\u003cReminder\u003e getReminderList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void markReminder(Boolean isDone, int index) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Empty method"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public Reminder getReminder(int index) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void removeReminder(int index) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Empty method"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public int getReminderListSize() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 76,
      "iamabhishek98": 27,
      "seanlimhx": 13,
      "Lucria": 18,
      "Dkenobi": 65
    }
  },
  {
    "path": "src/main/java/models/project/Project.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package models.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.IMember;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.member.MemberList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.NullMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.reminder.Reminder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.reminder.ReminderList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.ITask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.NullTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import models.task.TaskState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class Project implements IProject {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private MemberList memberList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private ReminderList reminderList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private HashMap\u003cString, ArrayList\u003cString\u003e\u003e taskAndListOfMembersAssigned; //taskID_listOfMemberIDs"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private HashMap\u003cString, ArrayList\u003cString\u003e\u003e memberAndIndividualListOfTasks; //memberID_listOfTaskIDs"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Class representing a task in a project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param name The description of the project."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public Project(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.memberList \u003d new MemberList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.reminderList \u003d new ReminderList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.taskAndListOfMembersAssigned \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.memberAndIndividualListOfTasks \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public MemberList getMemberList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return this.memberList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public TaskList getTaskList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Checks if a task already exists in the task list of a project."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param task The task to be checked."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return true if the task already exists, false otherwise."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public boolean taskExists(ITask task) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.taskList.contains((Task) task);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public String getTaskIndexName(Integer index) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return getTask(index).getTaskName();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public int getNumOfMembers() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return this.memberList.getNumOfMembers();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public int getNumOfTasks() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.taskList.getTaskList().size();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    //@@author iamabhishek98"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void addMember(Member newMember) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.memberList.addMember(newMember);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.memberAndIndividualListOfTasks.put(newMember.getMemberID(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    //@@author iamabhishek98"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String editMember(int memberIndexNumber, String updatedMemberDetails) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.memberList.editMember(memberIndexNumber, updatedMemberDetails);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    //@@author iamabhishek98"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void removeMember(Member memberToBeRemoved) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (String taskID: this.taskAndListOfMembersAssigned.keySet()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            this.taskAndListOfMembersAssigned.get(taskID).remove(memberToBeRemoved.getMemberID());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.memberAndIndividualListOfTasks.remove(memberToBeRemoved.getMemberID());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.memberList.removeMember(memberToBeRemoved);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    //@@author sinteary"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public Member getMember(int indexNumber) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return (Member) this.memberList.getMember(indexNumber);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Checks if a member exists in the member list of a project."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param member the member to be checked"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return true if the member already exists in the project, false otherwise."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public boolean memberExists(IMember member) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.memberList.contains(member);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.taskList.addTask(newTask);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.taskAndListOfMembersAssigned.put(newTask.getTaskID(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    //@@author iamabhishek98"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void removeTask(int taskIndexNumber) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Task taskToRemove \u003d this.getTask(taskIndexNumber);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (String memberID : this.memberAndIndividualListOfTasks.keySet()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            this.memberAndIndividualListOfTasks.get(memberID).remove(taskToRemove.getTaskID());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.taskAndListOfMembersAssigned.remove(taskToRemove.getTaskID());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.taskList.removeTask(taskIndexNumber);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public Task getTask(int taskIndex) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.taskList.getTask(taskIndex);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    //@@author iamabhishek98"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String[] editTask(int taskIndexNumber, String updatedTaskDetails) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.taskList.editTask(taskIndexNumber, updatedTaskDetails);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String[] editTaskRequirements(int taskIndexNumber, String updatedTaskRequirements) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.taskList.editTaskRequirements(taskIndexNumber, updatedTaskRequirements);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    //@@author iamabhishek98"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Returns the member names with the credits of their assigned tasks."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return The member names with the credits of their assigned tasks."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e getCredits() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        *       THIS METHOD IS TO BE REFACTORED"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "         */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e allMemberCredits \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cMember\u003e allMembers \u003d this.getMemberList().getMemberList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cString\u003e\u003e memberIDAndTaskIDs \u003d this.getMembersIndividualTaskList(); //memberID_taskIDs"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (Member member : allMembers) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            int totalCredits \u003d 0;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            int doneCredits \u003d 0;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            for (String taskID : memberIDAndTaskIDs.get(member.getMemberID())) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                // credits are split equally between members"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                ITask assignedTask \u003d getTaskFromID(taskID);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                int taskCredit \u003d (assignedTask.getTaskCredit()) / (memberIDAndTaskIDs.size());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                totalCredits +\u003d taskCredit;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                // members only get credits if the task is \"DONE\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                if (assignedTask.getTaskState() \u003d\u003d TaskState.DONE) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    doneCredits +\u003d taskCredit;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            int scale \u003d 20;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            int percentDone \u003d (int) ((doneCredits / (float) totalCredits) * scale);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String progress \u003d \"\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            for (int i \u003d 0; i \u003c percentDone; i++) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                progress +\u003d \"#\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            for (int i \u003d percentDone; i \u003c scale; i++) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                progress +\u003d \".\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            allMemberCredits.add(count + \". \" + member.getName() + \": \" + doneCredits + \" credits\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            allMemberCredits.add(\"   Progress: \" + progress + \" (\" + percentDone * (100 / scale) + \"%)\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return allMemberCredits;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    //@@author sinteary"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * This method assigns a task to a member by mapping the task\u0027s unique ID to the assigned member\u0027s"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * unique ID. This association is stored in the 2 HashMaps: taskAndListOfMembersAssigned and"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * memberAndIndividualListOfTasks."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param task the task which you wish to assign to the member."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param member the member you wish to assign the task to."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void createAssignment(Task task, Member member) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        taskAndListOfMembersAssigned.get(task.getTaskID()).add(member.getMemberID());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        memberAndIndividualListOfTasks.get(member.getMemberID()).add(task.getTaskID());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Removes the assignment between a task and member by removing the mapping between the task\u0027s unique"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * ID and the member\u0027s unique ID. The association is removed from the 2 HashMaps:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * taskAndListOfMembersAssigned and memberAndIndividualListOfTasks."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param member the member to unassign the task from."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param task the task to be unassigned."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void removeAssignment(Member member, Task task) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        taskAndListOfMembersAssigned.get(task.getTaskID()).remove(member.getMemberID());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        memberAndIndividualListOfTasks.get(member.getMemberID()).remove(task.getTaskID());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Checks if assignment exists between a member and task by ensuring that the association exists"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * in the 2 HashMaps: taskAndListOfMembersAssigned and memberAndIndividualListOfTasks."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param task The task in question."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param member The member in question."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return true task has already been assigned to a member."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public boolean containsAssignment(Task task, Member member) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return memberAndIndividualListOfTasks.get(member.getMemberID()).contains(task.getTaskID())"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            \u0026\u0026 taskAndListOfMembersAssigned.get(task.getTaskID()).contains(member.getMemberID());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns a hashmap with information about each member\u0027s task assignment."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return hashmap with member as key and accompanying task list."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public HashMap\u003cString, ArrayList\u003cString\u003e\u003e getMembersIndividualTaskList() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.memberAndIndividualListOfTasks;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns a hashmap with information about each task\u0027s assignment to members."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return hashmap with task as key and accompanying list of assigned members."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public HashMap\u003cString, ArrayList\u003cString\u003e\u003e getTasksAndAssignedMembers() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.taskAndListOfMembersAssigned;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns a member object based on the unique member ID."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param memberID The member ID associated with a member."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return The member object with the matching member ID."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public IMember getMemberFromID(String memberID) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (Member member : this.memberList.getMemberList()) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            if (memberID.equals(member.getMemberID())) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                return member;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return new NullMember(\"Unable to find this member.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns a task object based on the unique task ID."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param taskID The task ID associated with a task."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return The task object with the matching task ID."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ITask getTaskFromID(String taskID) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (Task task : this.taskList.getTaskList()) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            if (taskID.equals(task.getTaskID())) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                return task;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return new NullTask();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void addReminderToList(Reminder reminder) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.reminderList.addReminderList(reminder);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public ArrayList\u003cReminder\u003e getReminderList() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return reminderList.getReminderList();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Set the status of the Reminder."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param isDone the status of the reminder."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param index the 1 based index of the reminder."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void markReminder(Boolean isDone, int index) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        reminderList.getReminderList().get(index - 1).setIsDone(isDone);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Get a reminder from the reminderList."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param index the index of the Reminder."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @return Reminder object."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public Reminder getReminder(int index) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return reminderList.getReminderList().get(index - 1);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void removeReminder(int index) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        reminderList.getReminderList().remove(index - 1);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public int getReminderListSize() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return reminderList.getReminderList().size();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public HashMap\u003cString,ArrayList\u003cReminder\u003e\u003e getCategoryReminderList() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        HashMap\u003cString,ArrayList\u003cReminder\u003e\u003e reminderCategoryList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArrayList\u003cReminder\u003e remindersLists \u003d reminderList.getReminderList();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        for (Reminder reminder : remindersLists) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            if (!(reminderCategoryList.containsKey(reminder.getCategory()))) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                ArrayList\u003cReminder\u003e reminderL \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                reminderL.add(reminder);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                reminderCategoryList.put(reminder.getCategory(),reminderL);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                reminderCategoryList.get(reminder.getCategory()).add(reminder);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return reminderCategoryList;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 143,
      "iamabhishek98": 100,
      "Lucria": 24,
      "Dkenobi": 78
    }
  },
  {
    "path": "src/main/java/models/reminder/IReminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package models.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public interface IReminder {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    void setReminderName(String reminderName);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    void setReminderRemarks(String reminderRemarks);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    void setReminderDate(Date reminderDate);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    void setIsDone(Boolean isDone);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    void setCategory(String category);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    String getReminderName();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    String getReminderRemarks();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    Date getReminderDate();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    Boolean getIsDone();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    String getStatus();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    String getCategory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 28
    }
  },
  {
    "path": "src/main/java/models/reminder/NullReminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package models.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class NullReminder implements IReminder {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void setReminderName(String reminderName) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void setReminderRemarks(String reminderRemarks) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void setReminderDate(Date reminderDate) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void setIsDone(Boolean isDone) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void setCategory(String category) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String getReminderName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String getReminderRemarks() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public Date getReminderDate() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public Boolean getIsDone() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 71
    }
  },
  {
    "path": "src/main/java/models/reminder/Reminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package models.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class Reminder implements IReminder {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private String reminderName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private String reminderRemarks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private Date reminderDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private Boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Class representing a reminder in the project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param reminderName The name of the reminder."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param reminderRemarks Additional information about the reminder. [Optional]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param reminderDate The date that the reminder is due. [Optional]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public Reminder(String reminderName, String reminderRemarks, Date reminderDate, String category) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.reminderName \u003d reminderName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.reminderRemarks \u003d reminderRemarks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.reminderDate \u003d reminderDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void setReminderName(String reminderName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.reminderName \u003d reminderName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void setReminderRemarks(String reminderRemarks) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.reminderRemarks \u003d reminderRemarks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void setReminderDate(Date reminderDate) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.reminderDate \u003d reminderDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void setIsDone(Boolean isDone) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.isDone \u003d  isDone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void setCategory(String category) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String getReminderName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return reminderName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String getReminderRemarks() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return reminderRemarks;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public Date getReminderDate() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return reminderDate;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public Boolean getIsDone() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return (this.isDone ? \"[/]\" : \"[X]\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return this.category;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 80
    }
  },
  {
    "path": "src/main/java/models/reminder/ReminderList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package models.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class ReminderList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    //private String reminderListName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private ArrayList\u003cReminder\u003e reminderList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Class representing a list with all reminders."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public ReminderList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        //this.reminderListName\u003d reminderListName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.reminderList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /*public String getReminderListName() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return reminderListName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /*public void setReminderListName(String reminderListName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.reminderListName \u003d reminderListName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Adds a new reminder to the list of this project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param reminder A new reminder to be added to the project."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void addReminderList(Reminder reminder) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.reminderList.add(reminder);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public ArrayList\u003cReminder\u003e getReminderList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return reminderList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public Reminder getReminder(int index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return reminderList.get(index - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 42
    }
  },
  {
    "path": "src/main/java/models/task/ITask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package models.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public interface ITask {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    String getTaskName();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    int getTaskPriority();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    String getDetails();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    Date getDueDate();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    TaskState getTaskState();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    int getTaskCredit();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    ArrayList\u003cString\u003e getTaskRequirements();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    int getNumOfTaskRequirements();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void setTaskName(String newTaskName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void setTaskPriority(int newTaskPriority);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    void setDueDate(Date newDueDate);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void setTaskCredit(int newTaskCredit);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void setTaskState(String newTaskStateString);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void removeTaskRequirement(int indexOfTaskRequirement);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void addTaskRequirement(String newTaskRequirement);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    String getDetailsForAssignmentTable();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 2,
      "seanlimhx": 1,
      "Lucria": 35
    }
  },
  {
    "path": "src/main/java/models/task/NullTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package models.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class NullTask implements ITask {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public int getTaskPriority() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public Date getDueDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public TaskState getTaskState() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public int getTaskCredit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public ArrayList\u003cString\u003e getTaskRequirements() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public int getNumOfTaskRequirements() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void setTaskName(String newTaskName) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void setTaskPriority(int newTaskPriority) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void setDueDate(Date newDueDate) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void setTaskCredit(int newTaskCredit) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void setTaskState(String newTaskStateString) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void removeTaskRequirement(int indexOfTaskRequirement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void addTaskRequirement(String newTaskRequirement) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         * Empty method"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lucria"
        },
        "content": "         */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public String getDetailsForAssignmentTable() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 5,
      "seanlimhx": 1,
      "Lucria": 94
    }
  },
  {
    "path": "src/main/java/models/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package models.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import util.date.DateTimeHelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class Task implements ITask {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private int taskPriority;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private Date dueDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private int taskCredit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private TaskState taskState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private ArrayList\u003cString\u003e taskRequirements;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private DateTimeHelper dateTimeHelper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private String taskID;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        } else if (!(obj instanceof Task)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            Task other \u003d (Task) obj;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return this.taskID.equals(other.taskID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return Objects.hash(this.taskID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Class representing a task in a project."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param taskName The name of the task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param taskPriority The priority value of the task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param dueDate The date that the task is due. [Optional]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param taskCredit The amount of credit a person would receive for completing the task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     *                   A more difficult task would receive more credit."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param taskState taskState refers to whether the task is in OPEN, TO-DO, DOING, DONE."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param taskRequirements ArrayList of Strings containing specific requirements of a task. [Optional]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public Task(String taskName, int taskPriority, Date dueDate, int taskCredit, TaskState taskState,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                ArrayList\u003cString\u003e taskRequirements) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.taskPriority \u003d taskPriority;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.taskCredit \u003d taskCredit;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.taskState \u003d taskState;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.taskRequirements \u003d taskRequirements;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.taskID \u003d UUID.randomUUID().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public int getTaskPriority() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return taskPriority;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Gets the details of the task in a String format in the correct layout."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return String containing all the details of the task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        if (this.dueDate !\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            return this.taskName + \" | Priority: \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + this.taskPriority"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Due: \" + dateTimeHelper.formatDateForDisplay(this.dueDate)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(this.dueDate)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: \" + this.taskCredit"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | State: \" + this.taskState;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            return this.taskName + \" | Priority: \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    + this.taskPriority + \" | Due: -- | Credit: \" + this.taskCredit + \" | State: \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    + this.taskState;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Method to get task details to be presented in a concise form for Assignment table."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return String containing task details."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public String getDetailsForAssignmentTable() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        if (this.dueDate !\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            return this.taskName + \" (P: \" + this.taskPriority + \", D: \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    + dateTimeHelper.formatDateForDisplay(this.dueDate) + \", C: \" + this.taskCredit + \", S: \""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    + this.taskState + \")\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            return this.taskName + \" (P: \" + this.taskPriority + \", D: --, C: \" + this.taskCredit + \", S: \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    + this.taskState + \")\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public Date getDueDate() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.dueDate;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public TaskState getTaskState() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.taskState;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public int getTaskCredit() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.taskCredit;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Adds index labels to task requirements for clearer viewing."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return ArrayList of String of task requirements with labelled indexes."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public ArrayList\u003cString\u003e getTaskRequirements() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e taskRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        taskRequirements.add(0, \"Requirements for the task \u0027\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                + this.taskName + \"\u0027:\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        for (String s : this.taskRequirements) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            taskRequirements.add(index + \". \" + s);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return taskRequirements;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public int getNumOfTaskRequirements() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return this.taskRequirements.size();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void setTaskName(String newTaskName) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.taskName \u003d newTaskName;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void setTaskPriority(int newTaskPriority) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.taskPriority \u003d newTaskPriority;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Set input Date object as the new dueDate."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param newDueDate Date object of the new dueDate to be set."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void setDueDate(Date newDueDate) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.dueDate \u003d newDueDate;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Edits current task credit to new input task credit."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param newTaskCredit new task credit to be set."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void setTaskCredit(int newTaskCredit) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.taskCredit \u003d newTaskCredit;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Converts input String into TaskState and edits current task state to new task state."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param newTaskStateString String form of new task state."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void setTaskState(String newTaskStateString) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        switch (newTaskStateString) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            this.taskState \u003d TaskState.DONE;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            this.taskState \u003d TaskState.TODO;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        case \"doing\":"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            this.taskState \u003d TaskState.DOING;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            this.taskState \u003d TaskState.OPEN;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void removeTaskRequirement(int indexOfTaskRequirement) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.taskRequirements.remove(indexOfTaskRequirement - 1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public void addTaskRequirement(String newTaskRequirement) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.taskRequirements.add(newTaskRequirement);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public String getTaskID() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.taskID;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 33,
      "iamabhishek98": 9,
      "seanlimhx": 114,
      "Lucria": 4,
      "Dkenobi": 30
    }
  },
  {
    "path": "src/main/java/models/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package models.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import util.ParserHelper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import util.SortHelper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import util.date.DateTimeHelper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private ParserHelper parserHelper;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private SortHelper sortHelper;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private DateTimeHelper dateTimeHelper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Class representing a list with all task sort in the project."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.parserHelper \u003d new ParserHelper();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.sortHelper \u003d new SortHelper();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Adds a new task to the list of this project."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param task A new task to be added to the project."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Deletes the task from the list using the index number."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param taskIndexNumber The index number of the task to be deleted."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void removeTask(int taskIndexNumber) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.taskList.remove(taskIndexNumber - 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Returns an ArrayList with String descriptions of task details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param tasksAndAssignedMembers HashMap containing tasks with assigned members."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return An ArrayList with String descriptions of task details sorted by name by default."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ArrayList\u003cString\u003e getAllTaskDetails("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cString\u003e\u003e tasksAndAssignedMembers, Project project) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        // after implementing task index, change \"/PRIORITY\" to \"/INDEX\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.parserHelper.parseSortTaskDetails(tasksAndAssignedMembers,taskList,\"/PRIORITY\", project);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Returns an ArrayList with String descriptions of task details to be presented in table format."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param tasksAndAssignedMembers HashMap containing tasks with assigned members."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return An ArrayList with String descriptions of task details sorted by name by default to be presented in table"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     *         format."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public ArrayList\u003cArrayList\u003cString\u003e\u003e getAllTaskDetailsForTable("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cString\u003e\u003e tasksAndAssignedMembers,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                                                       String sortCriteria, Project project) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e allTaskDetailsForTable \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e messageForEmptyTaskTable \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        if (this.taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            messageForEmptyTaskTable.add(\" - There are currently no tasks! -\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            allTaskDetailsForTable.add(messageForEmptyTaskTable);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            ArrayList\u003cString\u003e allTaskDetails \u003d this.parserHelper.parseSortTaskDetails(tasksAndAssignedMembers,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    taskList, sortCriteria, project);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            if (sortCriteria.substring(0, 5).equals(\"/WHO-\") \u0026\u0026 allTaskDetails.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                messageForEmptyTaskTable.add(\" - There are no tasks assigned to \" + sortCriteria.substring(5) + \"! -\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                allTaskDetailsForTable.add(messageForEmptyTaskTable);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } else if (\"/DATE\".equals(sortCriteria) \u0026\u0026 allTaskDetails.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                messageForEmptyTaskTable.add(\" - There are no tasks with deadlines! -\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                allTaskDetailsForTable.add(messageForEmptyTaskTable);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                for (String s : allTaskDetails) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    ArrayList\u003cString\u003e individualTaskDetailsForTable \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    String[] indivTaskDetails \u003d s.split(\" [|] \");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    individualTaskDetailsForTable.add(indivTaskDetails[0]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    for (int i \u003d 1; i \u003c indivTaskDetails.length; i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        individualTaskDetailsForTable.add(\" - \" + indivTaskDetails[i]);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    allTaskDetailsForTable.add(individualTaskDetailsForTable);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return allTaskDetailsForTable;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Returns an ArrayList with String descriptions of task details sorted by the criteria specified by the user."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param tasksAndAssignedMembers HashMap containing tasks with assigned members."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param sortCriteria Criteria to sort chosen by user."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return An ArrayList with String descriptions of task details sorted by the criteria specified by the user."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ArrayList\u003cString\u003e getAllSortedTaskDetails("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cString\u003e\u003e tasksAndAssignedMembers,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                                                     String sortCriteria, Project project) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.parserHelper.parseSortTaskDetails(tasksAndAssignedMembers, taskList, sortCriteria, project);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns the list of all tasks."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return An ArrayList with all tasks."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public Task getTask(int taskIndex) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.taskList.get(taskIndex - 1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    //@@author seanlimhx"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Edits details of a task excluding task requirements."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param taskIndexNumber Index of task to be edited"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param updatedTaskDetails input command String in the form of (tasks to be edited can be in any order)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     *                           edit task i/TASK_INDEX [n/TASK_NAME] [p/TASK_PRIORITY]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     *                           [d/TASK_DUEDATE] [c/TASK_CREDIT] [s/STATE]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return String array containing messages to the user to be printed."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public String[] editTask(int taskIndexNumber, String updatedTaskDetails) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e taskDetails \u003d parserHelper.parseTaskDetails(updatedTaskDetails);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String taskName \u003d taskDetails.get(0);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e messagesForUser \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e successMessages \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e errorMessages \u003d new ArrayList\u003c\u003e(parserHelper.getErrorMessages());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        Task task \u003d taskList.get(taskIndexNumber - 1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        if (!(\"--\".equals(taskName))) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            task.setTaskName(taskName);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            successMessages.add(\"The name of this task has been changed to \u0027\" + taskName + \"\u0027!\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String taskPriority \u003d taskDetails.get(1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        if (!(\"-1\".equals(taskPriority))) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                int newTaskPriority \u003d Integer.parseInt(taskPriority);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                if (newTaskPriority \u003c 1 || newTaskPriority \u003e 5) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    errorMessages.add(\"Task priority should only be from 1 to 5!\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    task.setTaskPriority(newTaskPriority);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    successMessages.add(\"The priority for this task has been set to \" + newTaskPriority + \"!\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                errorMessages.add(\"Input for new task priority is not a number!\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String taskDueDate \u003d taskDetails.get(2);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        if (taskDueDate !\u003d null) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                Date newDueDate \u003d dateTimeHelper.formatDate(taskDueDate);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                task.setDueDate(newDueDate);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                successMessages.add(\"The new due date for this task has been set to \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        + dateTimeHelper.formatDateForDisplay(newDueDate) + \"!\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                errorMessages.add(\"Input for new task due date is invalid! Please input the date in the \""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        + \"form \u0027dd/mm/yyyy\u0027.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String taskCredit \u003d taskDetails.get(3);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        if (!(\"-1\".equals(taskCredit))) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                int newTaskCredit \u003d Integer.parseInt(taskCredit);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                if (newTaskCredit \u003c 1 || newTaskCredit \u003e 100) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    errorMessages.add(\"Credits for a task should only be from 1 to 100!\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    task.setTaskCredit(newTaskCredit);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    successMessages.add(\"The credit for this task has been set to \" + newTaskCredit + \"!\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                errorMessages.add(\"Input for new task credit is not a number!\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String taskState \u003d taskDetails.get(4);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        if (!(\"NONE\".equals(taskState))) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            String newTaskStateLowerCase \u003d taskState.toLowerCase();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            if (\"open\".equals(taskState) || \"doing\".equals(taskState)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    || \"done\".equals(taskState) || \"todo\".equals(taskState)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                task.setTaskState(newTaskStateLowerCase);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                successMessages.add(\"The state of this task has been set to \" + taskState.toUpperCase() + \"!\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                errorMessages.add(\"There are only 4 possible states of a task: \u0027open\u0027, \u0027todo\u0027, \u0027doing\u0027 and \u0027done\u0027. \""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        + \"Please give a valid state!\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        if (successMessages.size() !\u003d 0) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            messagesForUser.add(\"Success!\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            messagesForUser.addAll(successMessages);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            if (errorMessages.size() !\u003d 0) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                messagesForUser.add(\"\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                messagesForUser.add(\"Errors...\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                messagesForUser.addAll(errorMessages);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            messagesForUser.add(\"Errors...\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            messagesForUser.addAll(errorMessages);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return messagesForUser.toArray(new String[0]);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Edits the task requirements of a specific task by adding or removing them."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param taskIndexNumber Index of task to be edited."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param updatedTaskRequirements Array containing indexes of task requirements to be removed and"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     *                                task requirements to be added."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return String array of success and error messages to be printed."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public String[] editTaskRequirements(int taskIndexNumber, String updatedTaskRequirements) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e successMessages \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        successMessages.add(\"Success!\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e errorMessages \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        errorMessages.add(\"Errors...\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e newTaskRequirementDetails \u003d parserHelper.parseTaskRequirementDetails(updatedTaskRequirements);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        errorMessages.addAll(parserHelper.getErrorMessages());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String taskReqIndexesToBeRemoved \u003d newTaskRequirementDetails.get(0);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        if (!(\"--\").equals(taskReqIndexesToBeRemoved)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            ArrayList\u003cString\u003e results \u003d removeTaskRequirements(taskIndexNumber, taskReqIndexesToBeRemoved);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            if (!results.contains(\"error start\")) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                successMessages.addAll(results);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                while (!\"error start\".equals(results.get(0))) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    successMessages.add(results.get(0));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    results.remove(0);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                results.remove(0); //remove \"error start\""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                errorMessages.addAll(results);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        newTaskRequirementDetails.remove(0);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        if (newTaskRequirementDetails.size() !\u003d 0) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            successMessages.addAll(addTaskRequirements(taskIndexNumber, newTaskRequirementDetails));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        //combining success messages and error messages into one array"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        if (successMessages.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            successMessages.remove(0);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            if (errorMessages.size() \u003e 1) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                successMessages.addAll(errorMessages);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            if (errorMessages.size() \u003e 1) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                successMessages.add(\"\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                successMessages.addAll(errorMessages);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return successMessages.toArray(new String[0]);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Removes task requirement with input index."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param taskIndexNumber Index of task to be edited."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param taskReqIndexesToBeRemoved String containing indexes of task requirements to be removed."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return String array of success and error messages"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private ArrayList\u003cString\u003e removeTaskRequirements(int taskIndexNumber, String taskReqIndexesToBeRemoved) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] indexesToBeRemoved \u003d taskReqIndexesToBeRemoved.split(\" \");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e successMessages \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e errorMessagesForInvalidIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        Arrays.sort(indexesToBeRemoved);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cInteger\u003e listOfUsedIntegers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        int startingNumOfTaskRequirements \u003d this.taskList.get(taskIndexNumber - 1).getNumOfTaskRequirements();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        for (int i \u003d indexesToBeRemoved.length - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                int indexToBeRemoved \u003d Integer.parseInt(indexesToBeRemoved[i]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                if (indexToBeRemoved \u003e 0"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        \u0026\u0026 indexToBeRemoved \u003c\u003d startingNumOfTaskRequirements) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    if (!listOfUsedIntegers.contains(indexToBeRemoved)) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        successMessages.add(\"\u0027\""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                                + this.taskList.get(taskIndexNumber - 1).getTaskRequirements().get(indexToBeRemoved)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                                .substring(3)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                                + \"\u0027 is no longer a requirement of this task!\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        listOfUsedIntegers.add(indexToBeRemoved);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        this.taskList.get(taskIndexNumber - 1).removeTaskRequirement(indexToBeRemoved);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        errorMessagesForInvalidIndexes.add(\"Index \u0027\" + indexToBeRemoved + \"\u0027 was repeated!\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    errorMessagesForInvalidIndexes.add(\"\u0027\" + indexToBeRemoved"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                            + \"\u0027 is not a valid task requirement index!\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                errorMessagesForInvalidIndexes.add(\"\u0027\" + indexesToBeRemoved[i] + \"\u0027 is not a number!\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        successMessages.add(\"error start\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        successMessages.addAll(errorMessagesForInvalidIndexes);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return successMessages;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Adds new task requirements to a specific task."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param taskIndexNumber Index of task to be edited."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param newTaskRequirements Array containing indexes of task requirements to be added."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return Arraylist of String containing success or error messages"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private ArrayList\u003cString\u003e addTaskRequirements(int taskIndexNumber, ArrayList\u003cString\u003e newTaskRequirements) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e successMessages \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        for (String s : newTaskRequirements) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            this.taskList.get(taskIndexNumber - 1).addTaskRequirement(s);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            successMessages.add(\"\u0027\" + s + \"\u0027 has been successfully added as a new requirement of this task!\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return successMessages;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public boolean contains(Task task) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return (taskList.contains(task));"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Get details of task with closest deadline and return in String array form."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return String array of details of task which has the closest deadline."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public String[] getClosestDeadlineTask() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e sortedTaskList \u003d sortHelper.sortTaskDueDate(this.taskList);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        for (String task : sortedTaskList) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            if (!task.contains(\"State: DONE\")) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                return task.substring(3).split(\" [|] \");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] message \u003d new String[2];"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        message[0] \u003d \"\";"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        message[1] \u003d \"No deadlines left -\";"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Method to calculate progress and store in presentable String format."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return String array containing output for overall progress to be printed in table."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public String[] getOverallProgress() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        int totalCredits \u003d 0;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        double creditsOpen \u003d 0;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        double creditsTodo \u003d 0;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        double creditsDoing \u003d 0;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        double creditsDone \u003d 0;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        for (Task task : this.taskList) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            totalCredits +\u003d task.getTaskCredit();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            if (task.getTaskState() \u003d\u003d TaskState.DONE) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                creditsDone +\u003d task.getTaskCredit();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } else if (task.getTaskState() \u003d\u003d TaskState.DOING) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                creditsDoing +\u003d task.getTaskCredit();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } else if (task.getTaskState() \u003d\u003d TaskState.TODO) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                creditsTodo +\u003d task.getTaskCredit();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                creditsOpen +\u003d task.getTaskCredit();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e progressDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String percentageDone \u003d Integer.toString((int)(creditsDone / totalCredits * 100));"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        progressDetails.add(\"Completed: \" + percentageDone + \"%\");"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String percentageInProgress \u003d Integer.toString((int)(creditsDoing / totalCredits * 100));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        progressDetails.add(\"In Progress: \" + percentageInProgress + \"%\");"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String percentageNotDone \u003d Integer.toString((int)((creditsTodo + creditsOpen) / totalCredits * 100));"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        progressDetails.add(\"Not Done: \" + percentageNotDone + \"%\");"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return progressDetails.toArray(new String[0]);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    //@@author Lucria"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Method that will get all tasks that are in the current month."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @return : Returns a hashmap typing the task name with date in the current month."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public HashMap\u003cInteger, Integer\u003e getTasksWithinCurrentMonth() {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        HashMap\u003cInteger, Integer\u003e allTasksWithinCurrentMonth \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String currentMonth \u003d dateTimeHelper.getCurrentMonth();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        for (Task task : this.taskList) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            Date taskDate \u003d task.getDueDate();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            if (dateTimeHelper.getMonthFromDateObject(taskDate).equals(currentMonth)) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                int dayOfTaskDueDate \u003d dateTimeHelper.getDayFromDateObject(taskDate);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                allTasksWithinCurrentMonth.merge(dayOfTaskDueDate, 1, Integer::sum);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return allTasksWithinCurrentMonth;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 22,
      "sinteary": 25,
      "seanlimhx": 302,
      "Lucria": 18,
      "Dkenobi": 27
    }
  },
  {
    "path": "src/main/java/models/task/TaskState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "package models.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "public enum TaskState {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    OPEN, TODO, DOING, DONE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlimhx": 5
    }
  },
  {
    "path": "src/main/java/repositories/IRepository.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package repositories;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "//@@author Lucria"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public interface IRepository\u003cT\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    ArrayList\u003cT\u003e getAll();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    boolean addToRepo(String input);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    boolean deleteItem(int projectNumber);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    T getItem(int projectNumber);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 10,
      "-": 4
    }
  },
  {
    "path": "src/main/java/repositories/ProjectRepository.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package repositories;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.project.IProject;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.factories.ProjectFactory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.json.JsonConverter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.log.ArchDukeLogger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "//@@author Lucria"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class ProjectRepository implements IRepository\u003cProject\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private ArrayList\u003cProject\u003e allProjects;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private ProjectFactory projectFactory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private JsonConverter jsonConverter \u003d new JsonConverter();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public ProjectRepository() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        allProjects \u003d jsonConverter.loadAllProjectsData();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.projectFactory \u003d new ProjectFactory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public ArrayList\u003cProject\u003e getAll() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return allProjects;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public boolean addToRepo(String input) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        IProject newProject \u003d projectFactory.create(input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        ArchDukeLogger.logDebug(ProjectRepository.class.getName(), \"New project created with name: \u0027\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                + newProject.getName() + \"\u0027\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (newProject.getName() \u003d\u003d null || newProject.getMemberList() \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Project newlyCreatedProject \u003d (Project) newProject;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        allProjects.add(newlyCreatedProject);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        jsonConverter.saveProject(newlyCreatedProject);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Method to retrieve a Project from ArrayList of Projects."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param projectNumber : Index of Project that user wishes to retrieve"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @return Returns the Project object desired by user"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public Project getItem(int projectNumber) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return this.allProjects.get(projectNumber - 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Method for deletion of projects."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param projectNumber : Index of project that user wishes to delete"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @return Returns a boolean that states whether the project is deleted successfully"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public boolean deleteItem(int projectNumber) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            jsonConverter.deleteProject(allProjects.get(projectNumber - 1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            this.allProjects.remove(projectNumber - 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } catch (IndexOutOfBoundsException | DukeException err) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    //@@author seanlimhx"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Method to get all project details in a suitable form for CLIView to print in a table form."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return ArrayList of details to be presented in each table, with each element as an ArrayList"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     *         containing each row in the table."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public ArrayList\u003cArrayList\u003cString\u003e\u003e getAllProjectsDetailsForTable() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e responseModel \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        for (int projNum \u003d 0; projNum \u003c allProjects.size(); projNum++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            ArrayList\u003cString\u003e toPrint \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            toPrint.add(\"Project \" + (projNum + 1) + \": \" + allProjects.get(projNum).getName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            toPrint.add(\"Members: \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            if (allProjects.get(projNum).getNumOfMembers() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                toPrint.add(\" --\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                for (int memberIndex \u003d 1; memberIndex \u003c\u003d allProjects.get(projNum).getNumOfMembers(); memberIndex++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    toPrint.add(\" \" + allProjects.get(projNum).getMemberList().getMember(memberIndex).getDetails());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                toPrint.add(\"\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            if (allProjects.get(projNum).getNumOfTasks() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                toPrint.add(\"Next Deadline: \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                toPrint.add(\" --\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                String[] detailsClosestDeadlineTask \u003d allProjects.get(projNum).getTaskList().getClosestDeadlineTask();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                toPrint.add(\"Next Deadline: \" + detailsClosestDeadlineTask[0]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                for (int i \u003d 1; i \u003c detailsClosestDeadlineTask.length; i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    toPrint.add(\" - \" + detailsClosestDeadlineTask[i]);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                toPrint.add(\"\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            toPrint.add(\"Overall Progress: \");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            if (allProjects.get(projNum).getNumOfTasks() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                toPrint.add(\" --\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                String[] detailsOverallProgress \u003d allProjects.get(projNum).getTaskList().getOverallProgress();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                for (String detail : detailsOverallProgress) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    toPrint.add(\" - \" + detail);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            responseModel.add(toPrint);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return responseModel;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    //@@author Lucria"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Method for getting the details about the currently managed Project for ProjectInputController."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param selectedProject : current Project that is being managed"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @return : Returns an ArrayList of String for printing in a user friendly format"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public ArrayList\u003cString\u003e getProjectDetailsForTable(Project selectedProject) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        ArrayList\u003cString\u003e responseModel \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        responseModel.add(\"Project \" + (allProjects.indexOf(selectedProject) + 1) + \": \" + selectedProject.getName());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        responseModel.add(\"Members: \");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (selectedProject.getNumOfMembers() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            responseModel.add(\" --\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            for (int memberIndex \u003d 1; memberIndex \u003c\u003d selectedProject.getNumOfMembers(); memberIndex++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                responseModel.add(\" \" + selectedProject.getMemberList().getMember(memberIndex).getDetails());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            responseModel.add(\"\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        responseModel.add(\"Tasks:\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (selectedProject.getNumOfTasks() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            responseModel.add(\" --\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            responseModel.add(\"Next Deadline: \");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            responseModel.add(\" --\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            for (int taskIndex \u003d 1; taskIndex \u003c\u003d selectedProject.getNumOfTasks(); taskIndex++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                responseModel.add(\" \" + taskIndex + \". \" + selectedProject.getTask(taskIndex).getDetails());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            responseModel.add(\"\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            String[] detailsClosestDeadlineTask \u003d selectedProject.getTaskList().getClosestDeadlineTask();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            responseModel.add(\"Next Deadline: \" + detailsClosestDeadlineTask[0]);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            for (int i \u003d 1; i \u003c detailsClosestDeadlineTask.length; i++) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                responseModel.add(\" - \" + detailsClosestDeadlineTask[i]);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            responseModel.add(\"\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        responseModel.add(\"Overall Progress: \");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (selectedProject.getNumOfTasks() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            responseModel.add(\" --\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            String[] detailsOverallProgress \u003d selectedProject.getTaskList().getOverallProgress();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            for (String detail : detailsOverallProgress) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                responseModel.add(\" - \" + detail);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return responseModel;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public HashMap\u003cInteger, Integer\u003e getAllTasksInCurrentMonth(Project project) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return project.getTaskList().getTasksWithinCurrentMonth();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 2,
      "seanlimhx": 45,
      "Lucria": 114,
      "Dkenobi": 1
    }
  },
  {
    "path": "src/main/java/util/ParserHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.validation.ValidityHelper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static util.constant.ConstantHelper.ALL_MARKER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static util.constant.ConstantHelper.ASSIGNEE_MARKER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static util.constant.ConstantHelper.BLANK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static util.constant.ConstantHelper.INDEX_NUMBER_MARKER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static util.constant.ConstantHelper.UNASSIGNEE_MARKER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class ParserHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private SortHelper sortHelper;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private ArrayList\u003cString\u003e errorMessages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ParserHelper() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.sortHelper \u003d new SortHelper();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.errorMessages \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    //@@author iamabhishek98"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Parses the string input to extract the name, phone number and email."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param input Contains the name, phone number and email."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return An array consisting of name in index 0, phone number in index 1 and email in index 2."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String[] parseMemberDetails(String input) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String[] memberDetails \u003d new String[5];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        memberDetails[0] \u003d \"--\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        memberDetails[1] \u003d \"--\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        memberDetails[2] \u003d \"--\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        memberDetails[3] \u003d \"0\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        memberDetails[4] \u003d \"member\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String[] newMemberDetails \u003d input.split(\"-\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e newMemberDetailsA \u003d new ArrayList\u003c\u003e(Arrays.asList(newMemberDetails));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        newMemberDetailsA.remove(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (String s : newMemberDetailsA) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (s.length() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            switch (s.charAt(0)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \u0027n\u0027:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                memberDetails[0] \u003d s.substring(1).trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \u0027i\u0027:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                memberDetails[1] \u003d s.substring(1).trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \u0027e\u0027:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                memberDetails[2] \u003d s.substring(1).trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \u0027x\u0027:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                memberDetails[3] \u003d s.substring(1).trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \u0027r\u0027:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                memberDetails[4] \u003d s.substring(1).trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return memberDetails;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Parses the string input to extract the name, priority, due date, credit and task state."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param input Contains the name, priority, due date, credit and task state."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return An ArrayList consisting of name in index 0, priority in index 1, due date in index 2,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *         credit in index 3, task state in index 4."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e parseTaskDetails(String input) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        errorMessages.clear();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e newTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String newTaskName \u003d \"--\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String newTaskPriority \u003d \"-1\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String newTaskDate \u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String newTaskCredit \u003d \"-1\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String newTaskState \u003d \"NONE\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String [] newTaskDetails \u003d input.split(\"-\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (newTaskDetails.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            errorMessages.add(\"Please input a complete flag! Examples for valid flags include \u0027-t\u0027, \u0027-p\u0027, \u0027-d\u0027, \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"\u0027-c\u0027 and \u0027-s\u0027. Refer to the user guide for more help!\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            ArrayList\u003cString\u003e newTaskDetailsA \u003d new ArrayList\u003c\u003e(Arrays.asList(newTaskDetails));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            newTaskDetailsA.remove(0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            for (String s : newTaskDetailsA) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                String trimmedString \u003d s.trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                if (trimmedString.length() \u003c 2) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    if (\"t\".equals(trimmedString) || \"p\".equals(trimmedString) || \"d\".equals(trimmedString)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                            || \"c\".equals(trimmedString) || \"s\".equals(trimmedString)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                        errorMessages.add(\"\u0027-\" + trimmedString + \"\u0027 is an empty flag!\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                        errorMessages.add(\"\u0027An invalid flag is used here: -\" + trimmedString);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                switch (trimmedString.substring(0, 2)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                case \"t \":"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    newTaskName \u003d trimmedString.substring(2);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                case \"p \":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    newTaskPriority \u003d trimmedString.substring(2);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                case \"d \":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    newTaskDate \u003d trimmedString.substring(2);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                case \"c \":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    newTaskCredit \u003d trimmedString.substring(2);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                case \"s \":"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    newTaskState \u003d trimmedString.substring(2);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    errorMessages.add(\"An invalid flag is used here: -\" + trimmedString);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        newTask.add(newTaskName);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        newTask.add(newTaskPriority);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        newTask.add(newTaskDate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        newTask.add(newTaskCredit);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        newTask.add(newTaskState);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Parses the string input to extract the name, and reminder date."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param input Contains the name, and reminder date"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return An ArrayList consisting of name in index 0,due date in index 1."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e parseReminderDetails(String input) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e newReminderInfo \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String newReminderName \u003d \"--\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String newReminderRemarks \u003d \"--\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String newReminderDate \u003d null;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String newReminderCategory \u003d \"DEFAULT\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String [] newReminderDetails \u003d input.split(\"-\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e newReminderInfoInput  \u003d  new ArrayList\u003c\u003e(Arrays.asList(newReminderDetails));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        newReminderInfoInput.remove(0); // Remove the first empty string in newReminderInfoInput"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (String s : newReminderInfoInput) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            switch (s.charAt(0)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \u0027n\u0027:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                newReminderName \u003d s.substring(1).trim();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \u0027r\u0027:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                newReminderRemarks \u003d s.substring(1).trim();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \u0027d\u0027:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                newReminderDate \u003d s.substring(1).trim();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case\u0027l\u0027:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                newReminderCategory \u003d s.substring(1).trim().toUpperCase();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        newReminderInfo.add(newReminderName);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        newReminderInfo.add(newReminderRemarks);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        newReminderInfo.add(newReminderDate);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        newReminderInfo.add(newReminderCategory);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return newReminderInfo;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Parse input to extract the index of the reminder specify by the user."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param input Contain the input from the user."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return index in integer."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public int parseDeleteReminder(String input) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        errorMessages.clear();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String [] deleteReminderDetails \u003d input.split(\" \");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ValidityHelper validityHelper \u003d new ValidityHelper();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (deleteReminderDetails.length \u003e 3 || !validityHelper.digitChecker(deleteReminderDetails[2])) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            errorMessages.add(\"Please input the correct command! Example, delete reminder REMINDER_INDEX\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return Integer.parseInt(deleteReminderDetails[2]);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Parse input to extract the index of the reminder specify by the user."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param input Contain the input from the user."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return index in integer."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public int parseEditReminder(String input) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        errorMessages.clear();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String [] editReminderDetails \u003d input.split(\"-\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String []  editReminderCommand \u003d editReminderDetails[0].split(\" \");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ValidityHelper validityHelper \u003d new ValidityHelper();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (editReminderCommand.length \u003e 3 || !validityHelper.digitChecker(editReminderCommand[2])) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            errorMessages.add(\"Please input the correct command! \""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"Example, edit reminder REMINDER_INDEX -n REMINDER_NAME\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return Integer.parseInt(editReminderCommand[2]);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Parses string input to extract information on marking/un-marking Reminder."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param input Contains the command of marking/un-marking reminder."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return An ArrayList String consisting of the status and indexes to be updated or null."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e parseCheckReminder(String input) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        errorMessages.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String [] checkReminderDetails \u003d input.split(\" \");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e newCheckReminderInfo \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String booleanString \u003d \"\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String indexString \u003d \"\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ValidityHelper validityHelper \u003d new ValidityHelper();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (checkReminderDetails.length \u003e 3 || !validityHelper.digitChecker(checkReminderDetails[2])) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            errorMessages.add(\"Please input the correct command! Example, mark reminder REMINDER_INDEX\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } else if (checkReminderDetails[0].equals(\"unmark\") \u0026\u0026 validityHelper.digitChecker(checkReminderDetails[2])) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            booleanString \u003d \"false\";"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            indexString \u003d checkReminderDetails[2];"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } else if (checkReminderDetails[0].equals(\"mark\") \u0026\u0026 validityHelper.digitChecker(checkReminderDetails[2])) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            booleanString \u003d \"true\";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            indexString \u003d checkReminderDetails[2];"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        newCheckReminderInfo.add(booleanString);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        newCheckReminderInfo.add(indexString);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return newCheckReminderInfo;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Parses string input to extract task requirements to be added and indexes of task requirements to be removed."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param input Contains the new task requirements and indexes of task requirements to be removed."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return An ArrayList consisting of indexes to be removed in index 0, new task requirements and error messages"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e parseTaskRequirementDetails(String input) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskRequirementDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskReqIndexesToBeRemoved \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskRequirementsToBeAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        errorMessages.clear();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String[] newTaskRequirementsArray \u003d input.split(\"-\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (newTaskRequirementsArray.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            errorMessages.add(\"Please input a complete flag! Examples for valid flags include \u0027-r\u0027 and \u0027-rm\u0027.\""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" Refer to the user guide for more help!\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            ArrayList\u003cString\u003e newTaskRequirementsArrayList \u003d new ArrayList\u003c\u003e(Arrays.asList(newTaskRequirementsArray));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            newTaskRequirementsArrayList.remove(0);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            for (String s : newTaskRequirementsArrayList) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                String trimmedString \u003d s.trim();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                if (trimmedString.length() \u003c\u003d 2) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    if (\"r\".equals(trimmedString) || \"rm\".equals(trimmedString)) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                        errorMessages.add(\"There is an empty flag \u0027-\" + trimmedString + \"\u0027\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                        errorMessages.add(\"\u0027-\" + trimmedString + \"\u0027 is an invalid flag\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                switch (trimmedString.split(\" \")[0]) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                case \"rm\":"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    String[] splitTrimmedString \u003d trimmedString.substring(3).split(\" \");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    taskReqIndexesToBeRemoved.addAll(Arrays.asList(splitTrimmedString));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                case \"r\":"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    taskRequirementsToBeAdded.add(trimmedString.substring(2));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    errorMessages.add(\"Invalid flag is used in this entry: -\" + trimmedString);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (taskReqIndexesToBeRemoved.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskRequirementDetails.add(\"--\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            StringBuilder taskReqIndexesToBeRemovedString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            for (String s1 : taskReqIndexesToBeRemoved) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                taskReqIndexesToBeRemovedString.append(s1);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                taskReqIndexesToBeRemovedString.append(\" \");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskRequirementDetails.add(taskReqIndexesToBeRemovedString.toString().trim());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        taskRequirementDetails.addAll(taskRequirementsToBeAdded);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return taskRequirementDetails;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    //@@author iamabhishek98"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Parses the criteria specified by the user to sort the list of tasks."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param tasksAndAssignedMembers HashMap containing tasks with assigned members."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param taskList A list of all tasks in the project."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param sortCriteria Criteria to sort the list of tasks"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return An ArrayList with String descriptions of task details sorted by the criteria specified by the user."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e parseSortTaskDetails("
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cString\u003e\u003e tasksAndAssignedMembers, ArrayList\u003cTask\u003e taskList,"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String sortCriteria, Project project) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (sortCriteria.length() \u003e\u003d 4) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String[] detailedCriteria \u003d sortCriteria.split(\"-\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            switch (detailedCriteria[0]) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \"/NAME\":"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                taskDetails \u003d this.sortHelper.sortTaskName(taskList);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \"/DATE\":"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                taskDetails \u003d this.sortHelper.sortTaskDueDate(taskList);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \"/PRIORITY\":"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                taskDetails \u003d this.sortHelper.sortTaskPriority(taskList);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \"/CREDIT\":"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                taskDetails \u003d this.sortHelper.sortTaskCredit(taskList);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \"/WHO\":"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                taskDetails \u003d this.sortHelper.sortTaskMember(tasksAndAssignedMembers, taskList,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    detailedCriteria[1], project);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case \"/KANBAN\":"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                taskDetails \u003d this.sortHelper.sortTaskState(taskList, detailedCriteria[1]);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    //@@author sinteary"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Parses input String to get valid task and member index numbers, as well as error messages"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * for invalid index numbers."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param input The assignment input from the user."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ArrayList\u003cArrayList\u003cInteger\u003e\u003e parseAssignmentParams(String input, Project project) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        errorMessages.clear();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String [] inputParts \u003d input.split(\"-\");"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String allTaskIndexes \u003d BLANK;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String allAssigneeIndexes \u003d BLANK;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String allUnassigneeIndexes \u003d BLANK;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (String commandPart : inputParts) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            String [] part \u003d commandPart.split(\" \");"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            if (part.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            switch (part[0]) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            case INDEX_NUMBER_MARKER:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                if (commandPart.length() \u003e\u003d 3) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    allTaskIndexes \u003d commandPart.substring(2).trim();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            case ASSIGNEE_MARKER:"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                if (commandPart.length() \u003e\u003d 4) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    allAssigneeIndexes \u003d commandPart.substring(3).trim();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            case UNASSIGNEE_MARKER:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                if (commandPart.length() \u003e\u003d 4) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    allUnassigneeIndexes \u003d commandPart.substring(3).trim();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cArrayList\u003cInteger\u003e\u003e assignmentParams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assignmentParams.add(parseTasksIndexes(allTaskIndexes, project.getNumOfTasks()));"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cInteger\u003e assignees \u003d parseMembersIndexes(allAssigneeIndexes, project.getNumOfMembers());"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cInteger\u003e unassignees \u003d parseMembersIndexes(allUnassigneeIndexes, project.getNumOfMembers());"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        checkForSameMemberIndexes(assignees, unassignees, project);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assignmentParams.add(assignees);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assignmentParams.add(unassignees);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return assignmentParams;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Parses a string containing member index numbers and returns only valid ones."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param input a string containing member index numbers."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param numberOfMembersInProject the total number of members in project."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return An ArrayList containing only valid member index numbers"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ArrayList\u003cInteger\u003e parseMembersIndexes(String input, int numberOfMembersInProject) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cInteger\u003e validMembers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        if (ALL_MARKER.equals(input)) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d numberOfMembersInProject; i++) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                validMembers.add(i);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return validMembers;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String[] inputParts \u003d input.split(\" \");"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (String index : inputParts) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            if (BLANK.equals(index)) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                Integer indexNumber \u003d Integer.parseInt(index);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                if (indexNumber \u003e 0 \u0026\u0026 indexNumber \u003c\u003d numberOfMembersInProject) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    validMembers.add(indexNumber);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    errorMessages.add(\"Member with index \" + index + \" does not exist.\");"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                errorMessages.add(\"Could not recognise member \" + index"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    + \", please ensure it is an integer.\");"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return validMembers;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns a list of valid task numbers."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param input List of task index numbers input by user."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param numberOfTasksInProject the total number of tasks in project."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return An ArrayList containing valid task index numbers to show assigned members."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ArrayList\u003cInteger\u003e parseTasksIndexes(String input, int numberOfTasksInProject) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cInteger\u003e tasksToView \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        if (ALL_MARKER.equals(input)) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d numberOfTasksInProject; i++) {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                tasksToView.add(i);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return tasksToView;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String[] inputParts \u003d input.split(\" \");"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (String index : inputParts) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            if (BLANK.equals(index)) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                Integer indexNumber \u003d Integer.parseInt(index);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                if (indexNumber \u003e 0 \u0026\u0026 indexNumber \u003c\u003d numberOfTasksInProject) {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    tasksToView.add(indexNumber);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    errorMessages.add(\"Task with index \" + index + \" does not exist.\");"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                errorMessages.add(\"Could not recognise task \" + index"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    + \", please ensure it is an integer.\");"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return tasksToView;"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private void checkForSameMemberIndexes(ArrayList\u003cInteger\u003e assignees, ArrayList\u003cInteger\u003e unassignees,"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Project project) {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cInteger\u003e repeated \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (Integer index: assignees) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            if (unassignees.contains(index)) {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                repeated.add(index);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                errorMessages.add(\"Cannot assign and unassign task to member \" + index + \" (\""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    + project.getMember(index).getName() + \") at the same time\");"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (Integer index: repeated) {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            assignees.remove(index);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            unassignees.remove(index);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ArrayList\u003cString\u003e getErrorMessages() {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.errorMessages;"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 330,
      "sinteary": 149,
      "seanlimhx": 1,
      "Lucria": 1
    }
  },
  {
    "path": "src/main/java/util/SortHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.IMember;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class SortHelper {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    //@@author iamabhishek98"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Sorts the list of tasks by the task name in alphabetical order."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return The list of tasks sorted by the task name."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e sortTaskName(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        taskList.sort(Comparator.comparing(Task::getTaskName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        int taskIndex \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskDetails.add(taskIndex + \". \" + task.getDetails());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskIndex++;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    //@@author iamabhishek98"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Sorts the list of tasks by the task due date in descending order."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return The list of tasks sorted by the task due date."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e sortTaskDueDate(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cTask\u003e sortedTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (task.getDueDate() !\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                sortedTaskList.add(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        sortedTaskList.sort((task1, task2) -\u003e task2.getDueDate().compareTo(task1.getDueDate()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Collections.reverse(sortedTaskList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        int taskIndex \u003d 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (Task task : sortedTaskList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskDetails.add(taskIndex + \". \" + task.getDetails());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskIndex++;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    //@@author iamabhishek98"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Sorts the list of tasks by the task priority in descending order."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return The list of tasks sorted by the task priority."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e sortTaskPriority(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        taskList.sort((task1, task2) -\u003e task1.getTaskPriority() - task2.getTaskPriority());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        int taskIndex \u003d 1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskDetails.add(taskIndex + \". \" + task.getDetails());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskIndex++;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    //@@author iamabhishek98"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Sorts the list of tasks by the task credit in descending order."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return The list of tasks sorted by the task credit."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e sortTaskCredit(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        taskList.sort((task1, task2) -\u003e task2.getTaskCredit() - task1.getTaskCredit());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        int taskIndex \u003d 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskDetails.add(taskIndex + \". \" + task.getDetails());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskIndex++;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    //@@author iamabhishek98"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Sorts the list of tasks by the name of the members assigned to the tasks in alphabetical order."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param tasksAndAssignedMembers HashMap containing tasks with assigned members."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return The list of tasks sorted by the name of the members assigned to the tasks in alphabetical order."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e sortTaskMember(HashMap\u003cString, ArrayList\u003cString\u003e\u003e tasksAndAssignedMembers,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                                            ArrayList\u003cTask\u003e taskList, String memberName, Project project) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cTask\u003e allAssignedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        // to be made more efficient"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (Task task: taskList) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            for (String memberID : tasksAndAssignedMembers.get(task.getTaskID())) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                IMember member \u003d project.getMemberFromID(memberID);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                if (member.getName().equals(memberName)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    allAssignedTasks.add(task);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.sortTaskName(allAssignedTasks);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    //@@author iamabhishek98"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Filters the list of tasks by the task state."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param taskList The List of tasks."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param state The task state required to filter the task list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return The list of tasks filtered by the task state."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ArrayList\u003cString\u003e sortTaskState(ArrayList\u003cTask\u003e taskList, String state) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        int taskIndex \u003d 1;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (state.equals(task.getTaskState().toString())) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                taskDetails.add(taskIndex + \". \" + task.getDetails());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskIndex++;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 124,
      "sinteary": 4
    }
  },
  {
    "path": "src/main/java/util/constant/ConstantHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package util.constant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class ConstantHelper {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public static final String[]  HELLO_MESSAGE \u003d {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        \"  :::.    :::::::..     .,-:::::   ::   .::::::::-.   ...    ::: :::  .   .,:::::: \","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        \"  ;;`;;   ;;;;``;;;;  ,;;;\u0027````\u0027  ,;;   ;;,;;,   `\u0027;, ;;     ;;; ;;; .;;,.;;;;\u0027\u0027\u0027\u0027 \","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        \" ,[[ \u0027[[,  [[[,/[[[\u0027  [[[        ,[[[,,,[[[`[[     [[[[\u0027     [[[ [[[[[/\u0027   [[cccc   \","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        \"c$$$cc$$$c $$$$$$c    $$$        \\\"$$$\\\"\\\"\\\"$$$ $$,    $$$$      $$$_$$$$,     $$\\\"\\\"\\\"\\\"  \","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        \" 888   888,888b \\\"88bo,`88bo,__,o, 888   \\\"88o888_,o8P\u002788    .d888\\\"888\\\"88o,  888oo,__\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        \" YMM   \\\"\\\"` MMMM   \\\"W\\\"   \\\"YUMMMMMP\\\"MMM    YMMMMMMP\\\"`   \\\"YmmMMMM\\\"\\\" MMM \\\"MMP\\\" \\\"\\\"\\\"\\\"YUMMM\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        \"\\t Welcome to ArchDuke Project Manager!\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        \"\\t Enter \u0027help\u0027 for the list of commands.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    };"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public static final String HORILINE \u003d \"\\t+----------------------------------------------------------------------+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public static final String INDENTATION \u003d \"\\t\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public static final String BORDER_CORNER \u003d \"+\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public static final char HORI_BORDER_UNIT \u003d \u0027-\u0027;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public static final String VERTI_BORDER_UNIT \u003d \"|\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public static final int DEFAULT_HORI_BORDER_LENGTH \u003d 70;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public static final int DEFAULT_HORI_BORDER_LENGTH_70_FOR_TEST \u003d 70;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public static final String SPACING \u003d \"       \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public static final int LONGEST_WORD_LIMIT_BEFORE_BREAKING_WITH_HYPHEN \u003d 25;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public static final String INDEX_NUMBER_MARKER \u003d \"i\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public static final String ASSIGNEE_MARKER \u003d \"to\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public static final String UNASSIGNEE_MARKER \u003d \"rm\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public static final String ALL_MARKER \u003d \"all\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public static final String BLANK \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public static final String BLANK_MEMBER_DETAILS \u003d \"--\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public static final String NAME_FLAG \u003d \"-n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public static final String COMMAND_ASSIGN_TASK \u003d \"assign task \";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public static final String COMMAND_VIEW_ASSIGNMENTS \u003d \"view assignments \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public static final String COMMAND_VIEW_ASSIGNMENTS_MEMBER_FLAG \u003d \"-m\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public static final String COMMAND_VIEW_ASSIGNMENTS_TASK_FLAG \u003d \"-t\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public static final int VALID_VIEW_ASSIGNMENT_LENGTH \u003d 20;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 36,
      "seanlimhx": 12,
      "Lucria": 8,
      "Dkenobi": 4
    }
  },
  {
    "path": "src/main/java/util/date/DateTimeHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package util.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.log.ArchDukeLogger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.TimeZone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "//@@author DKenobi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class DateTimeHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private Calendar calender \u003d Calendar.getInstance(TimeZone.getTimeZone(\"GMT + 8:00\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * This method takes in the date in String and return is as a Date object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param date String of the date"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @return a Date object for consumption."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @throws ParseException throws when there is an error with parsing the date."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public Date formatDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        formatter.setLenient(false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return formatter.parse(date);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * This method format the Date object and return as a String date."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param date takes in the Date object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @return a date String format for consumption."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String formatDateForDisplay(Date date) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        formatter.setLenient(false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return formatter.format(date);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * This method calculate the difference from the current date to the task set date."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param taskDate The deadline of the task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @return the remaining/Overdue day(s) of the days."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String getDifferenceDays(Date taskDate) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        DateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        formatter.setLenient(false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            currentDate \u003d formatter.parse(formatter.format(currentDate));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            ArchDukeLogger.logDebug(DateTimeHelper.class.getName(), e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        long diff \u003d currentDate.getTime() - taskDate.getTime();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        long totalDays \u003d TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        if (totalDays \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return \" (Due: Today)\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else if (totalDays \u003c 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return \" (Remaining: \" + Math.abs(totalDays) + \" Days)\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return \" (Overdue: \" + totalDays + \" Days)\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    //@@author Lucria"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Method that will return the current year."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @return : Returns a string representing the current year."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String getCurrentYear() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return Integer.toString(this.calender.get(Calendar.YEAR));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Method that returns the current month."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @return : Returns a string representing the current month."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String getCurrentMonth() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return Integer.toString(this.calender.get(Calendar.MONTH) + 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Method that returns the current date."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @return : Returns a string representing the current date."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String getCurrentDate() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return Integer.toString(this.calender.get(Calendar.DAY_OF_MONTH));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Method that gets the day for the first date in a month."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @return : Returns an integer that represents the first day in the start of a month."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public int getDayAtStartOfMonth() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        cal.set(Calendar.DAY_OF_MONTH, 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return cal.get(Calendar.DAY_OF_WEEK);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Parses a Date object in order to get the month from it."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param date : Desired date object from which we wish to get the month."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @return : Returns the month of the Date object as a String."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String getMonthFromDateObject(Date date) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        cal.setTime(date);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return Integer.toString(cal.get(Calendar.MONTH) + 1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Method that gets the day from a Date object."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param date : Desired date object from which we wish to get the day."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @return : Returns the day of a Date object as a String"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public int getDayFromDateObject(Date date) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        cal.setTime(date);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return cal.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 60,
      "Dkenobi": 62
    }
  },
  {
    "path": "src/main/java/util/factories/IArchDukeFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package util.factories;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public interface IArchDukeFactory\u003cT\u003e {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    T create(String input);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 5
    }
  },
  {
    "path": "src/main/java/util/factories/MemberFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package util.factories;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static util.constant.ConstantHelper.BLANK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static util.constant.ConstantHelper.BLANK_MEMBER_DETAILS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.IMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.NullMember;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import util.ParserHelper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.validation.ValidityHelper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class MemberFactory implements IArchDukeFactory\u003cIMember\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private ParserHelper parserHelper;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private ValidityHelper validityHelper;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public MemberFactory() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.parserHelper \u003d new ParserHelper();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.validityHelper \u003d new ValidityHelper();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Method to create a new member."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param input Input containing details of member to be added (name, phone, email)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @return Member with the relevant details. Index number is set later when adding to list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public IMember create(String input) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String[] memberDetails \u003d this.parserHelper.parseMemberDetails(input);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        boolean isNameCreated \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String name \u003d memberDetails[0];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        if (!(BLANK_MEMBER_DETAILS).equals(name) \u0026\u0026 !(BLANK).equals(name)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            isNameCreated \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String phone \u003d memberDetails[1];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String email \u003d memberDetails[2];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        int index \u003d Integer.parseInt(memberDetails[3]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String role \u003d memberDetails[4];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String errorMessage \u003d validityHelper.emailPhoneErrorMessage(email, phone);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (!\"\".equals(errorMessage)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return new NullMember(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } else if (!isNameCreated) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return new NullMember(\"Name cannot be empty! Please follow the add command format in user \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                  + \"guide! \\\"add member -n NAME\\\" is the minimum requirement for add member command\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return new Member(name, phone, email, index, role);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 4,
      "iamabhishek98": 13,
      "Lucria": 29
    }
  },
  {
    "path": "src/main/java/util/factories/ProjectFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package util.factories;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.project.IProject;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.project.NullProject;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "//@@author Lucria"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class ProjectFactory implements IArchDukeFactory\u003cIProject\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Creation of an IProject object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Project may be a NullProject due to errors in input. Validation of project will be handled by Repository"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param input : User input"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @return Method will return an IProject object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public IProject create(String input) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (input.length() \u003c 8) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return new NullProject();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String projectName \u003d input.substring(7);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return new Project(projectName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 23
    }
  },
  {
    "path": "src/main/java/util/factories/ReminderFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package util.factories;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.reminder.IReminder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.reminder.NullReminder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.reminder.Reminder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.ParserHelper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.date.DateTimeHelper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class ReminderFactory {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private ParserHelper parserHelper;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private DateTimeHelper dateTimeHelper;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public ReminderFactory() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.parserHelper \u003d new ParserHelper();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Method to create a new reminder and put it into the reminder list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param input Input containing the information about the reminder."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @return Reminder as an object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public IReminder createReminder(String input) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        if (!input.contains(\"-n\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            return new NullReminder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArrayList\u003cString\u003e newReminderDetails \u003d parserHelper.parseReminderDetails(input);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String newReminderName \u003d newReminderDetails.get(0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String newReminderRemarks \u003d newReminderDetails.get(1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Date newReminderDate \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        if (newReminderDetails.get(2) !\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            newReminderDate \u003d dateTimeHelper.formatDate(newReminderDetails.get(2));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String newReminderCategory \u003d newReminderDetails.get(3);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return new Reminder(newReminderName, newReminderRemarks, newReminderDate,newReminderCategory);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 44
    }
  },
  {
    "path": "src/main/java/util/factories/TaskFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package util.factories;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.ITask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.NullTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import models.task.TaskState;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import util.ParserHelper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.date.DateTimeHelper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class TaskFactory implements IArchDukeFactory\u003cITask\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private ParserHelper parserHelper;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private DateTimeHelper dateTimeHelper;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public TaskFactory() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        parserHelper \u003d new ParserHelper();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Method to create a new task and put it into a list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param input Input containing the information about the task and priority."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @return Task as an object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public ITask create(String input) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        if (!input.contains(\"-t\") || !input.contains(\"-p\") || !input.contains(\"-c\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return new NullTask();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String [] taskDetails \u003d input.split(\"-r\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (taskDetails.length \u003e 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskRequirements \u003d parseTaskRequirements(taskDetails,1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e newTaskDetails \u003d parserHelper.parseTaskDetails(taskDetails[0]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Date newTaskDate \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (newTaskDetails.get(2) !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                newTaskDate \u003d dateTimeHelper.formatDate(newTaskDetails.get(2));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            } catch (ParseException err) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                return new NullTask();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        int newTaskPriority \u003d Integer.parseInt(newTaskDetails.get(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        int newTaskCredit \u003d Integer.parseInt(newTaskDetails.get(3));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (newTaskCredit \u003c 0 || newTaskCredit \u003e 100 || newTaskPriority \u003c 1 || newTaskPriority \u003e 5) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            return new NullTask();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        TaskState newTaskState \u003d TaskState.OPEN;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (!(\"NONE\".equals(newTaskDetails.get(4)))) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            newTaskState \u003d convertStringToTaskState(newTaskDetails.get(4));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String newTaskName \u003d newTaskDetails.get(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return new Task(newTaskName, newTaskPriority, newTaskDate, newTaskCredit, newTaskState, taskRequirements);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Creates ArrayList of Strings containing task requirements."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param taskDetails  Details of new task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param startIndexOfTaskRequirements index from which the content in taskDetails will be task requirements."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return ArrayList of type String containing task requirements."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private ArrayList\u003cString\u003e parseTaskRequirements(String[] taskDetails, int startIndexOfTaskRequirements) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        ArrayList\u003cString\u003e taskRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        for (int i \u003d startIndexOfTaskRequirements; i \u003c taskDetails.length; i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            taskRequirements.add(taskDetails[i].trim());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return taskRequirements;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Converts string input for state into enum TaskState object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param inputState String input of state."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return enum TaskState object."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private TaskState convertStringToTaskState(String inputState) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String inputStateLowerCase \u003d inputState.toLowerCase();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        switch (inputStateLowerCase) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            return TaskState.DONE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            return TaskState.TODO;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        case \"doing\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            return TaskState.DOING;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            return TaskState.OPEN;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 21,
      "seanlimhx": 36,
      "Lucria": 22,
      "Dkenobi": 14
    }
  },
  {
    "path": "src/main/java/util/json/JsonConverter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package util.json;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import controllers.ConsoleInputController;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.log.ArchDukeLogger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class JsonConverter {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String userDirectory \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Method that is responsible for saving Projects Data by using GSON library to convert to a human editable JSON"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void saveProject(Project project) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Gson gson \u003d new GsonBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                .enableComplexMapKeySerialization()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                .setPrettyPrinting()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                .create();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            ArchDukeLogger.logDebug(JsonConverter.class.getName(), \"Saving to file.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(userDirectory + \"/\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                                    + project.getName() + \".json\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            gson.toJson(project, fileWriter);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            fileWriter.flush();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            ArchDukeLogger.logDebug(JsonConverter.class.getName(), \"File saved.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } catch (IOException err) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            ArchDukeLogger.logError(JsonConverter.class.getName(), \"Save file is not found or not created\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Method to delete the relevant json of original Project when user wishes to delete a project."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param project : selected Project to be deleted"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @throws DukeException : Exception thrown when JSON of project cannot be found"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public void deleteProject(Project project) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String selectedProjectJson \u003d userDirectory + \"/\" + project.getName() + \".json\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        File file \u003d new File(selectedProjectJson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        if (!file.delete()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            throw new DukeException(\"JSON of project not found\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Method responsible for loading Projects Data from hard coded directory where savedProjects.json file is located"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public ArrayList\u003cProject\u003e loadAllProjectsData() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        ArrayList\u003cProject\u003e allProjects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        File directory \u003d new File(userDirectory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        File[] allProjectJson \u003d directory.listFiles((file, name) -\u003e name.endsWith(\".json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        for (File projectJson : allProjectJson) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            try (FileReader fileReader \u003d new FileReader(projectJson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                ArchDukeLogger.logDebug(ConsoleInputController.class.getName(), \"Loading saved file.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                Project newProject \u003d gson.fromJson(fileReader, new TypeToken\u003cProject\u003e(){}.getType());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                allProjects.add(newProject);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                ArchDukeLogger.logDebug(ConsoleInputController.class.getName(), \"Saved file loaded.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            } catch (IOException err) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                ArchDukeLogger.logError(ConsoleInputController.class.getName(), \"Saved file not loaded\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                return allProjects;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return allProjects;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 66,
      "Dkenobi": 10
    }
  },
  {
    "path": "src/main/java/util/log/ArchDukeLogger.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package util.log;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import org.apache.logging.log4j.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import org.apache.logging.log4j.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class ArchDukeLogger {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private static Logger logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public static void logDebug(String className, String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        logger \u003d LogManager.getLogger(className);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        logger.debug(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public static void logInfo(String className, String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        logger \u003d LogManager.getLogger(className);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        logger.info(message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public static void logError(String className, String message) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        logger \u003d LogManager.getLogger(className);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        logger.error(message);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 23
    }
  },
  {
    "path": "src/main/java/util/uiformatter/AssignmentViewHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package util.uiformatter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static util.constant.ConstantHelper.COMMAND_VIEW_ASSIGNMENTS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static util.constant.ConstantHelper.COMMAND_VIEW_ASSIGNMENTS_MEMBER_FLAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static util.constant.ConstantHelper.COMMAND_VIEW_ASSIGNMENTS_TASK_FLAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static util.constant.ConstantHelper.DEFAULT_HORI_BORDER_LENGTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static util.constant.ConstantHelper.VALID_VIEW_ASSIGNMENT_LENGTH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import controllers.ProjectInputController;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.IMember;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.ITask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import util.ParserHelper;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import util.log.ArchDukeLogger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": "//@@author sinteary"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sinteary"
        },
        "content": "public class AssignmentViewHelper {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private static ViewHelper viewHelper \u003d new ViewHelper();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private ParserHelper parserHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Class that assists with retrieving and formatting information about task assignments in a project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public AssignmentViewHelper() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.parserHelper \u003d new ParserHelper();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Handles the user input and returns the necessary output."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param projectCommand The full user input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param projectToManage The project being managed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return An array of Strings containing requested information about task assignments."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public String[] viewAssignments(String projectCommand, Project projectToManage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        if (projectCommand.length() \u003c\u003d VALID_VIEW_ASSIGNMENT_LENGTH) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return (new String[] {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                \"Please input the parameters to view assignments:\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                \"**\\t-m for viewing by member, -t for viewing by task.\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                \"**\\t\\\"all\\\" to view all assignments + or enter selected task/member index numbers.\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                \"You may refer to the user guide or enter \\\"help\\\" for the list of possible commands.\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            });"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String input \u003d projectCommand.substring(COMMAND_VIEW_ASSIGNMENTS.length());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        if (COMMAND_VIEW_ASSIGNMENTS_MEMBER_FLAG.equals(input.substring(0,2))) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return viewMembersAssignments(projectToManage, projectCommand.substring(VALID_VIEW_ASSIGNMENT_LENGTH));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        } else if (COMMAND_VIEW_ASSIGNMENTS_TASK_FLAG.equals(input.substring(0,2))) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return viewTasksAssignments(projectToManage, projectCommand.substring(VALID_VIEW_ASSIGNMENT_LENGTH));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return (new String[]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                {\"Could not understand your command! Please use:\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    \"**\\t-m for viewing by member, -t for viewing by task.\",});"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns a list of members\u0027 individual list of tasks."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param projectToManage the project being managed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param projectCommand The command by the user containing index numbers of the members to view."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private String[] viewMembersAssignments(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArchDukeLogger.logDebug(ProjectInputController.class.getName(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            \"[projectViewMembersAssignments] User input: \u0027\" + projectCommand + \"\u0027\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cInteger\u003e validMembers \u003d parserHelper.parseMembersIndexes(projectCommand,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            projectToManage.getNumOfMembers());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        if (!parserHelper.getErrorMessages().isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return parserHelper.getErrorMessages().toArray(new String[0]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return getMemberOutput(validMembers, projectToManage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns a list of tasks and the members assigned to them."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param projectToManage The project to manage."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param projectCommand The user input."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private String[] viewTasksAssignments(Project projectToManage, String projectCommand) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArchDukeLogger.logDebug(ProjectInputController.class.getName(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            \"[projectViewTasksAssignments] User input: \u0027\" + projectCommand + \"\u0027\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cInteger\u003e validTasks \u003d parserHelper.parseTasksIndexes(projectCommand,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            projectToManage.getNumOfTasks());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        if (!parserHelper.getErrorMessages().isEmpty()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return parserHelper.getErrorMessages().toArray(new String[0]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return getTaskOutput(validTasks, projectToManage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns output to show viewer the task assignments of members."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param membersToView List of valid member index numbers."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param project THe project being managed."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return An array containing information requested by the user."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public static String[] getMemberOutput(ArrayList\u003cInteger\u003e membersToView,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Project project) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e totalOutputToPrint \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cString\u003e\u003e memberAndIndividualTasks \u003d project.getMembersIndividualTaskList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        if (memberAndIndividualTasks.keySet().isEmpty()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            ArrayList\u003cString\u003e outputToPrint \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            outputToPrint.add(\"No members in project yet.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            outputToPrint.add(\"Please add members and assign them tasks before using this command!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return outputToPrint.toArray(new String[0]);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (Integer index : membersToView) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            ArrayList\u003cString\u003e outputToPrint \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            IMember member \u003d project.getMember(index);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            outputToPrint.add(member.getName());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            if (memberAndIndividualTasks.get(member.getMemberID()).size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                outputToPrint.add(\"No tasks assigned yet.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                int currentNumber \u003d 1;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                for (String taskID : memberAndIndividualTasks.get(member.getMemberID())) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    ITask task \u003d project.getTaskFromID(taskID);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    outputToPrint.add(currentNumber + \". \" + task.getDetailsForAssignmentTable());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    outputToPrint.add(\"\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    currentNumber++;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                outputToPrint.remove(outputToPrint.lastIndexOf(\"\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            totalOutputToPrint.add(outputToPrint);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return viewHelper.consolePrintMultipleTables(totalOutputToPrint, DEFAULT_HORI_BORDER_LENGTH, 2,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                \"Here are each member\u0027s tasks:\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns output to show viewer the task assignments of members."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param tasksToView List of valid task index numbers."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param project Project to be managed."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return An Array containing information requested by the user."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public static String[] getTaskOutput(ArrayList\u003cInteger\u003e tasksToView, Project project) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cString\u003e\u003e tasksAndAssignedMembers \u003d project.getTasksAndAssignedMembers();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        if (tasksAndAssignedMembers.keySet().isEmpty()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            ArrayList\u003cString\u003e outputToPrint \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            outputToPrint.add(\"No tasks in project yet.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            outputToPrint.add(\"Please add tasks and assign them to members before using this command!\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            return outputToPrint.toArray(new String[0]);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e totalOutputToPrint \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (Integer index : tasksToView) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            Task task \u003d project.getTask(index);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            ArrayList\u003cString\u003e outputToPrint \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            outputToPrint.add(task.getDetailsForAssignmentTable());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            if (tasksAndAssignedMembers.get(task.getTaskID()).size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                outputToPrint.add(\"No members assigned yet.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                int currentNumber \u003d 1;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                for (String memberID : tasksAndAssignedMembers.get(task.getTaskID())) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    IMember member \u003d project.getMemberFromID(memberID);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    outputToPrint.add(currentNumber + \". \" + member.getName());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    currentNumber++;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            totalOutputToPrint.add(outputToPrint);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return viewHelper.consolePrintMultipleTables(totalOutputToPrint, DEFAULT_HORI_BORDER_LENGTH, 2,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                \"Here are the members assigned to each task:\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 159,
      "iamabhishek98": 2,
      "seanlimhx": 1,
      "Lucria": 1
    }
  },
  {
    "path": "src/main/java/util/uiformatter/CommandHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package util.uiformatter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "//@@author seanlimhx"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "public class CommandHelper {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Get list of commands to be printed to user at Console stage."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return ArrayList of Strings containing information of commands at Console stage."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public ArrayList\u003cString\u003e getCommandsForConsole() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e helpList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"List of commands available:\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\" - list\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"Displays all existing projects.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\" - create PROJECT_NAME\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"Creates a project with the specified name.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\" - delete PROJECT_INDEX\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"Deletes specified project.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\" - manage PROJECT_INDEX\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"Selects the specified project to manage.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\" - bye\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"Saves your data and exits ArchDuke.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\" - help\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"Provides a list of all the commands available.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return helpList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Get list of commands to be printed to user at Project stage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return ArrayList of Strings containing information of commands at Project 4stage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public ArrayList\u003cString\u003e getCommandsForProject() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e helpList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"List of commands available:\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\" - view members\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\" - add member -n NAME [-i PHONE_NUMBER] [-e EMAIL_ADDRESS] [-r ROLE]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\" - edit member INDEX [-n NAME] [-i PHONE_NUMBER] [-e EMAIL_ADDRESS]\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\" - role INDEX -n ROLE_NAME\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\" - delete member INDEX\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\" - view tasks [/MODIFIER]\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\" - add task -t TASK_NAME -p TASK_PRIORITY -c TASK_CREDIT [-d TASK_DUEDATE-(dd/mm/yyyy)] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                + \"[-s STATE] [-r TASK_REQUIREMENT1] [-r TASK_REQUIREMENT2]\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\" - edit task TASK_INDEX [-t TASK_NAME] [-p TASK_PRIORITY] [-d TASK_DUEDATE] [-c TASK_CREDIT] \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                + \"[-s STATE]\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\" - delete task TASK_INDEX\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\" - view task requirements TASK_INDEX\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\" - edit task requirements TASK_INDEX [-r TASK_REQUIREMENT] \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                + \"[-rm TASK_REQUIREMENT_INDEXES_TO_BE_REMOVED]\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\" - view assignments /MODIFIER\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\" - assign task -i TASK_INDEX -to [MEMBER1_INDEX] [MEMBER2_INDEX] -rm [MEMBER3_INDEX]\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\" - view reminder [-l LIST_NAME]\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\" - add reminder -n reminder_NAME [-d TASK_DUEDATE-(dd/mm/yyyy) -l REMINDER_LIST_NAME]\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\" - edit reminder INDEX_NUMBER -n REMINDER_NAME [-d REMINDER_DUEDATE-(dd/mm/yyyy) \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                + \"-l REMINDER_LIST_NAME]\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\" - delete reminder INDEX_NUMBER\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\" - view credits\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\" - view\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\" - exit\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\"\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        helpList.add(\" - bye\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return helpList;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlimhx": 89,
      "Lucria": 1
    }
  },
  {
    "path": "src/main/java/util/uiformatter/ViewHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package util.uiformatter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.date.DateTimeHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import static util.constant.ConstantHelper.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "//@@author seanlimhx"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "public class ViewHelper {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Method to print a table containing multiple tables within itself."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param toPrintAll ArrayList with each element being an ArrayList containing details for a table."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param tableWidth Width of the table."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param numOfTableColumns Number of columns of tables."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param overallTitle Header for the overall table."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return String array containing the entire table content to be printed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public String[] consolePrintMultipleTables(ArrayList\u003cArrayList\u003cString\u003e\u003e toPrintAll, int tableWidth,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                                               int numOfTableColumns, String overallTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e columnsOfTableContent \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        for (int i \u003d 0; i \u003c numOfTableColumns; i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            columnsOfTableContent.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        // Each element in columnsOfTableContent is an ArrayList containing content for that column of tables"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        int individualTableWidth \u003d ((tableWidth - (numOfTableColumns + 1)) / numOfTableColumns) - 2;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        while (toPrintAll.size() !\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            for (int i \u003d 0; i \u003c numOfTableColumns; i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                if (toPrintAll.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                ArrayList\u003cString\u003e tableToBePrinted \u003d toPrintAll.get(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                String[] individualTableContent \u003d consolePrintTable(tableToBePrinted, individualTableWidth);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                int columnToBeAdded \u003d findColumnWithMinNumOfRows(columnsOfTableContent);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                columnsOfTableContent.get(columnToBeAdded).addAll(Arrays.asList(individualTableContent));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                toPrintAll.remove(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        int maxNumOfRows \u003d findMaxNumOfRows(columnsOfTableContent);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        // can possibly refactor into new method addRemainingSpacesToShorterColumns()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        for (int i \u003d 0; i \u003c numOfTableColumns; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            while (columnsOfTableContent.get(i).size() !\u003d maxNumOfRows) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                columnsOfTableContent.get(i).add(getRemainingSpaces(individualTableWidth + 2));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e overallTableContent \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        overallTableContent.add(overallTitle);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        for (int i \u003d 0; i \u003c maxNumOfRows; i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            StringBuilder line \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            for (ArrayList\u003cString\u003e strings : columnsOfTableContent) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                line.append(\" \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                line.append(strings.get(i));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            line.append(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            overallTableContent.add(line.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return consolePrintTable(overallTableContent, tableWidth);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private int findMaxNumOfRows(ArrayList\u003cArrayList\u003cString\u003e\u003e columnsOfTableContent) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        int maxNumOfRows \u003d 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        for (ArrayList\u003cString\u003e strings : columnsOfTableContent) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            if (strings.size() \u003e maxNumOfRows) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                maxNumOfRows \u003d strings.size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return maxNumOfRows;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private int findColumnWithMinNumOfRows(ArrayList\u003cArrayList\u003cString\u003e\u003e columnsOfTableContent) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        int minNumOfRows \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        int indexOfColumnWithMinNumOfRows \u003d -1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        for (int i \u003d 0; i \u003c columnsOfTableContent.size(); i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            if (columnsOfTableContent.get(i).size() \u003c minNumOfRows) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                minNumOfRows \u003d columnsOfTableContent.get(i).size();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                indexOfColumnWithMinNumOfRows \u003d i;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return indexOfColumnWithMinNumOfRows;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Returns a String array that contains input in table form."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param toPrintAll ArrayList with each element fitting into one table, and each element consists of an"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     *                   ArrayList of Strings containing the lines to be printed in a table"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param tableWidth Desired width of the table."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return A String array that contains input in table form."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public String[] consolePrintTable(ArrayList\u003cString\u003e toPrintAll, int tableWidth) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e tableContent \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        tableContent.add(consolePrintTableHoriBorder(tableWidth));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        boolean hasPrintedTableHeader \u003d false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        for (String s : toPrintAll) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            if (s.length() \u003c\u003d tableWidth) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                String line \u003d VERTI_BORDER_UNIT + s"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        + getRemainingSpaces(tableWidth - s.length())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        + VERTI_BORDER_UNIT;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                tableContent.add(line);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                String[] splitStrings \u003d getArrayOfSplitStrings(s, tableWidth);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                for (String s1 : splitStrings) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    String line \u003d VERTI_BORDER_UNIT + s1"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                            + getRemainingSpaces(tableWidth - s1.length())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                            + VERTI_BORDER_UNIT;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    tableContent.add(line);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            if (!hasPrintedTableHeader) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                tableContent.add(consolePrintTableHoriBorder(tableWidth));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                hasPrintedTableHeader \u003d true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        tableContent.add(consolePrintTableHoriBorder(tableWidth));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return tableContent.toArray(new String[0]);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Splits a long String into an array of smaller Strings to fit the table display."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * indexOfStringSplitStart refers to the index of the first char of the split string."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * indexOfStringSplitEnd refers to the index after the index of the last char of the split string."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param toPrint String to be printed in table form."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param tableWidth Width of table."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return array of Strings to be printed line by line to fit the table width requirement."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public String[] getArrayOfSplitStrings(String toPrint, int tableWidth) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e splitStrings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        int indexOfStringSplitStart \u003d 0;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        int indexOfStringSplitEnd \u003d tableWidth;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        boolean isLastLine \u003d false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        while (!isLastLine) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            if (toPrint.substring(indexOfStringSplitStart, indexOfStringSplitEnd).lastIndexOf(\" \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    \u003e (tableWidth - LONGEST_WORD_LIMIT_BEFORE_BREAKING_WITH_HYPHEN)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                while (toPrint.charAt(indexOfStringSplitEnd - 1) !\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    indexOfStringSplitEnd--;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                splitStrings.add(toPrint.substring(indexOfStringSplitStart, indexOfStringSplitEnd));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                indexOfStringSplitStart \u003d indexOfStringSplitEnd;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                indexOfStringSplitEnd +\u003d tableWidth;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                //if a single word without space is longer than tableWidth"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                while (toPrint.charAt(indexOfStringSplitEnd - 1) !\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    indexOfStringSplitEnd++;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    if (indexOfStringSplitEnd \u003d\u003d toPrint.length()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                int numOfLines \u003d (indexOfStringSplitEnd - indexOfStringSplitStart) / (tableWidth - 1);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                for (int i \u003d 1; i \u003c\u003d numOfLines; i++) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    String wordSegment \u003d toPrint.substring(indexOfStringSplitStart,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                            indexOfStringSplitStart + tableWidth - 1) + \"-\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    splitStrings.add(wordSegment);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    indexOfStringSplitStart +\u003d (tableWidth - 1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                indexOfStringSplitEnd \u003d indexOfStringSplitStart + tableWidth;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            if (indexOfStringSplitEnd \u003e\u003d toPrint.length()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                splitStrings.add(toPrint.substring(indexOfStringSplitStart));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                isLastLine \u003d true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return splitStrings.toArray(new String[0]);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Returns a String of the number of spaces needed to complete the table."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param numOfRemainingSpaces number of spaces needed."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return String containing indicated number of spaces."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public String getRemainingSpaces(int numOfRemainingSpaces) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        if (numOfRemainingSpaces \u003d\u003d 0) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            char[] remainingSpaces \u003d new char[numOfRemainingSpaces];"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            for (int i \u003d 0; i \u003c numOfRemainingSpaces; i++) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                remainingSpaces[i] \u003d \u0027 \u0027;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            return new String(remainingSpaces);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Returns an indented horizontal border of a defined length with border corners (length not inclusive of corners)."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @param borderLength Length of border excluding corners."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * @return A String containing an indented horizontal border of a defined length with border corners."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public String consolePrintTableHoriBorder(int borderLength) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        char[] border \u003d new char[borderLength];"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        for (int i \u003d 0; i \u003c borderLength; i++) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            border[i] \u003d HORI_BORDER_UNIT;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String borderString \u003d new String(border);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        return BORDER_CORNER + borderString + BORDER_CORNER;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    //@@author Lucria"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Method that returns an array of strings representing a calender for printing to the console line."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @param currentMonthTasks : All dates in the current month and the number of tasks that are due then"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * @return : Returns an array of strings for View layer to print to the console line."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    public String[] consolePrintCalender(HashMap\u003cInteger, Integer\u003e currentMonthTasks) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        StringBuilder dateLine \u003d new StringBuilder();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        StringBuilder taskLine \u003d new StringBuilder();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        ArrayList\u003cString\u003e consoleCalender \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        DateTimeHelper dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        consoleCalender.add(\"    Today\u0027s date is \" + dateTimeHelper.getCurrentDate() + \" \""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                            + dateTimeHelper.getCurrentMonth() + \" \" + dateTimeHelper.getCurrentYear());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        consoleCalender.add(\"        U        M        T        W        R        F        S\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        int emptySpaces \u003d dateTimeHelper.getDayAtStartOfMonth();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        for (int i \u003d 1; i \u003c emptySpaces; i++) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            dateLine.append(SPACING).append(\"  \");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            taskLine.append(SPACING).append(\"  \");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        int [] daysPerMonth \u003d {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d daysPerMonth[Integer.parseInt(dateTimeHelper.getCurrentMonth()) - 1]; i++) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            if (dateLine.length() \u003d\u003d 63) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                consoleCalender.add(dateLine.toString());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                consoleCalender.add(taskLine.toString());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                dateLine.setLength(0);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                taskLine.setLength(0);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            if (i / 10 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                dateLine.append(SPACING).append(\" \").append(i);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                dateLine.append(SPACING).append(i);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            if (currentMonthTasks.get(i) !\u003d null) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                if (i / 10 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    taskLine.append(SPACING).append(\" \");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    taskLine.append(\"X\".repeat(Math.max(0, currentMonthTasks.get(i))));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    taskLine.append(SPACING);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    taskLine.append(\"X\".repeat(Math.max(0, currentMonthTasks.get(i))));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                if (i / 10 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    taskLine.append(SPACING).append(\"  \");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    taskLine.append(SPACING).append(\" \");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        consoleCalender.add(dateLine.toString());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        return consolePrintTable(consoleCalender, DEFAULT_HORI_BORDER_LENGTH);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlimhx": 197,
      "Lucria": 58,
      "Dkenobi": 3
    }
  },
  {
    "path": "src/main/java/util/validation/ValidityHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package util.validation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class ValidityHelper {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    //@@author iamabhishek98"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Checks validity of the email address."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param email The entered email address."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return Boolean value indicating validity of email address."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private boolean emailChecker(String email) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Pattern validEmailAddressRegex \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                Pattern.compile(\"^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[A-Z]{2,6}$\", Pattern.CASE_INSENSITIVE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return validEmailAddressRegex.matcher(email).find();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    //@@author iamabhishek98"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Checks validity of the phone number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param phoneNumber The entered phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return Boolean value indicating validity of phoneNumber."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private boolean phoneChecker(String phoneNumber) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (phoneNumber.length() \u003e 8) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Integer.parseInt(phoneNumber);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    //@@author iamabhishek98"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Returns an error message if either phone number or email address are not valid."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param email The entered email address.."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param phone The entered phone number."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return An error message indicating if either phone number or email address are not valid."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String emailPhoneErrorMessage(String email, String phone) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        boolean invalidEmailFlag \u003d !emailChecker(email) \u0026\u0026 !\"--\".equals(email);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        boolean invalidPhoneFlag \u003d !phoneChecker(phone) \u0026\u0026 !\"--\".equals(phone);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String errorMessage \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (invalidPhoneFlag) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            errorMessage +\u003d \"Phone number is not a valid phone number! Please make sure the phone number \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"only has digits and a length of no more than 8 digits.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (invalidEmailFlag) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String newLine \u003d (!\"\".equals(errorMessage)) ? \"\\n\\t\" : \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            errorMessage +\u003d (newLine + \"Email address is not a valid email address! Please adhere to standard \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"email address formats, such as archduke@emailprovider.com\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Check validity of of input is number."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param number The user input mainly the index."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return Boolean value indicating validity of phoneNumber."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public Boolean digitChecker(String number) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return number.matches(\"-?\\\\d+(\\\\.\\\\d+)?\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 66,
      "Lucria": 1
    }
  },
  {
    "path": "src/main/java/views/CLIView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package views;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static util.constant.ConstantHelper.HELLO_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static util.constant.ConstantHelper.HORILINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static util.constant.ConstantHelper.INDENTATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import controllers.ConsoleInputController;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import controllers.ProjectInputController;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import repositories.ProjectRepository;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.log.ArchDukeLogger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CLIView {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private ConsoleInputController consoleInputController;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private ProjectRepository projectRepository;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CLIView() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.projectRepository \u003d new ProjectRepository();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.consoleInputController \u003d new ConsoleInputController(projectRepository);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to call when View model is started."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArchDukeLogger.logInfo(CLIView.class.getName(), \"ArchDuke have started.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        boolean isDukeRunning \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        System.out.println(String.join(\"\\n\", HELLO_MESSAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        while (isDukeRunning) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            String commandInput \u003d sc.nextLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            ArchDukeLogger.logInfo(CLIView.class.getName(), \"User input: \" + commandInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            String[] outputMessage \u003d consoleInputController.onCommandReceived(commandInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            if (outputMessage[0].matches(\"Now managing.*\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                consolePrint(outputMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                ProjectInputController projectInputController \u003d new ProjectInputController(projectRepository);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                String projectNumber \u003d consoleInputController.getManagingProjectIndex();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                outputMessage \u003d projectInputController.onCommandReceived(projectNumber);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                consolePrint(outputMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                while (projectInputController.getIsManagingAProject()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    commandInput \u003d sc.nextLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    String[] projectOutputMessage \u003d projectInputController.manageProject(commandInput);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    consolePrint(projectOutputMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    if (projectOutputMessage[0].matches(\"Bye.*\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                        isDukeRunning \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            } else if (outputMessage[0].matches(\"Bye.*\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                isDukeRunning \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                consolePrint(outputMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                consolePrint(outputMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Prints an indented and formatted message with a top and bottom border."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * @param lines The lines to be printed in between the border."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void consolePrint(String... lines) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        System.out.println(HORILINE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        for (String message : lines) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            System.out.println(INDENTATION + message);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        System.out.println(HORILINE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 4,
      "seanlimhx": 1,
      "Lucria": 8,
      "-": 25,
      "Dkenobi": 35
    }
  },
  {
    "path": "src/main/java/views/ui/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package views.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * This method return the dialog box containing the output and image of duke."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 2,
      "Dkenobi": 61
    }
  },
  {
    "path": "src/main/java/views/ui/DukeUI.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package views.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class DukeUI  {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 7
    }
  },
  {
    "path": "src/main/java/views/ui/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package views.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": " * A GUI for DukeTest using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private DukeUI duke \u003d new DukeUI();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 30
    }
  },
  {
    "path": "src/main/java/views/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package views.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": " * Controller for views.ui.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private DukeUI duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/lucria.jpg\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/lucria.jpg\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    public void setDuke(DukeUI d) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        dukeGreeting();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private void dukeGreeting() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String greetingText \u003d \"Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + \"What can i do for you\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                DialogBox.getDukeDialog(greetingText, dukeImage)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing DukeTest\u0027s"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * reply and then appends them to"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        if (input.contains(\"bye\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            duke.getResponse(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            timeDelay(1000);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            );"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private void timeDelay(long t) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            Thread.sleep(t);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 76
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"views.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 19
    }
  },
  {
    "path": "src/test/java/controllers/AssignmentControllerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "package controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.TaskState;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sinteary"
        },
        "content": "public class AssignmentControllerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Project project;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Member member1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Member member2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Member member3;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    AssignmentControllerTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.project \u003d new Project(\"Test Project\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.member1 \u003d new Member(\"Tom\", \"NIL\", \"NIL\", 1, \"member\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.member2 \u003d new Member(\"Dick\", \"NIL\", \"NIL\", 2, \"member\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.member3 \u003d new Member(\"Harry\", \"NIL\", \"NIL\", 3, \"member\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Task task \u003d new Task(\"Test task\", 0,null, 0, TaskState.OPEN, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.project.addMember(member1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.project.addMember(member2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.project.addMember(member3);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.project.addTask(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void testSetupOfProjectAndMembers() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"Test Project\", project.getName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"1. Tom (Phone: NIL | Email: NIL | Role: member)\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            member1.getDetails());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"2. Dick (Phone: NIL | Email: NIL | Role: member)\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            member2.getDetails());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"3. Harry (Phone: NIL | Email: NIL | Role: member)\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            member3.getDetails());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(3, project.getNumOfMembers());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Tom\", project.getMemberList().getMember(1).getName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Dick\", project.getMemberList().getMember(2).getName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Harry\", project.getMemberList().getMember(3).getName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, project.getTaskList().getSize());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Test task\", project.getTask(1).getTaskName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void testAssignAndUnassign() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        AssignmentController assignmentController \u003d new AssignmentController(project);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String assignCommand \u003d \"assign task -i 1 -to 1 2 -rm 3 4\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assignmentController.assignAndUnassign(assignCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(project.containsAssignment(project.getTask(1), member1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(project.containsAssignment(project.getTask(1), member2));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertFalse(project.containsAssignment(project.getTask(1), member3));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assignmentController \u003d new AssignmentController(project);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assignCommand \u003d \"assign task -i 1 -to 3 -rm 1 \";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assignmentController.assignAndUnassign(assignCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertFalse(project.containsAssignment(project.getTask(1), member1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(project.containsAssignment(project.getTask(1), member2));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(project.containsAssignment(project.getTask(1), member3));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 54,
      "iamabhishek98": 10,
      "Lucria": 8
    }
  },
  {
    "path": "src/test/java/controllers/ConsoleInputControllerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "package controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import repositories.ProjectRepository;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "public class ConsoleInputControllerTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private ProjectRepository projectRepository;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private ConsoleInputController consoleInputController;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    //@@author seanlimhx"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    public ConsoleInputControllerTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.projectRepository \u003d new ProjectRepository();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.consoleInputController \u003d new ConsoleInputController(this.projectRepository);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Always true test just to test if jUnit is working."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    void commandListTest_noProjects() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        while (projectRepository.getAll().size() !\u003d 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            projectRepository.deleteItem(1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] expectedOutput \u003d new String[] {\"You currently have no projects!\"};"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] actualOutput \u003d consoleInputController.onCommandReceived(\"list\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        assertArrayEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    void commandListTest_haveOneEmptyProject() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        while (projectRepository.getAll().size() !\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            projectRepository.deleteItem(1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        projectRepository.addToRepo(\"create Avengers\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] expectedOutput \u003d new String[] {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"|Here are all the Projects you are managing:                           |\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +------------------------------------------------------------------+ |\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |Project 1: Avengers                                               | |\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +------------------------------------------------------------------+ |\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |Members:                                                          | |\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| | --                                                               | |\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |Next Deadline:                                                    | |\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| | --                                                               | |\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |Overall Progress:                                                 | |\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| | --                                                               | |\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +------------------------------------------------------------------+ |\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"+----------------------------------------------------------------------+\"};"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] actualOutput \u003d consoleInputController.onCommandReceived(\"list\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        assertArrayEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    void commandListTest_haveTwoEmptyProject() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        while (projectRepository.getAll().size() !\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            projectRepository.deleteItem(1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        projectRepository.addToRepo(\"create Avengers\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        projectRepository.addToRepo(\"create Justice League\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] expectedOutput \u003d new String[] {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"|Here are all the Projects you are managing:                           |\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +------------------------------------------------------------------+ |\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |Project 1: Avengers                                               | |\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +------------------------------------------------------------------+ |\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |Members:                                                          | |\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| | --                                                               | |\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |Next Deadline:                                                    | |\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| | --                                                               | |\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |Overall Progress:                                                 | |\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| | --                                                               | |\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +------------------------------------------------------------------+ |\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +------------------------------------------------------------------+ |\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |Project 2: Justice League                                         | |\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +------------------------------------------------------------------+ |\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |Members:                                                          | |\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| | --                                                               | |\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |Next Deadline:                                                    | |\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| | --                                                               | |\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |Overall Progress:                                                 | |\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| | --                                                               | |\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +------------------------------------------------------------------+ |\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"+----------------------------------------------------------------------+\"};"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] actualOutput \u003d consoleInputController.onCommandReceived(\"list\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        assertArrayEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    void commandManageTest_correctInputs() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        while (projectRepository.getAll().size() !\u003d 0) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            projectRepository.deleteItem(1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        projectRepository.addToRepo(\"create Avengers\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] expectedOutput \u003d new String[] {\"Now managing Avengers\"};"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] actualOutput \u003d consoleInputController.onCommandReceived(\"manage 1\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        assertArrayEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    void commandManageTest_incompleteInput() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        while (projectRepository.getAll().size() !\u003d 0) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            projectRepository.deleteItem(1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        projectRepository.addToRepo(\"create Avengers\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] expectedOutput \u003d new String[] {\"Please enter a project number!\"};"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] actualOutput \u003d consoleInputController.onCommandReceived(\"manage\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        assertArrayEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] actualOutput2 \u003d consoleInputController.onCommandReceived(\"manage \");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        assertArrayEquals(expectedOutput, actualOutput2);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    void commandManageTest_invalidIndex() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        while (projectRepository.getAll().size() !\u003d 0) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            projectRepository.deleteItem(1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        projectRepository.addToRepo(\"create Avengers\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] expectedOutput \u003d new String[] {\"Please enter the correct index of an existing Project!\"};"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] actualOutput \u003d consoleInputController.onCommandReceived(\"manage 2\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        assertArrayEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] actualOutput2 \u003d consoleInputController.onCommandReceived(\"manage 4\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        assertArrayEquals(expectedOutput, actualOutput2);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    void commandDeleteTest_correctInputs() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        while (projectRepository.getAll().size() !\u003d 0) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            projectRepository.deleteItem(1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        projectRepository.addToRepo(\"create Avengers\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] expectedOutput \u003d new String[] {\"Project 1 has been deleted\"};"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] actualOutput \u003d consoleInputController.onCommandReceived(\"delete 1\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        assertArrayEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    void commandDeleteTest_invalidIndex() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        while (projectRepository.getAll().size() !\u003d 0) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            projectRepository.deleteItem(1);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        projectRepository.addToRepo(\"create Avengers\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] expectedOutput \u003d new String[] {\"Index out of bounds! Please check project index!\"};"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] actualOutput \u003d consoleInputController.onCommandReceived(\"delete 2\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        assertArrayEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] actualOutput2 \u003d consoleInputController.onCommandReceived(\"delete 0\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        assertArrayEquals(expectedOutput, actualOutput2);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    void commandCreateTest_correctInputs() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        while (projectRepository.getAll().size() !\u003d 0) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            projectRepository.deleteItem(1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] expectedOutput \u003d new String[] {\"Project created!\"};"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] actualOutput \u003d consoleInputController.onCommandReceived(\"create Avengers\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        assertArrayEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    void commandCreateTest_wrongInputs() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        while (projectRepository.getAll().size() !\u003d 0) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            projectRepository.deleteItem(1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] expectedOutput \u003d new String[] {\"Creation of Project failed. Please check parameters given!\"};"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] actualOutput \u003d consoleInputController.onCommandReceived(\"create\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        assertArrayEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] actualOutput2 \u003d consoleInputController.onCommandReceived(\"create \");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        assertArrayEquals(expectedOutput, actualOutput2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlimhx": 188
    }
  },
  {
    "path": "src/test/java/controllers/ParserHelperTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "package controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.TaskState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import util.ParserHelper;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sinteary"
        },
        "content": "public class ParserHelperTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Project project;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Member member1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Member member2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Member member3;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    //@@author sinteary"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    ParserHelperTest() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project \u003d new Project(\"Test Project\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.member1 \u003d new Member(\"Tom\", \"NIL\", \"NIL\", 1, \"member\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.member2 \u003d new Member(\"Dick\", \"NIL\", \"NIL\", 2, \"member\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.member3 \u003d new Member(\"Harry\", \"NIL\", \"NIL\", 3, \"member\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Task task1 \u003d new Task(\"Test task 1\", 0,null, 0, TaskState.OPEN, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Task task2 \u003d new Task(\"Test task 2\", 0,null, 0, TaskState.OPEN, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project.addMember(member1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project.addMember(member2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project.addMember(member3);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project.addTask(task1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project.addTask(task2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void testParseAssignmentParams() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String command \u003d \"-i 1 2 -to 3 4\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ParserHelper parserHelper \u003d new ParserHelper();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cArrayList\u003cInteger\u003e\u003e parsedCommands \u003d parserHelper.parseAssignmentParams(command, project);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(2, parsedCommands.get(0).size());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, parsedCommands.get(1).size());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(0, parsedCommands.get(2).size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(parsedCommands.get(0).contains(1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(parsedCommands.get(0).contains(2));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(parsedCommands.get(1).contains(3));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, parserHelper.getErrorMessages().size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Member with index 4 does not exist.\", parserHelper.getErrorMessages().get(0));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        command \u003d \"-i 3 -to 1 2 -rm 3\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        parsedCommands \u003d parserHelper.parseAssignmentParams(command, project);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(0, parsedCommands.get(0).size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(2, parsedCommands.get(1).size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, parsedCommands.get(2).size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(parsedCommands.get(1).contains(1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(parsedCommands.get(1).contains(2));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(parsedCommands.get(2).contains(3));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Task with index 3 does not exist.\", parserHelper.getErrorMessages().get(0));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        command \u003d \"-i 1 -to 1 -rm 1\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        parsedCommands \u003d parserHelper.parseAssignmentParams(command, project);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, parsedCommands.get(0).size());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(0, parsedCommands.get(1).size());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(0, parsedCommands.get(2).size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Cannot assign and unassign task to member 1 (Tom) at the same time\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            parserHelper.getErrorMessages().get(0));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        command \u003d \"-i abc -to 1 -rm 2\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        parsedCommands \u003d parserHelper.parseAssignmentParams(command, project);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(0, parsedCommands.get(0).size());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, parsedCommands.get(1).size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, parsedCommands.get(2).size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Could not recognise task abc, please ensure it is an integer.\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            parserHelper.getErrorMessages().get(0));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        command \u003d \"-i 1 -to \";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        parsedCommands \u003d parserHelper.parseAssignmentParams(command, project);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, parsedCommands.get(0).size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(0, parsedCommands.get(1).size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        command \u003d \"-i 5 -to \";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        parsedCommands \u003d parserHelper.parseAssignmentParams(command, project);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(0, parsedCommands.get(0).size());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(0, parsedCommands.get(1).size());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(0, parsedCommands.get(2).size());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Task with index 5 does not exist.\", parserHelper.getErrorMessages().get(0));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        command \u003d \"-i\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        parsedCommands \u003d parserHelper.parseAssignmentParams(command, project);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(0, parsedCommands.get(0).size());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(0, parsedCommands.get(1).size());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(0, parsedCommands.get(2).size());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void testParseMembersIndex() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String command \u003d \"0 1 2 abc 3 4 -1 9999999999999999999\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ParserHelper parserHelper \u003d new ParserHelper();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cInteger\u003e validMemberIndexes \u003d parserHelper.parseMembersIndexes(command, 3);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(validMemberIndexes.size() \u003d\u003d 3);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(validMemberIndexes.contains(1));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(validMemberIndexes.contains(2));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(validMemberIndexes.contains(3));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cString\u003e errorMessages \u003d parserHelper.getErrorMessages();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(errorMessages.contains(\"Could not recognise member abc, please ensure it is an integer.\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(errorMessages.contains(\"Member with index 0 does not exist.\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(errorMessages.contains(\"Member with index 4 does not exist.\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(errorMessages.contains(\"Member with index -1 does not exist.\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(errorMessages.contains(\"Could not recognise member 9999999999999999999, \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            + \"please ensure it is an integer.\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void testParseTasksIndex() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String command \u003d \"0 1 2 def 3 4 -1 9999999999999999999\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ParserHelper parserHelper \u003d new ParserHelper();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cInteger\u003e validTaskIndexes \u003d parserHelper.parseTasksIndexes(command, 3);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(validTaskIndexes.size() \u003d\u003d 3);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(validTaskIndexes.contains(1));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(validTaskIndexes.contains(2));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(validTaskIndexes.contains(3));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cString\u003e errorMessages \u003d parserHelper.getErrorMessages();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(errorMessages.contains(\"Could not recognise task def, please ensure it is an integer.\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(errorMessages.contains(\"Task with index 0 does not exist.\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(errorMessages.contains(\"Task with index 4 does not exist.\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(errorMessages.contains(\"Could not recognise task 9999999999999999999, \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            + \"please ensure it is an integer.\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(errorMessages.contains(\"Task with index -1 does not exist.\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 132,
      "seanlimhx": 1
    }
  },
  {
    "path": "src/test/java/controllers/ProjectInputControllerManageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import repositories.ProjectRepository;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.date.DateTimeHelper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "class ProjectInputControllerManageTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private ProjectInputController projectInputController;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private ProjectRepository projectRepository;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private DateTimeHelper dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String simulatedUserInput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String[] simulatedOutput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String[] expectedOutput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    ProjectInputControllerManageTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.projectRepository \u003d new ProjectRepository();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.projectInputController \u003d new ProjectInputController(this.projectRepository);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void onCommandReceived_noProjectIndex_executionFail() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserInput \u003d \"test\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedOutput \u003d projectInputController.onCommandReceived(simulatedUserInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedOutput \u003d new String[] {\"Input is not a number! Please input a proper project index!\"};"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertArrayEquals(expectedOutput, simulatedOutput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void initializeProjectInputController() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        while (projectRepository.getAll().size() !\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            projectRepository.deleteItem(1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        projectRepository.addToRepo(\"create Avengers Testing\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserInput \u003d \"1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedOutput \u003d projectInputController.onCommandReceived(simulatedUserInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedOutput \u003d new String[] {\"Please enter a new command:\"};"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertArrayEquals(expectedOutput, simulatedOutput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void onCommandReceived_exitsProject_executionSuccess() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserInput \u003d \"bye\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedOutput \u003d projectInputController.manageProject(simulatedUserInput);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedOutput \u003d new String[] {\"Bye. Hope to see you again soon!\"};"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertArrayEquals(expectedOutput, simulatedOutput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void manageProject_memberMethods_executionSuccess() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserInput \u003d \"add member -n Thor\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedOutput \u003d projectInputController.manageProject(simulatedUserInput);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedOutput \u003d new String[] {\"Added new member to: Avengers Testing\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                       \"Member details 1. Thor (Phone: -- | Email: -- | Role: member)\"};"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertArrayEquals(expectedOutput, simulatedOutput);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserInput \u003d \"edit member 1 -n Marvel -e captain.marvel@gmail.com -i 91234567\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedOutput \u003d projectInputController.manageProject(simulatedUserInput);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedOutput \u003d new String[] {\"Updated member details with the index number 1\"};"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertArrayEquals(expectedOutput, simulatedOutput);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserInput \u003d \"add member -n Dr Strange\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedOutput \u003d projectInputController.manageProject(simulatedUserInput);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserInput \u003d \"delete member 2\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedOutput \u003d projectInputController.manageProject(simulatedUserInput);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedOutput \u003d new String[] {\"Removed member 2: 2. Dr Strange (Phone: -- | Email: -- | Role: member)\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                       \"Take note that the member indexes might have changed after deleting!\"};"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertArrayEquals(expectedOutput, simulatedOutput);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserInput \u003d \"role 1 -n Captain\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedOutput \u003d projectInputController.manageProject(simulatedUserInput);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedOutput \u003d new String[] {\"Successfully changed the role of Marvel to Captain.\"};"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertArrayEquals(expectedOutput, simulatedOutput);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void manageProject_taskMethods_executionSuccess() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserInput \u003d \"add task -t Kill Thanos -c 100 -p 1\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedOutput \u003d projectInputController.manageProject(simulatedUserInput);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedOutput \u003d new String[] {\"Added new task to the list.\"};"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertArrayEquals(expectedOutput, simulatedOutput);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserInput \u003d \"edit task 1 -t Kill Ironman -c 1 -p 5 -d 20/11/2019 -s done\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedOutput \u003d projectInputController.manageProject(simulatedUserInput);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedOutput \u003d new String[] {\"Success!\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                       \"The name of this task has been changed to \u0027Kill Ironman\u0027!\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                       \"The priority for this task has been set to 5!\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                       \"The new due date for this task has been set to 20 Nov 2019!\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                       \"The credit for this task has been set to 1!\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                       \"The state of this task has been set to DONE!\"};"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertArrayEquals(expectedOutput, simulatedOutput);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserInput \u003d \"delete task 1\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedOutput \u003d projectInputController.manageProject(simulatedUserInput);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedOutput \u003d new String[] {\"Removed task 1: Kill Ironman\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                       \"Take note that index numbers of other tasks may have changed after deleting!\"};"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertArrayEquals(expectedOutput, simulatedOutput);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void manageProject_viewTasksMethods_executionSuccess() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserInput \u003d \"view tasks\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedOutput \u003d projectInputController.manageProject(simulatedUserInput);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedOutput \u003d new String[] {\"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                       \"|Tasks of Avengers Testing:                                            |\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                       \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                       \"| - There are currently no tasks! -                                    |\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                       \"+----------------------------------------------------------------------+\"};"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertArrayEquals(expectedOutput, simulatedOutput);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserInput \u003d \"add task -t Kill Thanos -c 100 -p 1\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedOutput \u003d projectInputController.manageProject(simulatedUserInput);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserInput \u003d \"view tasks\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedOutput \u003d projectInputController.manageProject(simulatedUserInput);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        expectedOutput \u003d new String[] {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"|Tasks of Avengers Testing:                                            |\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +-------------------------------+                                    |\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |1. Kill Thanos                 |                                    |\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +-------------------------------+                                    |\","
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| | - Priority: 1                 |                                    |\","
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| | - Due: --                     |                                    |\","
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| | - Credit: 100                 |                                    |\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| | - State: OPEN                 |                                    |\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +-------------------------------+                                    |\","
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        };"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertArrayEquals(expectedOutput, simulatedOutput);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserInput \u003d \"view task requirements 1\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedOutput \u003d projectInputController.manageProject(simulatedUserInput);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedOutput \u003d new String[] {\"This task has no specific requirements.\"};"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertArrayEquals(expectedOutput, simulatedOutput);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserInput \u003d \"edit task requirements 1 -r Sacrifice Ironman\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedOutput \u003d projectInputController.manageProject(simulatedUserInput);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedOutput \u003d new String[] {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"Success!\","
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"\u0027Sacrifice Ironman\u0027 has been successfully added as a new requirement of this task!\","
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        };"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertArrayEquals(expectedOutput, simulatedOutput);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserInput \u003d \"add task -t ATest -c 100 -p 1\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedOutput \u003d projectInputController.manageProject(simulatedUserInput);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserInput \u003d \"add task -t BTest -c 100 -p 1\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedOutput \u003d projectInputController.manageProject(simulatedUserInput);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserInput \u003d \"view tasks /NAME\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedOutput \u003d projectInputController.manageProject(simulatedUserInput);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedOutput \u003d new String[] {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"|Tasks of Avengers Testing:                                            |\","
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +-------------------------------+ +-------------------------------+  |\","
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |1. ATest                       | |2. BTest                       |  |\","
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +-------------------------------+ +-------------------------------+  |\","
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| | - Priority: 1                 | | - Priority: 1                 |  |\","
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| | - Due: --                     | | - Due: --                     |  |\","
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| | - Credit: 100                 | | - Credit: 100                 |  |\","
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| | - State: OPEN                 | | - State: OPEN                 |  |\","
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +-------------------------------+ +-------------------------------+  |\","
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +-------------------------------+                                    |\","
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |3. Kill Thanos                 |                                    |\","
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +-------------------------------+                                    |\","
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| | - Priority: 1                 |                                    |\","
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| | - Due: --                     |                                    |\","
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| | - Credit: 100                 |                                    |\","
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| | - State: OPEN                 |                                    |\","
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +-------------------------------+                                    |\","
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"+----------------------------------------------------------------------+\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        };"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertArrayEquals(expectedOutput, simulatedOutput);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void manageProject_agenda_executionSuccess() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserInput \u003d \"agenda\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedOutput \u003d projectInputController.manageProject(simulatedUserInput);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedOutput \u003d new String[]{"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"|    Today\u0027s date is 9 11 2019                                         |\","
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"|        U        M        T        W        R        F        S       |\","
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"|                                                     1        2       |\","
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"|                                                                      |\","
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"|        3        4        5        6        7        8        9       |\","
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"|                                                                      |\","
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"|       10       11       12       13       14       15       16       |\","
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"|                                                                      |\","
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"|       17       18       19       20       21       22       23       |\","
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"|                                                                      |\","
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"|       24       25       26       27       28       29       30       |\","
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"+----------------------------------------------------------------------+\""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        };"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String resetDate \u003d \"|    Today\u0027s date is \" + dateTimeHelper.getCurrentDate() + \" \""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                + dateTimeHelper.getCurrentMonth() + \" \" + dateTimeHelper.getCurrentYear()"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                + \"                                        |\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedOutput[1] \u003d resetDate;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertArrayEquals(expectedOutput, simulatedOutput);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlimhx": 27,
      "Lucria": 182
    }
  },
  {
    "path": "src/test/java/controllers/ProjectInputControllerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import repositories.ProjectRepository;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.date.DateTimeHelper;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "class ProjectInputControllerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private ProjectRepository projectRepository;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private ProjectInputController projectInputController;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private DateTimeHelper dateTimeHelper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String simulatedUserInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String actualOutput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String expectedOutput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private Date dueDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    ProjectInputControllerTest() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.projectRepository \u003d new ProjectRepository();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        this.projectInputController \u003d new ProjectInputController(projectRepository);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Always true test just to test if jUnit is working."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void testProjectAddMember_valid() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String simulatedUserInput \u003d \"add member -n Jerry Zhang -i 9123456 -e jerryzhang@gmail.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectAddMember(project,simulatedUserInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (String message : project.getMemberList().getAllMemberDetails().toArray(new String[0])) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput +\u003d message;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedOutput \u003d \"1. Jerry Zhang (Phone: 9123456 | Email: jerryzhang@gmail.com | Role: member)\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void testProjectAddMember_duplicateMembers() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        simulatedUserInput \u003d \"add member -n Cynthia\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, project.getNumOfMembers());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Cynthia\", project.getMember(1).getName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        simulatedUserInput \u003d \"add member -n Cynthia -p 98765432\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String[] projectOutput \u003d projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, project.getNumOfMembers());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"The member you have tried to add already exists!\", projectOutput[0]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void testProjectAddMember_noName() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        simulatedUserInput \u003d \"add member\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String[] projectOutput \u003d projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Add member command minimum usage must be \\\"add member -n NAME\\\"!\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            projectOutput[0]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        simulatedUserInput \u003d \"add member -n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        projectOutput \u003d projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Name cannot be empty! Please follow the add command format in user guide!\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            + \" \\\"add member -n NAME\\\" is the minimum requirement for add member command\", projectOutput[0]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void testProjectEditMember_valid() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"add member -n Jerry Zhang -i 9123456 -e jerryzhang@gmail.com\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"edit member 1 -n Dillen -i 9123456 -e dillen@gmail.com\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectEditMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (String message : project.getMemberList().getAllMemberDetails().toArray(new String[0])) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput +\u003d message;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedOutput \u003d \"1. Dillen (Phone: 9123456 | Email: dillen@gmail.com | Role: member)\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"edit member 1 -n Jerry\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectEditMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (String message : project.getMemberList().getAllMemberDetails().toArray(new String[0])) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput +\u003d message;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedOutput \u003d \"1. Jerry (Phone: 9123456 | Email: dillen@gmail.com | Role: member)\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"edit member 1 -i 911\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectEditMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (String message : project.getMemberList().getAllMemberDetails().toArray(new String[0])) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput +\u003d message;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedOutput \u003d \"1. Jerry (Phone: 911 | Email: dillen@gmail.com | Role: member)\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"edit member 1 -e jerry@gmail.com -n Thanos Endgame\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectEditMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (String message : project.getMemberList().getAllMemberDetails().toArray(new String[0])) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput +\u003d message;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedOutput \u003d \"1. Thanos Endgame (Phone: 911 | Email: jerry@gmail.com | Role: member)\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void testProjectDeleteMember_valid() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"add member -n Jerry Zhang -i 9123456 -e jerryzhang@gmail.com\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, project.getNumOfMembers());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"delete member 1\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectDeleteMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(0, project.getNumOfMembers());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        //delete multiple"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        simulatedUserInput \u003d \"add member -n Cynthia\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        simulatedUserInput \u003d \"add member -n Sean\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        simulatedUserInput \u003d \"add member -n Abhishek\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(3, project.getNumOfMembers());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        simulatedUserInput \u003d \"delete member 1 3\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        projectInputController.projectDeleteMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, project.getNumOfMembers());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Sean\", project.getMember(1).getName());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void testProjectDeleteMember_invalid() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        simulatedUserInput \u003d \"add member -n Jerry Zhang -i 9123456 -e jerryzhang@gmail.com\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, project.getNumOfMembers());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        simulatedUserInput \u003d \"delete member\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String[] output \u003d projectInputController.projectDeleteMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Can\u0027t delete members: No member index numbers detected!\", output[0]);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        simulatedUserInput \u003d \"delete member abc\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        output \u003d projectInputController.projectDeleteMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Could not recognise member abc, please ensure it is an integer.\", output[0]);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"No valid member indexes. Cannot delete members.\", output[1]);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    void testProjectViewCredits() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"add member -n Dillen -i 9999 -e dillen@gmail.com\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"add member -n Jerry - i 9999 -e jerryn@gmail.com\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"add member -n Sean\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"add task -t task1 -p 1 -c 10 -s doing\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectAddTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"add task -t task2 -p 5 -c 10 -s done\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectAddTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (String message : project.getCredits().toArray(new String[0])) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput +\u003d message;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        expectedOutput \u003d \"1. Dillen: 0 credits   Progress: .................... (0%)\""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                + \"2. Jerry: 0 credits   Progress: .................... (0%)\""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                + \"3. Sean: 0 credits   Progress: .................... (0%)\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"assign task -i 1 -to 1 2\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectAssignTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"assign task -i 2 -to 1 3\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectAssignTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (String message : project.getCredits().toArray(new String[0])) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput +\u003d message;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        expectedOutput \u003d \"1. Dillen: 3 credits   Progress: ##########.......... (50%)\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                + \"2. Jerry: 0 credits   Progress: .................... (0%)\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                + \"3. Sean: 3 credits   Progress: #################### (100%)\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void testProjectAddTask_valid() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            dueDate \u003d dateTimeHelper.formatDate(\"21/09/2019\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            simulatedUserInput \u003d \"add task -t Documentation for product -p 2 -d 21/09/2019 -c 40 -s todo \""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"-r do something -r do another thing\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectAddTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            simulatedUserInput \u003d \"add task -t Documentation for product 1 -p 2 -c 40 \""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"-s done -r do something -r do another thing\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectAddTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            simulatedUserInput \u003d \"add task  -p 2 -t Documentation for product 2 -c 40 -r do something \""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"-r do another thing\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectAddTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            simulatedUserInput \u003d \"add task -t Documentation for product 3 -p 2 -c 40\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectAddTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            simulatedUserInput \u003d \"add task -s doing -t Documentation for CS2113 -c 40 -d 21/09/2019 -p 2\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectAddTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            for (String message : project.getTaskList().getAllTaskDetails("
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    project.getTasksAndAssignedMembers(), project).toArray(new String[0])) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                actualOutput +\u003d message;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            expectedOutput \u003d \"1. Documentation for product | Priority: 2 | Due: 21 Sep 2019\""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 40 | State: TODO\""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    + \"2. Documentation for product 1 | Priority: 2 | Due: -- | Credit: 40 | State: DONE\""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    + \"3. Documentation for product 2 | Priority: 2 | Due: -- | Credit: 40 | State: OPEN\""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    + \"4. Documentation for product 3 | Priority: 2 | Due: -- | Credit: 40 | State: OPEN\""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"5. Documentation for CS2113 | Priority: 2 | Due: 21 Sep 2019\""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 40 | State: DOING\";"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    void testProjectEditTask() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            dueDate \u003d dateTimeHelper.formatDate(\"22/09/2019\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            simulatedUserInput \u003d \"add task -t Documentation for product -p 2 -d 21/09/2019 -c 40 -s todo \""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"-r do something -r do another thing\";"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectAddTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            simulatedUserInput \u003d \"edit task 1 -t No documentation -p 5 -d 22/09/2019 -c 50 -s done \""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                        + \"-r do nothing -r do another thing\";"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectEditTask(project,simulatedUserInput);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            for (String message : project.getTaskList().getAllTaskDetails("
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    project.getTasksAndAssignedMembers(), project).toArray(new String[0])) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                actualOutput +\u003d message;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            expectedOutput \u003d \"1. No documentation | Priority: 5 | Due: 22 Sep 2019\""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 50 | State: DONE\";"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(expectedOutput,actualOutput);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            simulatedUserInput \u003d \"edit task 1 -p 5 -t Infinity War -d 22/09/2019 -c 40 -s todo\";"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectEditTask(project,simulatedUserInput);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            for (String message : project.getTaskList().getAllTaskDetails("
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    project.getTasksAndAssignedMembers(), project).toArray(new String[0])) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                actualOutput +\u003d message;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            expectedOutput \u003d \"1. Infinity War | Priority: 5 | Due: 22 Sep 2019\""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 40 | State: TODO\";"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(expectedOutput,actualOutput);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            simulatedUserInput \u003d \"edit task 1 -t Infinity War -p 1 -c 30\";"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectEditTask(project,simulatedUserInput);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            for (String message : project.getTaskList().getAllTaskDetails("
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    project.getTasksAndAssignedMembers(), project).toArray(new String[0])) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                actualOutput +\u003d message;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            expectedOutput \u003d \"1. Infinity War | Priority: 1 | Due: 22 Sep 2019\""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 30 | State: TODO\";"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(expectedOutput,actualOutput);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            simulatedUserInput \u003d \"edit task 1 -c 20 -p 2\";"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectEditTask(project,simulatedUserInput);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            for (String message : project.getTaskList().getAllTaskDetails("
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    project.getTasksAndAssignedMembers(), project).toArray(new String[0])) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                actualOutput +\u003d message;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            expectedOutput \u003d \"1. Infinity War | Priority: 2 | Due: 22 Sep 2019\""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate)"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 20 | State: TODO\";"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(expectedOutput,actualOutput);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            simulatedUserInput \u003d \"edit task 1 -c 70 -s doing -p 6 -d 12/12/2020 -t End Game\";"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            //6 is an invalid value for task priority, so priority remains as 2 after this command"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            dueDate \u003d dateTimeHelper.formatDate(\"12/12/2020\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectEditTask(project,simulatedUserInput);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            for (String message : project.getTaskList().getAllTaskDetails("
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    project.getTasksAndAssignedMembers(), project).toArray(new String[0])) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                actualOutput +\u003d message;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            expectedOutput \u003d \"1. End Game | Priority: 2 | Due: 12 Dec 2020\""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate)"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 70 | State: DOING\";"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(expectedOutput,actualOutput);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    void testProjectViewTask() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            simulatedUserInput \u003d \"add task -t task1 -p 5 -c 10 -s todo -d 12/12/2021\";"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectAddTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            simulatedUserInput \u003d \"add task -t task2 -p 5 -c 100 -s doing\";"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectAddTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            simulatedUserInput \u003d \"add task -t task3 -p 1 -c 50 -s done -d 1/1/2020\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectAddTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            simulatedUserInput \u003d \"add member -n Dillen -i 9999 -e dillen@gmail.com\";"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            simulatedUserInput \u003d \"add member -n Jerry - i 9999 -e jerryn@gmail.com\";"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            simulatedUserInput \u003d \"assign task -i 1 -to 1 2\";"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectAssignTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            simulatedUserInput \u003d \"assign task -i 2 -to 1\";"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectAssignTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Date dueDate1 \u003d dateTimeHelper.formatDate(\"12/12/2021\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Date dueDate2 \u003d dateTimeHelper.formatDate(\"1/1/2020\");"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            for (String message : project.getTaskList().getAllTaskDetails("
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    project.getTasksAndAssignedMembers(), project).toArray(new String[0])) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                actualOutput +\u003d message;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            expectedOutput \u003d \"1. task3 | Priority: 1 | Due: 01 Jan 2020\""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate2)"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 50 | State: DONE\""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"2. task1 | Priority: 5 | Due: 12 Dec 2021\""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate1)"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 10 | State: TODO\""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"3. task2 | Priority: 5 | Due: -- | Credit: 100 | State: DOING\";"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            for (String message : project.getTaskList().getAllSortedTaskDetails("
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    project.getTasksAndAssignedMembers(), \"/PRIORITY\", project).toArray(new String[0])) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                actualOutput +\u003d message;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            expectedOutput \u003d \"1. task3 | Priority: 1 | Due: 01 Jan 2020\""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate2)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 50 | State: DONE\""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"2. task1 | Priority: 5 | Due: 12 Dec 2021\""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate1)"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 10 | State: TODO\""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"3. task2 | Priority: 5 | Due: -- | Credit: 100 | State: DOING\";"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            for (String message : project.getTaskList().getAllSortedTaskDetails("
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    project.getTasksAndAssignedMembers(), \"/NAME\", project).toArray(new String[0])) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                actualOutput +\u003d message;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            expectedOutput \u003d \"1. task1 | Priority: 5 | Due: 12 Dec 2021\""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate1)"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 10 | State: TODO\""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"2. task2 | Priority: 5 | Due: -- | Credit: 100 | State: DOING\""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"3. task3 | Priority: 1 | Due: 01 Jan 2020\""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate2)"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 50 | State: DONE\";"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            for (String message : project.getTaskList().getAllSortedTaskDetails("
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    project.getTasksAndAssignedMembers(), \"/DATE\", project).toArray(new String[0])) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                actualOutput +\u003d message;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            expectedOutput \u003d \"1. task3 | Priority: 1 | Due: 01 Jan 2020\""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate2)"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 50 | State: DONE\""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    + \"2. task1 | Priority: 5 | Due: 12 Dec 2021\""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate1)"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 10 | State: TODO\";"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            for (String message : project.getTaskList().getAllSortedTaskDetails("
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    project.getTasksAndAssignedMembers(), \"/CREDIT\", project).toArray(new String[0])) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                actualOutput +\u003d message;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            expectedOutput \u003d \"1. task2 | Priority: 5 | Due: -- | Credit: 100 | State: DOING\""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"2. task3 | Priority: 1 | Due: 01 Jan 2020\""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate2)"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 50 | State: DONE\""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    + \"3. task1 | Priority: 5 | Due: 12 Dec 2021\""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate1)"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 10 | State: TODO\";"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            for (String message : project.getTaskList().getAllSortedTaskDetails("
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    project.getTasksAndAssignedMembers(), \"/WHO-Dillen\", project).toArray(new String[0])) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                actualOutput +\u003d message;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            expectedOutput \u003d \"1. task1 | Priority: 5 | Due: 12 Dec 2021\""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate1)"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 10 | State: TODO\""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"2. task2 | Priority: 5 | Due: -- | Credit: 100 | State: DOING\";"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    void testProjectDeleteTask() {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        simulatedUserInput \u003d \"add task -t Documentation for product -p 2 d/21/09/2019 -c 40 s/todo \""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + \"r/do something -r do another thing\";"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectAddTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"delete task 1\";"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectDeleteTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (String message : project.getTaskList().getAllTaskDetails("
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                project.getTasksAndAssignedMembers(), project).toArray(new String[0])) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput +\u003d message;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        expectedOutput \u003d \"\";"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(expectedOutput,actualOutput);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    void testProjectEditTaskRequirements() {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            DateTimeHelper dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            dueDate \u003d dateTimeHelper.formatDate(\"21/09/2019\");"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            simulatedUserInput \u003d \"add task -t Documentation for product -p 2 -d 21/09/2019 -c 40 -s todo \""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"-r do something -r do another thing\";"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectAddTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            simulatedUserInput \u003d \"edit task requirements 1 -r do nothing\";"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectEditTaskRequirements(project, simulatedUserInput);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            for (String message : project.getTask(1).getTaskRequirements().toArray(new String[0])) {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                actualOutput +\u003d message;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            expectedOutput \u003d \"Requirements for the task \u0027Documentation for product\u0027:\""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"1. do something2. do another thing3. do nothing\";"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            simulatedUserInput \u003d \"edit task requirements 1 -rm 1 2 -r do everything\";"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            projectInputController.projectEditTaskRequirements(project, simulatedUserInput);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            actualOutput \u003d \"\";"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            for (String message : project.getTask(1).getTaskRequirements().toArray(new String[0])) {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                actualOutput +\u003d message;"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            expectedOutput \u003d \"Requirements for the task \u0027Documentation for product\u0027:\""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"1. do nothing2. do everything\";"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void testProjectAssignTask_valid() {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        simulatedUserInput \u003d \"add task -t Documentation for product -p 2 -d 21/09/2019 -c 40 -s todo \""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + \"-r do something -r do another thing\";"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectAddTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"add member -n Jerry Zhang -i 9123456 -e jerryzhang@gmail.com\";"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"add member -n Dillen -i 911 -e dillen@hotmail.com\";"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        simulatedUserInput \u003d \"assign task -i 1 -to 1 2\";"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] actualOutput \u003d projectInputController.projectAssignTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] expectedOutput \u003d new String[] {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"|Results from task assignments:                                        |\","
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +------------------------------------------------------------------+ |\","
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |For task 1 (Documentation for product):                           | |\","
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +------------------------------------------------------------------+ |\","
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |Assigned to member 1 (Jerry Zhang).                               | |\","
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |Assigned to member 2 (Dillen).                                    | |\","
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +------------------------------------------------------------------+ |\","
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"+----------------------------------------------------------------------+\"};"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        assertArrayEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserInput \u003d \"assign task -i 1 -rm 1\";"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        actualOutput \u003d projectInputController.projectAssignTask(project, simulatedUserInput);"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        expectedOutput \u003d new String[] {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"|Results from task assignments:                                        |\","
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +------------------------------------------------------------------+ |\","
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |For task 1 (Documentation for product):                           | |\","
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +------------------------------------------------------------------+ |\","
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |Unassigned task from member 1 (Jerry Zhang).                      | |\","
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +------------------------------------------------------------------+ |\","
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"+----------------------------------------------------------------------+\"};"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        assertArrayEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    //@@author sinteary"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void testProjectViewAssignments_invalidInputs() {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Project project \u003d new Project(\"New project\");"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        simulatedUserInput \u003d \"view assignments\";"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String[] output \u003d projectInputController.projectViewAssignments(project, simulatedUserInput);"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Please input the parameters to view assignments:\", output[0]);"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        simulatedUserInput \u003d \"view assignments -\";"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        output \u003d projectInputController.projectViewAssignments(project, simulatedUserInput);"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Please input the parameters to view assignments:\", output[0]);"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        simulatedUserInput \u003d \"view assignments atm\";"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        output \u003d projectInputController.projectViewAssignments(project, simulatedUserInput);"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Please input the parameters to view assignments:\","
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            output[0]);"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        //no members"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        simulatedUserInput \u003d \"view assignments -m all\";"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        output \u003d projectInputController.projectViewAssignments(project, simulatedUserInput);"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"No members in project yet.\", output[0]);"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        //no tasks"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        simulatedUserInput \u003d \"view assignments -t all\";"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        output \u003d projectInputController.projectViewAssignments(project, simulatedUserInput);"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"No tasks in project yet.\", output[0]);"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        simulatedUserInput \u003d \"view assignments -a 1\";"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        output \u003d projectInputController.projectViewAssignments(project, simulatedUserInput);"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Could not understand your command! Please use:\", output[0]);"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void assignRole_correctInputs() {"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        simulatedUserInput \u003d \"add member -n Tony Stark -e richguy@gmail.com -r RichGuy\";"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        simulatedUserInput \u003d \"add member -n Doctor Strange -i 9123456 -e strange@gmail.com -r SmartGuy\";"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        simulatedUserInput \u003d \"add member -n Hulk -i 911 -r StrongGuy\";"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        projectInputController.projectAddMember(project, simulatedUserInput);"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        simulatedUserInput \u003d \"role 1 -n IronMan\";"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        projectInputController.projectRoleMembers(project, simulatedUserInput);"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        actualOutput \u003d project.getMemberList().getMember(1).getRole();"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        expectedOutput \u003d \"IronMan\";"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"SmartGuy\", project.getMemberList().getMember(2).getRole());"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"StrongGuy\", project.getMemberList().getMember(3).getRole());"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    //@@author Dkenobi"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    void testAddReminder_correctInput() {"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        simulatedUserInput \u003d \"add reminder -n Make new suit for the team -r may be try using pink -d 10/10/2019\";"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        projectInputController.projectAddReminder(project,simulatedUserInput);"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        actualOutput \u003d project.getReminderList().get(0).getReminderName();"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        expectedOutput \u003d \"Make new suit for the team\";"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        assertEquals(expectedOutput,actualOutput);"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    void testAddReminder_invalidInput() {"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        simulatedUserInput \u003d \"add reminder Make new suit for the team may be try using pink 10/10/2019\";"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String [] invalid \u003d projectInputController.projectAddReminder(project,simulatedUserInput);"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String [] expectedOutputArray \u003d new String[] {\"Failed to create new task. \""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + \"Please ensure all necessary parameters are given\"};"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        assertArrayEquals(expectedOutputArray, invalid);"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    void testViewReminder() throws ParseException {"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        simulatedUserInput \u003d \"add reminder -n Make new suit for the team -r may be try using pink -d 10/10/2019\";"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        projectInputController.projectAddReminder(project,simulatedUserInput);"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String[] actualOutputArray \u003d projectInputController.projectViewReminder(project);"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String[] expectedOutputArray \u003d new String[] {"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            \"|Reminder of Infinity_Gauntlet:                                        |\","
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            \"|1. [X] Make new suit for the team                                     |\","
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            \"|   - Category: DEFAULT                                                |\","
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            \"|   - Remarks: may be try using pink                                   |\","
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            \"|   - 10 Oct 2019\""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dateTimeHelper.formatDate(\"10/10/2019\"))"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"                                   |\","
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            \"+----------------------------------------------------------------------+\"};"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        assertArrayEquals(expectedOutputArray,actualOutputArray);"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    void testDeleteReminder() {"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        simulatedUserInput \u003d \"add reminder -n Make new suit for the team -r may be try using pink -d 10/10/2019\";"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        projectInputController.projectAddReminder(project,simulatedUserInput);"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        simulatedUserInput \u003d \"add reminder -n System integration with system team \""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + \"-r Need to bring along thumbdrive -d 10/10/2019\";"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        projectInputController.projectAddReminder(project,simulatedUserInput);"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        simulatedUserInput \u003d \"delete reminder 1\";"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        projectInputController.projectDeleteReminder(project,simulatedUserInput);"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        int reminderListSize \u003d project.getReminderListSize();"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        assertEquals(1,reminderListSize);"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    void testDeleteReminder_invalidIndex() {"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        simulatedUserInput \u003d \"add reminder -n Make new suit for the team -r may be try using pink -d 10/10/2019\";"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        projectInputController.projectAddReminder(project,simulatedUserInput);"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        simulatedUserInput \u003d \"delete reminder 100\";"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String[] invalidArray \u003d projectInputController.projectDeleteReminder(project,simulatedUserInput);"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String [] expectedArray \u003d {\"No reminder index number found in the list! \""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + \"Please enter the correct reminder index number.\"};"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        assertArrayEquals(expectedArray,invalidArray);"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    void testEditReminder() {"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        simulatedUserInput \u003d \"add reminder -n Make new suit for the team -r may be try using pink -d 10/10/2019\";"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        projectInputController.projectAddReminder(project,simulatedUserInput);"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        simulatedUserInput \u003d \"edit reminder 1 -n new reminder name\";"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        projectInputController.projectEditReminder(project,simulatedUserInput);"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        actualOutput \u003d project.getReminderList().get(0).getReminderName();"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        expectedOutput \u003d \"new reminder name\";"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        assertEquals(expectedOutput,actualOutput);"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    void testEditReminder_invalidIndex() {"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        simulatedUserInput \u003d \"add reminder -n Make new suit for the team -r may be try using pink -d 10/10/2019\";"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        projectInputController.projectAddReminder(project,simulatedUserInput);"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        simulatedUserInput \u003d \"edit reminder 100 -n new reminder name\";"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String[] invalidArray \u003d projectInputController.projectEditReminder(project,simulatedUserInput);"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String [] expectedArray \u003d {\"No reminder index number found in the list! \""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + \"Please enter the correct reminder index number.\"};"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        assertArrayEquals(expectedArray,invalidArray);"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    void testSetReminderStatus() {"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        simulatedUserInput \u003d \"add reminder -n Make new suit for the team -r may be try using pink -d 10/10/2019\";"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        projectInputController.projectAddReminder(project,simulatedUserInput);"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        simulatedUserInput \u003d \"mark reminder 1\";"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        projectInputController.projectSetReminderStatus(project,simulatedUserInput);"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Boolean reminderStatus \u003d project.getReminder(1).getIsDone();"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        assertEquals(true,reminderStatus);"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    void testViewReminderCategory() {"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Project project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        simulatedUserInput \u003d \"add reminder -n Do activate patch -r need \""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + \"to check internet connection -d 10/10/2000 -l System\";"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        projectInputController.projectAddReminder(project,simulatedUserInput);"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        simulatedUserInput \u003d \"add reminder -n Apply critical patch -r need to \""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                + \"understand some stuff -d 10/10/2000 -l Software\";"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        projectInputController.projectAddReminder(project,simulatedUserInput);"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        simulatedUserInput \u003d \"add reminder -n Clean up system -r run diagnostic test first -d 10/10/2000 -l System\";"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        projectInputController.projectAddReminder(project,simulatedUserInput);"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        simulatedUserInput \u003d \"add reminder -n Swap out for more ram -r Check if it DDR5 -d 10/10/2000 -l System\";"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        projectInputController.projectAddReminder(project,simulatedUserInput);"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        simulatedUserInput \u003d \"add reminder -n Install Antivirus -r Use the free version -d 10/10/2000 -l Software\";"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        projectInputController.projectAddReminder(project,simulatedUserInput);"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String [] validArray \u003d projectInputController.projectViewReminderCategory(project);"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        String [] expectedArray \u003d {\"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            \"|Reminders of Infinity_Gauntlet:                                       |\","
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            \"| +-------------------------------+ +-------------------------------+  |\","
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            \"| |1. SYSTEM                      | |2. SOFTWARE                    |  |\","
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            \"| +-------------------------------+ +-------------------------------+  |\","
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            \"| |1. Do activate patch           | |1. Apply critical patch        |  |\","
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            \"| |2. Clean up system             | |2. Install Antivirus           |  |\","
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            \"| |3. Swap out for more ram       | +-------------------------------+  |\","
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            \"| +-------------------------------+                                    |\","
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            \"+----------------------------------------------------------------------+\"};"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        assertArrayEquals(expectedArray,validArray);"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 321,
      "sinteary": 149,
      "seanlimhx": 31,
      "Lucria": 13,
      "Dkenobi": 184
    }
  },
  {
    "path": "src/test/java/factorytests/MemberFactoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package factorytests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.IMember;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.NullMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.factories.MemberFactory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "//@@author Lucria"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "public class MemberFactoryTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private MemberFactory memberFactory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String simulatedFactoryInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    MemberFactoryTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.memberFactory \u003d new MemberFactory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Always true test just to test if jUnit is working."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * This test is to test if user gives a valid input, whether MemberFactory"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * can create the desired Member properly."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void memberCreation_fullCorrectInputs_creationSuccess() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedFactoryInput \u003d \"-n Thor -i 91234567 -e thor@marvel.com -x 1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        IMember simulatedMember \u003d memberFactory.create(simulatedFactoryInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Member expectedMember \u003d new Member(\"Thor\", \"91234567\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                \"thor@marvel.com\", 1, \"member\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getDetails(), simulatedMember.getDetails());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getIndexNumber(), simulatedMember.getIndexNumber());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getName(), simulatedMember.getName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void memberCreation_correctPartialInputs_creationSuccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedFactoryInput \u003d \"-n Iron man -i 12345678 -x 2\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        IMember simulatedMember \u003d memberFactory.create(simulatedFactoryInput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Member expectedMember \u003d new Member(\"Iron man\", \"12345678\", \"--\", 2, \"member\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getDetails(), simulatedMember.getDetails());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getIndexNumber(), simulatedMember.getIndexNumber());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getName(), simulatedMember.getName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedFactoryInput \u003d \"-n Dr Strange -x 3\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedMember \u003d memberFactory.create(simulatedFactoryInput);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedMember \u003d new Member(\"Dr Strange\", \"--\", \"--\", 3, \"member\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getDetails(), simulatedMember.getDetails());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getIndexNumber(), simulatedMember.getIndexNumber());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getName(), simulatedMember.getName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void memberCreation_wrongInputs_creationFailed() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedFactoryInput \u003d \"-i 12341234 -x 1\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        IMember simulatedMember \u003d memberFactory.create(simulatedFactoryInput);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        NullMember expectedMember \u003d new NullMember(\"Name cannot be empty! Please follow the add command \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                    + \"format in user guide! \\\"add member -n NAME\\\" \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                    + \"is the minimum requirement for add member command\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getDetails(), simulatedMember.getDetails());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getIndexNumber(), simulatedMember.getIndexNumber());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getName(), simulatedMember.getName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void memberCreation_truncatedInputs_exceptionCaught() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedFactoryInput \u003d \"-n -x 1\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        IMember simulatedMember \u003d memberFactory.create(simulatedFactoryInput);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        NullMember expectedMember \u003d new NullMember(\"Name cannot be empty! Please follow the add command \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                    + \"format in user guide! \\\"add member -n NAME\\\" is the minimum requirement for \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                    + \"add member command\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getDetails(), simulatedMember.getDetails());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getIndexNumber(), simulatedMember.getIndexNumber());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getName(), simulatedMember.getName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void memberCreation_missingFlags_exceptionCaught() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedFactoryInput \u003d \"- -x 0\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        IMember simulatedMember \u003d memberFactory.create(simulatedFactoryInput);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        NullMember expectedMember \u003d  new NullMember(\"Name cannot be empty! Please follow the add command \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                    + \"format in user guide! \\\"add member -n NAME\\\" is the minimum requirement for \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                    + \"add member command\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getDetails(), simulatedMember.getDetails());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getIndexNumber(), simulatedMember.getIndexNumber());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getName(), simulatedMember.getName());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void memberCreation_invalidEmail_nullObjectReturned() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedFactoryInput \u003d \"-n Thor -i 91234567 -e thor.marvel.com\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        IMember simulatedMember \u003d memberFactory.create(simulatedFactoryInput);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        NullMember expectedMember \u003d  new NullMember(\"Email address is not a valid email address! \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                    + \"Please adhere to standard email address formats, \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                                    + \"such as archduke@emailprovider.com\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getDetails(), simulatedMember.getDetails());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getIndexNumber(), simulatedMember.getIndexNumber());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getName(), simulatedMember.getName());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void memberCreation_validEmail_creationSuccess() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedFactoryInput \u003d \"-n Thor -i 91234567 -e thor.bigguy@marvel.com\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        IMember simulatedMember \u003d memberFactory.create(simulatedFactoryInput);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Member expectedMember \u003d new Member(\"Thor\", \"91234567\", \"thor.bigguy@marvel.com\", 0, \"member\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getDetails(), simulatedMember.getDetails());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getIndexNumber(), simulatedMember.getIndexNumber());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedMember.getName(), simulatedMember.getName());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 117
    }
  },
  {
    "path": "src/test/java/factorytests/TaskFactoryTests.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package factorytests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.ITask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.NullTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.TaskState;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.date.DateTimeHelper;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.factories.TaskFactory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "//@@author Lucria"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "class TaskFactoryTests {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private TaskFactory taskFactory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private DateTimeHelper dateTimeHelper;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String simulatedFactoryInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    TaskFactoryTests() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.taskFactory \u003d new TaskFactory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Always true test just to test if Junit is working."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void taskCreation_fullCorrectInputs_creationSuccess() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedFactoryInput \u003d \"-t Killing Thanos -p 1 -d 28/09/2019 -c 100 -s done -r Use Iron Man\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            ITask simulatedTask \u003d taskFactory.create(simulatedFactoryInput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            ArrayList\u003cString\u003e expectedRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            expectedRequirements.add(\"Use Iron Man\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            Task expectedTask \u003d new Task(\"Killing Thanos\", 1,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    dateTimeHelper.formatDate(\"28/09/2019\"), 100, TaskState.DONE, expectedRequirements);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getDetails(), simulatedTask.getDetails());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getTaskName(),simulatedTask.getTaskName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getTaskCredit(), simulatedTask.getTaskCredit());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            assertEquals(expectedTask.getTaskPriority(), simulatedTask.getTaskPriority());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        } catch (ParseException err) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            fail(\"ParseException was detected when it shouldn\u0027t have\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void taskCreation_correctPartialInputs_creationSuccess() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedFactoryInput \u003d \"-t Turning back time -p 5 -c 5\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        ITask simulatedTask \u003d taskFactory.create(simulatedFactoryInput);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Task expectedTask \u003d new Task(\"Turning back time\", 5,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                null, 5, TaskState.OPEN, null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedTask.getDetails(), simulatedTask.getDetails());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedTask.getTaskName(),simulatedTask.getTaskName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedTask.getTaskCredit(), simulatedTask.getTaskCredit());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedTask.getTaskPriority(), simulatedTask.getTaskPriority());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void taskCreation_wrongInputs_creationFailed() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedFactoryInput \u003d \"-t Missing priority -c 5\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        ITask simulatedTask \u003d taskFactory.create(simulatedFactoryInput);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        NullTask expectedTask \u003d new NullTask();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedTask.getDetails(), simulatedTask.getDetails());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedTask.getTaskName(),simulatedTask.getTaskName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedTask.getTaskCredit(), simulatedTask.getTaskCredit());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedTask.getTaskPriority(), simulatedTask.getTaskPriority());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedTask.getDueDate(), simulatedTask.getDueDate());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedTask.getTaskState(), simulatedTask.getTaskState());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedTask.getTaskRequirements(), simulatedTask.getTaskRequirements());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 5,
      "Lucria": 73
    }
  },
  {
    "path": "src/test/java/helpertests/AssignmentViewHelperTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package helpertests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.TaskState;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.uiformatter.AssignmentViewHelper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sinteary"
        },
        "content": "public class AssignmentViewHelperTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Project project;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Member member1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Member member2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Member member3;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Test for AssignmentViewHelper. Initialise dummy project and members with assignments upon"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * creation."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public AssignmentViewHelperTest() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project \u003d new Project(\"Test Project\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.member1 \u003d new Member(\"Tom\", \"--\", \"--\", 1, \"member\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.member2 \u003d new Member(\"Dick\", \"--\", \"--\", 2, \"member\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.member3 \u003d new Member(\"Harry\", \"--\", \"--\", 3, \"member\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        Task task \u003d new Task(\"Documentation\", 1,null, 10, TaskState.OPEN, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        Task task2 \u003d new Task(\"JUnit tests\", 1,null, 10, TaskState.OPEN, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project.addMember(member1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project.addMember(member2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project.addMember(member3);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project.addTask(task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project.addTask(task2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project.createAssignment(task, member1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project.createAssignment(task, member2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project.createAssignment(task2, member2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.project.createAssignment(task2, member3);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void testSetupOfProjectAndMembers() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"Test Project\", project.getName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"1. Tom (Phone: -- | Email: -- | Role: member)\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            member1.getDetails());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"2. Dick (Phone: -- | Email: -- | Role: member)\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            member2.getDetails());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"3. Harry (Phone: -- | Email: -- | Role: member)\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            member3.getDetails());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(3, project.getNumOfMembers());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Tom\", project.getMemberList().getMember(1).getName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Dick\", project.getMemberList().getMember(2).getName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Harry\", project.getMemberList().getMember(3).getName());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(2, project.getTaskList().getSize());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Documentation\", project.getTask(1).getTaskName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"JUnit tests\", project.getTask(2).getTaskName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void testGetMemberOutput() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        ArrayList\u003cInteger\u003e validMembersIndexes \u003d new ArrayList\u003c\u003e(Arrays.asList(1, 2, 3));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] actualMemberOutput \u003d AssignmentViewHelper.getMemberOutput(validMembersIndexes,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                project);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] expectedMemberOutput \u003d new String[] {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"|Here are each member\u0027s tasks:                                         |\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +-------------------------------+ +-------------------------------+  |\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |Tom                            | |Dick                           |  |\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +-------------------------------+ +-------------------------------+  |\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |1. Documentation (P: 1, D: --, | |1. Documentation (P: 1, D: --, |  |\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |C: 10, S: OPEN)                | |C: 10, S: OPEN)                |  |\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +-------------------------------+ |                               |  |\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +-------------------------------+ |2. JUnit tests (P: 1, D: --,   |  |\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |Harry                          | |C: 10, S: OPEN)                |  |\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +-------------------------------+ +-------------------------------+  |\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |1. JUnit tests (P: 1, D: --,   |                                    |\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |C: 10, S: OPEN)                |                                    |\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +-------------------------------+                                    |\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"+----------------------------------------------------------------------+\"};"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        assertArrayEquals(expectedMemberOutput, actualMemberOutput);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        ArrayList\u003cString\u003e memberOutput \u003d AssignmentViewHelper.getMemberOutput(validMembersIndexes,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            project);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Here are each member\u0027s tasks:\", memberOutput.get(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Tasks assigned to Tom\", memberOutput.get(1));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"1. Documentation | Priority: 0 | Due: -- | Credit: 0 | State: OPEN\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            memberOutput.get(2));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Tasks assigned to Dick\", memberOutput.get(3));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"1. Documentation | Priority: 0 | Due: -- | Credit: 0 | State: OPEN\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            memberOutput.get(4));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"2. JUnit tests | Priority: 0 | Due: -- | Credit: 0 | State: OPEN\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            memberOutput.get(5));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Tasks assigned to Harry\", memberOutput.get(6));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"1. JUnit tests | Priority: 0 | Due: -- | Credit: 0 | State: OPEN\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            memberOutput.get(7));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void testGetTaskOutput() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        ArrayList\u003cInteger\u003e validTasksIndexes \u003d new ArrayList\u003c\u003e(Arrays.asList(1, 2));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] actualTaskOutput \u003d AssignmentViewHelper.getTaskOutput(validTasksIndexes,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                project);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] expectedTaskOutput \u003d new String[] {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"|Here are the members assigned to each task:                           |\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +-------------------------------+ +-------------------------------+  |\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |Documentation (P: 1, D: --, C: | |JUnit tests (P: 1, D: --, C:   |  |\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |10, S: OPEN)                   | |10, S: OPEN)                   |  |\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +-------------------------------+ +-------------------------------+  |\","
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |1. Tom                         | |1. Dick                        |  |\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |2. Dick                        | |2. Harry                       |  |\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +-------------------------------+ +-------------------------------+  |\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"+----------------------------------------------------------------------+\"};"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        assertArrayEquals(expectedTaskOutput, actualTaskOutput);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        ArrayList\u003cString\u003e taskOutput \u003d AssignmentViewHelper.getTaskOutput(validTasksIndexes,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            project);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Here are the members assigned to each task:\", taskOutput.get(0));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Documentation | Priority: 0 | Due: -- | Credit: 0 | State: OPEN\", taskOutput.get(1));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Members assigned to task 1 (Documentation | Priority: 0 | Due: -- | Credit: 0 | State: OPEN)\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            taskOutput.get(2));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"1. Tom\", taskOutput.get(3));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"2. Dick\", taskOutput.get(4));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"JUnit tests | Priority: 0 | Due: -- | Credit: 0 | State: OPEN\","
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            taskOutput.get(5));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Members assigned to task 2 (JUnit tests | Priority: 0 | Due: -- | Credit: 0 | State: OPEN)\","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            taskOutput.get(6));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"1. Dick\", taskOutput.get(7));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"2. Harry\", taskOutput.get(8));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 84,
      "seanlimhx": 41,
      "Lucria": 21
    }
  },
  {
    "path": "src/test/java/helpertests/CommandHelperTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package helpertests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.uiformatter.CommandHelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "class CommandHelperTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private CommandHelper commandHelper \u003d new CommandHelper();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private ArrayList\u003cString\u003e simulatedOutput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String[] expectedOutput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void gettingConsoleCommands_successfulExecution() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedOutput \u003d commandHelper.getCommandsForConsole();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedOutput \u003d new String[] {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"List of commands available:\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \" - list\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"Displays all existing projects.\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \" - create PROJECT_NAME\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"Creates a project with the specified name.\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \" - delete PROJECT_INDEX\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"Deletes specified project.\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \" - manage PROJECT_INDEX\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"Selects the specified project to manage.\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \" - bye\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"Saves your data and exits ArchDuke.\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \" - help\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"Provides a list of all the commands available.\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertArrayEquals(expectedOutput, simulatedOutput.toArray());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lucria": 46
    }
  },
  {
    "path": "src/test/java/helpertests/ViewHelperTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package helpertests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.date.DateTimeHelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import util.uiformatter.ViewHelper;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "import static util.constant.ConstantHelper.DEFAULT_HORI_BORDER_LENGTH_70_FOR_TEST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "class ViewHelperTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    private ViewHelper viewHelper;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private DateTimeHelper dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    //@@author seanlimhx"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    ViewHelperTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        this.viewHelper \u003d new ViewHelper();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     * Always true test just to test if jUnit is working."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    void consolePrintTableTest() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e sampleTableContent \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent.add(\"Project Header\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent.add(\"line 1\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent.add(\"line 2\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent.add(\"\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent.add(\"line 3\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent.add(\"line 4\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent.add(\"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] actualOutput \u003d viewHelper.consolePrintTable(sampleTableContent,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                DEFAULT_HORI_BORDER_LENGTH_70_FOR_TEST);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] expectedOutput \u003d new String[] {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"|Project Header                                                        |\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"|line 1                                                                |\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"|line 2                                                                |\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"|                                                                      |\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"|line 3                                                                |\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"|line 4                                                                |\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"|                                                                      |\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"+----------------------------------------------------------------------+\"};"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        assertArrayEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    void consolePrintTableHoriBorderTest() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String expectedOutput \u003d \"+----------------------------------------------------------------------+\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String actualOutput \u003d viewHelper.consolePrintTableHoriBorder(DEFAULT_HORI_BORDER_LENGTH_70_FOR_TEST);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    void getRemainingSpacesTest() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String expectedOutput \u003d \"                    \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String actualOutput \u003d viewHelper.getRemainingSpaces(20);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    void getArrayOfSplitStringsTest() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String input \u003d \" 1. A very very very long name (Phone: 12345678901234567890 | Email:\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                + \" alonglonglongemailaddress@gmail.com | Role: member)\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] expectedOutput \u003d new String[] {\" 1. A very very very long name (Phone: 12345678901234567890 | Email: \","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"alonglonglongemailaddress@gmail.com | Role: member)\"};"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] actualOutput \u003d viewHelper.getArrayOfSplitStrings(input, DEFAULT_HORI_BORDER_LENGTH_70_FOR_TEST);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        assertArrayEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String input2 \u003d \" 3. aVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongNameWi\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                + \"thoutSpace (Phone: -- | Email: -- | Role: member)\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] expectedOutput2 \u003d new String[] {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \" 3. aVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongNameWithoutS-\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"pace (Phone: -- | Email: -- | Role: member)\"};"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] actualOutput2 \u003d viewHelper.getArrayOfSplitStrings(input2, DEFAULT_HORI_BORDER_LENGTH_70_FOR_TEST);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        assertArrayEquals(expectedOutput2, actualOutput2);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String input3 \u003d \" 4. A very very very very very very very very very very     \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                + \"very very very very very very very very very very very very \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                + \"very long text (Phone: -- | Email: -- | Role: member)\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] expectedOutput3 \u003d new String[] {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \" 4. A very very very very very very very very very very     very very \","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"very very very very very very very very very very very long text \","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"(Phone: -- | Email: -- | Role: member)\"};"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] actualOutput3 \u003d viewHelper.getArrayOfSplitStrings(input3, DEFAULT_HORI_BORDER_LENGTH_70_FOR_TEST);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        assertArrayEquals(expectedOutput3, actualOutput3);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    void consolePrintMultipleTablesTest_oneColumn() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e sampleTableContent1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent1.add(\"Project 1: Test\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent1.add(\"Members:\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent1.add(\" --\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent1.add(\"Next Deadline:\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent1.add(\" - No deadlines left -\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent1.add(\"\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent1.add(\"Overall Progress:\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent1.add(\" - Completed: 0%\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent1.add(\" - In Progress: 0%\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent1.add(\" - Not Done: 100%\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e sampleTableContent2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent2.add(\"Project 2: Another Test\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent2.add(\"Members:\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent2.add(\" --\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent2.add(\"Next Deadline:\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent2.add(\" --\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent2.add(\"Overall Progress:\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent2.add(\" --\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e input \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        input.add(sampleTableContent1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        input.add(sampleTableContent2);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] actualOutput \u003d viewHelper.consolePrintMultipleTables(input, DEFAULT_HORI_BORDER_LENGTH_70_FOR_TEST,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                1, \"Here are all the Projects you are managing:\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] expectedOutput \u003d new String[] {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"|Here are all the Projects you are managing:                           |\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +------------------------------------------------------------------+ |\","
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |Project 1: Test                                                   | |\","
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +------------------------------------------------------------------+ |\","
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |Members:                                                          | |\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| | --                                                               | |\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |Next Deadline:                                                    | |\","
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| | - No deadlines left -                                            | |\","
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |                                                                  | |\","
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |Overall Progress:                                                 | |\","
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| | - Completed: 0%                                                  | |\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| | - In Progress: 0%                                                | |\","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| | - Not Done: 100%                                                 | |\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +------------------------------------------------------------------+ |\","
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +------------------------------------------------------------------+ |\","
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |Project 2: Another Test                                           | |\","
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +------------------------------------------------------------------+ |\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |Members:                                                          | |\","
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| | --                                                               | |\","
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |Next Deadline:                                                    | |\","
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| | --                                                               | |\","
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |Overall Progress:                                                 | |\","
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| | --                                                               | |\","
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +------------------------------------------------------------------+ |\","
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"+----------------------------------------------------------------------+\"};"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        assertArrayEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    void consolePrintMultipleTablesTest_twoColumns() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e sampleTableContent1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent1.add(\"test task (P: 1, D: --, C: 2, S: OPEN)\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent1.add(\"1. Cynthia\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent1.add(\"2. Dillen\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent1.add(\"3. Jerry\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e sampleTableContent2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent2.add(\"Watch show (P: 5, D: 01 Nov 2019, C: 3, S: DOING)\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent2.add(\"1. Dillen\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent2.add(\"2. Jerry\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cString\u003e sampleTableContent3 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent3.add(\"Eat food (P: 1, D: 03 Nov 2019, C: 3, S: OPEN)\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent3.add(\"1. Cynthia\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        sampleTableContent3.add(\"2. Jerry\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e input \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        input.add(sampleTableContent1);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        input.add(sampleTableContent2);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        input.add(sampleTableContent3);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] actualOutput \u003d viewHelper.consolePrintMultipleTables(input, DEFAULT_HORI_BORDER_LENGTH_70_FOR_TEST,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                2, \"Here are the members assigned to each task:\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        String[] expectedOutput \u003d new String[] {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"|Here are the members assigned to each task:                           |\","
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +-------------------------------+ +-------------------------------+  |\","
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |test task (P: 1, D: --, C: 2,  | |Watch show (P: 5, D: 01 Nov    |  |\","
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |S: OPEN)                       | |2019, C: 3, S: DOING)          |  |\","
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +-------------------------------+ +-------------------------------+  |\","
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |1. Cynthia                     | |1. Dillen                      |  |\","
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |2. Dillen                      | |2. Jerry                       |  |\","
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| |3. Jerry                       | +-------------------------------+  |\","
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"| +-------------------------------+ +-------------------------------+  |\","
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"|                                   |Eat food (P: 1, D: 03 Nov      |  |\","
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"|                                   |2019, C: 3, S: OPEN)           |  |\","
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"|                                   +-------------------------------+  |\","
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"|                                   |1. Cynthia                     |  |\","
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"|                                   |2. Jerry                       |  |\","
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"|                                   +-------------------------------+  |\","
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            \"+----------------------------------------------------------------------+\"};"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "        assertArrayEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    //@@author Lucria"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void consolePrintCalender_successfulExecution() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        HashMap\u003cInteger, Integer\u003e simulatedInput \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String[] simulatedOutput \u003d viewHelper.consolePrintCalender(simulatedInput);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String[] expectedOutput \u003d new String[]{"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"|    Today\u0027s date is 9 11 2019                                         |\","
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"+----------------------------------------------------------------------+\","
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"|        U        M        T        W        R        F        S       |\","
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"|                                                     1        2       |\","
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"|                                                                      |\","
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"|        3        4        5        6        7        8        9       |\","
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"|                                                                      |\","
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"|       10       11       12       13       14       15       16       |\","
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"|                                                                      |\","
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"|       17       18       19       20       21       22       23       |\","
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"|                                                                      |\","
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"|       24       25       26       27       28       29       30       |\","
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            \"+----------------------------------------------------------------------+\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        };"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        String resetDate \u003d \"|    Today\u0027s date is \" + dateTimeHelper.getCurrentDate() + \" \""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                + dateTimeHelper.getCurrentMonth() + \" \" + dateTimeHelper.getCurrentYear()"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                + \"                                        |\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        expectedOutput[1] \u003d resetDate;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertArrayEquals(expectedOutput, simulatedOutput);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlimhx": 191,
      "Lucria": 35
    }
  },
  {
    "path": "src/test/java/modeltests/member/ListOfMembersInProjectTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package modeltests.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.IMember;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.member.MemberList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "class ListOfMembersInProjectTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testAddMember() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Member member \u003d new Member(\"Tom\",\"91198766\", \"tom@gmail.com\",1, \"member\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        MemberList listOfMembersInProject \u003d new MemberList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        listOfMembersInProject.addMember(member);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"1. Tom (Phone: 91198766 | Email: tom@gmail.com | Role: member)\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                listOfMembersInProject.getMember(1).getDetails());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testEditMember() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Member member \u003d new Member(\"Tom\",\"91198766\", \"tom@gmail.com\",1, \"member\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        MemberList listOfMembersInProject \u003d new MemberList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        listOfMembersInProject.addMember(member);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        listOfMembersInProject.editMember(1,\"-n John -i 91177777 -e john@gmail.com\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"1. John (Phone: 91177777 | Email: john@gmail.com | Role: member)\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                listOfMembersInProject.getMember(1).getDetails());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        listOfMembersInProject.editMember(1,\"-n Matthew -e matthew@gmail.com\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"1. Matthew (Phone: 91177777 | Email: matthew@gmail.com | Role: member)\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                listOfMembersInProject.getMember(1).getDetails());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testGetNumOfMembers() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Member member \u003d new Member(\"Tom\",\"91198766\", \"tom@gmail.com\",1, \"member\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        MemberList listOfMembersInProject \u003d new MemberList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        listOfMembersInProject.addMember(member);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(1, listOfMembersInProject.getNumOfMembers());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testRemoveMember() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Member member \u003d new Member(\"Tom\",\"91198766\", \"tom@gmail.com\",1, \"member\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        MemberList listOfMembersInProject \u003d new MemberList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        listOfMembersInProject.addMember(member);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        IMember toBeRemoved \u003d listOfMembersInProject.getMember(1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        listOfMembersInProject.removeMember((Member)toBeRemoved);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(0, listOfMembersInProject.getNumOfMembers());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 2,
      "Lucria": 48,
      "Dkenobi": 5
    }
  },
  {
    "path": "src/test/java/modeltests/member/MemberTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package modeltests.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lucria"
        },
        "content": "class MemberTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testGetDetails() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Member member \u003d new Member(\"Tom\",\"91198766\", \"tom@gmail.com\",1, \"member\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"1. Tom (Phone: 91198766 | Email: tom@gmail.com | Role: member)\",member.getDetails());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testSetIndexNumber() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Member member \u003d new Member(\"Tom\",\"91198766\", \"tom@gmail.com\",1, \"member\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        member.setIndexNumber(2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"2. Tom (Phone: 91198766 | Email: tom@gmail.com | Role: member)\",member.getDetails());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testUpdateDetails() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Member member \u003d new Member(\"Tom\",\"91198766\", \"tom@gmail.com\",1, \"member\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        member.updateDetails(\"John\", \"911\", \"john@hotmail.com\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"1. John (Phone: 911 | Email: john@hotmail.com | Role: member)\", member.getDetails());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 20,
      "Lucria": 13
    }
  },
  {
    "path": "src/test/java/modeltests/member/TaskAssignmentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package modeltests.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.task.TaskState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import org.junit.jupiter.api.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "class TaskAssignmentTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Project project;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Member member1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Member member2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Member member3;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private final Task task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    Set up a dummy project for the test. It is assumed that all other components are working."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    Some tests for other classes are included in this test to ensure proper functioning before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    testing. Testing:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    TaskAssignmentTest() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.project \u003d new Project(\"New project\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.member1 \u003d new Member(\"Tom\", \"NIL\", \"NIL\", 1, \"member\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.member2 \u003d new Member(\"Dick\", \"NIL\",\"NIL\", 2, \"member\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.member3 \u003d new Member(\"Harry\", \"NIL\", \"NIL\", 3, \"member\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.task \u003d new Task(\"Test task\", 0,null, 0, TaskState.OPEN, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.project.addMember(member1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.project.addMember(member2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.project.addMember(member3);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.project.addTask(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Order(1)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Order(2)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testSetupOfProjectAndMembers() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"1. Tom (Phone: NIL | Email: NIL | Role: member)\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            member1.getDetails());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"2. Dick (Phone: NIL | Email: NIL | Role: member)\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            member2.getDetails());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(\"3. Harry (Phone: NIL | Email: NIL | Role: member)\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            member3.getDetails());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(3, project.getNumOfMembers());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Tom\", project.getMemberList().getMember(1).getName());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Dick\", project.getMemberList().getMember(2).getName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Harry\", project.getMemberList().getMember(3).getName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, project.getTaskList().getSize());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Test task\", project.getTask(1).getTaskName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testManageAssignment() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, project.getTaskList().getSize());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Test task\", project.getTask(1).getTaskName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        project.createAssignment(project.getTask(1),member1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        project.createAssignment(project.getTask(1),member2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        project.createAssignment(project.getTask(1),member3);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(project.containsAssignment(task, member1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(project.containsAssignment(task, member2));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertTrue(project.containsAssignment(task, member3));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testManageAssignmentInvalidTaskNumber() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(1, project.getTasks().getSize());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Test task\", project.getTask(1).getTaskName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String projectCommand \u003d \"assign task i/200 to/ 1\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        AssignmentController assignmentController \u003d new AssignmentController();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String[] args \u003d projectCommand.substring(12).split(\" \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assignmentController.manageAssignment(project,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                args, this.consoleView);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(0, assignmentController.getAssigneesIndex().size());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(0, assignmentController.getUnassigneesIndex().size());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"The task you wish to assign (task index 200 ) does not exist!\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                assignmentController.getMessageForView().get(0));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"Please check the index number of the task and try again.\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                assignmentController.getMessageForView().get(1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 66,
      "iamabhishek98": 5,
      "Lucria": 14,
      "Dkenobi": 5
    }
  },
  {
    "path": "src/test/java/modeltests/reminder/ReminderTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "package modeltests.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import models.reminder.Reminder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.date.DateTimeHelper;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "public class ReminderTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    private DateTimeHelper dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     * Always true test just to test if jUnit is working."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    void testReminderDetails() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            Date date \u003d dateTimeHelper.formatDate(\"10/10/2019\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            Reminder reminder \u003d new Reminder(\"Fix Captain America\u0027s Shield paint job\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    \"maybe try pink instead\", date,\"DEFAULT\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            assertEquals(\"Fix Captain America\u0027s Shield paint job\",reminder.getReminderName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            assertEquals(\"maybe try pink instead\",reminder.getReminderRemarks());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            assertEquals(date,reminder.getReminderDate());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            assertEquals(\"DEFAULT\",reminder.getCategory());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            System.out.println(\"Parsing error\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dkenobi": 38
    }
  },
  {
    "path": "src/test/java/modeltests/task/TaskListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package modeltests.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import controllers.AssignmentController;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import models.member.Member;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.TaskState;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import util.date.DateTimeHelper;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private Project project;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private DateTimeHelper dateTimeHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    TaskListTest() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.project \u003d new Project(\"Infinity_Gauntlet\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testAddTask() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Task task \u003d new Task(\"task\", 5, null,100, TaskState.OPEN,taskRequirements);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(\"task | Priority: 5 | Due: -- | Credit: 100 | State: OPEN\",taskList.getTask(1).getDetails());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testRemoveTask() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Task task \u003d new Task(\"task\", 5, null,100, TaskState.OPEN,taskRequirements);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        taskList.removeTask(1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(0,taskList.getSize());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testGetAllTaskDetails() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        ArrayList\u003cString\u003e taskRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Task task1 \u003d new Task(\"task1\", 1, null, 100, TaskState.OPEN, taskRequirements);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Task task2 \u003d new Task(\"task2\", 2, null, 100, TaskState.OPEN, taskRequirements);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Task task3 \u003d new Task(\"task3\", 3, null, 100, TaskState.OPEN, taskRequirements);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        Task task4 \u003d new Task(\"task4\", 4, null, 100, TaskState.OPEN, taskRequirements);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        taskList.addTask(task1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        taskList.addTask(task2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        taskList.addTask(task3);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        taskList.addTask(task4);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        assertNotNull(taskList.getTaskList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String testTaskListString \u003d \"[1. task1 | Priority: 1 | Due: -- | Credit: 100 | State: OPEN, \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                + \"2. task2 | Priority: 2 | Due: -- | Credit: 100 | State: OPEN, \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                + \"3. task3 | Priority: 3 | Due: -- | Credit: 100 | State: OPEN, \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                + \"4. task4 | Priority: 4 | Due: -- | Credit: 100 | State: OPEN]\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(testTaskListString,taskList.getAllTaskDetails(project.getTasksAndAssignedMembers(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            project).toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String testRemoveTaskListString \u003d \"[1. task1 | Priority: 1 | Due: -- | Credit: 100 | State: OPEN, \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                + \"2. task3 | Priority: 3 | Due: -- | Credit: 100 | State: OPEN, \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                + \"3. task4 | Priority: 4 | Due: -- | Credit: 100 | State: OPEN]\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "        taskList.removeTask(2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(testRemoveTaskListString,taskList.getAllTaskDetails("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                project.getTasksAndAssignedMembers(), project).toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testGetAllSortedTaskDetails() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Date dueDate1 \u003d dateTimeHelper.formatDate(\"31/10/2019\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Date dueDate2 \u003d dateTimeHelper.formatDate(\"21/09/2019\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Date dueDate3 \u003d dateTimeHelper.formatDate(\"21/01/2020\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Date dueDate4 \u003d dateTimeHelper.formatDate(\"21/12/1920\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Task task1 \u003d new Task(\"taskOne\", 1, dueDate1, 100, TaskState.OPEN, taskRequirements);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Task task2 \u003d new Task(\"taskTwo\", 2, dueDate2, 90, TaskState.DONE, taskRequirements);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Task task3 \u003d new Task(\"taskEight\", 3, dueDate3, 80, TaskState.OPEN, taskRequirements);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Task task4 \u003d new Task(\"taskSix\", 4, dueDate4, 70, TaskState.DONE, taskRequirements);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Task task5 \u003d new Task(\"taskFive\", 5, null, 60, TaskState.OPEN, taskRequirements);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskList.addTask(task1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskList.addTask(task2);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskList.addTask(task3);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskList.addTask(task4);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskList.addTask(task5);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertNotNull(taskList.getTaskList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String testPriorityTaskListString \u003d \"[\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"1. taskOne | Priority: 1 | Due: 31 Oct 2019\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate1)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 100 | State: OPEN, \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"2. taskTwo | Priority: 2 | Due: 21 Sep 2019\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate2)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 90 | State: DONE, \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"3. taskEight | Priority: 3 | Due: 21 Jan 2020\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate3)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 80 | State: OPEN, \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"4. taskSix | Priority: 4 | Due: 21 Dec 1920\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + dateTimeHelper.getDifferenceDays(dueDate4)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \" | Credit: 70 | State: DONE, \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"5. taskFive | Priority: 5 | Due: -- | Credit: 60 | State: OPEN\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"]\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(testPriorityTaskListString,taskList.getAllSortedTaskDetails("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    project.getTasksAndAssignedMembers(),\"/PRIORITY\", project).toString());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String testNameTaskListString \u003d \"[\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"1. taskEight | Priority: 3 | Due: 21 Jan 2020\" + dateTimeHelper.getDifferenceDays(dueDate3)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 80 | State: OPEN, \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"2. taskFive | Priority: 5 | Due: -- | Credit: 60 | State: OPEN, \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"3. taskOne | Priority: 1 | Due: 31 Oct 2019\" + dateTimeHelper.getDifferenceDays(dueDate1)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 100 | State: OPEN, \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"4. taskSix | Priority: 4 | Due: 21 Dec 1920\" + dateTimeHelper.getDifferenceDays(dueDate4)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 70 | State: DONE, \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"5. taskTwo | Priority: 2 | Due: 21 Sep 2019\" + dateTimeHelper.getDifferenceDays(dueDate2)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 90 | State: DONE\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"]\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(testNameTaskListString,taskList.getAllSortedTaskDetails("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    project.getTasksAndAssignedMembers(),\"/NAME\", project).toString());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String testDueDateTaskListString \u003d \"[\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    + \"1. taskSix | Priority: 4 | Due: 21 Dec 1920\" + dateTimeHelper.getDifferenceDays(dueDate4)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    + \" | Credit: 70 | State: DONE, \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    + \"2. taskTwo | Priority: 2 | Due: 21 Sep 2019\" + dateTimeHelper.getDifferenceDays(dueDate2)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 90 | State: DONE, \""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    + \"3. taskOne | Priority: 1 | Due: 31 Oct 2019\" + dateTimeHelper.getDifferenceDays(dueDate1)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    + \" | Credit: 100 | State: OPEN, \""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    + \"4. taskEight | Priority: 3 | Due: 21 Jan 2020\" + dateTimeHelper.getDifferenceDays(dueDate3)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "                    + \" | Credit: 80 | State: OPEN\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"]\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(testDueDateTaskListString,taskList.getAllSortedTaskDetails("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    project.getTasksAndAssignedMembers(),\"/DATE\", project).toString());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String testCreditTaskListString \u003d \"[\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"1. taskOne | Priority: 1 | Due: 31 Oct 2019\" + dateTimeHelper.getDifferenceDays(dueDate1)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 100 | State: OPEN, \""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"2. taskTwo | Priority: 2 | Due: 21 Sep 2019\" + dateTimeHelper.getDifferenceDays(dueDate2)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 90 | State: DONE, \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"3. taskEight | Priority: 3 | Due: 21 Jan 2020\" + dateTimeHelper.getDifferenceDays(dueDate3)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 80 | State: OPEN, \""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"4. taskSix | Priority: 4 | Due: 21 Dec 1920\" + dateTimeHelper.getDifferenceDays(dueDate4)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 70 | State: DONE, \""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"5. taskFive | Priority: 5 | Due: -- | Credit: 60 | State: OPEN\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"]\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(testCreditTaskListString,taskList.getAllSortedTaskDetails("
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    project.getTasksAndAssignedMembers(),\"/CREDIT\", project).toString());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String testKanbanTaskListString \u003d \"[\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"2. taskTwo | Priority: 2 | Due: 21 Sep 2019\" + dateTimeHelper.getDifferenceDays(dueDate2)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 90 | State: DONE, \""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \"4. taskSix | Priority: 4 | Due: 21 Dec 1920\" + dateTimeHelper.getDifferenceDays(dueDate4)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 70 | State: DONE\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"]\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(testKanbanTaskListString,taskList.getAllSortedTaskDetails("
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    project.getTasksAndAssignedMembers(),\"/KANBAN-DONE\", project).toString());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            project.addTask(new Task(\"task2\",5, null,10,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    TaskState.TODO, taskRequirements));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            project.addTask(new Task(\"task1\",10, null,10,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    TaskState.TODO, taskRequirements));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            project.addMember(new Member(\"Dillen\", \"9999\", \"dillen@gmail.com\",1, \"member\"));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            project.addMember(new Member(\"Jerry\", \"9999\", \"jerryn@gmail.com\",2, \"member\"));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            AssignmentController assignmentController \u003d new AssignmentController(project);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assignmentController.assignAndUnassign(\"assign task -i 1 -to 1 2\".substring(12));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            AssignmentController assignmentController2 \u003d new AssignmentController(project);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assignmentController2.assignAndUnassign(\"assign task -i 2 -to 1\".substring(12));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String testMemberTaskListString \u003d \"[1. task2 | Priority: 5 | Due: -- | Credit: 10 | State: TODO]\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String testMemberTaskListString2 \u003d \"[1. task1 | Priority: 10 | Due: -- | Credit: 10 | \""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"State: TODO, 2. task2 | Priority: 5 | Due: -- | Credit: 10 | State: TODO]\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(testMemberTaskListString,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    project.getTasks().getAllSortedTaskDetails("
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                            project.getTasksAndAssignedMembers(),\"/WHO-Jerry\").toString());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(testMemberTaskListString2,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    project.getTasks().getAllSortedTaskDetails("
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                            project.getTasksAndAssignedMembers(),\"/WHO-Dillen\").toString());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sinteary"
        },
        "content": "             */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 124,
      "sinteary": 18,
      "seanlimhx": 7,
      "Lucria": 12,
      "Dkenobi": 36
    }
  },
  {
    "path": "src/test/java/modeltests/task/TaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package modeltests.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.ITask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import models.task.TaskState;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "import util.date.DateTimeHelper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import util.factories.TaskFactory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private TaskFactory consoleInputFactory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private DateTimeHelper dateTimeHelper;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    TaskTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.consoleInputFactory \u003d new TaskFactory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.dateTimeHelper \u003d new DateTimeHelper();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testGetDetails() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cString\u003e taskRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Task task1 \u003d new Task(\"task1\", 5, null,100, TaskState.OPEN,taskRequirements);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(\"task1 | Priority: 5 | Due: -- | Credit: 100 | State: OPEN\",task1.getDetails());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            Date date \u003d dateTimeHelper.formatDate(\"20/1/2019\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Task task2 \u003d new Task(\"task2\", 5, date, 100, TaskState.OPEN, taskRequirements);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            assertEquals(\"task2 | Priority: 5 | Due: 20 Jan 2019\" + dateTimeHelper.getDifferenceDays(date)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "                    + \" | Credit: 100 | State: OPEN\", task2.getDetails());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            System.out.println(\"Parsing error\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void testGetTaskRequirements() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            Date dueDate \u003d dateTimeHelper.formatDate(\"19/10/2019\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            ArrayList\u003cString\u003e taskRequirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            taskRequirements.add(\"requirement1\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            Task dummyTask \u003d new Task(\"task1\",1,dueDate,10, TaskState.TODO, taskRequirements);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            ITask task \u003d consoleInputFactory.create(\"-t task1 -p 1 -d 19/10/2019 -c 10 -s todo -r requirement1\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dkenobi"
        },
        "content": "            assertEquals(dummyTask.getDetails(),task.getDetails());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": "            assertEquals(dummyTask.getTaskRequirements(), task.getTaskRequirements());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlimhx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            ArrayList\u003cString\u003e taskRequirements2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskRequirements2.add(\"requirement1\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            taskRequirements2.add(\"requirement2\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Task dummyTask2 \u003d new Task(\"task2\",2,null,10, TaskState.OPEN, taskRequirements2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            ITask task2 \u003d consoleInputFactory.create(\"-t task2 -p 2 -c 10 -r requirement1 -r requirement2\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(dummyTask2.getDetails(),task2.getDetails());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertEquals(dummyTask2.getTaskRequirements(), task2.getTaskRequirements());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            System.out.println(\"Parsing error\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 46,
      "seanlimhx": 5,
      "Lucria": 9,
      "Dkenobi": 7
    }
  },
  {
    "path": "src/test/java/repositorytests/ProjectRepositoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lucria"
        },
        "content": "package repositorytests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lucria"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import repositories.ProjectRepository;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lucria"
        },
        "content": "//@@author Lucria"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lucria"
        },
        "content": "class ProjectRepositoryTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private ProjectRepository projectRepository;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    private String simulatedUserinput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Junit Tests for Project Repository. This is to test the creation of projects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    ProjectRepositoryTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        this.projectRepository \u003d new ProjectRepository();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     * Always true test just to test if jUnit is working."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void addToRepo_correctInputs_projectReturned() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        while (projectRepository.getAll().size() !\u003d 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            projectRepository.deleteItem(1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserinput \u003d \"create Thor Fanclub\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        projectRepository.addToRepo(simulatedUserinput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Project simulatedProject \u003d projectRepository.getItem(1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Project expectedProject \u003d new Project(\"Thor Fanclub\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedProject.getName(), simulatedProject.getName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedProject.getNumOfMembers(), simulatedProject.getNumOfMembers());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedProject.getNumOfTasks(), simulatedProject.getNumOfTasks());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedProject.getMemberList().getAllMemberDetails(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                simulatedProject.getMemberList().getAllMemberDetails());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedProject.getTaskList().getAllTaskDetails(expectedProject.getTasksAndAssignedMembers(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            projectRepository.getItem(1)),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                simulatedProject.getTaskList().getAllTaskDetails(simulatedProject.getTasksAndAssignedMembers(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    projectRepository.getItem(1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void addToRepo_incorrectInputs_falseReturned() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserinput \u003d \"create\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertFalse(projectRepository.addToRepo(simulatedUserinput));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserinput \u003d \"create \";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertFalse(projectRepository.addToRepo(simulatedUserinput));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void getItem_projectExists_projectReturned() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        while (projectRepository.getAll().size() !\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            projectRepository.deleteItem(1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(projectRepository.getAll().size(), 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserinput \u003d \"create Ironman Fanclub\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        projectRepository.addToRepo(simulatedUserinput);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Project expectedProject \u003d new Project(\"Ironman Fanclub\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        Project simulatedProject \u003d projectRepository.getItem(1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedProject.getName(), simulatedProject.getName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedProject.getNumOfMembers(), simulatedProject.getNumOfMembers());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedProject.getNumOfTasks(), simulatedProject.getNumOfTasks());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedProject.getMemberList().getAllMemberDetails(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                simulatedProject.getMemberList().getAllMemberDetails());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(expectedProject.getTaskList().getAllTaskDetails(expectedProject.getTasksAndAssignedMembers(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            projectRepository.getItem(1)),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                simulatedProject.getTaskList().getAllTaskDetails(simulatedProject.getTasksAndAssignedMembers(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lucria"
        },
        "content": "                    projectRepository.getItem(1)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void deleteItem_projectExists_successfulDeletion() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        while (projectRepository.getAll().size() !\u003d 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            projectRepository.deleteItem(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(projectRepository.getAll().size(), 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        simulatedUserinput \u003d \"create Ironman Fanclub\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        projectRepository.addToRepo(simulatedUserinput);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(projectRepository.getAll().size(), 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertTrue(projectRepository.deleteItem(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(projectRepository.getAll().size(), 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    void deleteItem_projectDontExist_errorPrinted() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        while (projectRepository.getAll().size() !\u003d 0) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lucria"
        },
        "content": "            projectRepository.deleteItem(1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertEquals(projectRepository.getAll().size(), 0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        boolean isProjectDeleted \u003d projectRepository.deleteItem(1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lucria"
        },
        "content": "        assertFalse(isProjectDeleted);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 4,
      "Lucria": 98
    }
  }
]
