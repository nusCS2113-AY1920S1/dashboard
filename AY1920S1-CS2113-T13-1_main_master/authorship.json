[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucria"
        },
        "content": "    archiveVersion \u003d \"0.1.1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucria"
        },
        "content": "version \u00270.1.2\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dillen"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dillen"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sinteary"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dillen": 5,
      "sinteary": 22,
      "lucria": 2,
      "-": 39
    }
  },
  {
    "path": "src/main/java/UILauncher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import ui.Main;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dillen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dillen"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dillen"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dillen"
        },
        "content": "public class UILauncher {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dillen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dillen": 11
    }
  },
  {
    "path": "src/main/java/controllers/ConsoleInputController.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.commands.RescheduleCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.data.IProject;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.tasks.IRecurring;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.tasks.ITask;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.tasks.PeriodTask;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.tasks.Recurring;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import models.tasks.TaskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import repositories.ProjectRepository;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import views.CLIView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConsoleInputController implements IViewController {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private CLIView consoleView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskFactory taskFactory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private RecurringFactory recurringFactory;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    private PeriodTaskFactory periodTaskFactory;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private String filePath \u003d \"src/main/saves/savefile.txt\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucria"
        },
        "content": "    private ProjectRepository projectRepository;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param view : takes in a View model, in this case a command line view."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ConsoleInputController(CLIView view) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.consoleView \u003d view;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskFactory \u003d new TaskFactory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.recurringFactory \u003d new RecurringFactory();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        this.periodTaskFactory \u003d new PeriodTaskFactory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucria"
        },
        "content": "        this.projectRepository \u003d new ProjectRepository();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private void checkRecurring() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"d MMMMM yyyy\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cIRecurring\u003e allRecurringTasks \u003d this.taskList.getAllRecurringTasks();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        for (IRecurring recurringTask : allRecurringTasks) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            long diff \u003d date.getTime() - recurringTask.getStartDate().getTime();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            long diffDays \u003d diff / (24 * 60 * 60 * 1000);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            if (diff \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                LocalDateTime localDateTime \u003d date.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                localDateTime \u003d localDateTime.plusDays(7);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                Date newDate \u003d Date.from(localDateTime.atZone(ZoneId.systemDefault()).toInstant());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                String dueDate \u003d formatter.format(newDate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                String description \u003d recurringTask.getRecurringDescription();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Recurring newRecurring \u003d new Recurring(description, dueDate, newDate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                this.taskList.deleteFromRecurring(recurringTask);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                ArrayList\u003cITask\u003e searchedTasks \u003d this.taskList.getSearchedTasks(\"search \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                                                    + recurringTask.getRecurringDescription());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                for (ITask searchedTask : searchedTasks) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (searchedTask.getInitials().equals(\"R\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                        this.taskList.deleteFromList(searchedTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                this.taskList.addToRecurringList(newRecurring, newRecurring);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                this.taskList.addToList(newRecurring);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (diff \u003e 0) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                Date newDate \u003d new Date();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                while (diff \u003e 0) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                    Date oldDate \u003d recurringTask.getStartDate();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                    LocalDateTime localDateTime \u003d oldDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                    localDateTime \u003d localDateTime.plusDays(7);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                    newDate \u003d Date.from(localDateTime.atZone(ZoneId.systemDefault()).toInstant());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                    diff \u003d date.getTime() - newDate.getTime();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                String dueDate \u003d formatter.format(newDate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                String description \u003d recurringTask.getRecurringDescription();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                Recurring newRecurring \u003d new Recurring(description, dueDate, newDate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                this.taskList.deleteFromRecurring(recurringTask);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                ArrayList\u003cITask\u003e searchedTasks \u003d this.taskList.getSearchedTasks(\"search \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                                                + recurringTask.getRecurringDescription());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                for (ITask searchedTask : searchedTasks) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (searchedTask.getInitials().equals(\"R\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                        this.taskList.deleteFromList(searchedTask);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                this.taskList.addToRecurringList(newRecurring, newRecurring);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                this.taskList.addToList(newRecurring);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method that is called upon receiving commands from CLI."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input : Input typed by user into CLI"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void onCommandReceived(String input) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        checkRecurring();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucria"
        },
        "content": "        Scanner inputReader \u003d new Scanner(input);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucria"
        },
        "content": "        String command \u003d inputReader.next();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleView.end();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleView.printAllTasks(taskList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            if (inputReader.hasNext()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                switch (command) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                case \"done\":"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    consoleView.markDone(taskList, input);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lucria"
        },
        "content": "                    saveData();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                case \"delete\":"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    consoleView.deleteTask(taskList, input);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lucria"
        },
        "content": "                    saveData();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                consoleView.consolePrint(\"Oops! Please enter task number.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                consoleView.findTask(taskList, input);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException newException) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                consoleView.invalidCommandMessage(newException);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        case \"remind\":"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                consoleView.remindTask(taskList, input);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (ParseException newException) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                consoleView.invalidCommandMessage(newException);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        case \"schedule\":"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                consoleView.listSchedule(taskList, input);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                System.out.println(\"Error in scheduling\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        case \"free\":"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                consoleView.findFreeSlots(taskList, input);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                System.out.print(\"Wrong date time input format\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        case \"reschedule\":"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                RescheduleCommand rescheduleCommand \u003d new RescheduleCommand(input);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                consoleView.rescheduleTask(taskList, rescheduleCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                saveData();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException newException) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                consoleView.invalidCommandMessage(newException);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        case \"recurring\":"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                Recurring newRecurringTask \u003d recurringFactory.createTask(input);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                boolean anomaly \u003d taskList.addToRecurringList(newRecurringTask, newRecurringTask);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                consoleView.addMessage(newRecurringTask, taskList, anomaly);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                saveData();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DukeException newException) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                consoleView.invalidCommandMessage(newException);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Geek"
        },
        "content": "        case \"confirm\":"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Geek"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Geek"
        },
        "content": "                consoleView.confirmTentativeTask(taskList, input);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Geek"
        },
        "content": "            } catch (ClassCastException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Geek"
        },
        "content": "                System.out.println(\"This task is already confirmed!\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Geek"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Geek"
        },
        "content": "                System.out.println(\"Please input an available index!\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Geek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Geek"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        case \"period\":"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Dillen"
        },
        "content": "                PeriodTask newPeriodTask \u003d periodTaskFactory.createTask(input);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Dillen"
        },
        "content": "                boolean anomaly \u003d taskList.addToList(newPeriodTask);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Dillen"
        },
        "content": "                consoleView.addMessage(newPeriodTask, taskList, anomaly);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Dillen"
        },
        "content": "                saveData();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            } catch (DukeException newException) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Dillen"
        },
        "content": "                consoleView.invalidCommandMessage(newException);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        case \"doafter\":"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Geek"
        },
        "content": "        case \"tentative\":"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                ITask newTask \u003d taskFactory.createTask(input);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                boolean anomaly \u003d taskList.addToList(newTask);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                consoleView.addMessage(newTask, taskList, anomaly);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                saveData();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DukeException newException) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                consoleView.invalidCommandMessage(newException);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lucria"
        },
        "content": "        case \"create\":"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lucria"
        },
        "content": "            // Creation of a new project with a given name and a number of numbers"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lucria"
        },
        "content": "            boolean isProjectCreated \u003d projectRepository.addToRepo(input);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lucria"
        },
        "content": "            if (!isProjectCreated) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lucria"
        },
        "content": "                consoleView.consolePrint(\"Creation of Project failed. Please check parameters given!\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lucria"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lucria"
        },
        "content": "                consoleView.consolePrint(\"Project created!\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lucria"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lucria"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lucria"
        },
        "content": "        case \"view\":"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lucria"
        },
        "content": "            ArrayList\u003cIProject\u003e allProjects \u003d projectRepository.getAll();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lucria"
        },
        "content": "            consoleView.viewAllProjects(allProjects);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lucria"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lucria"
        },
        "content": "            consoleView.consolePrint(\"Invalid inputs. Please refer to User Guide or type help!\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    // TODO refactor saving data and reading data to repository/database"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method that is called in order to saveData to persistent storage."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveData() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            FileOutputStream file \u003d new FileOutputStream(filePath);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            ObjectOutputStream out \u003d new ObjectOutputStream(file);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            out.writeObject(taskList);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            out.flush();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            out.close();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            file.close();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method that is called when reading data from persistent storage."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * If file read is empty, will throw EOFException which is suppressed."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * If file read is corrupted, will throw IOException which is suppressed also."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readData() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            FileInputStream file \u003d new FileInputStream(filePath);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            ObjectInputStream in \u003d new ObjectInputStream(file);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            this.taskList \u003d (TaskList) in.readObject();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            in.close();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            file.close();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ClassNotFoundException e) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            e.getSuppressed();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dillen": 12,
      "sinteary": 54,
      "iamabhishek98": 2,
      "Geek": 10,
      "lucria": 20,
      "-": 176
    }
  },
  {
    "path": "src/main/java/controllers/IArchDukeFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucria"
        },
        "content": "package controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucria"
        },
        "content": "public interface IArchDukeFactory\u003cT\u003e {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucria"
        },
        "content": "    T create(String input);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucria": 5
    }
  },
  {
    "path": "src/main/java/controllers/PeriodTaskFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dillen"
        },
        "content": "package controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import models.tasks.PeriodTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dillen"
        },
        "content": "public class PeriodTaskFactory {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dillen"
        },
        "content": "     * Method to create a new Recurring Task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dillen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dillen"
        },
        "content": "     * @param input : Input from user"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dillen"
        },
        "content": "     * @return : Returns a PeriodTask data model"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dillen"
        },
        "content": "     * @throws DukeException : throws Exception when parsing date"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dillen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    public PeriodTask createTask(String input) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        String[] allArgs \u003d input.split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        List\u003cString\u003e listArgs \u003d new ArrayList\u003c\u003e(Arrays.asList(allArgs));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        listArgs.remove(0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        String tempString \u003d String.join(\" \", listArgs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        String[] parsedStrings \u003d tempString.split(\" /between \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        String[] startEndDate \u003d parsedStrings[1].split(\" and \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            Date startDate \u003d formatter.parse(startEndDate[0]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            Date endDate \u003d formatter.parse(startEndDate[1]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            String periodDescription \u003d dateFormatHelper(startDate) + \" and \" + dateFormatHelper(endDate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            return new PeriodTask(parsedStrings[0], periodDescription, startDate, endDate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            throw new DukeException(\"Your date cannot be parsed correctly\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            throw new DukeException(\"Your recurring task is configured wrongly! Add date like /at dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    private String dateFormatHelper(Date date) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        String formattedDate \u003d new SimpleDateFormat(\"dd MMM yyyy\").format(date);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        return formattedDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dillen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dillen": 45
    }
  },
  {
    "path": "src/main/java/controllers/ProjectFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucria"
        },
        "content": "package controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucria"
        },
        "content": "import models.data.IProject;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucria"
        },
        "content": "import models.data.NullProject;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucria"
        },
        "content": "import models.data.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucria"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucria"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucria"
        },
        "content": "public class ProjectFactory implements IArchDukeFactory\u003cIProject\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucria"
        },
        "content": "     * Data Validation"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucria"
        },
        "content": "     * Do not throw exceptions at places where errors are expected"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucria"
        },
        "content": "     * TODO refactoring this portion to a NullProject such that Repository can detect"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucria"
        },
        "content": "     * TODO and return false. Leave to controller to handle false or true and throw it to View"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucria"
        },
        "content": "    public IProject create(String input) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucria"
        },
        "content": "        String[] allStrings \u003d input.split(\" \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucria"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucria"
        },
        "content": "            System.out.println(\"IDK how you even got here\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucria"
        },
        "content": "            return new NullProject();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucria"
        },
        "content": "        } else if (allStrings.length \u003e 3) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucria"
        },
        "content": "            System.out.println(\"Too many arguments!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucria"
        },
        "content": "            return new NullProject();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucria"
        },
        "content": "        } else if (allStrings.length \u003c 3) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucria"
        },
        "content": "            System.out.println(\"Too little arguments!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucria"
        },
        "content": "            return new NullProject();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucria"
        },
        "content": "        } else if (allStrings[1].contains(\"n/\") \u0026\u0026 allStrings[2].contains(\"n/\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucria"
        },
        "content": "            System.out.println(\"Please specify a name for your Project using n/PROJECT_NAME\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucria"
        },
        "content": "            return new NullProject();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucria"
        },
        "content": "        } else if (allStrings[1].contains(\"i/\") \u0026\u0026 allStrings[2].contains(\"i/\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucria"
        },
        "content": "            System.out.println(\"Please specify the number of members in this project using i/NUMBER\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucria"
        },
        "content": "            return new NullProject();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucria"
        },
        "content": "        int nameFlag \u003d input.indexOf(\"n/\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucria"
        },
        "content": "        int numberFlag \u003d input.indexOf(\"i/\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucria"
        },
        "content": "        String description \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucria"
        },
        "content": "        String members \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucria"
        },
        "content": "        if (nameFlag \u003c numberFlag) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucria"
        },
        "content": "            members \u003d input.substring(numberFlag + 2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucria"
        },
        "content": "            description \u003d input.substring(nameFlag + 2, numberFlag - 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucria"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucria"
        },
        "content": "            members \u003d input.substring(numberFlag + 2, nameFlag - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucria"
        },
        "content": "            description \u003d input.substring(nameFlag + 2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucria"
        },
        "content": "        return new Project(description, members);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucria": 49
    }
  },
  {
    "path": "src/main/java/controllers/TaskFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import exceptions.InvalidDateTimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import exceptions.NoTaskDetailsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import models.tasks.ITask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import models.tasks.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import models.tasks.ToDos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import models.tasks.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import models.tasks.DoAfter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Geek"
        },
        "content": "import models.tasks.Tentative;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.image.ImagingOpException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskFactory {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private String inputDateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Constructor for the TaskFactory class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public TaskFactory() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.taskName \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.inputDateTime \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Factory class responsible for creation of objects based on interface."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param input : Command typed into CLI."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return : returns an models.tasks.ITask based on command typed into CLI."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @throws DukeException : when command entered does not match existing Tasks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ITask createTask(String input) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Scanner scanner \u003d new Scanner(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String taskType \u003d scanner.next();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String taskDetails;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            taskDetails \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            throw new NoTaskDetailsException(taskType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            String[] parsedStrings \u003d taskDetails.split(\"/in\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            if (parsedStrings.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                return new ToDos(parsedStrings[0].trim());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                return new ToDos(parsedStrings[0].trim(), parsedStrings[1].trim());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            splitInput(taskDetails, \"/by\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                Date dateTimeObject \u003d getTaskDateTime(this.inputDateTime);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                String dateTimeString \u003d getTaskDateTimeString(dateTimeObject);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                return new Deadline(this.taskName, dateTimeString, dateTimeObject);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                throw new InvalidDateTimeException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            } catch (ImagingOpException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                throw new DukeException(\"OOPS! Please remember your /by flag!\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            splitInput(taskDetails, \"/at\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                Date dateTimeObject \u003d getTaskDateTime(this.inputDateTime);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                String dateTimeString \u003d getTaskDateTimeString(dateTimeObject);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                return new Event(this.taskName, dateTimeString, dateTimeObject);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                throw new InvalidDateTimeException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (ImagingOpException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"OOPS! Please remember your /at flag!\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        case \"doafter\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            System.out.println(taskDetails);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                String doBeforeTask \u003d taskDetails.split(\"/after\")[1];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                String doAfterTask \u003d taskDetails.split(\"/after\")[0];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                return new DoAfter(doAfterTask, doBeforeTask);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                throw new DukeException(\"OOPS! The format of the doAfter task was incorrect!\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Geek"
        },
        "content": "        case \"tentative\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Geek"
        },
        "content": "            splitInput(taskDetails, \"/at\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Geek"
        },
        "content": "            String[] inputDateTimeStrings \u003d this.inputDateTime.split(\" or \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Geek"
        },
        "content": "            String[] tentativeDateTimeStrings \u003d new String[inputDateTimeStrings.length];"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Geek"
        },
        "content": "            Date[] tentativeDateTimeObjects \u003d new Date[inputDateTimeStrings.length];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Geek"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Geek"
        },
        "content": "                for (int i \u003d 0; i \u003c inputDateTimeStrings.length; i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Geek"
        },
        "content": "                    Date dateTimeObject \u003d getTaskDateTime(inputDateTimeStrings[i]);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Geek"
        },
        "content": "                    tentativeDateTimeObjects[i] \u003d dateTimeObject;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Geek"
        },
        "content": "                    String dateTimeString \u003d getTaskDateTimeString(dateTimeObject);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Geek"
        },
        "content": "                    tentativeDateTimeStrings[i] \u003d dateTimeString;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Geek"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Geek"
        },
        "content": "                return new Tentative(this.taskName, tentativeDateTimeStrings, tentativeDateTimeObjects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Geek"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Geek"
        },
        "content": "                throw new InvalidDateTimeException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Geek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Splits the input for deadline and event into task name and date/time."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param input The full user command to add task to the list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param delimiter \"/by\" or \"/at\" to split the input, depending on task type."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private void splitInput(String input, String delimiter) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String[] parsedStrings \u003d input.split(delimiter);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.taskName \u003d parsedStrings[0].trim();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.inputDateTime \u003d parsedStrings[1].trim();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns a date object based on the user input in the format: dd/MM/yyyy HHmm."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param inputDateTime The user\u0027s input date, in the format dd/MM/yyyy HHmm."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return A date object corresponding to the user input."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @throws ParseException If the date is not entered in the stipulated format"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private Date getTaskDateTime(String inputDateTime) throws ParseException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Date date \u003d formatter.parse(inputDateTime);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns the date as a String in the format: dd MMMMM yyyy hh.mm a."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param date The date object."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return The date as a String  in the format: dd MMMMM yyyy hh.mm a."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private String getTaskDateTimeString(Date date) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd MMMMM yyyy hh.mm a\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return formatter.format(date);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 76,
      "iamabhishek98": 14,
      "Geek": 17,
      "-": 36
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidDateTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "public class InvalidDateTimeException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public InvalidDateTimeException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        super(\"Please ensure that date and time are in the format dd/MMMM/yyyy HHmm\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 8
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "public class InvalidInputException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public InvalidInputException(String error) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        super(\"Sorry! I don\u0027t understand what you mean by: \" + error);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 8
    }
  },
  {
    "path": "src/main/java/exceptions/NoCommandDetailsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "public class NoCommandDetailsException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public NoCommandDetailsException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        super(\"Please enter the command details!\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 7
    }
  },
  {
    "path": "src/main/java/exceptions/NoTaskDetailsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sinteary"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "public class NoTaskDetailsException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public NoTaskDetailsException(String taskType) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        super(\"☹ OOPS!!! The description of a \" + taskType + \" cannot be empty.\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 8
    }
  },
  {
    "path": "src/main/java/models/data/IProject.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucria"
        },
        "content": "package models.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucria"
        },
        "content": "public interface IProject {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucria"
        },
        "content": "    // TODO Add attributes such as Members, Tasks, Name"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucria"
        },
        "content": "    String getDescription();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucria"
        },
        "content": "    String getMembers();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucria"
        },
        "content": "    int getNumOfMembers();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucria": 10
    }
  },
  {
    "path": "src/main/java/models/data/NullProject.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucria"
        },
        "content": "package models.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucria"
        },
        "content": "public class NullProject implements IProject {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucria"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucria"
        },
        "content": "    public String getMembers() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucria"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucria"
        },
        "content": "    public int getNumOfMembers() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucria"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucria": 18
    }
  },
  {
    "path": "src/main/java/models/data/Project.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucria"
        },
        "content": "package models.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucria"
        },
        "content": "public class Project implements IProject {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucria"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucria"
        },
        "content": "    private String members;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucria"
        },
        "content": "    public Project(String description, String members) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucria"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucria"
        },
        "content": "        this.members \u003d members;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucria"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucria"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucria"
        },
        "content": "    public String getMembers() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucria"
        },
        "content": "        return this.members;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucria"
        },
        "content": "    public int getNumOfMembers() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucria"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucria": 26
    }
  },
  {
    "path": "src/main/java/models/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package models.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import exceptions.InvalidDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import models.commands.IDateSettable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Deadline implements ITask, IDateSettable, Serializable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Class representing the Deadline data model."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private String initials;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private String dueDateTimeString;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private Date dueDateTimeObject;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of Deadline data model."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param description Description or name of deadline/"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param dateTimeString Formatted due date of deadline, in String format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param dateTimeObject Due date of deadline, as a Date object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @throws InvalidDateTimeException If user input date is not in correct format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public Deadline(String description, String dateTimeString, Date dateTimeObject) throws InvalidDateTimeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initials \u003d \"D\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.dueDateTimeString \u003d dateTimeString;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.dueDateTimeObject \u003d dateTimeObject;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return (isDone ? \"✓\" : \"✗\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.description + \" (by: \" + this.dueDateTimeString + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public String getFullDescription() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return \"[\" + getInitials() + \"][\" + getStatusIcon() + \"] \" + getDescription();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getInitials() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.initials;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.dueDateTimeString;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public Date getDateTimeObject() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.dueDateTimeObject;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDateTime(String newDueDate) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.dueDateTimeString \u003d newDueDate;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 24,
      "lucria": 3,
      "-": 47
    }
  },
  {
    "path": "src/main/java/models/tasks/DoAfter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package models.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class DoAfter implements ITask {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String doAfterTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String doBeforeTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String initials;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Constructor for Do After Task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param doAfterTask : The task which needs to be done before the new task is done"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param doBeforeTask : The new task to be done"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public DoAfter(String doAfterTask, String doBeforeTask) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.doAfterTask \u003d doAfterTask;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.doBeforeTask \u003d doBeforeTask;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.initials \u003d \"DA\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return (isDone ? \"✓\" : \"✗\"); //return tick or X symbols"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (doAfterTask \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return doAfterTask + \" /after \" + doBeforeTask;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String getInitials() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.initials;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public Date getDateTimeObject() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public String getFullDescription() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void setDateTime(String newDateTime) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 61,
      "sinteary": 5
    }
  },
  {
    "path": "src/main/java/models/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package models.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import exceptions.InvalidDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import models.commands.IDateSettable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Event implements ITask, IDateSettable, Serializable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Class representing the Event class model."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private String initials;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private String eventDateTimeString;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    private Date eventDateTimeObject;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of Event data model."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description : Description of the Event"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param eventDateTimeString : Timing at which the Event is held"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public Event(String description, String eventDateTimeString, Date eventDateTimeObject)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        throws InvalidDateTimeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initials \u003d \"E\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.eventDateTimeString \u003d eventDateTimeString;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.eventDateTimeObject \u003d eventDateTimeObject;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return (isDone ? \"✓\" : \"✗\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.description + \" (at: \" + this.eventDateTimeString + \")\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getInitials() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.initials;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.eventDateTimeString;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public String getFullDescription() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return \"[\" + getInitials() + \"][\" + getStatusIcon() + \"] \" + getDescription();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public Date getDateTimeObject() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return this.eventDateTimeObject;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDateTime(String newDateTime) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        this.eventDateTimeString \u003d newDateTime;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 24,
      "-": 49
    }
  },
  {
    "path": "src/main/java/models/tasks/ITask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package models.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import models.commands.IDateSettable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ITask extends Serializable, IDateSettable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    String getStatusIcon();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    void markAsDone();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    String getDescription();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    String getInitials();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    String getDateTime();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    String getFullDescription();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    Date getDateTimeObject();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 6,
      "-": 17
    }
  },
  {
    "path": "src/main/java/models/tasks/PeriodTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dillen"
        },
        "content": "package models.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dillen"
        },
        "content": "public class PeriodTask implements ITask {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    private String initials;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    private String taskDuration;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    private Date startDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    private Date endDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dillen"
        },
        "content": "     * Constructor of the Recurring data model."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dillen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dillen"
        },
        "content": "     * @param description : Description of the new period task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dillen"
        },
        "content": "     * @param startDate : Start date of this period Task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dillen"
        },
        "content": "     * @param endDate : End date of this period Task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dillen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    public PeriodTask(String description, String taskDuration,Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        this.initials \u003d \"P\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        this.taskDuration \u003d taskDuration;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        return (isDone ? \"✓\" : \"✗\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        return this.description + \" between \" + taskDuration;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    public String getInitials() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        return this.initials;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public String getFullDescription() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    public Date getDateTimeObject() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    public void setDateTime(String newDateTime) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dillen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dillen": 63,
      "sinteary": 5
    }
  },
  {
    "path": "src/main/java/models/tasks/Recurring.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package models.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Recurring implements ITask, IRecurring {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private String initials;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private String dueDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private int daysLeft;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date startDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of the Recurring data model."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description : Description of the new Recurring task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dueDate : Due date of this recurring task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *                Will also be the last day before recurring task recreates itself"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Recurring(String description, String dueDate, Date date) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initials \u003d \"R\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.daysLeft \u003d 7;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.startDate \u003d date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return (isDone ? \"✓\" : \"✗\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.description + \" (by: \" + this.dueDate + \")\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getInitials() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.initials;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.dueDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public String getFullDescription() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public Date getDateTimeObject() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getDaysLeft() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.daysLeft;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getStartDate() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.startDate;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getRecurringDescription() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDateTime(String newDateTime) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dueDate \u003d newDateTime;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 10,
      "-": 72
    }
  },
  {
    "path": "src/main/java/models/tasks/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package models.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.lang.reflect.Array;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskList implements Serializable {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int DAYS_FROM_NOW \u003d 7;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cITask\u003e listOfTasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cIRecurring\u003e listOfRecurringTasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cITask\u003e searchedTasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cITask\u003e schedule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfRecurringTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the task to the tasklist."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param newTask : A new task that is added by the user. Task is created by Factory."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return : Boolean value which gives status of anomaly detection."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean addToList(ITask newTask) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!detectAnomalies(newTask)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            this.listOfTasks.add(newTask);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a Task to Recurring List."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param newRecurringTask : A new Recurring Task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param newTask : The same recurring Task but its polymorphic ITask"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return : Returns a boolean for detection of anomalies"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean addToRecurringList(IRecurring newRecurringTask, ITask newTask) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!detectAnomalies(newTask)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            this.listOfRecurringTasks.add(newRecurringTask);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteFromList(ITask oldTask) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfTasks.remove(oldTask);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteFromRecurring(IRecurring oldTask) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfRecurringTasks.remove(oldTask);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cITask\u003e getAllTasks() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.listOfTasks;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cIRecurring\u003e getAllRecurringTasks() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.listOfRecurringTasks;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public ITask getTask(int index) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.listOfTasks.get(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getNumOfTasks() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.listOfTasks.size();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method that returns tasks that match with search keywords."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input : Keyword that users wish to search for"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return : Returns an ArrayList of ITask that matches keyword"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cITask\u003e getSearchedTasks(String input) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String [] allInputs \u003d input.split(\" \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        searchedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ITask task : listOfTasks) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            if (task.getDescription().contains(allInputs[1])) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                searchedTasks.add(task);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return searchedTasks;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the schedule for the date."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date : The date input by the user."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return : Returns an ArrayList of ITask which are in the schedule"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cITask\u003e getSchedule(String date) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        schedule \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Geek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            for (ITask task : listOfTasks) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                if (task.getDateTime().contains(date)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Karnati Sai Abhishek"
        },
        "content": "                    schedule.add(task);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Geek"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Geek"
        },
        "content": "            System.out.println(\"Schedule for that day is empty.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks for anomalies with the current schedule."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param newTask : A new task that is added by the user. Task is created by Factory."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return : Boolean value which gives status of anomaly detection."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean detectAnomalies(ITask newTask) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Geek"
        },
        "content": "        if (newTask instanceof ToDos || newTask instanceof  DoAfter || newTask instanceof Tentative) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        schedule \u003d getSchedule(newTask.getDateTime());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Geek"
        },
        "content": "        if (schedule.isEmpty()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Geek"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Geek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ITask task : schedule) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            if (task.getDateTime().equals(newTask.getDateTime())) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns upcoming tasks within the next 7 days by default, or within a date and time given by the user."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param limit The date and time limit given by the user."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The list of tasks from the current time until the time limit."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException Parsing error (If date and time are not entered in dd/MM/yyyy HHmm)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cITask\u003e getUpcomingTasks(String limit) throws ParseException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cITask\u003e upcomingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"d MMMM yyyy hh.mm a\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Date remindWithin;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Date currentDateTime \u003d new Date(System.currentTimeMillis());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        //If no limit given by user, by default will remind user of tasks in coming 7 days"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (limit.equals(\"\")) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            c.setTime(currentDateTime);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            c.add(Calendar.DATE, DAYS_FROM_NOW);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            remindWithin \u003d c.getTime();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            SimpleDateFormat inputDateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            remindWithin \u003d inputDateFormat.parse(limit);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ITask task: this.listOfTasks) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            String taskInitial \u003d task.getInitials();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            if (taskInitial.equals(\"T\")) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            Date taskDate \u003d dateFormat.parse(task.getDateTime());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            if (taskDate.compareTo(currentDateTime) \u003e\u003d 0 \u0026\u0026 taskDate.compareTo(remindWithin) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                upcomingTasks.add(task);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return upcomingTasks;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Returns a list of tasks in sorted order, with the amount of free time in between tasks."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param limit The time given by the user."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @return A list of tasks in sorted order, with the free time between each task."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @throws ParseException if date and time does not adhere to given format of dd/MM/yyyy"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public ArrayList\u003cString\u003e findFreeSlots(String limit) throws ParseException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cITask\u003e upcomingTasks \u003d getUpcomingTasks(limit);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Collections.sort(upcomingTasks, new Comparator\u003cITask\u003e() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            public int compare(ITask o1, ITask o2) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                return o1.getDateTimeObject().compareTo(o2.getDateTimeObject());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        });"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cString\u003e tasksAndFreeSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Date currentDateTime \u003d new Date(System.currentTimeMillis());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        long diff;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (int i \u003d 0; i \u003c upcomingTasks.size(); i++) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            ITask nextTaskInList \u003d upcomingTasks.get(i);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            diff \u003d  Math.abs(nextTaskInList.getDateTimeObject().getTime() - currentDateTime.getTime());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            long diffInHours \u003d diff / (60 * 60 * 1000);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            long diffInDays \u003d diffInHours / 24;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            long remainingHours \u003d diffInHours % 24;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            String timeRemaining \u003d \"    Free time before next task: \" + diffInDays + \" day(s) \""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                + remainingHours + \" hour(s)\" + \"\\n\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            tasksAndFreeSlots.add(timeRemaining);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            String fullTaskDescription \u003d \"[\" + nextTaskInList.getInitials() + \"][\" + nextTaskInList.getStatusIcon()"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                + \"] \" + nextTaskInList.getDescription();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            tasksAndFreeSlots.add(fullTaskDescription);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            currentDateTime \u003d nextTaskInList.getDateTimeObject();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return tasksAndFreeSlots;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 42,
      "iamabhishek98": 3,
      "Karnati Sai Abhishek": 1,
      "Geek": 7,
      "-": 156
    }
  },
  {
    "path": "src/main/java/models/tasks/Tentative.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Geek"
        },
        "content": "package models.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Geek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Geek"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Geek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Geek"
        },
        "content": "public class Tentative implements ITask {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Geek"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Geek"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Geek"
        },
        "content": "    private String initials;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Geek"
        },
        "content": "    private String[] tentativeDateTimeStrings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Geek"
        },
        "content": "    private Date[] tentativeDateTimeObjects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Geek"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Geek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Geek"
        },
        "content": "     * Constructor for Tentative event data model."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Geek"
        },
        "content": "     * @param description description or name of tentative event"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Geek"
        },
        "content": "     * @param tentativeDateTimeStrings array of formatted tentative dates in String format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Geek"
        },
        "content": "     * @param tentativeDateTimeObjects array of formatted tentative dates in Date format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Geek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Geek"
        },
        "content": "    public Tentative(String description, String[] tentativeDateTimeStrings, Date[] tentativeDateTimeObjects) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Geek"
        },
        "content": "        //correct format:  tentative \u003cname of task\u003e /at \u003ctentative date and time\u003e or \u003ctentative date and time\u003e ..."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Geek"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Geek"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Geek"
        },
        "content": "        this.initials \u003d \"TE\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Geek"
        },
        "content": "        this.tentativeDateTimeStrings \u003d tentativeDateTimeStrings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Geek"
        },
        "content": "        this.tentativeDateTimeObjects \u003d tentativeDateTimeObjects;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Geek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Geek"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Geek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Geek"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Geek"
        },
        "content": "        return (isDone ? \"✓\" : \"✗\"); //return tick or X symbols"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Geek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Geek"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Geek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Geek"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Geek"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Geek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Geek"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Geek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Geek"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Geek"
        },
        "content": "        String dates \u003d String.join(\" or \", this.tentativeDateTimeStrings);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Geek"
        },
        "content": "        return this.description + \" (at: \" + dates + \")\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Geek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Geek"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Geek"
        },
        "content": "    public String getDescriptionOnly() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Geek"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Geek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Geek"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Geek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Geek"
        },
        "content": "    public String getInitials() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Geek"
        },
        "content": "        return this.initials;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Geek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Geek"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Geek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Geek"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Geek"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Geek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Geek"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public String getFullDescription() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Geek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Geek"
        },
        "content": "    public Date getDateTimeObject() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Geek"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Geek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Geek"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Geek"
        },
        "content": "    public String[] getTentativeDateTimeStrings() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Geek"
        },
        "content": "        return this.tentativeDateTimeStrings;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Geek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Geek"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Geek"
        },
        "content": "    public Date[] getTentativeDateTimeObjects() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Geek"
        },
        "content": "        return this.tentativeDateTimeObjects;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Geek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Geek"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Geek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Geek"
        },
        "content": "    public void setDateTime(String newDateTime) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Geek"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Geek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Geek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 5,
      "Geek": 74
    }
  },
  {
    "path": "src/main/java/models/tasks/ToDos.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package models.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class ToDos implements ITask, Serializable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * Class representing the ToDos data model."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String initials;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private String taskDuration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of ToDos data model."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description : Description of new task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ToDos(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initials \u003d \"T\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor of ToDos data model."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description : Description of new task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskDuration : Duration of the task in hour string."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ToDos(String description, String taskDuration) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initials \u003d \"T\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskDuration \u003d taskDuration;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return (isDone ? \"✓\" : \"✗\"); //return tick or X symbols"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.taskDuration \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.description + \" (needs \" + taskDuration + \" hours)\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getInitials() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.initials;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return taskDuration;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public String getFullDescription() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return \"[\" + getInitials() + \"][\" + getStatusIcon() + \"] \" + getDescription();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public Date getDateTimeObject() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDateTime(String newDateTime) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 11,
      "-": 70
    }
  },
  {
    "path": "src/main/java/repositories/IRepository.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package repositories;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucria"
        },
        "content": "import models.data.IProject;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucria"
        },
        "content": "public interface IRepository\u003cT\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucria"
        },
        "content": "    ArrayList\u003cT\u003e getAll();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucria"
        },
        "content": "    boolean addToRepo(String input);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucria"
        },
        "content": "    void deleteItem();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucria": 5,
      "-": 8
    }
  },
  {
    "path": "src/main/java/repositories/ProjectRepository.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucria"
        },
        "content": "package repositories;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucria"
        },
        "content": "import controllers.ProjectFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucria"
        },
        "content": "import models.data.IProject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucria"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucria"
        },
        "content": "public class ProjectRepository implements IRepository\u003cIProject\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucria"
        },
        "content": "    private ArrayList\u003cIProject\u003e allProjects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucria"
        },
        "content": "    private ProjectFactory projectFactory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucria"
        },
        "content": "    public ProjectRepository() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucria"
        },
        "content": "        this.allProjects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucria"
        },
        "content": "        this.projectFactory \u003d new ProjectFactory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucria"
        },
        "content": "    public ArrayList\u003cIProject\u003e getAll() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucria"
        },
        "content": "        return allProjects;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucria"
        },
        "content": "    public boolean addToRepo(String input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucria"
        },
        "content": "        IProject newProject \u003d projectFactory.create(input);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucria"
        },
        "content": "        if (newProject.getDescription() \u003d\u003d null || newProject.getMembers() \u003d\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucria"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucria"
        },
        "content": "        allProjects.add(newProject);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucria"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucria"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucria"
        },
        "content": "    public void deleteItem() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucria"
        },
        "content": "        // TODO yet to be implemented"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucria"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucria": 37
    }
  },
  {
    "path": "src/main/java/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dillen"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dillen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dillen"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dillen"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dillen"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dillen"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dillen"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dillen"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dillen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dillen"
        },
        "content": "     * This method return the dialog box containing the output and image of duke."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dillen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dillen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dillen": 61,
      "sinteary": 2
    }
  },
  {
    "path": "src/main/java/ui/DukeUI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dillen"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dillen"
        },
        "content": "public class DukeUI  {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dillen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dillen": 7
    }
  },
  {
    "path": "src/main/java/ui/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dillen"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dillen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dillen"
        },
        "content": " * A GUI for DukeTest using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dillen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dillen"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    private DukeUI duke \u003d new DukeUI();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dillen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dillen": 30
    }
  },
  {
    "path": "src/main/java/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dillen"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dillen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dillen"
        },
        "content": " * Controller for ui.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dillen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dillen"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    private DukeUI duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/lucria.jpg\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/lucria.jpg\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    public void setDuke(DukeUI d) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        dukeGreeting();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    private void dukeGreeting() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        String greetingText \u003d \"Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dillen"
        },
        "content": "                + \"What can i do for you\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dillen"
        },
        "content": "                DialogBox.getDukeDialog(greetingText, dukeImage)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dillen"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing DukeTest\u0027s"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dillen"
        },
        "content": "     * reply and then appends them to"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dillen"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dillen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        if (input.contains(\"bye\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            duke.getResponse(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            timeDelay(1000);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dillen"
        },
        "content": "                    DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dillen"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            );"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    private void timeDelay(long t) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            Thread.sleep(t);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dillen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dillen": 76
    }
  },
  {
    "path": "src/main/java/views/CLIView.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package views;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import controllers.ConsoleInputController;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import models.commands.RescheduleCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucria"
        },
        "content": "import models.data.IProject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import models.tasks.ITask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import models.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Geek"
        },
        "content": "import models.tasks.Tentative;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CLIView {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String horiLine \u003d \"\\t____________________________________________________________\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public static final String indentation \u003d \"\\t\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private ConsoleInputController consoleInputController;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CLIView() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.consoleInputController \u003d new ConsoleInputController(this);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Prints an indented and formatted message with a top and bottom border."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param lines The lines to be printed in between the border."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void consolePrint(String... lines) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        System.out.println(horiLine);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (String message : lines) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            System.out.println(indentation + message);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        System.out.println(horiLine);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to call when View model is started."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleInputController.readData();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        consolePrint(\"Hello! I\u0027m Duke\", \"What can I do for you?\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            String command \u003d sc.nextLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleInputController.onCommandReceived(command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to be called when user says bye to exit the program."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void end() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        consolePrint(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to be called when user wishes to add a new Task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param newTask : A new task that is added by the user. Task is created by Factory."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList : List of tasks holding all the tasks."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param anomaly : Boolean value which gives status of anomaly detection."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addMessage(ITask newTask, TaskList taskList, boolean anomaly) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (anomaly) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            consolePrint(\"Anomalies with the schedule detected.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String grammarTasks \u003d taskList.getNumOfTasks() \u003d\u003d 1 ? \"task\" : \"tasks\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        consolePrint(\"Got it. I\u0027ve added this task:\", newTask.getFullDescription(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            \"Now you have \" + taskList.getNumOfTasks() + \" \" + grammarTasks + \" in your list.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to be called when user calls \"list\"."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints to View all the current tasks added."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList : List of tasks."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void printAllTasks(TaskList taskList) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cString\u003e toPrint \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        toPrint.add(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getAllTasks().size(); i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            toPrint.add(\"\" + (i + 1) + \".\" + taskList.getAllTasks().get(i).getFullDescription());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        consolePrint(toPrint.toArray(new String[0]));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to be called when user prompts for a task to be marked as done."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList : list of tasks."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param input : Input containing task numbers to be marked as done by user."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void markDone(TaskList taskList, String input) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String[] allInputs \u003d input.split(\" \");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cString\u003e toPrint \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        toPrint.add(\"Nice! I\u0027ve marked the following task(s) as done:\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (String i : allInputs) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            if (!i.equals(\"done\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                int index \u003d Integer.parseInt(i) - 1;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                ITask chosenToDos \u003d taskList.getTask(index);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                chosenToDos.markAsDone();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                toPrint.add(chosenToDos.getFullDescription());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        consolePrint(toPrint.toArray(new String[0]));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to be called when a Invalid Command is input by the user."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param newException : Exception that is thrown when an Invalid Command is detected"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void invalidCommandMessage(Exception newException) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        consolePrint(newException.getMessage());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method that is called when user wishes to delete a task."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method is responsible for handling printing of horizontal lines."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * However, certain printing has been abstracted to DeleteCommand"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList : List of tasks from which the chosen task should be deleted from."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param input : Input containing task numbers to delete as given by the user."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void deleteTask(TaskList taskList, String input) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cString\u003e toPrint \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        toPrint.add(\"Noted. I\u0027ve removed the following task(s):\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String[] allInputs \u003d input.split(\" \");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        for (String i : allInputs) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            if (!i.equals(\"delete\")) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                int index \u003d Integer.parseInt(i) - 1;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                ITask chosenTask \u003d taskList.getTask(index);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                toPrint.add(chosenTask.getFullDescription());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                taskList.deleteFromList(chosenTask);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String grammarTasks \u003d taskList.getNumOfTasks() \u003d\u003d 1 ? \"tasks\" : \"task\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        toPrint.add(\"Now you have \" + taskList.getNumOfTasks() + \" \" + grammarTasks + \" in the list.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        consolePrint(toPrint.toArray(new String[0]));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method that is called when user wishes to find a specific task."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method updates the UI (in this case CLI) with relevant print messages and information."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList : Current list of tasks. Users will enter a keyword to search for a task residing in this list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input : Full command that user has keyed into CLI."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void findTask(TaskList taskList, String input) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cString\u003e toPrint \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        toPrint.add(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cITask\u003e results \u003d taskList.getSearchedTasks(input);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c results.size(); i++) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            toPrint.add(\"\" + (i + 1) + \".\" + results.get(i).getFullDescription());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        consolePrint(toPrint.toArray(new String[0]));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method that is called when user wants to find upcoming tasks within a time limit of their choice."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList Current list of tasks."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input User command including time limit before which to find upcoming tasks."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     *              If left blank, it will be seven days from current date by default."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException : Parsing error (If the date and time is not entered in dd/MM/yyyy HHmm)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remindTask(TaskList taskList, String input) throws ParseException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        String limit;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner sc \u003d new Scanner(input);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        sc.next();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (sc.hasNext()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            limit \u003d sc.nextLine();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            limit \u003d \"\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cString\u003e toPrint \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        toPrint.add(\"Here are the upcoming tasks in your list:\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cITask\u003e results \u003d taskList.getUpcomingTasks(limit);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c results.size(); i++) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            toPrint.add(\"\" + (i + 1) + \".\" + results.get(i).getFullDescription());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        consolePrint(toPrint.toArray(new String[0]));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints out the schedule for the date input by the user."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format - schedule DD/MM/YYYY"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList : Current list of tasks."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input : The date of the schedule"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException : Parsing error"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void listSchedule(TaskList taskList, String input) throws ParseException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // Correct format as 2 December 2019 6 PM"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Scanner sc \u003d new Scanner(input);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        sc.next();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        String tempDate \u003d sc.nextLine();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        Date date \u003d formatter.parse(tempDate);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        String formattedDate \u003d new SimpleDateFormat(\"d MMMM yyyy\").format(date);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cITask\u003e results \u003d taskList.getSchedule(formattedDate);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cString\u003e toPrint \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        if (results.isEmpty()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            toPrint.add(\"Your schedule for \" + formattedDate + \" is empty.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            toPrint.add(\"Here is the schedule for the specified date:\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c results.size(); i++) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                toPrint.add(\"\" + (i + 1) + \".\" + results.get(i).getFullDescription());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        consolePrint(toPrint.toArray(new String[0]));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * Prints tasks sorted by deadline/event time with free time slots in between."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param taskList Current list of tasks."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @param input The full command by the user."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     * @throws ParseException parsing error if date and time are not in correct format."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sinteary"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void findFreeSlots(TaskList taskList, String input) throws ParseException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Scanner sc \u003d new Scanner(input);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lucria"
        },
        "content": "        String tempDate;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        if (sc.hasNext()) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            tempDate \u003d sc.nextLine();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            tempDate \u003d \"\";"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sinteary"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cString\u003e toPrint \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cString\u003e freeTimeSlots \u003d taskList.findFreeSlots(tempDate);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        toPrint.add(\"Here are the free time slots you have between your tasks:\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lucria"
        },
        "content": "        for (String freeTimeSlot : freeTimeSlots) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            toPrint.add(freeTimeSlot);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        consolePrint(toPrint.toArray(new String[0]));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method that is called when user wishes to reschedule a task."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method is responsible for handling printing of horizontal lines."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * However, certain printing has been abstracted to RescheduleCommand"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList : Current list of tasks."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param rescheduleCommand : Command that holds the logic for rescheduling tasks and"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "*                                 printing certain reschedule messages."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rescheduleTask(TaskList taskList, RescheduleCommand rescheduleCommand) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(horiLine);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        rescheduleCommand.execute(taskList);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(horiLine);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lucria"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lucria"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lucria"
        },
        "content": "     * Method called when users wishes to view all Projects that are currently created or stored."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lucria"
        },
        "content": "     * @param allProjects List of Projects returned to View model by the Controller from the Repository"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lucria"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lucria"
        },
        "content": "    public void viewAllProjects(ArrayList\u003cIProject\u003e allProjects) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        ArrayList\u003cString\u003e toPrint \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        toPrint.add(\"Here are all the Projects you are managing:\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lucria"
        },
        "content": "        for (int i \u003d 0; i \u003c allProjects.size(); i++) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            toPrint.add(\"\" + (i + 1) + \". \" + allProjects.get(i).getDescription() + \" \""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sinteary"
        },
        "content": "                + allProjects.get(i).getMembers());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lucria"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        consolePrint(toPrint.toArray(new String[0]));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lucria"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Geek"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Geek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Geek"
        },
        "content": "     * Method called to confirm the date and time of a tentative task."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Geek"
        },
        "content": "     * @param taskList list of all tasks"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Geek"
        },
        "content": "     * @param input index of tentative task in taskList"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Geek"
        },
        "content": "     * @throws ClassCastException Exception thrown if input is not of correct class (Tentative class)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Geek"
        },
        "content": "     * @throws ArrayIndexOutOfBoundsException Exception thrown if index given is not within what is available"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Geek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Geek"
        },
        "content": "    public void confirmTentativeTask(TaskList taskList, String input) throws ClassCastException,"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Geek"
        },
        "content": "            ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Geek"
        },
        "content": "        Scanner sc \u003d new Scanner(input);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Geek"
        },
        "content": "        String dummy \u003d sc.next();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Geek"
        },
        "content": "        int taskIndex \u003d Integer.parseInt(sc.next()) - 1;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Geek"
        },
        "content": "        Tentative taskToBeConfirmed \u003d (Tentative) taskList.getTask(taskIndex);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Geek"
        },
        "content": "        String[] tentativeDateTimeStrings \u003d taskToBeConfirmed.getTentativeDateTimeStrings();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Geek"
        },
        "content": "        System.out.println(horiLine);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Geek"
        },
        "content": "        System.out.println(\"\\tWhich timing do you want to confirm?\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Geek"
        },
        "content": "        for (int i \u003d 0; i \u003c tentativeDateTimeStrings.length; i++) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Geek"
        },
        "content": "            System.out.println((i + 1) + \". \" + tentativeDateTimeStrings[i]);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Geek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Geek"
        },
        "content": "        System.out.println(horiLine);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Geek"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Geek"
        },
        "content": "        Scanner sc1 \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Geek"
        },
        "content": "        String inputForChosenTiming \u003d sc1.nextLine();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Geek"
        },
        "content": "        String description \u003d taskToBeConfirmed.getDescriptionOnly();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Geek"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Geek"
        },
        "content": "        int indexOfChosenTiming \u003d Integer.parseInt(inputForChosenTiming) - 1;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Geek"
        },
        "content": "        Date[] tentativeDateTimeObjects \u003d taskToBeConfirmed.getTentativeDateTimeObjects();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Geek"
        },
        "content": "        Date chosenDateTimeObject \u003d tentativeDateTimeObjects[indexOfChosenTiming];"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Geek"
        },
        "content": "        taskList.deleteFromList(taskToBeConfirmed);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Geek"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Geek"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Geek"
        },
        "content": "        String formattedInputDate \u003d formatter.format(chosenDateTimeObject);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Geek"
        },
        "content": "        String newEventInput \u003d \"event \" + description + \" /at \" + formattedInputDate;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Geek"
        },
        "content": "        consoleInputController.onCommandReceived(newEventInput);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Geek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 98,
      "Geek": 37,
      "lucria": 12,
      "-": 153
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dillen"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dillen"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dillen"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dillen"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dillen"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dillen"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dillen"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Dillen": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dillen"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dillen"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dillen"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dillen"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dillen"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dillen"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dillen"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dillen"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dillen"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Dillen": 19
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import controllers.TaskFactory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import models.tasks.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import models.tasks.ITask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertSame;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    TaskFactory taskFactory \u003d new TaskFactory();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void alwaysTrue() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    public void test_createTask_deadlineValidDate() throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d \"deadline return book /by 02/08/2012 1830\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        ITask expectedTask;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            Date date \u003d formatter.parse(\"02/08/2012 1830\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            ITask dummyTask \u003d new Deadline(\"return book\", \"02 August 2012 06.30 PM\", date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedTask \u003d taskFactory.createTask(input);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedTask.getDescription(), dummyTask.getDescription());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 7,
      "-": 28
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import controllers.TaskFactory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sinteary"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import models.tasks.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import models.tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import models.tasks.ToDos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    void testTodoCreation() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(new ToDos(\"write book\",\"2\").getDescription(),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                new TaskFactory().createTask(\"todo write book /in 2\").getDescription());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void testDeadlineCreation() throws DukeException, ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Date date \u003d formatter.parse(\"10/11/2019 1930\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(new Deadline(\"return book\", \"10 November 2019 07.30 PM\", date).getDescription(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            new TaskFactory().createTask(\"deadline return book /by 10/11/2019 1930\").getDescription());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void testEventCreation() throws DukeException, ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Date date \u003d formatter.parse(\"22/09/2019 1600\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(new Event(\"project meeting\", \"22 September 2019 04.00 PM\", date).getDescription(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            new TaskFactory().createTask(\"event project meeting /at 22/09/2019 1600\").getDescription());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void testDeadlineOutput() throws DukeException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Date date \u003d formatter.parse(\"30/10/2019 1400\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"return book (by: 30 October 2019 02.00 PM)\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            new Deadline(\"return book\", \"30 October 2019 02.00 PM\", date).getDescription());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sinteary"
        },
        "content": "    void testEventOutput() throws DukeException, ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        Date date \u003d formatter.parse(\"16/10/2019 0800\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sinteary"
        },
        "content": "        assertEquals(\"project meeting (at: 16 October 2019 08.00 AM)\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sinteary"
        },
        "content": "            new Event(\"project meeting\", \"16 October 2019 08.00 AM\", date).getDescription());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void alwaysTrue() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sinteary": 23,
      "-": 38
    }
  },
  {
    "path": "src/test/java/PeriodTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import controllers.PeriodTaskFactory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import models.tasks.ITask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import models.tasks.PeriodTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dillen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dillen"
        },
        "content": "public class PeriodTaskTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    PeriodTaskFactory periodTaskFactory \u003d new PeriodTaskFactory();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    public void alwaysTrue() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dillen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    void testPeriodTaskCreation() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            String input \u003d \"period collect test /between 23/09/2019 and 26/09/2019\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            Date dummyStartDate \u003d formatter.parse(\"23/09/2019\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            Date dummyEndDate \u003d formatter.parse(\"26/09/2019\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            String dummyPeriodDescription \u003d \"23 Sep 2019 and 26 Sep 2019\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            PeriodTask dummyTask \u003d new PeriodTask(\"collect test\", dummyPeriodDescription, dummyStartDate, dummyEndDate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            ITask generatedTask \u003d periodTaskFactory.createTask(input);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            assertEquals(generatedTask.getDescription(), dummyTask.getDescription());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        } catch (DukeException | ParseException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dillen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dillen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dillen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dillen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dillen": 35
    }
  },
  {
    "path": "src/test/java/TentativeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Geek"
        },
        "content": "import controllers.TaskFactory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Geek"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Geek"
        },
        "content": "import models.tasks.ITask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Geek"
        },
        "content": "import models.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Geek"
        },
        "content": "import models.tasks.Tentative;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Geek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Geek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Geek"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Geek"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Geek"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Geek"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Geek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Geek"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Geek"
        },
        "content": "public class TentativeTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Geek"
        },
        "content": "    TaskFactory taskFactory \u003d new TaskFactory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Geek"
        },
        "content": "    TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Geek"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Geek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Geek"
        },
        "content": "    public void alwaysTrue() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Geek"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Geek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Geek"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Geek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Geek"
        },
        "content": "    void tentativeTaskCreation() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Geek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Geek"
        },
        "content": "            String input \u003d \"tentative do Tutorial /at 23/09/2019 1600 or 19/10/2019 1200\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Geek"
        },
        "content": "            String[] dummyTentativeDateStrings \u003d {\"23 September 2019 04.00 PM\", \"19 October 2019 12.00 PM\"};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Geek"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Geek"
        },
        "content": "            SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Geek"
        },
        "content": "            Date dummyDate \u003d formatter.parse(\"23/09/2019 1600\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Geek"
        },
        "content": "            Date[] dummyTentativeDateObjects \u003d {formatter.parse(\"23/09/2019 1600\"), formatter.parse(\"19/10/2019 1200\")};"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Geek"
        },
        "content": "            Tentative dummyTask \u003d new Tentative(\"do Tutorial\", dummyTentativeDateStrings, dummyTentativeDateObjects);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Geek"
        },
        "content": "            ITask generatedTask \u003d taskFactory.createTask(input);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Geek"
        },
        "content": "            assertEquals(generatedTask.getDescription(), dummyTask.getDescription());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Geek"
        },
        "content": "        } catch (DukeException | ParseException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Geek"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Geek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Geek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Geek"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Geek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Geek": 40
    }
  }
]
